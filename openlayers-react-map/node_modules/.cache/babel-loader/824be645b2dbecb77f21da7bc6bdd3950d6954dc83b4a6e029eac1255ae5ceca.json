{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { all, focusWithTabindex, noModifierKeys, primaryAction } from '../events/condition.js';\nimport { easeOut } from '../easing.js';\nimport { rotate as rotateCoordinate, scale as scaleCoordinate } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nvar DragPan = /** @class */function (_super) {\n  __extends(DragPan, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function DragPan(opt_options) {\n    var _this = _super.call(this, {\n      stopDown: FALSE\n    }) || this;\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n    _this.kinetic_ = options.kinetic;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    _this.lastCentroid = null;\n    /**\n     * @type {number}\n     */\n    _this.lastPointersCount_;\n    /**\n     * @type {boolean}\n     */\n    _this.panning_ = false;\n    var condition = options.condition ? options.condition : all(noModifierKeys, primaryAction);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.onFocusOnly ? all(focusWithTabindex, condition) : condition;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.noKinetic_ = false;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  DragPan.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().beginInteraction();\n    }\n    var targetPointers = this.targetPointers;\n    var centroid = centroidFromPointers(targetPointers);\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n      if (this.lastCentroid) {\n        var delta = [this.lastCentroid[0] - centroid[0], centroid[1] - this.lastCentroid[1]];\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  DragPan.prototype.handleUpEvent = function (mapBrowserEvent) {\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        var distance = this.kinetic_.getDistance();\n        var angle = this.kinetic_.getAngle();\n        var center = view.getCenterInternal();\n        var centerpx = map.getPixelFromCoordinateInternal(center);\n        var dest = map.getCoordinateFromPixelInternal([centerpx[0] - distance * Math.cos(angle), centerpx[1] - distance * Math.sin(angle)]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut\n        });\n      }\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n      this.lastCentroid = null;\n      return true;\n    }\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  DragPan.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      this.lastCentroid = null;\n      // stop any current animation\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      }\n      // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return DragPan;\n}(PointerInteraction);\nexport default DragPan;","map":{"version":3,"names":["PointerInteraction","centroid","centroidFromPointers","FALSE","all","focusWithTabindex","noModifierKeys","primaryAction","easeOut","rotate","rotateCoordinate","scale","scaleCoordinate","DragPan","_super","__extends","opt_options","_this","call","stopDown","options","kinetic_","kinetic","lastCentroid","lastPointersCount_","panning_","condition","condition_","onFocusOnly","noKinetic_","prototype","handleDragEvent","mapBrowserEvent","getMap","getView","beginInteraction","targetPointers","length","update","delta","map","view","getResolution","getRotation","adjustCenterInternal","begin","originalEvent","preventDefault","handleUpEvent","end","distance","getDistance","angle","getAngle","center","getCenterInternal","centerpx","getPixelFromCoordinateInternal","dest","getCoordinateFromPixelInternal","Math","cos","sin","animateInternal","getConstrainedCenter","duration","easing","endInteraction","handleDownEvent","getAnimating","cancelAnimations"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\interaction\\DragPan.js"],"sourcesContent":["/**\n * @module ol/interaction/DragPan\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {\n  all,\n  focusWithTabindex,\n  noModifierKeys,\n  primaryAction,\n} from '../events/condition.js';\nimport {easeOut} from '../easing.js';\nimport {\n  rotate as rotateCoordinate,\n  scale as scaleCoordinate,\n} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.noModifierKeys} and {@link module:ol/events/condition.primaryAction}.\n * @property {boolean} [onFocusOnly=false] When the map's target has a `tabindex` attribute set,\n * the interaction will only handle events when the map has the focus.\n * @property {import(\"../Kinetic.js\").default} [kinetic] Kinetic inertia to apply to the pan.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map by dragging the map.\n * @api\n */\nclass DragPan extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super({\n      stopDown: FALSE,\n    });\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../Kinetic.js\").default|undefined}\n     */\n    this.kinetic_ = options.kinetic;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     */\n    this.lastCentroid = null;\n\n    /**\n     * @type {number}\n     */\n    this.lastPointersCount_;\n\n    /**\n     * @type {boolean}\n     */\n    this.panning_ = false;\n\n    const condition = options.condition\n      ? options.condition\n      : all(noModifierKeys, primaryAction);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.onFocusOnly\n      ? all(focusWithTabindex, condition)\n      : condition;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.noKinetic_ = false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!this.panning_) {\n      this.panning_ = true;\n      this.getMap().getView().beginInteraction();\n    }\n    const targetPointers = this.targetPointers;\n    const centroid = centroidFromPointers(targetPointers);\n    if (targetPointers.length == this.lastPointersCount_) {\n      if (this.kinetic_) {\n        this.kinetic_.update(centroid[0], centroid[1]);\n      }\n      if (this.lastCentroid) {\n        const delta = [\n          this.lastCentroid[0] - centroid[0],\n          centroid[1] - this.lastCentroid[1],\n        ];\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        scaleCoordinate(delta, view.getResolution());\n        rotateCoordinate(delta, view.getRotation());\n        view.adjustCenterInternal(delta);\n      }\n    } else if (this.kinetic_) {\n      // reset so we don't overestimate the kinetic energy after\n      // after one finger down, tiny drag, second finger down\n      this.kinetic_.begin();\n    }\n    this.lastCentroid = centroid;\n    this.lastPointersCount_ = targetPointers.length;\n    mapBrowserEvent.originalEvent.preventDefault();\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (this.targetPointers.length === 0) {\n      if (!this.noKinetic_ && this.kinetic_ && this.kinetic_.end()) {\n        const distance = this.kinetic_.getDistance();\n        const angle = this.kinetic_.getAngle();\n        const center = view.getCenterInternal();\n        const centerpx = map.getPixelFromCoordinateInternal(center);\n        const dest = map.getCoordinateFromPixelInternal([\n          centerpx[0] - distance * Math.cos(angle),\n          centerpx[1] - distance * Math.sin(angle),\n        ]);\n        view.animateInternal({\n          center: view.getConstrainedCenter(dest),\n          duration: 500,\n          easing: easeOut,\n        });\n      }\n      if (this.panning_) {\n        this.panning_ = false;\n        view.endInteraction();\n      }\n      return false;\n    } else {\n      if (this.kinetic_) {\n        // reset so we don't overestimate the kinetic energy after\n        // after one finger up, tiny drag, second finger up\n        this.kinetic_.begin();\n      }\n      this.lastCentroid = null;\n      return true;\n    }\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length > 0 && this.condition_(mapBrowserEvent)) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      this.lastCentroid = null;\n      // stop any current animation\n      if (view.getAnimating()) {\n        view.cancelAnimations();\n      }\n      if (this.kinetic_) {\n        this.kinetic_.begin();\n      }\n      // No kinetic as soon as more than one pointer on the screen is\n      // detected. This is to prevent nasty pans after pinch.\n      this.noKinetic_ = this.targetPointers.length > 1;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default DragPan;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,kBAAkB,IACvBC,QAAQ,IAAIC,oBAAoB,QAC3B,cAAc;AACrB,SAAQC,KAAK,QAAO,iBAAiB;AACrC,SACEC,GAAG,EACHC,iBAAiB,EACjBC,cAAc,EACdC,aAAa,QACR,wBAAwB;AAC/B,SAAQC,OAAO,QAAO,cAAc;AACpC,SACEC,MAAM,IAAIC,gBAAgB,EAC1BC,KAAK,IAAIC,eAAe,QACnB,kBAAkB;AAEzB;;;;;;;;;AAUA;;;;;AAKA,IAAAC,OAAA,0BAAAC,MAAA;EAAsBC,SAAA,CAAAF,OAAA,EAAAC,MAAA;EACpB;;;EAGA,SAAAD,QAAYG,WAAW;IAAvB,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,OAAM;MACJC,QAAQ,EAAEhB;KACX,CAAC;IAEF,IAAMiB,OAAO,GAAGJ,WAAW,GAAGA,WAAW,GAAG,EAAE;IAE9C;;;;IAIAC,KAAI,CAACI,QAAQ,GAAGD,OAAO,CAACE,OAAO;IAE/B;;;IAGAL,KAAI,CAACM,YAAY,GAAG,IAAI;IAExB;;;IAGAN,KAAI,CAACO,kBAAkB;IAEvB;;;IAGAP,KAAI,CAACQ,QAAQ,GAAG,KAAK;IAErB,IAAMC,SAAS,GAAGN,OAAO,CAACM,SAAS,GAC/BN,OAAO,CAACM,SAAS,GACjBtB,GAAG,CAACE,cAAc,EAAEC,aAAa,CAAC;IAEtC;;;;IAIAU,KAAI,CAACU,UAAU,GAAGP,OAAO,CAACQ,WAAW,GACjCxB,GAAG,CAACC,iBAAiB,EAAEqB,SAAS,CAAC,GACjCA,SAAS;IAEb;;;;IAIAT,KAAI,CAACY,UAAU,GAAG,KAAK;;EACzB;EAEA;;;;EAIAhB,OAAA,CAAAiB,SAAA,CAAAC,eAAe,GAAf,UAAgBC,eAAe;IAC7B,IAAI,CAAC,IAAI,CAACP,QAAQ,EAAE;MAClB,IAAI,CAACA,QAAQ,GAAG,IAAI;MACpB,IAAI,CAACQ,MAAM,EAAE,CAACC,OAAO,EAAE,CAACC,gBAAgB,EAAE;;IAE5C,IAAMC,cAAc,GAAG,IAAI,CAACA,cAAc;IAC1C,IAAMnC,QAAQ,GAAGC,oBAAoB,CAACkC,cAAc,CAAC;IACrD,IAAIA,cAAc,CAACC,MAAM,IAAI,IAAI,CAACb,kBAAkB,EAAE;MACpD,IAAI,IAAI,CAACH,QAAQ,EAAE;QACjB,IAAI,CAACA,QAAQ,CAACiB,MAAM,CAACrC,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;;MAEhD,IAAI,IAAI,CAACsB,YAAY,EAAE;QACrB,IAAMgB,KAAK,GAAG,CACZ,IAAI,CAAChB,YAAY,CAAC,CAAC,CAAC,GAAGtB,QAAQ,CAAC,CAAC,CAAC,EAClCA,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAACsB,YAAY,CAAC,CAAC,CAAC,CACnC;QACD,IAAMiB,GAAG,GAAGR,eAAe,CAACQ,GAAG;QAC/B,IAAMC,IAAI,GAAGD,GAAG,CAACN,OAAO,EAAE;QAC1BtB,eAAe,CAAC2B,KAAK,EAAEE,IAAI,CAACC,aAAa,EAAE,CAAC;QAC5ChC,gBAAgB,CAAC6B,KAAK,EAAEE,IAAI,CAACE,WAAW,EAAE,CAAC;QAC3CF,IAAI,CAACG,oBAAoB,CAACL,KAAK,CAAC;;KAEnC,MAAM,IAAI,IAAI,CAAClB,QAAQ,EAAE;MACxB;MACA;MACA,IAAI,CAACA,QAAQ,CAACwB,KAAK,EAAE;;IAEvB,IAAI,CAACtB,YAAY,GAAGtB,QAAQ;IAC5B,IAAI,CAACuB,kBAAkB,GAAGY,cAAc,CAACC,MAAM;IAC/CL,eAAe,CAACc,aAAa,CAACC,cAAc,EAAE;EAChD,CAAC;EAED;;;;;EAKAlC,OAAA,CAAAiB,SAAA,CAAAkB,aAAa,GAAb,UAAchB,eAAe;IAC3B,IAAMQ,GAAG,GAAGR,eAAe,CAACQ,GAAG;IAC/B,IAAMC,IAAI,GAAGD,GAAG,CAACN,OAAO,EAAE;IAC1B,IAAI,IAAI,CAACE,cAAc,CAACC,MAAM,KAAK,CAAC,EAAE;MACpC,IAAI,CAAC,IAAI,CAACR,UAAU,IAAI,IAAI,CAACR,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAAC4B,GAAG,EAAE,EAAE;QAC5D,IAAMC,QAAQ,GAAG,IAAI,CAAC7B,QAAQ,CAAC8B,WAAW,EAAE;QAC5C,IAAMC,KAAK,GAAG,IAAI,CAAC/B,QAAQ,CAACgC,QAAQ,EAAE;QACtC,IAAMC,MAAM,GAAGb,IAAI,CAACc,iBAAiB,EAAE;QACvC,IAAMC,QAAQ,GAAGhB,GAAG,CAACiB,8BAA8B,CAACH,MAAM,CAAC;QAC3D,IAAMI,IAAI,GAAGlB,GAAG,CAACmB,8BAA8B,CAAC,CAC9CH,QAAQ,CAAC,CAAC,CAAC,GAAGN,QAAQ,GAAGU,IAAI,CAACC,GAAG,CAACT,KAAK,CAAC,EACxCI,QAAQ,CAAC,CAAC,CAAC,GAAGN,QAAQ,GAAGU,IAAI,CAACE,GAAG,CAACV,KAAK,CAAC,CACzC,CAAC;QACFX,IAAI,CAACsB,eAAe,CAAC;UACnBT,MAAM,EAAEb,IAAI,CAACuB,oBAAoB,CAACN,IAAI,CAAC;UACvCO,QAAQ,EAAE,GAAG;UACbC,MAAM,EAAE1D;SACT,CAAC;;MAEJ,IAAI,IAAI,CAACiB,QAAQ,EAAE;QACjB,IAAI,CAACA,QAAQ,GAAG,KAAK;QACrBgB,IAAI,CAAC0B,cAAc,EAAE;;MAEvB,OAAO,KAAK;KACb,MAAM;MACL,IAAI,IAAI,CAAC9C,QAAQ,EAAE;QACjB;QACA;QACA,IAAI,CAACA,QAAQ,CAACwB,KAAK,EAAE;;MAEvB,IAAI,CAACtB,YAAY,GAAG,IAAI;MACxB,OAAO,IAAI;;EAEf,CAAC;EAED;;;;;EAKAV,OAAA,CAAAiB,SAAA,CAAAsC,eAAe,GAAf,UAAgBpC,eAAe;IAC7B,IAAI,IAAI,CAACI,cAAc,CAACC,MAAM,GAAG,CAAC,IAAI,IAAI,CAACV,UAAU,CAACK,eAAe,CAAC,EAAE;MACtE,IAAMQ,GAAG,GAAGR,eAAe,CAACQ,GAAG;MAC/B,IAAMC,IAAI,GAAGD,GAAG,CAACN,OAAO,EAAE;MAC1B,IAAI,CAACX,YAAY,GAAG,IAAI;MACxB;MACA,IAAIkB,IAAI,CAAC4B,YAAY,EAAE,EAAE;QACvB5B,IAAI,CAAC6B,gBAAgB,EAAE;;MAEzB,IAAI,IAAI,CAACjD,QAAQ,EAAE;QACjB,IAAI,CAACA,QAAQ,CAACwB,KAAK,EAAE;;MAEvB;MACA;MACA,IAAI,CAAChB,UAAU,GAAG,IAAI,CAACO,cAAc,CAACC,MAAM,GAAG,CAAC;MAChD,OAAO,IAAI;KACZ,MAAM;MACL,OAAO,KAAK;;EAEhB,CAAC;EACH,OAAAxB,OAAC;AAAD,CAAC,CAxJqBb,kBAAkB;AA0JxC,eAAea,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}