{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({\n      color: 'blue'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)'\n  })\n});\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)'\n  })\n});\nconst selectedPolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'limegreen',\n    width: 3,\n    lineDash: [8, 4]\n  }),\n  fill: new Fill({\n    color: 'rgba(50, 205, 50, 0.15)'\n  })\n});\nconst ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'rgba(0,0,255,0.2)'\n    }),\n    stroke: new Stroke({\n      color: 'blue',\n      width: 2\n    })\n  })\n});\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [vertexMenu, setVertexMenu] = useState(null); // {x, y, feature, index}\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]); // overlays for current drawing\n  const allOverlaysRef = useRef([]); // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    mapRef.current = map;\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n      });\n      overlaysRef.current = [];\n    }\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + \"'\";\n    }\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          updateVertexMarkers([coord, coord]);\n          createSegmentOverlays([coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n      // No manual selection logic here anymore!\n    });\n\n    // --- Custom context menu for deleting vertices ---\n    function handleContextMenu(evt) {\n      if (modeRef.current !== 'select') return;\n      evt.preventDefault();\n      const pixel = map.getEventPixel(evt);\n      let found = null;\n\n      // Only check for vertex if a polygon is selected\n      if (selectedFeature) {\n        const coords = selectedFeature.getGeometry().getCoordinates()[0];\n        for (let i = 0; i < coords.length; i++) {\n          const coordPixel = map.getPixelFromCoordinate(coords[i]);\n          const dist = Math.hypot(coordPixel[0] - pixel[0], coordPixel[1] - pixel[1]);\n          if (dist < 10) {\n            // 10px threshold\n            found = {\n              feature: selectedFeature,\n              index: i,\n              coordinate: coords[i]\n            };\n            break;\n          }\n        }\n      }\n      if (found) {\n        setVertexMenu({\n          x: evt.clientX,\n          y: evt.clientY,\n          feature: found.feature,\n          index: found.index\n        });\n      }\n    }\n    map.getViewport().addEventListener('contextmenu', handleContextMenu);\n\n    // Close menu on click elsewhere\n    function closeMenu() {\n      setVertexMenu(null);\n    }\n    window.addEventListener('click', closeMenu);\n\n    // --- Arrow key drawing support ---\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      map.getViewport().removeEventListener('contextmenu', handleContextMenu);\n      window.removeEventListener('click', closeMenu);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n    // eslint-disable-next-line\n  }, [selectedFeature]);\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select interaction if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      // Add OpenLayers Select interaction\n      const select = new Select({\n        layers: [map.getLayers().item(1)],\n        // Only vectorLayer\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      // Remove selection style if switching out of select mode\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n  }, [mode]);\n\n  // --- Handle vertex deletion from custom context menu ---\n  function handleDeleteVertex() {\n    if (vertexMenu && vertexMenu.feature && typeof vertexMenu.index === 'number') {\n      const feature = vertexMenu.feature;\n      let coords = feature.getGeometry().getCoordinates()[0];\n      if (coords.length > 4) {\n        // must remain a valid polygon\n        coords.splice(vertexMenu.index, 1);\n        coords[coords.length - 1] = coords[0];\n        feature.getGeometry().setCoordinates([coords]);\n      }\n      setVertexMenu(null);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"FlipHoriz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"FlipVert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 496,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this), vertexMenu && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: vertexMenu.y,\n        left: vertexMenu.x,\n        background: 'white',\n        border: '1px solid #ccc',\n        zIndex: 1000,\n        padding: 4,\n        cursor: 'pointer'\n      },\n      onClick: handleDeleteVertex,\n      onContextMenu: e => e.preventDefault(),\n      children: \"Delete Vertex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 465,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"jOVuq2fcx7GnBkhKjLkF2BsbYr4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","Select","fromLonLat","getLength","Style","CircleStyle","Fill","Stroke","LineString","jsxDEV","_jsxDEV","vertexStyle","image","radius","fill","color","stroke","width","polygonStyle","activePolygonStyle","selectedPolygonStyle","lineDash","ghostMarkerStyle","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","vertexMenu","setVertexMenu","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","current","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","clearCurrentOverlays","forEach","overlay","removeOverlay","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","DIM_OFFSET","i","length","c1","c2","pixel1","getPixelFromCoordinate","pixel2","dx","dy","len","Math","sqrt","perp","offsetMidPixel","offsetMidCoord","getCoordinateFromPixel","tooltip","document","createElement","className","innerHTML","isVertical","abs","transform","element","position","positioning","stopEvent","addOverlay","push","addVertexMarkers","addFeature","updateVertexMarkers","toRemove","getFeatures","f","get","removeFeature","feat","set","on","evt","coord","coordinate","ghost","setStyle","poly","feature","getGeometry","getCoordinates","slice","setCoordinates","handleContextMenu","preventDefault","pixel","getEventPixel","found","coordPixel","dist","hypot","index","x","clientX","y","clientY","getViewport","addEventListener","closeMenu","window","addSegment","direction","last","OFFSET","newPt","handleKeyDown","e","key","ctrlKey","metaKey","splice","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","select","getLayers","item","selected","addInteraction","handleDeleteVertex","children","id","ref","type","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","height","top","left","background","border","zIndex","padding","cursor","onContextMenu","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\n\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'white', width: 2 }),\n  }),\n});\n\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)',\n  }),\n});\n\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)',\n  }),\n});\n\nconst selectedPolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'limegreen',\n    width: 3,\n    lineDash: [8, 4],\n  }),\n  fill: new Fill({\n    color: 'rgba(50, 205, 50, 0.15)',\n  }),\n});\n\nconst ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({ color: 'rgba(0,0,255,0.2)' }),\n    stroke: new Stroke({ color: 'blue', width: 2 }),\n  }),\n});\n\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [vertexMenu, setVertexMenu] = useState(null); // {x, y, feature, index}\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);      // overlays for current drawing\n  const allOverlaysRef = useRef([]);   // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    mapRef.current = map;\n\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n      });\n      overlaysRef.current = [];\n    }\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + \"'\";\n    }\n\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\n        ];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          updateVertexMarkers([coord, coord]);\n          createSegmentOverlays([coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n      // No manual selection logic here anymore!\n    });\n\n    // --- Custom context menu for deleting vertices ---\n    function handleContextMenu(evt) {\n      if (modeRef.current !== 'select') return;\n      evt.preventDefault();\n\n      const pixel = map.getEventPixel(evt);\n      let found = null;\n\n      // Only check for vertex if a polygon is selected\n      if (selectedFeature) {\n        const coords = selectedFeature.getGeometry().getCoordinates()[0];\n        for (let i = 0; i < coords.length; i++) {\n          const coordPixel = map.getPixelFromCoordinate(coords[i]);\n          const dist = Math.hypot(coordPixel[0] - pixel[0], coordPixel[1] - pixel[1]);\n          if (dist < 10) { // 10px threshold\n            found = { feature: selectedFeature, index: i, coordinate: coords[i] };\n            break;\n          }\n        }\n      }\n\n      if (found) {\n        setVertexMenu({\n          x: evt.clientX,\n          y: evt.clientY,\n          feature: found.feature,\n          index: found.index,\n        });\n      }\n    }\n\n    map.getViewport().addEventListener('contextmenu', handleContextMenu);\n\n    // Close menu on click elsewhere\n    function closeMenu() {\n      setVertexMenu(null);\n    }\n    window.addEventListener('click', closeMenu);\n\n    // --- Arrow key drawing support ---\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z') &&\n        drawingRef.current &&\n        modeRef.current === 'draw'\n      ) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      map.getViewport().removeEventListener('contextmenu', handleContextMenu);\n      window.removeEventListener('click', closeMenu);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n    // eslint-disable-next-line\n  }, [selectedFeature]);\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select interaction if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      // Add OpenLayers Select interaction\n      const select = new Select({\n        layers: [map.getLayers().item(1)], // Only vectorLayer\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      // Remove selection style if switching out of select mode\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n  }, [mode]);\n\n  // --- Handle vertex deletion from custom context menu ---\n  function handleDeleteVertex() {\n    if (vertexMenu && vertexMenu.feature && typeof vertexMenu.index === 'number') {\n      const feature = vertexMenu.feature;\n      let coords = feature.getGeometry().getCoordinates()[0];\n      if (coords.length > 4) { // must remain a valid polygon\n        coords.splice(vertexMenu.index, 1);\n        coords[coords.length - 1] = coords[0];\n        feature.getGeometry().setCoordinates([coords]);\n      }\n      setVertexMenu(null);\n    }\n  }\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">FlipHoriz</div>\n        <div className=\"map-button\">FlipVert</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\n      {vertexMenu && (\n        <div\n          style={{\n            position: 'fixed',\n            top: vertexMenu.y,\n            left: vertexMenu.x,\n            background: 'white',\n            border: '1px solid #ccc',\n            zIndex: 1000,\n            padding: 4,\n            cursor: 'pointer'\n          }}\n          onClick={handleDeleteVertex}\n          onContextMenu={e => e.preventDefault()}\n        >\n          Delete Vertex\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}