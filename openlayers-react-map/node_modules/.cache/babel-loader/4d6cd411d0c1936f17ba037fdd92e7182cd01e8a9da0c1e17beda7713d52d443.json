{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport Units from '../proj/Units.js';\nimport { abstract } from '../util.js';\nimport { compose as composeTransform, create as createTransform } from '../transform.js';\nimport { createEmpty, createOrUpdateEmpty, getHeight, returnOrUpdate } from '../extent.js';\nimport { get as getProjection, getTransform } from '../proj.js';\nimport { memoizeOne } from '../functions.js';\nimport { transform2D } from './flat/transform.js';\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nvar tmpTransform = createTransform();\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nvar Geometry = /** @class */function (_super) {\n  __extends(Geometry, _super);\n  function Geometry() {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.extent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.extentRevision_ = -1;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.simplifiedGeometryRevision = 0;\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    _this.simplifyTransformedInternal = memoizeOne(function (revision, squaredTolerance, opt_transform) {\n      if (!opt_transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n      var clone = this.clone();\n      clone.applyTransform(opt_transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n    return _this;\n  }\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  Geometry.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {\n    return this.simplifyTransformedInternal(this.getRevision(), squaredTolerance, opt_transform);\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  Geometry.prototype.clone = function () {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  Geometry.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  Geometry.prototype.containsXY = function (x, y) {\n    var coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  };\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  Geometry.prototype.getClosestPoint = function (point, opt_closestPoint) {\n    var closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  };\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  Geometry.prototype.intersectsCoordinate = function (coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  };\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  Geometry.prototype.computeExtent = function (extent) {\n    return abstract();\n  };\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  Geometry.prototype.getExtent = function (opt_extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      var extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, opt_extent);\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  Geometry.prototype.rotate = function (angle, anchor) {\n    abstract();\n  };\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  Geometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n    abstract();\n  };\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  Geometry.prototype.simplify = function (tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  };\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  Geometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    return abstract();\n  };\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  Geometry.prototype.getType = function () {\n    return abstract();\n  };\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  Geometry.prototype.applyTransform = function (transformFn) {\n    abstract();\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  Geometry.prototype.intersectsExtent = function (extent) {\n    return abstract();\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  Geometry.prototype.translate = function (deltaX, deltaY) {\n    abstract();\n  };\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  Geometry.prototype.transform = function (source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    var sourceProj = getProjection(source);\n    var transformFn = sourceProj.getUnits() == Units.TILE_PIXELS ? function (inCoordinates, outCoordinates, stride) {\n      var pixelExtent = sourceProj.getExtent();\n      var projectedExtent = sourceProj.getWorldExtent();\n      var scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n      composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n      transform2D(inCoordinates, 0, inCoordinates.length, stride, tmpTransform, outCoordinates);\n      return getTransform(sourceProj, destination)(inCoordinates, outCoordinates, stride);\n    } : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  };\n  return Geometry;\n}(BaseObject);\nexport default Geometry;","map":{"version":3,"names":["BaseObject","Units","abstract","compose","composeTransform","create","createTransform","createEmpty","createOrUpdateEmpty","getHeight","returnOrUpdate","get","getProjection","getTransform","memoizeOne","transform2D","tmpTransform","Geometry","_super","__extends","_this","call","extent_","extentRevision_","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometryRevision","simplifyTransformedInternal","revision","squaredTolerance","opt_transform","getSimplifiedGeometry","clone","applyTransform","prototype","simplifyTransformed","getRevision","closestPointXY","x","y","closestPoint","minSquaredDistance","containsXY","coord","getClosestPoint","point","opt_closestPoint","NaN","Infinity","intersectsCoordinate","coordinate","computeExtent","extent","getExtent","opt_extent","isNaN","rotate","angle","anchor","scale","sx","opt_sy","opt_anchor","simplify","tolerance","getType","transformFn","intersectsExtent","translate","deltaX","deltaY","transform","source","destination","sourceProj","getUnits","TILE_PIXELS","inCoordinates","outCoordinates","stride","pixelExtent","projectedExtent","getWorldExtent","length"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\Geometry.js"],"sourcesContent":["/**\n * @module ol/geom/Geometry\n */\nimport BaseObject from '../Object.js';\nimport Units from '../proj/Units.js';\nimport {abstract} from '../util.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createEmpty,\n  createOrUpdateEmpty,\n  getHeight,\n  returnOrUpdate,\n} from '../extent.js';\nimport {get as getProjection, getTransform} from '../proj.js';\nimport {memoizeOne} from '../functions.js';\nimport {transform2D} from './flat/transform.js';\n\n/**\n * @typedef {'Point' | 'LineString' | 'LinearRing' | 'Polygon' | 'MultiPoint' | 'MultiLineString' | 'MultiPolygon' | 'GeometryCollection' | 'Circle'} Type\n * The geometry type.  One of `'Point'`, `'LineString'`, `'LinearRing'`,\n * `'Polygon'`, `'MultiPoint'`, `'MultiLineString'`, `'MultiPolygon'`,\n * `'GeometryCollection'`, or `'Circle'`.\n */\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for vector geometries.\n *\n * To get notified of changes to the geometry, register a listener for the\n * generic `change` event on your geometry instance.\n *\n * @abstract\n * @api\n */\nclass Geometry extends BaseObject {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.extentRevision_ = -1;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.simplifiedGeometryRevision = 0;\n\n    /**\n     * Get a transformed and simplified version of the geometry.\n     * @abstract\n     * @param {number} revision The geometry revision.\n     * @param {number} squaredTolerance Squared tolerance.\n     * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n     * @return {Geometry} Simplified geometry.\n     */\n    this.simplifyTransformedInternal = memoizeOne(function (\n      revision,\n      squaredTolerance,\n      opt_transform\n    ) {\n      if (!opt_transform) {\n        return this.getSimplifiedGeometry(squaredTolerance);\n      }\n      const clone = this.clone();\n      clone.applyTransform(opt_transform);\n      return clone.getSimplifiedGeometry(squaredTolerance);\n    });\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n   * @return {Geometry} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, opt_transform) {\n    return this.simplifyTransformedInternal(\n      this.getRevision(),\n      squaredTolerance,\n      opt_transform\n    );\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @abstract\n   * @return {!Geometry} Clone.\n   */\n  clone() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    return abstract();\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const coord = this.getClosestPoint([x, y]);\n    return coord[0] === x && coord[1] === y;\n  }\n\n  /**\n   * Return the closest point of the geometry to the passed point as\n   * {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} point Point.\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_closestPoint] Closest point.\n   * @return {import(\"../coordinate.js\").Coordinate} Closest point.\n   * @api\n   */\n  getClosestPoint(point, opt_closestPoint) {\n    const closestPoint = opt_closestPoint ? opt_closestPoint : [NaN, NaN];\n    this.closestPointXY(point[0], point[1], closestPoint, Infinity);\n    return closestPoint;\n  }\n\n  /**\n   * Returns true if this geometry includes the specified coordinate. If the\n   * coordinate is on the boundary of the geometry, returns false.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {boolean} Contains coordinate.\n   * @api\n   */\n  intersectsCoordinate(coordinate) {\n    return this.containsXY(coordinate[0], coordinate[1]);\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Get the extent of the geometry.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  getExtent(opt_extent) {\n    if (this.extentRevision_ != this.getRevision()) {\n      const extent = this.computeExtent(this.extent_);\n      if (isNaN(extent[0]) || isNaN(extent[1])) {\n        createOrUpdateEmpty(extent);\n      }\n      this.extentRevision_ = this.getRevision();\n    }\n    return returnOrUpdate(this.extent_, opt_extent);\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    abstract();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    abstract();\n  }\n\n  /**\n   * Create a simplified version of this geometry.  For linestrings, this uses\n   * the [Douglas Peucker](https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm)\n   * algorithm.  For polygons, a quantization-based\n   * simplification is used to preserve topology.\n   * @param {number} tolerance The tolerance distance for simplification.\n   * @return {Geometry} A new, simplified version of the original geometry.\n   * @api\n   */\n  simplify(tolerance) {\n    return this.getSimplifiedGeometry(tolerance * tolerance);\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker\n   * algorithm.\n   * See https://en.wikipedia.org/wiki/Ramer-Douglas-Peucker_algorithm.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Geometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return abstract();\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @abstract\n   * @return {Type} Geometry type.\n   */\n  getType() {\n    return abstract();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @abstract\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   */\n  applyTransform(transformFn) {\n    abstract();\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   */\n  intersectsExtent(extent) {\n    return abstract();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @abstract\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    abstract();\n  }\n\n  /**\n   * Transform each coordinate of the geometry from one coordinate reference\n   * system to another. The geometry is modified in place.\n   * For example, a line will be transformed to a line and a circle to a circle.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n   *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n   * @return {Geometry} This geometry.  Note that original geometry is\n   *     modified in place.\n   * @api\n   */\n  transform(source, destination) {\n    /** @type {import(\"../proj/Projection.js\").default} */\n    const sourceProj = getProjection(source);\n    const transformFn =\n      sourceProj.getUnits() == Units.TILE_PIXELS\n        ? function (inCoordinates, outCoordinates, stride) {\n            const pixelExtent = sourceProj.getExtent();\n            const projectedExtent = sourceProj.getWorldExtent();\n            const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n            composeTransform(\n              tmpTransform,\n              projectedExtent[0],\n              projectedExtent[3],\n              scale,\n              -scale,\n              0,\n              0,\n              0\n            );\n            transform2D(\n              inCoordinates,\n              0,\n              inCoordinates.length,\n              stride,\n              tmpTransform,\n              outCoordinates\n            );\n            return getTransform(sourceProj, destination)(\n              inCoordinates,\n              outCoordinates,\n              stride\n            );\n          }\n        : getTransform(sourceProj, destination);\n    this.applyTransform(transformFn);\n    return this;\n  }\n}\n\nexport default Geometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}