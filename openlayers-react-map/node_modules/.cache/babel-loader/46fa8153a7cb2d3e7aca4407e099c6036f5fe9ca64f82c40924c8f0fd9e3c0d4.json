{"ast":null,"code":"import Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport Point from 'ol/geom/Point';\n\n// Generalized style function for polygons and linestrings with custom colors\nfunction shapeWithVerticesStyle(options) {\n  // options: { strokeColor, fillColor, vertexColor, strokeWidth, lineDash }\n  return function (feature) {\n    const styles = [];\n    const geom = feature.getGeometry();\n    const type = geom.getType();\n    // Main geometry style\n    styles.push(new Style({\n      stroke: new Stroke({\n        color: options.strokeColor,\n        width: options.strokeWidth || 3,\n        lineDash: options.lineDash || undefined\n      }),\n      fill: type === 'Polygon' ? new Fill({\n        color: options.fillColor\n      }) : undefined\n    }));\n    // Vertex dots\n    let coords = [];\n    if (type === 'Polygon') {\n      coords = geom.getCoordinates()[0];\n    } else if (type === 'LineString') {\n      coords = geom.getCoordinates();\n    }\n    coords.forEach(coord => {\n      styles.push(new Style({\n        geometry: new Point(coord),\n        image: new CircleStyle({\n          radius: 6,\n          fill: new Fill({\n            color: options.vertexColor\n          }),\n          stroke: new Stroke({\n            color: 'white',\n            width: 2\n          })\n        })\n      }));\n    });\n    return styles;\n  };\n}\n\n// Blue for normal polygons/lines\nexport const polygonStyle = shapeWithVerticesStyle({\n  strokeColor: 'blue',\n  fillColor: 'rgba(30, 144, 255, 0.1)',\n  vertexColor: 'blue',\n  strokeWidth: 3\n});\n\n// Orange for active polygons/lines\nexport const activePolygonStyle = shapeWithVerticesStyle({\n  strokeColor: 'orange',\n  fillColor: 'rgba(255, 165, 0, 0.1)',\n  vertexColor: 'orange',\n  strokeWidth: 3\n});\n\n// Limegreen for selected polygons/lines\nexport const selectedPolygonStyle = shapeWithVerticesStyle({\n  strokeColor: 'limegreen',\n  fillColor: 'rgba(50, 205, 50, 0.15)',\n  vertexColor: 'limegreen',\n  strokeWidth: 3\n  // lineDash: [8, 4],\n});\nexport const ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'rgba(0,0,255,0.2)'\n    }),\n    stroke: new Stroke({\n      color: 'blue',\n      width: 2\n    })\n  })\n});\nexport const highlightSegmentStyle = new Style({\n  stroke: new Stroke({\n    color: 'red',\n    width: 4\n  })\n});\nexport const highlightVertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'red'\n    }),\n    stroke: new Stroke({\n      color: '#fff',\n      width: 2\n    })\n  })\n});\nexport const closingSegmentStyle = new Style({\n  stroke: new Stroke({\n    color: 'rgb(72, 255, 0)',\n    width: 2,\n    lineDash: [8, 8]\n  })\n});","map":{"version":3,"names":["Style","CircleStyle","Fill","Stroke","Point","shapeWithVerticesStyle","options","feature","styles","geom","getGeometry","type","getType","push","stroke","color","strokeColor","width","strokeWidth","lineDash","undefined","fill","fillColor","coords","getCoordinates","forEach","coord","geometry","image","radius","vertexColor","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","closingSegmentStyle"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/ol-styles.js"],"sourcesContent":["import Style from 'ol/style/Style';\r\nimport CircleStyle from 'ol/style/Circle';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Point from 'ol/geom/Point';\r\n\r\n// Generalized style function for polygons and linestrings with custom colors\r\nfunction shapeWithVerticesStyle(options) {\r\n  // options: { strokeColor, fillColor, vertexColor, strokeWidth, lineDash }\r\n  return function (feature) {\r\n    const styles = [];\r\n    const geom = feature.getGeometry();\r\n    const type = geom.getType();\r\n    // Main geometry style\r\n    styles.push(\r\n      new Style({\r\n        stroke: new Stroke({\r\n          color: options.strokeColor,\r\n          width: options.strokeWidth || 3,\r\n          lineDash: options.lineDash || undefined,\r\n        }),\r\n        fill: type === 'Polygon'\r\n          ? new Fill({ color: options.fillColor })\r\n          : undefined,\r\n      })\r\n    );\r\n    // Vertex dots\r\n    let coords = [];\r\n    if (type === 'Polygon') {\r\n      coords = geom.getCoordinates()[0];\r\n    } else if (type === 'LineString') {\r\n      coords = geom.getCoordinates();\r\n    }\r\n    coords.forEach(coord => {\r\n      styles.push(\r\n        new Style({\r\n          geometry: new Point(coord),\r\n          image: new CircleStyle({\r\n            radius: 6,\r\n            fill: new Fill({ color: options.vertexColor }),\r\n            stroke: new Stroke({ color: 'white', width: 2 }),\r\n          }),\r\n        })\r\n      );\r\n    });\r\n    return styles;\r\n  };\r\n}\r\n\r\n// Blue for normal polygons/lines\r\nexport const polygonStyle = shapeWithVerticesStyle({\r\n  strokeColor: 'blue',\r\n  fillColor: 'rgba(30, 144, 255, 0.1)',\r\n  vertexColor: 'blue',\r\n  strokeWidth: 3,\r\n});\r\n\r\n// Orange for active polygons/lines\r\nexport const activePolygonStyle = shapeWithVerticesStyle({\r\n  strokeColor: 'orange',\r\n  fillColor: 'rgba(255, 165, 0, 0.1)',\r\n  vertexColor: 'orange',\r\n  strokeWidth: 3,\r\n});\r\n\r\n// Limegreen for selected polygons/lines\r\nexport const selectedPolygonStyle = shapeWithVerticesStyle({\r\n  strokeColor: 'limegreen',\r\n  fillColor: 'rgba(50, 205, 50, 0.15)',\r\n  vertexColor: 'limegreen',\r\n  strokeWidth: 3,\r\n  // lineDash: [8, 4],\r\n});\r\n\r\nexport const ghostMarkerStyle = new Style({\r\n  image: new CircleStyle({\r\n    radius: 7,\r\n    fill: new Fill({ color: 'rgba(0,0,255,0.2)' }),\r\n    stroke: new Stroke({ color: 'blue', width: 2 }),\r\n  }),\r\n});\r\n\r\nexport const highlightSegmentStyle = new Style({\r\n  stroke: new Stroke({\r\n    color: 'red',\r\n    width: 4,\r\n  }),\r\n});\r\n\r\nexport const highlightVertexStyle = new Style({\r\n  image: new CircleStyle({\r\n    radius: 7,\r\n    fill: new Fill({ color: 'red' }),\r\n    stroke: new Stroke({ color: '#fff', width: 2 }),\r\n  }),\r\n});\r\n\r\nexport const closingSegmentStyle = new Style({\r\n  stroke: new Stroke({\r\n    color: 'rgb(72, 255, 0)',\r\n    width: 2,\r\n    lineDash: [8, 8],\r\n  }),\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}