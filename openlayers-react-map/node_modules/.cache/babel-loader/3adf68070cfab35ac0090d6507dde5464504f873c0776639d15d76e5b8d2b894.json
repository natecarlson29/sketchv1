{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport { never } from 'ol/events/condition';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport LineString from 'ol/geom/LineString';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\n\n/* map stylings */\nimport { vertexStyle, polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle } from './ol-styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [hoveredFeature, setHoveredFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]); // overlays for current drawing\n  const allOverlaysRef = useRef([]); // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  // --- Overlay clearing helper (now available everywhere in App) ---\n  function clearPolygonOverlays(feature) {\n    if (feature && feature._segmentOverlays) {\n      feature._segmentOverlays.forEach(overlay => {\n        if (mapRef.current) mapRef.current.removeOverlay(overlay);\n      });\n      feature._segmentOverlays = [];\n    }\n  }\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    mapRef.current = map;\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + \"'\";\n    }\n    function createSegmentOverlays(feature, coords) {\n      clearPolygonOverlays(feature);\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n      feature._segmentOverlays = [];\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        feature._segmentOverlays.push(overlay);\n      }\n    }\n    function remarkPolygonSegments(feature) {\n      if (!feature) return;\n      const geom = feature.getGeometry();\n      let coords;\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      if (coords) createSegmentOverlays(feature, coords);\n    }\n    mapRef.current.remarkPolygonSegments = remarkPolygonSegments;\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays(feature, [coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          createSegmentOverlays(feature, coords);\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Prevent browser context menu on map\n    const mapDiv = document.getElementById('map');\n    if (mapDiv) {\n      mapDiv.addEventListener('contextmenu', e => e.preventDefault());\n    }\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (mapDiv) {\n        mapDiv.removeEventListener('contextmenu', e => e.preventDefault());\n      }\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      if (map.modifyInteraction) {\n        map.removeInteraction(map.modifyInteraction);\n        map.modifyInteraction = null;\n      }\n    };\n  }, []);\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select/modify interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select/modify interactions if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (map.modifyInteraction) {\n      map.removeInteraction(map.modifyInteraction);\n      map.modifyInteraction = null;\n    }\n\n    // --- Hover to highlight polygon, click to select ---\n    let lastHoveredFeature = null;\n    function handlePointerMove(evt) {\n      if (mode !== 'select') return;\n      let hovered = null;\n      map.forEachFeatureAtPixel(evt.pixel, feature => {\n        hovered = feature;\n        return true;\n      }, {\n        layerFilter: layer => layer === map.getLayers().item(1)\n      });\n      if (hovered !== lastHoveredFeature) {\n        // Only update style if not selected\n        if (lastHoveredFeature && lastHoveredFeature !== selectedFeature) lastHoveredFeature.setStyle(polygonStyle);\n        if (hovered && hovered !== selectedFeature) hovered.setStyle(selectedPolygonStyle);\n        setHoveredFeature(hovered);\n        lastHoveredFeature = hovered;\n      }\n    }\n    if (mode === 'select') {\n      map.on('pointermove', handlePointerMove);\n\n      // Add OpenLayers Select interaction for click selection\n      const select = new Select({\n        layers: [map.getLayers().item(1)],\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        // Remove style from previous selected feature if not hovered\n        if (selectedFeature && selectedFeature !== hoveredFeature) {\n          selectedFeature.setStyle(polygonStyle);\n        }\n        if (e.selected.length > 0) {\n          e.selected[0].setStyle(selectedPolygonStyle);\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n\n    // Clean up on unmount or mode change\n    return () => {\n      map.un('pointermove', handlePointerMove);\n      if (lastHoveredFeature && lastHoveredFeature !== selectedFeature) lastHoveredFeature.setStyle(polygonStyle);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      if (map.modifyInteraction) {\n        map.removeInteraction(map.modifyInteraction);\n        map.modifyInteraction = null;\n      }\n    };\n  }, [mode, polygonStyle, selectedFeature, hoveredFeature, selectedPolygonStyle]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 442,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 437,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: clearPolygonOverlays\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 445,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 411,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"Hf9GLU4euuiwBu+e+4NuAGoS4eQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","Select","never","fromLonLat","getLength","LineString","Style","CircleStyle","Fill","Stroke","ScaleLine","FlipHorizButton","FlipVertButton","RightClick","vertexStyle","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","hoveredFeature","setHoveredFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","clearPolygonOverlays","_segmentOverlays","forEach","overlay","current","removeOverlay","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","addControl","units","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","DIM_OFFSET","i","length","c1","c2","pixel1","getPixelFromCoordinate","pixel2","dx","dy","len","Math","sqrt","perp","offsetMidPixel","offsetMidCoord","getCoordinateFromPixel","tooltip","document","createElement","className","innerHTML","isVertical","abs","transform","element","position","positioning","stopEvent","addOverlay","push","remarkPolygonSegments","geom","getGeometry","getType","getCoordinates","on","evt","coord","coordinate","removeFeature","ghost","setStyle","addFeature","poly","slice","setCoordinates","addSegment","direction","last","OFFSET","newPt","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","splice","addEventListener","mapDiv","getElementById","getFeatures","f","setTarget","removeEventListener","removeInteraction","modifyInteraction","val","parseFloat","isNaN","lastHoveredFeature","handlePointerMove","hovered","forEachFeatureAtPixel","pixel","layerFilter","layer","getLayers","item","select","selected","addInteraction","un","children","id","ref","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport { never } from 'ol/events/condition';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport LineString from 'ol/geom/LineString';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\n\n/* map stylings */\nimport { vertexStyle, polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle } from './ol-styles';\n\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [hoveredFeature, setHoveredFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);      // overlays for current drawing\n  const allOverlaysRef = useRef([]);   // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  // --- Overlay clearing helper (now available everywhere in App) ---\n  function clearPolygonOverlays(feature) {\n    if (feature && feature._segmentOverlays) {\n      feature._segmentOverlays.forEach(overlay => {\n        if (mapRef.current) mapRef.current.removeOverlay(overlay);\n      });\n      feature._segmentOverlays = [];\n    }\n  }\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    mapRef.current = map;\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + \"'\";\n    }\n\n    function createSegmentOverlays(feature, coords) {\n      clearPolygonOverlays(feature);\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n      feature._segmentOverlays = [];\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\n        ];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        mapRef.current.addOverlay(overlay);\n        feature._segmentOverlays.push(overlay);\n      }\n    }\n\n    function remarkPolygonSegments(feature) {\n      if (!feature) return;\n      const geom = feature.getGeometry();\n      let coords;\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      if (coords) createSegmentOverlays(feature, coords);\n    }\n\n    mapRef.current.remarkPolygonSegments = remarkPolygonSegments;\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays(feature, [coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, coords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          createSegmentOverlays(feature, coords);\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z') &&\n        drawingRef.current &&\n        modeRef.current === 'draw'\n      ) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Prevent browser context menu on map\n    const mapDiv = document.getElementById('map');\n    if (mapDiv) {\n      mapDiv.addEventListener('contextmenu', e => e.preventDefault());\n    }\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (mapDiv) {\n        mapDiv.removeEventListener('contextmenu', e => e.preventDefault());\n      }\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      if (map.modifyInteraction) {\n        map.removeInteraction(map.modifyInteraction);\n        map.modifyInteraction = null;\n      }\n    };\n  }, []);\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select/modify interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select/modify interactions if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (map.modifyInteraction) {\n      map.removeInteraction(map.modifyInteraction);\n      map.modifyInteraction = null;\n    }\n\n    // --- Hover to highlight polygon, click to select ---\n    let lastHoveredFeature = null;\n    function handlePointerMove(evt) {\n      if (mode !== 'select') return;\n      let hovered = null;\n      map.forEachFeatureAtPixel(evt.pixel, feature => {\n        hovered = feature;\n        return true;\n      }, {\n        layerFilter: layer => layer === map.getLayers().item(1)\n      });\n\n      if (hovered !== lastHoveredFeature) {\n        // Only update style if not selected\n        if (lastHoveredFeature && lastHoveredFeature !== selectedFeature) lastHoveredFeature.setStyle(polygonStyle);\n        if (hovered && hovered !== selectedFeature) hovered.setStyle(selectedPolygonStyle);\n        setHoveredFeature(hovered);\n        lastHoveredFeature = hovered;\n      }\n    }\n\n    if (mode === 'select') {\n      map.on('pointermove', handlePointerMove);\n\n      // Add OpenLayers Select interaction for click selection\n      const select = new Select({\n        layers: [map.getLayers().item(1)],\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        // Remove style from previous selected feature if not hovered\n        if (selectedFeature && selectedFeature !== hoveredFeature) {\n          selectedFeature.setStyle(polygonStyle);\n        }\n        if (e.selected.length > 0) {\n          e.selected[0].setStyle(selectedPolygonStyle);\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n\n    // Clean up on unmount or mode change\n    return () => {\n      map.un('pointermove', handlePointerMove);\n      if (lastHoveredFeature && lastHoveredFeature !== selectedFeature) lastHoveredFeature.setStyle(polygonStyle);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      if (map.modifyInteraction) {\n        map.removeInteraction(map.modifyInteraction);\n        map.modifyInteraction = null;\n      }\n    };\n  }, [mode, polygonStyle, selectedFeature, hoveredFeature, selectedPolygonStyle]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} />\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={clearPolygonOverlays}\n      />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}