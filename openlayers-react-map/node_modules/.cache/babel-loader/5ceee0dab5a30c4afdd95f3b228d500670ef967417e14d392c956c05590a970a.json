{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/render/canvas/Builder\n */\nimport CanvasInstruction from './Instruction.js';\nimport Relationship from '../../extent/Relationship.js';\nimport VectorContext from '../VectorContext.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { buffer, clone, containsCoordinate, coordinateRelationship } from '../../extent.js';\nimport { defaultFillStyle, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../canvas.js';\nimport { equals, reverseSubArray } from '../../array.js';\nimport { inflateCoordinates, inflateCoordinatesArray, inflateMultiCoordinatesArray } from '../../geom/flat/inflate.js';\nvar CanvasBuilder = /** @class */function (_super) {\n  __extends(CanvasBuilder, _super);\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  function CanvasBuilder(tolerance, maxExtent, resolution, pixelRatio) {\n    var _this = _super.call(this) || this;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.tolerance = tolerance;\n    /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.maxExtent = maxExtent;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.pixelRatio = pixelRatio;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.maxLineWidth = 0;\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    _this.resolution = resolution;\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    _this.beginGeometryInstruction1_ = null;\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    _this.beginGeometryInstruction2_ = null;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.bufferedMaxExtent_ = null;\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    _this.instructions = [];\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    _this.coordinates = [];\n    /**\n     * @private\n     * @type {import(\"../../coordinate.js\").Coordinate}\n     */\n    _this.tmpCoordinate_ = [];\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    _this.hitDetectionInstructions = [];\n    /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */\n    _this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */{};\n    return _this;\n  }\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  CanvasBuilder.prototype.applyPixelRatio = function (dashArray) {\n    var pixelRatio = this.pixelRatio;\n    return pixelRatio == 1 ? dashArray : dashArray.map(function (dash) {\n      return dash * pixelRatio;\n    });\n  };\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} stride Stride.\n   * @protected\n   * @return {number} My end\n   */\n  CanvasBuilder.prototype.appendFlatPointCoordinates = function (flatCoordinates, stride) {\n    var extent = this.getBufferedMaxExtent();\n    var tmpCoord = this.tmpCoordinate_;\n    var coordinates = this.coordinates;\n    var myEnd = coordinates.length;\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      tmpCoord[0] = flatCoordinates[i];\n      tmpCoord[1] = flatCoordinates[i + 1];\n      if (containsCoordinate(extent, tmpCoord)) {\n        coordinates[myEnd++] = tmpCoord[0];\n        coordinates[myEnd++] = tmpCoord[1];\n      }\n    }\n    return myEnd;\n  };\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  CanvasBuilder.prototype.appendFlatLineCoordinates = function (flatCoordinates, offset, end, stride, closed, skipFirst) {\n    var coordinates = this.coordinates;\n    var myEnd = coordinates.length;\n    var extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    var lastXCoord = flatCoordinates[offset];\n    var lastYCoord = flatCoordinates[offset + 1];\n    var nextCoord = this.tmpCoordinate_;\n    var skipped = true;\n    var i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = coordinateRelationship(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          coordinates[myEnd++] = lastXCoord;\n          coordinates[myEnd++] = lastYCoord;\n          skipped = false;\n        }\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n      } else if (nextRel === Relationship.INTERSECTING) {\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastXCoord = nextCoord[0];\n      lastYCoord = nextCoord[1];\n      lastRel = nextRel;\n    }\n    // Last coordinate equals first or only one point to append:\n    if (closed && skipped || i === offset + stride) {\n      coordinates[myEnd++] = lastXCoord;\n      coordinates[myEnd++] = lastYCoord;\n    }\n    return myEnd;\n  };\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} builderEnds Builder ends.\n   * @return {number} Offset.\n   */\n  CanvasBuilder.prototype.drawCustomCoordinates_ = function (flatCoordinates, offset, ends, stride, builderEnds) {\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var builderEnd = this.appendFlatLineCoordinates(flatCoordinates, offset, end, stride, false, false);\n      builderEnds.push(builderEnd);\n      offset = end;\n    }\n    return offset;\n  };\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   */\n  CanvasBuilder.prototype.drawCustom = function (geometry, feature, renderer, hitDetectionRenderer) {\n    this.beginGeometry(geometry, feature);\n    var type = geometry.getType();\n    var stride = geometry.getStride();\n    var builderBegin = this.coordinates.length;\n    var flatCoordinates, builderEnd, builderEnds, builderEndss;\n    var offset;\n    switch (type) {\n      case 'MultiPolygon':\n        flatCoordinates = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getOrientedFlatCoordinates();\n        builderEndss = [];\n        var endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getEndss();\n        offset = 0;\n        for (var i = 0, ii = endss.length; i < ii; ++i) {\n          var myEnds = [];\n          offset = this.drawCustomCoordinates_(flatCoordinates, offset, endss[i], stride, myEnds);\n          builderEndss.push(myEnds);\n        }\n        this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEndss, geometry, renderer, inflateMultiCoordinatesArray]);\n        this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEndss, geometry, hitDetectionRenderer || renderer, inflateMultiCoordinatesArray]);\n        break;\n      case 'Polygon':\n      case 'MultiLineString':\n        builderEnds = [];\n        flatCoordinates = type == 'Polygon' ? /** @type {import(\"../../geom/Polygon.js\").default} */geometry.getOrientedFlatCoordinates() : geometry.getFlatCoordinates();\n        offset = this.drawCustomCoordinates_(flatCoordinates, 0, /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */geometry.getEnds(), stride, builderEnds);\n        this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnds, geometry, renderer, inflateCoordinatesArray]);\n        this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnds, geometry, hitDetectionRenderer || renderer, inflateCoordinatesArray]);\n        break;\n      case 'LineString':\n      case 'Circle':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatLineCoordinates(flatCoordinates, 0, flatCoordinates.length, stride, false, false);\n        this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, renderer, inflateCoordinates]);\n        this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, hitDetectionRenderer || renderer, inflateCoordinates]);\n        break;\n      case 'MultiPoint':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n        if (builderEnd > builderBegin) {\n          this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, renderer, inflateCoordinates]);\n          this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, hitDetectionRenderer || renderer, inflateCoordinates]);\n        }\n        break;\n      case 'Point':\n        flatCoordinates = geometry.getFlatCoordinates();\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n        builderEnd = this.coordinates.length;\n        this.instructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, renderer]);\n        this.hitDetectionInstructions.push([CanvasInstruction.CUSTOM, builderBegin, builderEnd, geometry, hitDetectionRenderer || renderer]);\n        break;\n      default:\n    }\n    this.endGeometry(feature);\n  };\n  /**\n   * @protected\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  CanvasBuilder.prototype.beginGeometry = function (geometry, feature) {\n    this.beginGeometryInstruction1_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0, geometry];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [CanvasInstruction.BEGIN_GEOMETRY, feature, 0, geometry];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  };\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  CanvasBuilder.prototype.finish = function () {\n    return {\n      instructions: this.instructions,\n      hitDetectionInstructions: this.hitDetectionInstructions,\n      coordinates: this.coordinates\n    };\n  };\n  /**\n   * Reverse the hit detection instructions.\n   */\n  CanvasBuilder.prototype.reverseHitDetectionInstructions = function () {\n    var hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    var i;\n    var n = hitDetectionInstructions.length;\n    var instruction;\n    var type;\n    var begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {import(\"./Instruction.js\").default} */instruction[0];\n      if (type == CanvasInstruction.END_GEOMETRY) {\n        begin = i;\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  };\n  /**\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  CanvasBuilder.prototype.setFillStrokeStyle = function (fillStyle, strokeStyle) {\n    var state = this.state;\n    if (fillStyle) {\n      var fillStyleColor = fillStyle.getColor();\n      state.fillStyle = asColorLike(fillStyleColor ? fillStyleColor : defaultFillStyle);\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      var strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = asColorLike(strokeStyleColor ? strokeStyleColor : defaultStrokeStyle);\n      var strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap = strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\n      var strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash ? strokeStyleLineDash.slice() : defaultLineDash;\n      var strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset ? strokeStyleLineDashOffset : defaultLineDashOffset;\n      var strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin = strokeStyleLineJoin !== undefined ? strokeStyleLineJoin : defaultLineJoin;\n      var strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth = strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\n      var strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit = strokeStyleMiterLimit !== undefined ? strokeStyleMiterLimit : defaultMiterLimit;\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  };\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Fill instruction.\n   */\n  CanvasBuilder.prototype.createFill = function (state) {\n    var fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    var fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== 'string') {\n      // Fill is a pattern or gradient - align it!\n      fillInstruction.push(true);\n    }\n    return fillInstruction;\n  };\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  CanvasBuilder.prototype.applyStroke = function (state) {\n    this.instructions.push(this.createStroke(state));\n  };\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  CanvasBuilder.prototype.createStroke = function (state) {\n    return [CanvasInstruction.SET_STROKE_STYLE, state.strokeStyle, state.lineWidth * this.pixelRatio, state.lineCap, state.lineJoin, state.miterLimit, this.applyPixelRatio(state.lineDash), state.lineDashOffset * this.pixelRatio];\n  };\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\n   */\n  CanvasBuilder.prototype.updateFillStyle = function (state, createFill) {\n    var fillStyle = state.fillStyle;\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  };\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\n   */\n  CanvasBuilder.prototype.updateStrokeStyle = function (state, applyStroke) {\n    var strokeStyle = state.strokeStyle;\n    var lineCap = state.lineCap;\n    var lineDash = state.lineDash;\n    var lineDashOffset = state.lineDashOffset;\n    var lineJoin = state.lineJoin;\n    var lineWidth = state.lineWidth;\n    var miterLimit = state.miterLimit;\n    if (state.currentStrokeStyle != strokeStyle || state.currentLineCap != lineCap || lineDash != state.currentLineDash && !equals(state.currentLineDash, lineDash) || state.currentLineDashOffset != lineDashOffset || state.currentLineJoin != lineJoin || state.currentLineWidth != lineWidth || state.currentMiterLimit != miterLimit) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  };\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  CanvasBuilder.prototype.endGeometry = function (feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    var endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  };\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */\n  CanvasBuilder.prototype.getBufferedMaxExtent = function () {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        var width = this.resolution * (this.maxLineWidth + 1) / 2;\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  };\n  return CanvasBuilder;\n}(VectorContext);\nexport default CanvasBuilder;","map":{"version":3,"names":["CanvasInstruction","Relationship","VectorContext","asColorLike","buffer","clone","containsCoordinate","coordinateRelationship","defaultFillStyle","defaultLineCap","defaultLineDash","defaultLineDashOffset","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","equals","reverseSubArray","inflateCoordinates","inflateCoordinatesArray","inflateMultiCoordinatesArray","CanvasBuilder","_super","__extends","tolerance","maxExtent","resolution","pixelRatio","_this","call","maxLineWidth","beginGeometryInstruction1_","beginGeometryInstruction2_","bufferedMaxExtent_","instructions","coordinates","tmpCoordinate_","hitDetectionInstructions","state","prototype","applyPixelRatio","dashArray","map","dash","appendFlatPointCoordinates","flatCoordinates","stride","extent","getBufferedMaxExtent","tmpCoord","myEnd","length","i","ii","appendFlatLineCoordinates","offset","end","closed","skipFirst","lastXCoord","lastYCoord","nextCoord","skipped","lastRel","nextRel","INTERSECTING","drawCustomCoordinates_","ends","builderEnds","builderEnd","push","drawCustom","geometry","feature","renderer","hitDetectionRenderer","beginGeometry","type","getType","getStride","builderBegin","builderEndss","getOrientedFlatCoordinates","endss","getEndss","myEnds","CUSTOM","getFlatCoordinates","getEnds","endGeometry","BEGIN_GEOMETRY","finish","reverseHitDetectionInstructions","reverse","n","instruction","begin","END_GEOMETRY","setFillStrokeStyle","fillStyle","strokeStyle","fillStyleColor","getColor","undefined","strokeStyleColor","strokeStyleLineCap","getLineCap","lineCap","strokeStyleLineDash","getLineDash","lineDash","slice","strokeStyleLineDashOffset","getLineDashOffset","lineDashOffset","strokeStyleLineJoin","getLineJoin","lineJoin","strokeStyleWidth","getWidth","lineWidth","strokeStyleMiterLimit","getMiterLimit","miterLimit","createFill","fillInstruction","SET_FILL_STYLE","applyStroke","createStroke","SET_STROKE_STYLE","updateFillStyle","currentFillStyle","updateStrokeStyle","currentStrokeStyle","currentLineCap","currentLineDash","currentLineDashOffset","currentLineJoin","currentLineWidth","currentMiterLimit","endGeometryInstruction","width"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\render\\canvas\\Builder.js"],"sourcesContent":["/**\n * @module ol/render/canvas/Builder\n */\nimport CanvasInstruction from './Instruction.js';\nimport Relationship from '../../extent/Relationship.js';\nimport VectorContext from '../VectorContext.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  buffer,\n  clone,\n  containsCoordinate,\n  coordinateRelationship,\n} from '../../extent.js';\nimport {\n  defaultFillStyle,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../canvas.js';\nimport {equals, reverseSubArray} from '../../array.js';\nimport {\n  inflateCoordinates,\n  inflateCoordinatesArray,\n  inflateMultiCoordinatesArray,\n} from '../../geom/flat/inflate.js';\n\nclass CanvasBuilder extends VectorContext {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super();\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.tolerance = tolerance;\n\n    /**\n     * @protected\n     * @const\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent = maxExtent;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxLineWidth = 0;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction1_ = null;\n\n    /**\n     * @private\n     * @type {Array<*>}\n     */\n    this.beginGeometryInstruction2_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.bufferedMaxExtent_ = null;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = [];\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = [];\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate.js\").Coordinate}\n     */\n    this.tmpCoordinate_ = [];\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = [];\n\n    /**\n     * @protected\n     * @type {import(\"../canvas.js\").FillStrokeState}\n     */\n    this.state = /** @type {import(\"../canvas.js\").FillStrokeState} */ ({});\n  }\n\n  /**\n   * @protected\n   * @param {Array<number>} dashArray Dash array.\n   * @return {Array<number>} Dash array with pixel ratio applied\n   */\n  applyPixelRatio(dashArray) {\n    const pixelRatio = this.pixelRatio;\n    return pixelRatio == 1\n      ? dashArray\n      : dashArray.map(function (dash) {\n          return dash * pixelRatio;\n        });\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} stride Stride.\n   * @protected\n   * @return {number} My end\n   */\n  appendFlatPointCoordinates(flatCoordinates, stride) {\n    const extent = this.getBufferedMaxExtent();\n    const tmpCoord = this.tmpCoordinate_;\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      tmpCoord[0] = flatCoordinates[i];\n      tmpCoord[1] = flatCoordinates[i + 1];\n      if (containsCoordinate(extent, tmpCoord)) {\n        coordinates[myEnd++] = tmpCoord[0];\n        coordinates[myEnd++] = tmpCoord[1];\n      }\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {number} end End.\n   * @param {number} stride Stride.\n   * @param {boolean} closed Last input coordinate equals first.\n   * @param {boolean} skipFirst Skip first coordinate.\n   * @protected\n   * @return {number} My end.\n   */\n  appendFlatLineCoordinates(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    closed,\n    skipFirst\n  ) {\n    const coordinates = this.coordinates;\n    let myEnd = coordinates.length;\n    const extent = this.getBufferedMaxExtent();\n    if (skipFirst) {\n      offset += stride;\n    }\n    let lastXCoord = flatCoordinates[offset];\n    let lastYCoord = flatCoordinates[offset + 1];\n    const nextCoord = this.tmpCoordinate_;\n    let skipped = true;\n\n    let i, lastRel, nextRel;\n    for (i = offset + stride; i < end; i += stride) {\n      nextCoord[0] = flatCoordinates[i];\n      nextCoord[1] = flatCoordinates[i + 1];\n      nextRel = coordinateRelationship(extent, nextCoord);\n      if (nextRel !== lastRel) {\n        if (skipped) {\n          coordinates[myEnd++] = lastXCoord;\n          coordinates[myEnd++] = lastYCoord;\n          skipped = false;\n        }\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n      } else if (nextRel === Relationship.INTERSECTING) {\n        coordinates[myEnd++] = nextCoord[0];\n        coordinates[myEnd++] = nextCoord[1];\n        skipped = false;\n      } else {\n        skipped = true;\n      }\n      lastXCoord = nextCoord[0];\n      lastYCoord = nextCoord[1];\n      lastRel = nextRel;\n    }\n\n    // Last coordinate equals first or only one point to append:\n    if ((closed && skipped) || i === offset + stride) {\n      coordinates[myEnd++] = lastXCoord;\n      coordinates[myEnd++] = lastYCoord;\n    }\n    return myEnd;\n  }\n\n  /**\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   * @param {number} offset Offset.\n   * @param {Array<number>} ends Ends.\n   * @param {number} stride Stride.\n   * @param {Array<number>} builderEnds Builder ends.\n   * @return {number} Offset.\n   */\n  drawCustomCoordinates_(flatCoordinates, offset, ends, stride, builderEnds) {\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const builderEnd = this.appendFlatLineCoordinates(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        false,\n        false\n      );\n      builderEnds.push(builderEnd);\n      offset = end;\n    }\n    return offset;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @param {Function} renderer Renderer.\n   * @param {Function} hitDetectionRenderer Renderer.\n   */\n  drawCustom(geometry, feature, renderer, hitDetectionRenderer) {\n    this.beginGeometry(geometry, feature);\n\n    const type = geometry.getType();\n    const stride = geometry.getStride();\n    const builderBegin = this.coordinates.length;\n\n    let flatCoordinates, builderEnd, builderEnds, builderEndss;\n    let offset;\n\n    switch (type) {\n      case 'MultiPolygon':\n        flatCoordinates =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getOrientedFlatCoordinates();\n        builderEndss = [];\n        const endss =\n          /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (\n            geometry\n          ).getEndss();\n        offset = 0;\n        for (let i = 0, ii = endss.length; i < ii; ++i) {\n          const myEnds = [];\n          offset = this.drawCustomCoordinates_(\n            flatCoordinates,\n            offset,\n            endss[i],\n            stride,\n            myEnds\n          );\n          builderEndss.push(myEnds);\n        }\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          renderer,\n          inflateMultiCoordinatesArray,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEndss,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateMultiCoordinatesArray,\n        ]);\n        break;\n      case 'Polygon':\n      case 'MultiLineString':\n        builderEnds = [];\n        flatCoordinates =\n          type == 'Polygon'\n            ? /** @type {import(\"../../geom/Polygon.js\").default} */ (\n                geometry\n              ).getOrientedFlatCoordinates()\n            : geometry.getFlatCoordinates();\n        offset = this.drawCustomCoordinates_(\n          flatCoordinates,\n          0,\n          /** @type {import(\"../../geom/Polygon.js\").default|import(\"../../geom/MultiLineString.js\").default} */ (\n            geometry\n          ).getEnds(),\n          stride,\n          builderEnds\n        );\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          renderer,\n          inflateCoordinatesArray,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnds,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateCoordinatesArray,\n        ]);\n        break;\n      case 'LineString':\n      case 'Circle':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatLineCoordinates(\n          flatCoordinates,\n          0,\n          flatCoordinates.length,\n          stride,\n          false,\n          false\n        );\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n          inflateCoordinates,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n          inflateCoordinates,\n        ]);\n        break;\n      case 'MultiPoint':\n        flatCoordinates = geometry.getFlatCoordinates();\n        builderEnd = this.appendFlatPointCoordinates(flatCoordinates, stride);\n\n        if (builderEnd > builderBegin) {\n          this.instructions.push([\n            CanvasInstruction.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            renderer,\n            inflateCoordinates,\n          ]);\n          this.hitDetectionInstructions.push([\n            CanvasInstruction.CUSTOM,\n            builderBegin,\n            builderEnd,\n            geometry,\n            hitDetectionRenderer || renderer,\n            inflateCoordinates,\n          ]);\n        }\n        break;\n      case 'Point':\n        flatCoordinates = geometry.getFlatCoordinates();\n        this.coordinates.push(flatCoordinates[0], flatCoordinates[1]);\n        builderEnd = this.coordinates.length;\n\n        this.instructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          renderer,\n        ]);\n        this.hitDetectionInstructions.push([\n          CanvasInstruction.CUSTOM,\n          builderBegin,\n          builderEnd,\n          geometry,\n          hitDetectionRenderer || renderer,\n        ]);\n        break;\n      default:\n    }\n    this.endGeometry(feature);\n  }\n\n  /**\n   * @protected\n   * @param {import(\"../../geom/Geometry\").default|import(\"../Feature.js\").default} geometry The geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  beginGeometry(geometry, feature) {\n    this.beginGeometryInstruction1_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n    ];\n    this.instructions.push(this.beginGeometryInstruction1_);\n    this.beginGeometryInstruction2_ = [\n      CanvasInstruction.BEGIN_GEOMETRY,\n      feature,\n      0,\n      geometry,\n    ];\n    this.hitDetectionInstructions.push(this.beginGeometryInstruction2_);\n  }\n\n  /**\n   * @return {import(\"../canvas.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    return {\n      instructions: this.instructions,\n      hitDetectionInstructions: this.hitDetectionInstructions,\n      coordinates: this.coordinates,\n    };\n  }\n\n  /**\n   * Reverse the hit detection instructions.\n   */\n  reverseHitDetectionInstructions() {\n    const hitDetectionInstructions = this.hitDetectionInstructions;\n    // step 1 - reverse array\n    hitDetectionInstructions.reverse();\n    // step 2 - reverse instructions within geometry blocks\n    let i;\n    const n = hitDetectionInstructions.length;\n    let instruction;\n    let type;\n    let begin = -1;\n    for (i = 0; i < n; ++i) {\n      instruction = hitDetectionInstructions[i];\n      type = /** @type {import(\"./Instruction.js\").default} */ (instruction[0]);\n      if (type == CanvasInstruction.END_GEOMETRY) {\n        begin = i;\n      } else if (type == CanvasInstruction.BEGIN_GEOMETRY) {\n        instruction[2] = i;\n        reverseSubArray(this.hitDetectionInstructions, begin, i);\n        begin = -1;\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../../style/Fill.js\").default} fillStyle Fill style.\n   * @param {import(\"../../style/Stroke.js\").default} strokeStyle Stroke style.\n   */\n  setFillStrokeStyle(fillStyle, strokeStyle) {\n    const state = this.state;\n    if (fillStyle) {\n      const fillStyleColor = fillStyle.getColor();\n      state.fillStyle = asColorLike(\n        fillStyleColor ? fillStyleColor : defaultFillStyle\n      );\n    } else {\n      state.fillStyle = undefined;\n    }\n    if (strokeStyle) {\n      const strokeStyleColor = strokeStyle.getColor();\n      state.strokeStyle = asColorLike(\n        strokeStyleColor ? strokeStyleColor : defaultStrokeStyle\n      );\n      const strokeStyleLineCap = strokeStyle.getLineCap();\n      state.lineCap =\n        strokeStyleLineCap !== undefined ? strokeStyleLineCap : defaultLineCap;\n      const strokeStyleLineDash = strokeStyle.getLineDash();\n      state.lineDash = strokeStyleLineDash\n        ? strokeStyleLineDash.slice()\n        : defaultLineDash;\n      const strokeStyleLineDashOffset = strokeStyle.getLineDashOffset();\n      state.lineDashOffset = strokeStyleLineDashOffset\n        ? strokeStyleLineDashOffset\n        : defaultLineDashOffset;\n      const strokeStyleLineJoin = strokeStyle.getLineJoin();\n      state.lineJoin =\n        strokeStyleLineJoin !== undefined\n          ? strokeStyleLineJoin\n          : defaultLineJoin;\n      const strokeStyleWidth = strokeStyle.getWidth();\n      state.lineWidth =\n        strokeStyleWidth !== undefined ? strokeStyleWidth : defaultLineWidth;\n      const strokeStyleMiterLimit = strokeStyle.getMiterLimit();\n      state.miterLimit =\n        strokeStyleMiterLimit !== undefined\n          ? strokeStyleMiterLimit\n          : defaultMiterLimit;\n\n      if (state.lineWidth > this.maxLineWidth) {\n        this.maxLineWidth = state.lineWidth;\n        // invalidate the buffered max extent cache\n        this.bufferedMaxExtent_ = null;\n      }\n    } else {\n      state.strokeStyle = undefined;\n      state.lineCap = undefined;\n      state.lineDash = null;\n      state.lineDashOffset = undefined;\n      state.lineJoin = undefined;\n      state.lineWidth = undefined;\n      state.miterLimit = undefined;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Fill instruction.\n   */\n  createFill(state) {\n    const fillStyle = state.fillStyle;\n    /** @type {Array<*>} */\n    const fillInstruction = [CanvasInstruction.SET_FILL_STYLE, fillStyle];\n    if (typeof fillStyle !== 'string') {\n      // Fill is a pattern or gradient - align it!\n      fillInstruction.push(true);\n    }\n    return fillInstruction;\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   */\n  applyStroke(state) {\n    this.instructions.push(this.createStroke(state));\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @return {Array<*>} Stroke instruction.\n   */\n  createStroke(state) {\n    return [\n      CanvasInstruction.SET_STROKE_STYLE,\n      state.strokeStyle,\n      state.lineWidth * this.pixelRatio,\n      state.lineCap,\n      state.lineJoin,\n      state.miterLimit,\n      this.applyPixelRatio(state.lineDash),\n      state.lineDashOffset * this.pixelRatio,\n    ];\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState):Array<*>} createFill Create fill.\n   */\n  updateFillStyle(state, createFill) {\n    const fillStyle = state.fillStyle;\n    if (typeof fillStyle !== 'string' || state.currentFillStyle != fillStyle) {\n      if (fillStyle !== undefined) {\n        this.instructions.push(createFill.call(this, state));\n      }\n      state.currentFillStyle = fillStyle;\n    }\n  }\n\n  /**\n   * @param {import(\"../canvas.js\").FillStrokeState} state State.\n   * @param {function(this:CanvasBuilder, import(\"../canvas.js\").FillStrokeState): void} applyStroke Apply stroke.\n   */\n  updateStrokeStyle(state, applyStroke) {\n    const strokeStyle = state.strokeStyle;\n    const lineCap = state.lineCap;\n    const lineDash = state.lineDash;\n    const lineDashOffset = state.lineDashOffset;\n    const lineJoin = state.lineJoin;\n    const lineWidth = state.lineWidth;\n    const miterLimit = state.miterLimit;\n    if (\n      state.currentStrokeStyle != strokeStyle ||\n      state.currentLineCap != lineCap ||\n      (lineDash != state.currentLineDash &&\n        !equals(state.currentLineDash, lineDash)) ||\n      state.currentLineDashOffset != lineDashOffset ||\n      state.currentLineJoin != lineJoin ||\n      state.currentLineWidth != lineWidth ||\n      state.currentMiterLimit != miterLimit\n    ) {\n      if (strokeStyle !== undefined) {\n        applyStroke.call(this, state);\n      }\n      state.currentStrokeStyle = strokeStyle;\n      state.currentLineCap = lineCap;\n      state.currentLineDash = lineDash;\n      state.currentLineDashOffset = lineDashOffset;\n      state.currentLineJoin = lineJoin;\n      state.currentLineWidth = lineWidth;\n      state.currentMiterLimit = miterLimit;\n    }\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  endGeometry(feature) {\n    this.beginGeometryInstruction1_[2] = this.instructions.length;\n    this.beginGeometryInstruction1_ = null;\n    this.beginGeometryInstruction2_[2] = this.hitDetectionInstructions.length;\n    this.beginGeometryInstruction2_ = null;\n    const endGeometryInstruction = [CanvasInstruction.END_GEOMETRY, feature];\n    this.instructions.push(endGeometryInstruction);\n    this.hitDetectionInstructions.push(endGeometryInstruction);\n  }\n\n  /**\n   * Get the buffered rendering extent.  Rendering will be clipped to the extent\n   * provided to the constructor.  To account for symbolizers that may intersect\n   * this extent, we calculate a buffered extent (e.g. based on stroke width).\n   * @return {import(\"../../extent.js\").Extent} The buffered rendering extent.\n   * @protected\n   */\n  getBufferedMaxExtent() {\n    if (!this.bufferedMaxExtent_) {\n      this.bufferedMaxExtent_ = clone(this.maxExtent);\n      if (this.maxLineWidth > 0) {\n        const width = (this.resolution * (this.maxLineWidth + 1)) / 2;\n        buffer(this.bufferedMaxExtent_, width, this.bufferedMaxExtent_);\n      }\n    }\n    return this.bufferedMaxExtent_;\n  }\n}\n\nexport default CanvasBuilder;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}