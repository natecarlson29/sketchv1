{"ast":null,"code":"import React from'react';import Feature from'ol/Feature';import Polygon from'ol/geom/Polygon';import LineString from'ol/geom/LineString';import{CloneIcon}from\"../svg\";import{jsx as _jsx}from\"react/jsx-runtime\";const Clone=_ref=>{let{selectedFeature,vectorSourceRef,setSelectedFeature,addHistoryAction,mapRef}=_ref;const handleClone=()=>{if(!selectedFeature)return;const geom=selectedFeature.getGeometry();let coords,width=0,newCoords;if(geom.getType()==='Polygon'){coords=geom.getCoordinates()[0];// Calculate width as the difference between max and min x\nconst xs=coords.map(c=>c[0]);width=Math.max(...xs)-Math.min(...xs);// Offset all x by width\nnewCoords=[coords.map(_ref2=>{let[x,y]=_ref2;return[x+width,y];})];const newFeature=new Feature(new Polygon(newCoords));newFeature.setId(Date.now().toString());vectorSourceRef.current.addFeature(newFeature);mapRef.current.createSegmentOverlays(newFeature,mapRef);addHistoryAction({type:'clone-feature',featureId:newFeature.getId(),prevCoords:[],newCoords:newCoords});}else if(geom.getType()==='LineString'){coords=geom.getCoordinates();const xs=coords.map(c=>c[0]);width=Math.max(...xs)-Math.min(...xs);newCoords=coords.map(_ref3=>{let[x,y]=_ref3;return[x+width,y];});const newFeature=new Feature(new LineString(newCoords));newFeature.setId(Date.now().toString());vectorSourceRef.current.addFeature(newFeature);mapRef.current.createSegmentOverlays(newFeature,mapRef);addHistoryAction({type:'clone-feature',featureId:newFeature.getId(),prevCoords:[],newCoords:newCoords});}};return/*#__PURE__*/_jsx(\"button\",{title:\"Clone Selected Geo\",className:\"map-button\",onClick:handleClone,children:/*#__PURE__*/_jsx(CloneIcon,{})});};export default Clone;","map":{"version":3,"names":["React","Feature","Polygon","LineString","CloneIcon","jsx","_jsx","Clone","_ref","selectedFeature","vectorSourceRef","setSelectedFeature","addHistoryAction","mapRef","handleClone","geom","getGeometry","coords","width","newCoords","getType","getCoordinates","xs","map","c","Math","max","min","_ref2","x","y","newFeature","setId","Date","now","toString","current","addFeature","createSegmentOverlays","type","featureId","getId","prevCoords","_ref3","title","className","onClick","children"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/map-actions/Clone.jsx"],"sourcesContent":["import React from 'react';\r\nimport Feature from 'ol/Feature';\r\nimport Polygon from 'ol/geom/Polygon';\r\nimport LineString from 'ol/geom/LineString';\r\nimport { CloneIcon } from \"../svg\";\r\n\r\nconst Clone = ({ selectedFeature, vectorSourceRef, setSelectedFeature, addHistoryAction, mapRef }) => {\r\n  const handleClone = () => {\r\n    if (!selectedFeature) return;\r\n\r\n    const geom = selectedFeature.getGeometry();\r\n    let coords, width = 0, newCoords;\r\n\r\n    if (geom.getType() === 'Polygon') {\r\n      coords = geom.getCoordinates()[0];\r\n      // Calculate width as the difference between max and min x\r\n      const xs = coords.map(c => c[0]);\r\n      width = Math.max(...xs) - Math.min(...xs);\r\n      // Offset all x by width\r\n      newCoords = [coords.map(([x, y]) => [x + width, y])];\r\n      const newFeature = new Feature(new Polygon(newCoords));\r\n      newFeature.setId(Date.now().toString());\r\n      vectorSourceRef.current.addFeature(newFeature);\r\n      mapRef.current.createSegmentOverlays(newFeature, mapRef);\r\n      addHistoryAction({\r\n        type: 'clone-feature',\r\n        featureId: newFeature.getId(),\r\n        prevCoords: [],\r\n        newCoords: newCoords,\r\n      });\r\n    } else if (geom.getType() === 'LineString') {\r\n      coords = geom.getCoordinates();\r\n      const xs = coords.map(c => c[0]);\r\n      width = Math.max(...xs) - Math.min(...xs);\r\n      newCoords = coords.map(([x, y]) => [x + width, y]);\r\n      const newFeature = new Feature(new LineString(newCoords));\r\n      newFeature.setId(Date.now().toString());\r\n      vectorSourceRef.current.addFeature(newFeature);\r\n      mapRef.current.createSegmentOverlays(newFeature, mapRef);\r\n      addHistoryAction({\r\n        type: 'clone-feature',\r\n        featureId: newFeature.getId(),\r\n        prevCoords: [],\r\n        newCoords: newCoords,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <button title=\"Clone Selected Geo\" className=\"map-button\" onClick={handleClone}>\r\n      <CloneIcon />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Clone;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}