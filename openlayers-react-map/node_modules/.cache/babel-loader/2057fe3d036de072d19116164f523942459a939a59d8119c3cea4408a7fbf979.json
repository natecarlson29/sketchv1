{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({\n      color: 'blue'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)'\n  })\n});\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)'\n  })\n});\nconst OFFSET = 2.018; // map units\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]); // overlays for current drawing\n  const allOverlaysRef = useRef([]); // overlays for finished polygons\n  const drawingRef = useRef(false);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    mapRef.current = map;\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        } else if (overlay.type === 'feature' && overlay.feature) {\n          vectorSourceRef.current.removeFeature(overlay.feature);\n        }\n      });\n      overlaysRef.current = [];\n    }\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + ' ft';\n    }\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 13; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n\n        // Draw a dimension line (helper line) offset from the main segment\n        // Offset both endpoints in pixel space, then convert back to map coordinates\n        const offsetPixel1 = [pixel1[0] + perp[0] * DIM_OFFSET, pixel1[1] + perp[1] * DIM_OFFSET];\n        const offsetPixel2 = [pixel2[0] + perp[0] * DIM_OFFSET, pixel2[1] + perp[1] * DIM_OFFSET];\n        const offsetCoord1 = mapRef.current.getCoordinateFromPixel(offsetPixel1);\n        const offsetCoord2 = mapRef.current.getCoordinateFromPixel(offsetPixel2);\n\n        // Create a temporary vector layer for the dimension line\n        const dimLineFeature = new Feature(new LineString([offsetCoord1, offsetCoord2]));\n        dimLineFeature.setStyle(new Style({\n          stroke: new Stroke({\n            color: 'purple',\n            width: 1.5,\n            lineDash: [6, 6]\n          }),\n          image: new CircleStyle({\n            radius: 6,\n            fill: new Fill({\n              color: 'blue'\n            }),\n            stroke: new Stroke({\n              color: 'white',\n              width: 2\n            })\n          })\n        }));\n        // Add to a temporary source/layer for overlays\n        // We'll use the main vectorSource for simplicity, but you can use a separate one if you want\n        vectorSourceRef.current.addFeature(dimLineFeature);\n        // Store a reference so we can remove it later\n        overlaysRef.current.push({\n          type: 'feature',\n          feature: dimLineFeature\n        });\n      }\n    }\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n    map.on('singleclick', evt => {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        // Start new polygon\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setStyle(activePolygonStyle); // Active style\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        updateVertexMarkers([coord, coord]);\n        createSegmentOverlays([coord, coord]);\n      } else {\n        // Add vertex\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateVertexMarkers(coords);\n        createSegmentOverlays(coords);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        e.preventDefault();\n        addSegment(e.key);\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension\",\n      autoFocus: true,\n      style: {\n        position: 'absolute',\n        top: 20,\n        right: 20,\n        zIndex: 1000,\n        width: 300,\n        padding: 8,\n        fontSize: 16,\n        pointerEvents: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .segment-tooltip {\n            font-size: 14px;\n            font-weight: bold;\n            pointer-events: none;\n            background-color: white;\n            border: 1px solid black;\n            pading: 2px 4px;\n            position: relative;\n            white-space: nowrap;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 302,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"9jJoHiQedoBeJ+CLbTRDiZsCt2M=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","fromLonLat","getLength","Style","CircleStyle","Fill","Stroke","LineString","jsxDEV","_jsxDEV","vertexStyle","image","radius","fill","color","stroke","width","polygonStyle","activePolygonStyle","OFFSET","App","_s","text","setText","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","vectorSource","current","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","clearCurrentOverlays","forEach","overlay","removeOverlay","type","feature","removeFeature","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","DIM_OFFSET","i","length","c1","c2","pixel1","getPixelFromCoordinate","pixel2","dx","dy","len","Math","sqrt","perp","offsetMidPixel","offsetMidCoord","getCoordinateFromPixel","tooltip","document","createElement","className","innerHTML","element","position","positioning","stopEvent","addOverlay","push","offsetPixel1","offsetPixel2","offsetCoord1","offsetCoord2","dimLineFeature","setStyle","lineDash","addFeature","addVertexMarkers","updateVertexMarkers","toRemove","getFeatures","f","get","feat","set","on","evt","coord","coordinate","poly","getGeometry","getCoordinates","slice","setCoordinates","addSegment","direction","last","newPt","handleKeyDown","e","key","preventDefault","addEventListener","setTarget","removeEventListener","children","ref","min","step","value","onChange","placeholder","autoFocus","top","right","zIndex","padding","fontSize","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","id","height","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\n\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'white', width: 2 }),\n  }),\n});\n\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)',\n  }),\n});\n\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)',\n  }),\n});\n\nconst OFFSET = 2.018; // map units\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);      // overlays for current drawing\n  const allOverlaysRef = useRef([]);   // overlays for finished polygons\n  const drawingRef = useRef(false);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    mapRef.current = map;\n\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        } else if (overlay.type === 'feature' && overlay.feature) {\n          vectorSourceRef.current.removeFeature(overlay.feature);\n        }\n      });\n      overlaysRef.current = [];\n    }\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + ' ft';\n    }\n\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 13; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\n        ];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n\n        // Draw a dimension line (helper line) offset from the main segment\n        // Offset both endpoints in pixel space, then convert back to map coordinates\n        const offsetPixel1 = [\n          pixel1[0] + perp[0] * DIM_OFFSET,\n          pixel1[1] + perp[1] * DIM_OFFSET,\n        ];\n        const offsetPixel2 = [\n          pixel2[0] + perp[0] * DIM_OFFSET,\n          pixel2[1] + perp[1] * DIM_OFFSET,\n        ];\n        const offsetCoord1 = mapRef.current.getCoordinateFromPixel(offsetPixel1);\n        const offsetCoord2 = mapRef.current.getCoordinateFromPixel(offsetPixel2);\n\n        // Create a temporary vector layer for the dimension line\n        const dimLineFeature = new Feature(new LineString([offsetCoord1, offsetCoord2]));\n        dimLineFeature.setStyle(\n          new Style({\n            stroke: new Stroke({\n              color: 'purple',\n              width: 1.5,\n              lineDash: [6, 6],\n            }),\n            image: new CircleStyle({\n              radius: 6,\n              fill: new Fill({ color: 'blue' }),\n              stroke: new Stroke({ color: 'white', width: 2 }),\n            })\n          })\n        );\n        // Add to a temporary source/layer for overlays\n        // We'll use the main vectorSource for simplicity, but you can use a separate one if you want\n        vectorSourceRef.current.addFeature(dimLineFeature);\n        // Store a reference so we can remove it later\n        overlaysRef.current.push({\n          type: 'feature',\n          feature: dimLineFeature,\n        });\n      }\n    }\n\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n\n    map.on('singleclick', evt => {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        // Start new polygon\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setStyle(activePolygonStyle); // Active style\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        updateVertexMarkers([coord, coord]);\n        createSegmentOverlays([coord, coord]);\n      } else {\n        // Add vertex\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateVertexMarkers(coords);\n        createSegmentOverlays(coords);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        e.preventDefault();\n        addSegment(e.key);\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <div>\n      <input\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension\"\n        autoFocus\n        style={{\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          zIndex: 1000,\n          width: 300,\n          padding: 8,\n          fontSize: 16,\n          pointerEvents: 'auto',\n        }}\n      />\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\n      <style>\n        {`\n          .segment-tooltip {\n            font-size: 14px;\n            font-weight: bold;\n            pointer-events: none;\n            background-color: white;\n            border: 1px solid black;\n            pading: 2px 4px;\n            position: relative;\n            white-space: nowrap;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}