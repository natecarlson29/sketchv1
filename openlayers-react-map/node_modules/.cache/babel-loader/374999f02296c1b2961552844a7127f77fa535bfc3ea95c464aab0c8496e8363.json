{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({\n      color: 'blue'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst polygonStyle = function (feature) {\n  const styles = [new Style({\n    stroke: new Stroke({\n      color: 'blue',\n      width: 3\n    }),\n    fill: new Fill({\n      color: 'rgba(30, 144, 255, 0.1)'\n    })\n  })];\n  const coords = feature.getGeometry().getCoordinates()[0];\n  coords.forEach(coord => {\n    styles.push(new Style({\n      geometry: new Point(coord),\n      image: new CircleStyle({\n        radius: 6,\n        fill: new Fill({\n          color: 'blue'\n        }),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    }));\n  });\n  return styles;\n};\nconst activePolygonStyle = function (feature) {\n  const styles = [new Style({\n    stroke: new Stroke({\n      color: 'orange',\n      width: 3\n    }),\n    fill: new Fill({\n      color: 'rgba(255, 165, 0, 0.1)'\n    })\n  })];\n  const coords = feature.getGeometry().getCoordinates()[0];\n  coords.forEach(coord => {\n    styles.push(new Style({\n      geometry: new Point(coord),\n      image: new CircleStyle({\n        radius: 6,\n        fill: new Fill({\n          color: 'orange'\n        }),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    }));\n  });\n  return styles;\n};\nconst selectedPolygonStyle = function (feature) {\n  const styles = [new Style({\n    stroke: new Stroke({\n      color: 'limegreen',\n      width: 3,\n      lineDash: [8, 4]\n    }),\n    fill: new Fill({\n      color: 'rgba(50, 205, 50, 0.15)'\n    })\n  })];\n  const coords = feature.getGeometry().getCoordinates()[0];\n  coords.forEach(coord => {\n    styles.push(new Style({\n      geometry: new Point(coord),\n      image: new CircleStyle({\n        radius: 6,\n        fill: new Fill({\n          color: 'limegreen'\n        }),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    }));\n  });\n  return styles;\n};\nconst ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'rgba(0,0,255,0.2)'\n    }),\n    stroke: new Stroke({\n      color: 'blue',\n      width: 2\n    })\n  })\n});\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]); // overlays for current drawing\n  const allOverlaysRef = useRef([]); // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    mapRef.current = map;\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n      });\n      overlaysRef.current = [];\n    }\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + \"'\";\n    }\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n\n    // --- Remark segments for a given feature ---\n    function remarkPolygonSegments(feature) {\n      clearCurrentOverlays();\n      if (!feature) return;\n      const poly = feature.getGeometry();\n      const coords = poly.getCoordinates()[0];\n      const DIM_OFFSET = 17;\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays([coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(coords);\n        }\n      }\n      // No manual selection logic here anymore!\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = remarkPolygonSegments;\n\n    // Clean up on unmount\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      // Remove select interaction if present\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n    // eslint-disable-next-line\n  }, []); // Only run once on mount\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select interaction if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      // Add OpenLayers Select interaction\n      const select = new Select({\n        layers: [map.getLayers().item(1)],\n        // Only vectorLayer\n        style: selectedPolygonStyle\n        // filter: feature => feature.getGeometry() instanceof Polygon,\n      });\n      select.on('select', e => {\n        // Only allow single selection\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      // Remove selection style if switching out of select mode\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n  }, [mode]);\n\n  // --- Polygon flipping functions ---\n  function flipPolygonHorizontally(feature) {\n    const geom = feature.getGeometry();\n    if (!(geom instanceof Polygon)) return;\n    const coords = geom.getCoordinates()[0];\n    const xs = coords.map(c => c[0]);\n    const axis = (Math.min(...xs) + Math.max(...xs)) / 2;\n    const flipped = coords.map(([x, y]) => [axis - (x - axis), y]);\n    // Ensure polygon is closed\n    if (flipped.length > 1 && (flipped[0][0] !== flipped[flipped.length - 1][0] || flipped[0][1] !== flipped[flipped.length - 1][1])) {\n      flipped[flipped.length - 1] = [...flipped[0]];\n    }\n    geom.setCoordinates([flipped]);\n    // Remeasure segments after flipping\n    if (mapRef.current && mapRef.current.remarkPolygonSegments) {\n      mapRef.current.remarkPolygonSegments(feature);\n    }\n  }\n  function flipPolygonVertically(feature) {\n    const geom = feature.getGeometry();\n    if (!(geom instanceof Polygon)) return;\n    const coords = geom.getCoordinates()[0];\n    const ys = coords.map(c => c[1]);\n    const axis = (Math.min(...ys) + Math.max(...ys)) / 2;\n    const flipped = coords.map(([x, y]) => [x, axis - (y - axis)]);\n    // Ensure polygon is closed\n    if (flipped.length > 1 && (flipped[0][0] !== flipped[flipped.length - 1][0] || flipped[0][1] !== flipped[flipped.length - 1][1])) {\n      flipped[flipped.length - 1] = [...flipped[0]];\n    }\n    geom.setCoordinates([flipped]);\n    // Remeasure segments after flipping\n    if (mapRef.current && mapRef.current.remarkPolygonSegments) {\n      mapRef.current.remarkPolygonSegments(feature);\n    }\n  }\n\n  // --- Button handlers ---\n  function handleFlipHoriz() {\n    if (selectedFeature) {\n      flipPolygonHorizontally(selectedFeature);\n    }\n  }\n  function handleFlipVert() {\n    if (selectedFeature) {\n      flipPolygonVertically(selectedFeature);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        onClick: handleFlipHoriz,\n        children: \"FlipHoriz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        onClick: handleFlipVert,\n        children: \"FlipVert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 566,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 573,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 540,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"pLUtvi54iaAbiKCD4BsBR0g9xeQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","Select","fromLonLat","getLength","Style","CircleStyle","Fill","Stroke","LineString","jsxDEV","_jsxDEV","vertexStyle","image","radius","fill","color","stroke","width","polygonStyle","feature","styles","coords","getGeometry","getCoordinates","forEach","coord","push","geometry","activePolygonStyle","selectedPolygonStyle","lineDash","ghostMarkerStyle","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","current","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","clearCurrentOverlays","overlay","removeOverlay","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","DIM_OFFSET","i","length","c1","c2","pixel1","getPixelFromCoordinate","pixel2","dx","dy","len","Math","sqrt","perp","offsetMidPixel","offsetMidCoord","getCoordinateFromPixel","tooltip","document","createElement","className","innerHTML","isVertical","abs","transform","element","position","positioning","stopEvent","addOverlay","remarkPolygonSegments","poly","on","evt","coordinate","removeFeature","ghost","setStyle","addFeature","slice","setCoordinates","addSegment","direction","last","OFFSET","newPt","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","splice","addEventListener","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","select","getLayers","item","selected","addInteraction","flipPolygonHorizontally","geom","xs","c","axis","min","max","flipped","x","y","flipPolygonVertically","ys","handleFlipHoriz","handleFlipVert","children","id","ref","type","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","height","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\n\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'white', width: 2 }),\n  }),\n});\n\nconst polygonStyle = function (feature) {\n  const styles = [\n    new Style({\n      stroke: new Stroke({\n        color: 'blue',\n        width: 3,\n      }),\n      fill: new Fill({\n        color: 'rgba(30, 144, 255, 0.1)',\n      }),\n    }),\n  ];\n  const coords = feature.getGeometry().getCoordinates()[0];\n  coords.forEach(coord => {\n    styles.push(\n      new Style({\n        geometry: new Point(coord),\n        image: new CircleStyle({\n          radius: 6,\n          fill: new Fill({ color: 'blue' }),\n          stroke: new Stroke({ color: 'white', width: 2 }),\n        }),\n      })\n    );\n  });\n  return styles;\n};\n\nconst activePolygonStyle = function (feature) {\n  const styles = [\n    new Style({\n      stroke: new Stroke({\n        color: 'orange',\n        width: 3,\n      }),\n      fill: new Fill({\n        color: 'rgba(255, 165, 0, 0.1)',\n      }),\n    }),\n  ];\n  const coords = feature.getGeometry().getCoordinates()[0];\n  coords.forEach(coord => {\n    styles.push(\n      new Style({\n        geometry: new Point(coord),\n        image: new CircleStyle({\n          radius: 6,\n          fill: new Fill({ color: 'orange' }),\n          stroke: new Stroke({ color: 'white', width: 2 }),\n        }),\n      })\n    );\n  });\n  return styles;\n};\n\nconst selectedPolygonStyle = function (feature) {\n  const styles = [\n    new Style({\n      stroke: new Stroke({\n        color: 'limegreen',\n        width: 3,\n        lineDash: [8, 4],\n      }),\n      fill: new Fill({\n        color: 'rgba(50, 205, 50, 0.15)',\n      }),\n    }),\n  ];\n  const coords = feature.getGeometry().getCoordinates()[0];\n  coords.forEach(coord => {\n    styles.push(\n      new Style({\n        geometry: new Point(coord),\n        image: new CircleStyle({\n          radius: 6,\n          fill: new Fill({ color: 'limegreen' }),\n          stroke: new Stroke({ color: 'white', width: 2 }),\n        }),\n      })\n    );\n  });\n  return styles;\n};\n\nconst ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({ color: 'rgba(0,0,255,0.2)' }),\n    stroke: new Stroke({ color: 'blue', width: 2 }),\n  }),\n});\n\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);      // overlays for current drawing\n  const allOverlaysRef = useRef([]);   // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    mapRef.current = map;\n\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n      });\n      overlaysRef.current = [];\n    }\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + \"'\";\n    }\n\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\n        ];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n\n    // --- Remark segments for a given feature ---\n    function remarkPolygonSegments(feature) {\n      clearCurrentOverlays();\n      if (!feature) return;\n      const poly = feature.getGeometry();\n      const coords = poly.getCoordinates()[0];\n      const DIM_OFFSET = 17;\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\n        const offsetMidPixel = [\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\n        ];\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays([coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(coords);\n        }\n      }\n      // No manual selection logic here anymore!\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(coords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z') &&\n        drawingRef.current &&\n        modeRef.current === 'draw'\n      ) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = remarkPolygonSegments;\n\n    // Clean up on unmount\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      // Remove select interaction if present\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n    // eslint-disable-next-line\n  }, []); // Only run once on mount\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select interaction if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      // Add OpenLayers Select interaction\n      const select = new Select({\n        layers: [map.getLayers().item(1)], // Only vectorLayer\n        style: selectedPolygonStyle\n        // filter: feature => feature.getGeometry() instanceof Polygon,\n      });\n      select.on('select', e => {\n        // Only allow single selection\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      // Remove selection style if switching out of select mode\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n  }, [mode]);\n\n  // --- Polygon flipping functions ---\n  function flipPolygonHorizontally(feature) {\n    const geom = feature.getGeometry();\n    if (!(geom instanceof Polygon)) return;\n    const coords = geom.getCoordinates()[0];\n    const xs = coords.map(c => c[0]);\n    const axis = (Math.min(...xs) + Math.max(...xs)) / 2;\n    const flipped = coords.map(([x, y]) => [axis - (x - axis), y]);\n    // Ensure polygon is closed\n    if (\n      flipped.length > 1 &&\n      (flipped[0][0] !== flipped[flipped.length - 1][0] ||\n        flipped[0][1] !== flipped[flipped.length - 1][1])\n    ) {\n      flipped[flipped.length - 1] = [...flipped[0]];\n    }\n    geom.setCoordinates([flipped]);\n    // Remeasure segments after flipping\n    if (mapRef.current && mapRef.current.remarkPolygonSegments) {\n      mapRef.current.remarkPolygonSegments(feature);\n    }\n  }\n\n  function flipPolygonVertically(feature) {\n    const geom = feature.getGeometry();\n    if (!(geom instanceof Polygon)) return;\n    const coords = geom.getCoordinates()[0];\n    const ys = coords.map(c => c[1]);\n    const axis = (Math.min(...ys) + Math.max(...ys)) / 2;\n    const flipped = coords.map(([x, y]) => [x, axis - (y - axis)]);\n    // Ensure polygon is closed\n    if (\n      flipped.length > 1 &&\n      (flipped[0][0] !== flipped[flipped.length - 1][0] ||\n        flipped[0][1] !== flipped[flipped.length - 1][1])\n    ) {\n      flipped[flipped.length - 1] = [...flipped[0]];\n    }\n    geom.setCoordinates([flipped]);\n    // Remeasure segments after flipping\n    if (mapRef.current && mapRef.current.remarkPolygonSegments) {\n      mapRef.current.remarkPolygonSegments(feature);\n    }\n  }\n\n  // --- Button handlers ---\n  function handleFlipHoriz() {\n    if (selectedFeature) {\n      flipPolygonHorizontally(selectedFeature);\n    }\n  }\n  function handleFlipVert() {\n    if (selectedFeature) {\n      flipPolygonVertically(selectedFeature);\n    }\n  }\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <div className=\"map-button\" onClick={handleFlipHoriz}>FlipHoriz</div>\n        <div className=\"map-button\" onClick={handleFlipVert}>FlipVert</div>\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}