{"ast":null,"code":"/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { ceil, clamp, floor } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { intersectsLinearRing } from '../geom/flat/intersectsextent.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nvar tmpTileCoord = [0, 0, 0];\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nvar DECIMALS = 5;\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nvar TileGrid = /** @class */function () {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  function TileGrid(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(isSorted(this.resolutions_, function (a, b) {\n      return b - a;\n    }, true), 17); // `resolutions` must be sorted in descending order\n    // check if we've got a consistent zoom factor and origin\n    var zoomFactor;\n    if (!options.origins) {\n      for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n    var extent = options.extent;\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n    assert(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 18); // Either `origin` or `origins` must be configured, never both\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n    assert(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 22); // Either `tileSize` or `tileSizes` must be configured, never both\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n        if (extent) {\n          var restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {\n    var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {\n    var tileRange, x, y;\n    var tileCoordExtent = null;\n    var z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    }\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  };\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  TileGrid.prototype.getExtent = function () {\n    return this.extent_;\n  };\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  TileGrid.prototype.getMaxZoom = function () {\n    return this.maxZoom;\n  };\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  TileGrid.prototype.getMinZoom = function () {\n    return this.minZoom;\n  };\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  TileGrid.prototype.getOrigin = function (z) {\n    if (this.origin_) {\n      return this.origin_;\n    } else {\n      return this.origins_[z];\n    }\n  };\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  TileGrid.prototype.getResolution = function (z) {\n    return this.resolutions_[z];\n  };\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  TileGrid.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        var minX = tileCoord[1] * 2;\n        var minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\n      }\n      var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent || this.tmpExtent_);\n      return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\n    }\n    return null;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  TileGrid.prototype.getTileRangeForTileCoordAndZ = function (tileCoord, z, opt_tileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n    var tileCoordZ = tileCoord[0];\n    var tileCoordX = tileCoord[1];\n    var tileCoordY = tileCoord[2];\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(tileCoordX, tileCoordY, tileCoordX, tileCoordY, opt_tileRange);\n    }\n    if (this.zoomFactor_) {\n      var factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      var minX = Math.floor(tileCoordX * factor);\n      var minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, opt_tileRange);\n      }\n      var maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      var maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, opt_tileRange);\n    }\n    var tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n  };\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {\n    var tileCoord = tmpTileCoord;\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n    var minX = tileCoord[1];\n    var minY = tileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n    return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  TileGrid.prototype.getTileCoordCenter = function (tileCoord) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution, origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution];\n  };\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    var maxX = minX + tileSize[0] * resolution;\n    var maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n  };\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n    var z = this.getZForResolution(resolution);\n    var scale = resolution / this.getResolution(z);\n    var origin = this.getOrigin(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var tileCoordX = scale * (x - origin[0]) / resolution / tileSize[0];\n    var tileCoordY = scale * (origin[1] - y) / resolution / tileSize[1];\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    var tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  TileGrid.prototype.getTileCoordResolution = function (tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  };\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  TileGrid.prototype.getTileSize = function (z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    } else {\n      return this.tileSizes_[z];\n    }\n  };\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n  TileGrid.prototype.getFullTileRange = function (z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_ ? this.getTileRangeForExtentAndZ(this.extent_, z) : null;\n    } else {\n      return this.fullTileRanges_[z];\n    }\n  };\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n  TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {\n    var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n    return clamp(z, this.minZoom, this.maxZoom);\n  };\n  /**\n   * The tile with the provided tile coordinate intersects the given viewport.\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n   */\n  TileGrid.prototype.tileCoordIntersectsViewport = function (tileCoord, viewport) {\n    return intersectsLinearRing(viewport, 0, viewport.length, 2, this.getTileCoordExtent(tileCoord));\n  };\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  TileGrid.prototype.calculateTileRanges_ = function (extent) {\n    var length = this.resolutions_.length;\n    var fullTileRanges = new Array(length);\n    for (var z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  };\n  return TileGrid;\n}();\nexport default TileGrid;","map":{"version":3,"names":["TileRange","createOrUpdate","createOrUpdateTileRange","DEFAULT_TILE_SIZE","assert","ceil","clamp","floor","getTopLeft","createOrUpdateTileCoord","intersectsLinearRing","isSorted","linearFindNearest","toSize","tmpTileCoord","DECIMALS","TileGrid","options","minZoom","undefined","resolutions_","resolutions","a","b","zoomFactor","origins","i","ii","length","zoomFactor_","maxZoom","origin_","origin","origins_","extent","tileSizes_","tileSizes","tileSize_","tileSize","extent_","fullTileRanges_","tmpSize_","tmpExtent_","sizes","map","size","z","tileRange","Math","min","max","restrictedTileRange","getTileRangeForExtentAndZ","minX","maxX","minY","maxY","calculateTileRanges_","prototype","forEachTileCoord","zoom","callback","j","jj","forEachTileCoordParentTileRange","tileCoord","opt_tileRange","opt_extent","x","y","tileCoordExtent","getTileCoordExtent","getExtent","getMaxZoom","getMinZoom","getOrigin","getResolution","getResolutions","getTileCoordChildTileRange","getTileRangeForTileCoordAndZ","tileCoordZ","tileCoordX","tileCoordY","factor","pow","getTileRangeExtent","resolution","getTileSize","getTileCoordForXYAndZ_","getTileCoordCenter","getTileCoordForCoordAndResolution","coordinate","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getZForResolution","scale","getTileCoordForCoordAndZ","getTileCoordResolution","getFullTileRange","opt_direction","tileCoordIntersectsViewport","viewport","fullTileRanges","Array"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\tilegrid\\TileGrid.js"],"sourcesContent":["/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, {\n  createOrUpdate as createOrUpdateTileRange,\n} from '../TileRange.js';\nimport {DEFAULT_TILE_SIZE} from './common.js';\nimport {assert} from '../asserts.js';\nimport {ceil, clamp, floor} from '../math.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\nimport {intersectsLinearRing} from '../geom/flat/intersectsextent.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {toSize} from '../size.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\n * Number of decimal digits to consider in integer values when rounding.\n * @type {number}\n */\nconst DECIMALS = 5;\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nclass TileGrid {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  constructor(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(\n      isSorted(\n        this.resolutions_,\n        function (a, b) {\n          return b - a;\n        },\n        true\n      ),\n      17\n    ); // `resolutions` must be sorted in descending order\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate|null}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    const extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n      18\n    ); // Either `origin` or `origins` must be configured, never both\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ =\n      options.tileSize !== undefined\n        ? options.tileSize\n        : !this.tileSizes_\n        ? DEFAULT_TILE_SIZE\n        : null;\n    assert(\n      (!this.tileSize_ && this.tileSizes_) ||\n        (this.tileSize_ && !this.tileSizes_),\n      22\n    ); // Either `tileSize` or `tileSizes` must be configured, never both\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = [0, 0, 0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        const tileRange = new TileRange(\n          Math.min(0, size[0]),\n          Math.max(size[0] - 1, -1),\n          Math.min(0, size[1]),\n          Math.max(size[1] - 1, -1)\n        );\n        if (extent) {\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\n        }\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  forEachTileCoordParentTileRange(\n    tileCoord,\n    callback,\n    opt_tileRange,\n    opt_extent\n  ) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    }\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(\n          tileCoordExtent,\n          z,\n          opt_tileRange\n        );\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    } else {\n      return this.origins_[z];\n    }\n  }\n\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileCoordChildTileRange(tileCoord, opt_tileRange, opt_extent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(\n          minX,\n          minX + 1,\n          minY,\n          minY + 1,\n          opt_tileRange\n        );\n      }\n      const tileCoordExtent = this.getTileCoordExtent(\n        tileCoord,\n        opt_extent || this.tmpExtent_\n      );\n      return this.getTileRangeForExtentAndZ(\n        tileCoordExtent,\n        tileCoord[0] + 1,\n        opt_tileRange\n      );\n    }\n    return null;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary import(\"../TileRange.js\").default object.\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\n   */\n  getTileRangeForTileCoordAndZ(tileCoord, z, opt_tileRange) {\n    if (z > this.maxZoom || z < this.minZoom) {\n      return null;\n    }\n\n    const tileCoordZ = tileCoord[0];\n    const tileCoordX = tileCoord[1];\n    const tileCoordY = tileCoord[2];\n\n    if (z === tileCoordZ) {\n      return createOrUpdateTileRange(\n        tileCoordX,\n        tileCoordY,\n        tileCoordX,\n        tileCoordY,\n        opt_tileRange\n      );\n    }\n\n    if (this.zoomFactor_) {\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\n      const minX = Math.floor(tileCoordX * factor);\n      const minY = Math.floor(tileCoordY * factor);\n      if (z < tileCoordZ) {\n        return createOrUpdateTileRange(minX, minX, minY, minY, opt_tileRange);\n      }\n\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, opt_tileRange);\n    }\n\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n  }\n\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getTileRangeExtent(z, tileRange, opt_extent) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  }\n\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} [opt_tileRange] Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForExtentAndZ(extent, z, opt_tileRange) {\n    const tileCoord = tmpTileCoord;\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n    const minX = tileCoord[1];\n    const minY = tileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n    return createOrUpdateTileRange(\n      minX,\n      tileCoord[1],\n      minY,\n      tileCoord[2],\n      opt_tileRange\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n    ];\n  }\n\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getTileCoordExtent(tileCoord, opt_extent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  }\n\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(\n      coordinate[0],\n      coordinate[1],\n      resolution,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndResolution_(\n    x,\n    y,\n    resolution,\n    reverseIntersectionPolicy,\n    opt_tileCoord\n  ) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\n    } else {\n      tileCoordX = floor(tileCoordX, DECIMALS);\n      tileCoordY = floor(tileCoordY, DECIMALS);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(\n      coordinate[0],\n      coordinate[1],\n      z,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    } else {\n      return this.tileSizes_[z];\n    }\n  }\n\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return this.extent_\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\n        : null;\n    } else {\n      return this.fullTileRanges_[z];\n    }\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\n   *     If 0, the nearest resolution will be used.\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\n   *\n   * For example to change tile Z at the midpoint of zoom levels\n   * ```js\n   * function(value, high, low) {\n   *   return value - low * Math.sqrt(high / low);\n   * }\n   * ```\n   * @return {number} Z.\n   * @api\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(\n      this.resolutions_,\n      resolution,\n      opt_direction || 0\n    );\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\n   * The tile with the provided tile coordinate intersects the given viewport.\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\n   */\n  tileCoordIntersectsViewport(tileCoord, viewport) {\n    return intersectsLinearRing(\n      viewport,\n      0,\n      viewport.length,\n      2,\n      this.getTileCoordExtent(tileCoord)\n    );\n  }\n\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\n\nexport default TileGrid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}