{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport { /*always,*/primaryAction } from 'ol/events/condition';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle, closingSegmentStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, pointToSegmentDistance } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 1.524;\n\n// Helper to compare coordinates\nfunction coordsEqual(a, b) {\n  return a && b && a.length === b.length && a.every((v, i) => Math.abs(v - b[i]) < 1e-8);\n}\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n  const closingSegmentRef = useRef(null);\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n\n  // Helper to update or remove the closing segment visual\n  function updateClosingSegment() {\n    // Only show when drawing a Polygon and not closed\n    if (!drawingRef.current || !polygonFeatureRef.current) {\n      if (closingSegmentRef.current) {\n        vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n        closingSegmentRef.current = null;\n      }\n      return;\n    }\n    const feature = polygonFeatureRef.current;\n    const geom = feature.getGeometry();\n    if (!geom || geom.getType() !== 'Polygon') return;\n    const coords = geom.getCoordinates()[0];\n    if (coords.length < 2) {\n      if (closingSegmentRef.current) {\n        vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n        closingSegmentRef.current = null;\n      }\n      return;\n    }\n    // If already closed, remove\n    if (coords.length > 2 && coords[0][0] === coords[coords.length - 1][0] && coords[0][1] === coords[coords.length - 1][1]) {\n      if (closingSegmentRef.current) {\n        vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n        closingSegmentRef.current = null;\n      }\n      return;\n    }\n    // Draw segment from last to first\n    const closingLine = new Feature(new LineString([coords[coords.length - 2], coords[0]]));\n    closingLine.setStyle(closingSegmentStyle);\n    if (closingSegmentRef.current) {\n      vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n    }\n    vectorSourceRef.current.addFeature(closingLine);\n    closingSegmentRef.current = closingLine;\n  }\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n    return closestCoord;\n  }\n  useEffect(() => {\n    var _vectorSourceRef$curr, _vectorSourceRef$curr2;\n    const allFeatures = ((_vectorSourceRef$curr = vectorSourceRef.current) === null || _vectorSourceRef$curr === void 0 ? void 0 : (_vectorSourceRef$curr2 = _vectorSourceRef$curr.getFeatures) === null || _vectorSourceRef$curr2 === void 0 ? void 0 : _vectorSourceRef$curr2.call(_vectorSourceRef$curr)) || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    map.addControl(new Rotate({\n      autoHide: false,\n      duration: 500\n    }));\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else /* if (modeRef.current === 'select')*/{\n          highlightSource.clear();\n          let found = false;\n          map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n            if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n              const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n\n              // Check for vertex hover first\n              for (let i = 0; i < coords.length; i++) {\n                const pixel = map.getPixelFromCoordinate(coords[i]);\n                const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n                if (dist < 8) {\n                  // 8 pixels tolerance for vertex\n                  const vertexFeature = new Feature(new Point(coords[i]));\n                  vertexFeature.setStyle(highlightVertexStyle);\n                  highlightSource.addFeature(vertexFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n\n              // If no vertex found, check for segment hover\n              for (let i = 0; i < coords.length - 1; i++) {\n                const seg = [coords[i], coords[i + 1]];\n                const pixel1 = map.getPixelFromCoordinate(seg[0]);\n                const pixel2 = map.getPixelFromCoordinate(seg[1]);\n                const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n                if (dist < 8) {\n                  // 8 pixels tolerance for segment\n                  const segFeature = new Feature(new LineString(seg));\n                  segFeature.setStyle(highlightSegmentStyle);\n                  highlightSource.addFeature(segFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n            }\n            return found;\n          });\n        }\n    });\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n\n        // --- Minimal linestring-to-polygon conversion logic ---\n        let foundLine = null;\n        let foundLineCoords = null;\n        let foundLineFeatureId = null;\n        vectorSourceRef.current.getFeatures().forEach(f => {\n          const g = f.getGeometry();\n          if (g.getType() === 'LineString') {\n            const c = g.getCoordinates();\n            if (coordsEqual(snappedCoord, c[0]) || coordsEqual(snappedCoord, c[c.length - 1])) {\n              foundLine = f;\n              foundLineCoords = c;\n              foundLineFeatureId = f.getId();\n            }\n          }\n        });\n        if (foundLine) {\n          // Remove the LineString\n          vectorSourceRef.current.removeFeature(foundLine);\n          // Close the ring\n          const closed = [...foundLineCoords];\n          if (!coordsEqual(closed[0], closed[closed.length - 1])) closed.push(closed[0]);\n          const poly = new Polygon([closed]);\n          const feature = new Feature(poly);\n          if (foundLineFeatureId) feature.setId(foundLineFeatureId);\n          feature.setStyle(activePolygonStyle);\n          vectorSourceRef.current.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          setDrawing(true);\n          // Move the last point to the clicked vertex so the next input starts from there\n          let idx = 0;\n          if (coordsEqual(snappedCoord, closed[closed.length - 2])) {\n            idx = closed.length - 2;\n          } else if (coordsEqual(snappedCoord, closed[0])) {\n            idx = 0;\n          }\n          // Reorder so that the clicked vertex is the last before closing\n          if (idx !== closed.length - 2) {\n            const reordered = [...closed.slice(idx, closed.length - 1), ...closed.slice(0, idx), closed[idx] // close ring\n            ];\n            poly.setCoordinates([reordered]);\n          }\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: closed,\n            newCoords: poly.getCoordinates()[0]\n          });\n          return;\n        }\n        // ...existing code for normal polygon start...\n        const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]]\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateClosingSegment();\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n      }\n    }\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n      updateClosingSegment();\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        // if (lastAction.type === 'delete-segment') {\n        //   let lineFeature = vectorSourceRef.current.getFeatures().find(\n        //     f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n        //   );\n        //   if (lineFeature) {\n        //     clearPolygonOverlays(lineFeature, mapRef);\n        //     vectorSourceRef.current.removeFeature(lineFeature);\n        //   }\n        //   const newPoly = new Feature(new Polygon([prevCoords]));\n        //   if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n        //   vectorSourceRef.current.addFeature(newPoly);\n        //   polygonFeatureRef.current = newPoly;\n        //   if (prevCoords && prevCoords.length > 1) {\n        //     createSegmentOverlays(newPoly, mapRef);\n        //   }\n        //   return prev.slice(0, -1);\n        // }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          if (closingSegmentRef.current) {\n            vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n            closingSegmentRef.current = null;\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        // feature.getGeometry().setCoordinates([prevCoords]);\n        // if (prevCoords.length > 1) {\n        //   createSegmentOverlays(feature, mapRef);\n        // }\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n      const [start, end] = coords;\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n        const input = textRef.current.trim().toUpperCase();\n        let dx = 0,\n          dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R':\n                dx += meters;\n                break;\n              case 'L':\n                dx -= meters;\n                break;\n              case 'U':\n                dy += meters;\n                break;\n              case 'D':\n                dy -= meters;\n                break;\n              default:\n                break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, mapRef);\n          updateClosingSegment();\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords\n          });\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = angleDeg * Math.PI / 180 + rotation;\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n        updateClosingSegment();\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n      }\n      // ctrl + z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.key === 'R')) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    //set value to be used in 'Enter' calculations\n    textRef.current = text;\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      let translate = new Translate({\n        layers: [vectorLayerRef.current],\n        condition: primaryAction\n      });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Listen for translateend to track moves\n      translate.on('translateend', evt => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n        });\n      });\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', evt => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dimension-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"dimension-input\",\n        ref: inputRef,\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Dimension (ft.)\",\n        autoFocus: true,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 910,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 923,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 929,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 922,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 937,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 938,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Clone, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 939,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"history-toggle\",\n        className: `map-button${showHistory ? ' active' : ''}`,\n        onClick: () => setShowHistory(v => !v),\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 940,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 936,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 946,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 7\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 956,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 909,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"LN8de6+XnRtqI5NpboqfE+llLXQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","fromLonLat","ScaleLine","Rotate","Translate","primaryAction","History","FlipHorizButton","FlipVertButton","RightClick","Clone","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","closingSegmentStyle","clearPolygonOverlays","createSegmentOverlays","pointToSegmentDistance","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","coordsEqual","a","b","length","every","v","i","Math","abs","App","_s","text","setText","textRef","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","polygonFeatureRef","drawingRef","drawing","setDrawing","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","showHistory","setShowHistory","closingSegmentRef","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","getSource","clear","updateClosingSegment","removeFeature","geom","getGeometry","getType","coords","getCoordinates","closingLine","setStyle","addFeature","getSnappedCoordinate","map","vectorSource","pointerPixel","tolerance","closestCoord","minDist","Infinity","getFeatures","forEach","coord","pixel","getPixelFromCoordinate","dist","hypot","_vectorSourceRef$curr","_vectorSourceRef$curr2","allFeatures","call","f","vectorLayer","source","style","target","layers","view","center","zoom","addControl","units","autoHide","duration","highlightSource","name","addLayer","on","evt","coordinate","snappedCoord","ghost","found","forEachFeatureAtPixel","sqrt","pow","vertexFeature","seg","pixel1","pixel2","segFeature","drawClick","foundLine","foundLineCoords","foundLineFeatureId","g","c","getId","closed","push","poly","setId","idx","reordered","slice","setCoordinates","featureId","prevCoords","newCoords","Date","now","toString","console","log","selectClick","features","getFeaturesAtPixel","filter","includes","allPolygons","currentIdx","nextIdx","nextFeature","addSegment","direction","last","dx","dy","OFFSET","rotation","getView","getRotation","cos","sin","rotatedDx","rotatedDy","newPt","handleUndo","lastActionForRedo","lastAction","featureToRemove","restoredFeature","geomType","redoPrev","handleRedo","require","default","lineFeature","remarkLineSegments","histPrev","rotateMapToHighlightedSegment","start","end","currentRotation","startPixel","endPixel","unrotatedDx","unrotatedDy","angle","atan2","PI","animate","handleKeyDown","e","key","preventDefault","input","trim","toUpperCase","dirPattern","test","parts","split","s","part","dir","val","parseFloat","isNaN","meters","distance","angleDeg","distStr","angleStr","angleRad","dx2","dy2","ctrlKey","metaKey","document","addEventListener","setTarget","removeEventListener","removeInteraction","translate","condition","addInteraction","set","children","id","ref","value","onChange","placeholder","autoFocus","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport { /*always,*/  primaryAction } from 'ol/events/condition';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle,\n  closingSegmentStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 1.524;\n\n// Helper to compare coordinates\nfunction coordsEqual(a, b) {\n  return a && b && a.length === b.length && a.every((v, i) => Math.abs(v - b[i]) < 1e-8);\n}\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n  const closingSegmentRef = useRef(null);\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n\n  // Helper to update or remove the closing segment visual\n  function updateClosingSegment() {\n    // Only show when drawing a Polygon and not closed\n    if (!drawingRef.current || !polygonFeatureRef.current) {\n      if (closingSegmentRef.current) {\n        vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n        closingSegmentRef.current = null;\n      }\n      return;\n    }\n    const feature = polygonFeatureRef.current;\n    const geom = feature.getGeometry();\n    if (!geom || geom.getType() !== 'Polygon') return;\n    const coords = geom.getCoordinates()[0];\n    if (coords.length < 2) {\n      if (closingSegmentRef.current) {\n        vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n        closingSegmentRef.current = null;\n      }\n      return;\n    }\n    // If already closed, remove\n    if (coords.length > 2 && coords[0][0] === coords[coords.length - 1][0] && coords[0][1] === coords[coords.length - 1][1]) {\n      if (closingSegmentRef.current) {\n        vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n        closingSegmentRef.current = null;\n      }\n      return;\n    }\n    // Draw segment from last to first\n    const closingLine = new Feature(new LineString([coords[coords.length - 2], coords[0]]));\n    closingLine.setStyle(closingSegmentStyle);\n    if (closingSegmentRef.current) {\n      vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n    }\n    vectorSourceRef.current.addFeature(closingLine);\n    closingSegmentRef.current = closingLine;\n  }\n\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n\n    return closestCoord;\n  }\n\n  useEffect(() => {\n    const allFeatures = vectorSourceRef.current?.getFeatures?.() || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    map.addControl(new Rotate({ autoHide: false, duration: 500 }));\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else/* if (modeRef.current === 'select')*/ {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n\n        // --- Minimal linestring-to-polygon conversion logic ---\n        let foundLine = null;\n        let foundLineCoords = null;\n        let foundLineFeatureId = null;\n        vectorSourceRef.current.getFeatures().forEach(f => {\n          const g = f.getGeometry();\n          if (g.getType() === 'LineString') {\n            const c = g.getCoordinates();\n            if (coordsEqual(snappedCoord, c[0]) || coordsEqual(snappedCoord, c[c.length - 1])) {\n              foundLine = f;\n              foundLineCoords = c;\n              foundLineFeatureId = f.getId();\n            }\n          }\n        });\n        if (foundLine) {\n          // Remove the LineString\n          vectorSourceRef.current.removeFeature(foundLine);\n          // Close the ring\n          const closed = [...foundLineCoords];\n          if (!coordsEqual(closed[0], closed[closed.length - 1])) closed.push(closed[0]);\n          const poly = new Polygon([closed]);\n          const feature = new Feature(poly);\n          if (foundLineFeatureId) feature.setId(foundLineFeatureId);\n          feature.setStyle(activePolygonStyle);\n          vectorSourceRef.current.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          setDrawing(true);\n          // Move the last point to the clicked vertex so the next input starts from there\n          let idx = 0;\n          if (coordsEqual(snappedCoord, closed[closed.length - 2])) {\n            idx = closed.length - 2;\n          } else if (coordsEqual(snappedCoord, closed[0])) {\n            idx = 0;\n          }\n          // Reorder so that the clicked vertex is the last before closing\n          if (idx !== closed.length - 2) {\n            const reordered = [\n              ...closed.slice(idx, closed.length - 1),\n              ...closed.slice(0, idx),\n              closed[idx], // close ring\n            ];\n            poly.setCoordinates([reordered]);\n          }\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: closed,\n            newCoords: poly.getCoordinates()[0],\n          });\n          return;\n        }\n        // ...existing code for normal polygon start...\n        const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]],\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateClosingSegment();\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n      }\n    }\n\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n      updateClosingSegment();\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        // if (lastAction.type === 'delete-segment') {\n        //   let lineFeature = vectorSourceRef.current.getFeatures().find(\n        //     f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n        //   );\n        //   if (lineFeature) {\n        //     clearPolygonOverlays(lineFeature, mapRef);\n        //     vectorSourceRef.current.removeFeature(lineFeature);\n        //   }\n        //   const newPoly = new Feature(new Polygon([prevCoords]));\n        //   if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n        //   vectorSourceRef.current.addFeature(newPoly);\n        //   polygonFeatureRef.current = newPoly;\n        //   if (prevCoords && prevCoords.length > 1) {\n        //     createSegmentOverlays(newPoly, mapRef);\n        //   }\n        //   return prev.slice(0, -1);\n        // }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          if (closingSegmentRef.current) {\n            vectorSourceRef.current.removeFeature(closingSegmentRef.current);\n            closingSegmentRef.current = null;\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        // feature.getGeometry().setCoordinates([prevCoords]);\n        // if (prevCoords.length > 1) {\n        //   createSegmentOverlays(feature, mapRef);\n        // }\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [\n        (start[0] + end[0]) / 2,\n        (start[1] + end[1]) / 2\n      ];\n\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n        const input = textRef.current.trim().toUpperCase();\n\n        let dx = 0, dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R': dx += meters; break;\n              case 'L': dx -= meters; break;\n              case 'U': dy += meters; break;\n              case 'D': dy -= meters; break;\n              default: break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, mapRef);\n          updateClosingSegment();\n\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords,\n          });\n\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = (angleDeg * Math.PI) / 180 + rotation;\n\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n        updateClosingSegment();\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    //set value to be used in 'Enter' calculations\n    textRef.current = text;\n\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      let translate = new Translate({ layers: [vectorLayerRef.current], condition: primaryAction });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Listen for translateend to track moves\n      translate.on('translateend', (evt) => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords,\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n\n        });\n      });\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', (evt) => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  return (\n    <div>\n      <div id=\"dimension-input-container\">\n        <input\n          id=\"dimension-input\"\n          ref={inputRef}\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n          placeholder=\"Dimension (ft.)\"\n          autoFocus\n          autoComplete='off'\n        />\n      </div>\n      <div id=\"map-menu-vert\">\n        <button\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n          disabled={mode === 'draw' && drawing}>\n          Draw\n        </button>\n        <button\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n          disabled={mode === 'draw' && drawing}>\n          Select\n        </button>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <Clone selectedFeature={selectedFeature} vectorSourceRef={vectorSourceRef} setSelectedFeature={setSelectedFeature} addHistoryAction={addHistoryAction} mapRef={mapRef} />\n        <div id=\"history-toggle\" className={`map-button${showHistory ? ' active' : ''}`} onClick={() => setShowHistory(v => !v)}>\n          History\n        </div>\n        {/* <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div> */}\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n      />\n      {showHistory && (\n        <History history={history} redoStack={redoStack} />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}