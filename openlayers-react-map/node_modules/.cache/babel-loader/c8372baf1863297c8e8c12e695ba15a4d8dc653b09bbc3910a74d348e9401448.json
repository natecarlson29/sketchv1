{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\map-actions\\\\FlipVertical.jsx\";\nimport React from 'react';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\n\n// Helper to clear overlays for a specific feature\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction clearPolygonOverlays(feature, mapRef) {\n  if (feature && feature._segmentOverlays) {\n    feature._segmentOverlays.forEach(overlay => {\n      if (mapRef.current) mapRef.current.removeOverlay(overlay);\n    });\n    feature._segmentOverlays = [];\n  }\n}\n\n// Flip vertically and remark segments/lines\nfunction flipFeatureVertically(feature, mapRef) {\n  clearPolygonOverlays(feature, mapRef);\n  const geom = feature.getGeometry();\n  let coords, ys, axis, flipped;\n  if (geom instanceof Polygon) {\n    coords = geom.getCoordinates()[0];\n    ys = coords.map(c => c[1]);\n    axis = (Math.min(...ys) + Math.max(...ys)) / 2;\n    flipped = coords.map(([x, y]) => [x, axis - (y - axis)]);\n    // Ensure closed ring for polygons\n    if (flipped.length > 1 && (flipped[0][0] !== flipped[flipped.length - 1][0] || flipped[0][1] !== flipped[flipped.length - 1][1])) {\n      flipped[flipped.length - 1] = [...flipped[0]];\n    }\n    geom.setCoordinates([flipped]);\n    // Remark polygon segments\n    if (mapRef.current && mapRef.current.remarkPolygonSegments) {\n      mapRef.current.remarkPolygonSegments(feature);\n    }\n  } else if (geom instanceof LineString) {\n    coords = geom.getCoordinates();\n    ys = coords.map(c => c[1]);\n    axis = (Math.min(...ys) + Math.max(...ys)) / 2;\n    flipped = coords.map(([x, y]) => [x, axis - (y - axis)]);\n    geom.setCoordinates(flipped);\n    // Remark line segments\n    if (mapRef.current && mapRef.current.remarkLineSegments) {\n      // Clear overlays for linestrings as well\n      clearPolygonOverlays(feature, mapRef);\n      mapRef.current.remarkLineSegments(feature);\n    }\n  }\n}\nexport default function FlipVertButton({\n  selectedFeature,\n  mapRef\n}) {\n  function handleFlipVert() {\n    if (selectedFeature) {\n      flipFeatureVertically(selectedFeature, mapRef);\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-button\",\n    onClick: handleFlipVert,\n    children: \"FlipVert\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_c = FlipVertButton;\nvar _c;\n$RefreshReg$(_c, \"FlipVertButton\");","map":{"version":3,"names":["React","Polygon","LineString","jsxDEV","_jsxDEV","clearPolygonOverlays","feature","mapRef","_segmentOverlays","forEach","overlay","current","removeOverlay","flipFeatureVertically","geom","getGeometry","coords","ys","axis","flipped","getCoordinates","map","c","Math","min","max","x","y","length","setCoordinates","remarkPolygonSegments","remarkLineSegments","FlipVertButton","selectedFeature","handleFlipVert","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/map-actions/FlipVertical.jsx"],"sourcesContent":["import React from 'react';\r\nimport Polygon from 'ol/geom/Polygon';\r\nimport LineString from 'ol/geom/LineString';\r\n\r\n// Helper to clear overlays for a specific feature\r\nfunction clearPolygonOverlays(feature, mapRef) {\r\n  if (feature && feature._segmentOverlays) {\r\n    feature._segmentOverlays.forEach(overlay => {\r\n      if (mapRef.current) mapRef.current.removeOverlay(overlay);\r\n    });\r\n    feature._segmentOverlays = [];\r\n  }\r\n}\r\n\r\n// Flip vertically and remark segments/lines\r\nfunction flipFeatureVertically(feature, mapRef) {\r\n  clearPolygonOverlays(feature, mapRef);\r\n  const geom = feature.getGeometry();\r\n  let coords, ys, axis, flipped;\r\n\r\n  if (geom instanceof Polygon) {\r\n    coords = geom.getCoordinates()[0];\r\n    ys = coords.map(c => c[1]);\r\n    axis = (Math.min(...ys) + Math.max(...ys)) / 2;\r\n    flipped = coords.map(([x, y]) => [x, axis - (y - axis)]);\r\n    // Ensure closed ring for polygons\r\n    if (\r\n      flipped.length > 1 &&\r\n      (flipped[0][0] !== flipped[flipped.length - 1][0] ||\r\n        flipped[0][1] !== flipped[flipped.length - 1][1])\r\n    ) {\r\n      flipped[flipped.length - 1] = [...flipped[0]];\r\n    }\r\n    geom.setCoordinates([flipped]);\r\n    // Remark polygon segments\r\n    if (mapRef.current && mapRef.current.remarkPolygonSegments) {\r\n      mapRef.current.remarkPolygonSegments(feature);\r\n    }\r\n  } else if (geom instanceof LineString) {\r\n    coords = geom.getCoordinates();\r\n    ys = coords.map(c => c[1]);\r\n    axis = (Math.min(...ys) + Math.max(...ys)) / 2;\r\n    flipped = coords.map(([x, y]) => [x, axis - (y - axis)]);\r\n    geom.setCoordinates(flipped);\r\n    // Remark line segments\r\n    if (mapRef.current && mapRef.current.remarkLineSegments) {\r\n      // Clear overlays for linestrings as well\r\n      clearPolygonOverlays(feature, mapRef);\r\n      mapRef.current.remarkLineSegments(feature);\r\n    }\r\n  }\r\n}\r\n\r\nexport default function FlipVertButton({ selectedFeature, mapRef }) {\r\n  function handleFlipVert() {\r\n    if (selectedFeature) {\r\n      flipFeatureVertically(selectedFeature, mapRef);\r\n    }\r\n  }\r\n  return (\r\n    <div className=\"map-button\" onClick={handleFlipVert}>\r\n      FlipVert\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}