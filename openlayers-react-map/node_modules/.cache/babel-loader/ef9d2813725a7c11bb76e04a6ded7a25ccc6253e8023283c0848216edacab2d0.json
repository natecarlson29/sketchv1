{"ast":null,"code":"/**\n * @module ol/control/MousePosition\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Control from './Control.js';\nimport EventType from '../pointer/EventType.js';\nimport { get as getProjection, getTransformFromProjections, getUserProjection, identityTransform } from '../proj.js';\nimport { listen } from '../events.js';\n/**\n * @type {string}\n */\nvar PROJECTION = 'projection';\n/**\n * @type {string}\n */\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string|boolean} [placeholder] Markup to show when the mouse position is not\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space\n * is rendered when the mouse leaves the viewport.  To render something else, provide a string\n * to be used as the text content (e.g. 'no position' or '' for an empty string).  Set the placeholder\n * to `false` to retain the last position when the mouse leaves the viewport.  In a future release, this\n * will be the default behavior.\n * @property {string} [undefinedHTML='&#160;'] This option is deprecated.  Use the `placeholder` option instead.\n */\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nvar MousePosition = /** @class */function (_super) {\n  __extends(MousePosition, _super);\n  /**\n   * @param {Options} [opt_options] Mouse position options.\n   */\n  function MousePosition(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n    _this = _super.call(this, {\n      element: element,\n      render: options.render,\n      target: options.target\n    }) || this;\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {MousePositionOnSignature<void>}\n     */\n    _this.un;\n    _this.addChangeListener(PROJECTION, _this.handleProjectionChanged_);\n    if (options.coordinateFormat) {\n      _this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      _this.setProjection(options.projection);\n    }\n    /**\n     * Change this to `false` when removing the deprecated `undefinedHTML` option.\n     * @type {boolean}\n     */\n    var renderOnMouseOut = true;\n    /**\n     * @type {string}\n     */\n    var placeholder = '&#160;';\n    if ('undefinedHTML' in options) {\n      // deprecated behavior\n      if (options.undefinedHTML !== undefined) {\n        placeholder = options.undefinedHTML;\n      }\n      renderOnMouseOut = !!placeholder;\n    } else if ('placeholder' in options) {\n      if (options.placeholder === false) {\n        renderOnMouseOut = false;\n      } else {\n        placeholder = String(options.placeholder);\n      }\n    }\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.placeholder_ = placeholder;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderOnMouseOut_ = renderOnMouseOut;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.renderedHTML_ = element.innerHTML;\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n    _this.mapProjection_ = null;\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    _this.transform_ = null;\n    return _this;\n  }\n  /**\n   * @private\n   */\n  MousePosition.prototype.handleProjectionChanged_ = function () {\n    this.transform_ = null;\n  };\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.getCoordinateFormat = function () {\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */this.get(COORDINATE_FORMAT);\n  };\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.getProjection = function () {\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */this.get(PROJECTION);\n  };\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n  MousePosition.prototype.handleMouseMove = function (event) {\n    var map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  };\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  MousePosition.prototype.handleMouseOut = function (event) {\n    this.updateHTML_(null);\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  MousePosition.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n    if (map) {\n      var viewport = map.getViewport();\n      this.listenerKeys.push(listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this));\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this));\n      }\n      this.updateHTML_(null);\n    }\n  };\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.setCoordinateFormat = function (format) {\n    this.set(COORDINATE_FORMAT, format);\n  };\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.setProjection = function (projection) {\n    this.set(PROJECTION, getProjection(projection));\n  };\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  MousePosition.prototype.updateHTML_ = function (pixel) {\n    var html = this.placeholder_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        var projection = this.getProjection();\n        if (projection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n      var map = this.getMap();\n      var coordinate = map.getCoordinateFromPixelInternal(pixel);\n      if (coordinate) {\n        var userProjection = getUserProjection();\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, userProjection);\n        }\n        this.transform_(coordinate, coordinate);\n        var coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  };\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  MousePosition.prototype.render = function (mapEvent) {\n    var frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  };\n  return MousePosition;\n}(Control);\nexport default MousePosition;","map":{"version":3,"names":["Control","EventType","get","getProjection","getTransformFromProjections","getUserProjection","identityTransform","listen","PROJECTION","COORDINATE_FORMAT","MousePosition","_super","__extends","opt_options","_this","options","element","document","createElement","className","undefined","call","render","target","on","once","un","addChangeListener","handleProjectionChanged_","coordinateFormat","setCoordinateFormat","projection","setProjection","renderOnMouseOut","placeholder","undefinedHTML","String","placeholder_","renderOnMouseOut_","renderedHTML_","innerHTML","mapProjection_","transform_","prototype","getCoordinateFormat","handleMouseMove","event","map","getMap","updateHTML_","getEventPixel","handleMouseOut","setMap","viewport","getViewport","listenerKeys","push","POINTERMOVE","POINTEROUT","format","set","pixel","html","coordinate","getCoordinateFromPixelInternal","userProjection","toString","mapEvent","frameState","viewState"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\control\\MousePosition.js"],"sourcesContent":["/**\n * @module ol/control/MousePosition\n */\n\nimport Control from './Control.js';\nimport EventType from '../pointer/EventType.js';\nimport {\n  get as getProjection,\n  getTransformFromProjections,\n  getUserProjection,\n  identityTransform,\n} from '../proj.js';\nimport {listen} from '../events.js';\n\n/**\n * @type {string}\n */\nconst PROJECTION = 'projection';\n\n/**\n * @type {string}\n */\nconst COORDINATE_FORMAT = 'coordinateFormat';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:coordinateFormat'|'change:projection', Return>} MousePositionOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string|boolean} [placeholder] Markup to show when the mouse position is not\n * available (e.g. when the pointer leaves the map viewport).  By default, a non-breaking space\n * is rendered when the mouse leaves the viewport.  To render something else, provide a string\n * to be used as the text content (e.g. 'no position' or '' for an empty string).  Set the placeholder\n * to `false` to retain the last position when the mouse leaves the viewport.  In a future release, this\n * will be the default behavior.\n * @property {string} [undefinedHTML='&#160;'] This option is deprecated.  Use the `placeholder` option instead.\n */\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nclass MousePosition extends Control {\n  /**\n   * @param {Options} [opt_options] Mouse position options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const element = document.createElement('div');\n    element.className =\n      options.className !== undefined ? options.className : 'ol-mouse-position';\n\n    super({\n      element: element,\n      render: options.render,\n      target: options.target,\n    });\n\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {MousePositionOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {MousePositionOnSignature<void>}\n     */\n    this.un;\n\n    this.addChangeListener(PROJECTION, this.handleProjectionChanged_);\n\n    if (options.coordinateFormat) {\n      this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      this.setProjection(options.projection);\n    }\n\n    /**\n     * Change this to `false` when removing the deprecated `undefinedHTML` option.\n     * @type {boolean}\n     */\n    let renderOnMouseOut = true;\n\n    /**\n     * @type {string}\n     */\n    let placeholder = '&#160;';\n\n    if ('undefinedHTML' in options) {\n      // deprecated behavior\n      if (options.undefinedHTML !== undefined) {\n        placeholder = options.undefinedHTML;\n      }\n      renderOnMouseOut = !!placeholder;\n    } else if ('placeholder' in options) {\n      if (options.placeholder === false) {\n        renderOnMouseOut = false;\n      } else {\n        placeholder = String(options.placeholder);\n      }\n    }\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.placeholder_ = placeholder;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderOnMouseOut_ = renderOnMouseOut;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = element.innerHTML;\n\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n    this.mapProjection_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    this.transform_ = null;\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    this.transform_ = null;\n  }\n\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  getCoordinateFormat() {\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (\n      this.get(COORDINATE_FORMAT)\n    );\n  }\n\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */ (\n      this.get(PROJECTION)\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n  handleMouseMove(event) {\n    const map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  }\n\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  handleMouseOut(event) {\n    this.updateHTML_(null);\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      const viewport = map.getViewport();\n      this.listenerKeys.push(\n        listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this)\n      );\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(\n          listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this)\n        );\n      }\n      this.updateHTML_(null);\n    }\n  }\n\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  setCoordinateFormat(format) {\n    this.set(COORDINATE_FORMAT, format);\n  }\n\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  updateHTML_(pixel) {\n    let html = this.placeholder_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        const projection = this.getProjection();\n        if (projection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            projection\n          );\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n      const map = this.getMap();\n      const coordinate = map.getCoordinateFromPixelInternal(pixel);\n      if (coordinate) {\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            userProjection\n          );\n        }\n        this.transform_(coordinate, coordinate);\n        const coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  }\n\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  }\n}\n\nexport default MousePosition;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}