{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport { assign, isEmpty } from './obj.js';\nimport { getUid } from './util.js';\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nvar ObjectEvent = /** @class */function (_super) {\n  __extends(ObjectEvent, _super);\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  function ObjectEvent(type, key, oldValue) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    _this.key = key;\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    _this.oldValue = oldValue;\n    return _this;\n  }\n  return ObjectEvent;\n}(Event);\nexport { ObjectEvent };\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nvar BaseObject = /** @class */function (_super) {\n  __extends(BaseObject, _super);\n  /**\n   * @param {Object<string, *>} [opt_values] An object with key-value pairs.\n   */\n  function BaseObject(opt_values) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    _this.un;\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(_this);\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    _this.values_ = null;\n    if (opt_values !== undefined) {\n      _this.setProperties(opt_values);\n    }\n    return _this;\n  }\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  BaseObject.prototype.get = function (key) {\n    var value;\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  };\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  BaseObject.prototype.getKeys = function () {\n    return this.values_ && Object.keys(this.values_) || [];\n  };\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  BaseObject.prototype.getProperties = function () {\n    return this.values_ && assign({}, this.values_) || {};\n  };\n  /**\n   * @return {boolean} The object has properties.\n   */\n  BaseObject.prototype.hasProperties = function () {\n    return !!this.values_;\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  BaseObject.prototype.notify = function (key, oldValue) {\n    var eventType;\n    eventType = \"change:\".concat(key);\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  BaseObject.prototype.addChangeListener = function (key, listener) {\n    this.addEventListener(\"change:\".concat(key), listener);\n  };\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  BaseObject.prototype.removeChangeListener = function (key, listener) {\n    this.removeEventListener(\"change:\".concat(key), listener);\n  };\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.set = function (key, value, opt_silent) {\n    var values = this.values_ || (this.values_ = {});\n    if (opt_silent) {\n      values[key] = value;\n    } else {\n      var oldValue = values[key];\n      values[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.setProperties = function (values, opt_silent) {\n    for (var key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  };\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n  BaseObject.prototype.applyProperties = function (source) {\n    if (!source.values_) {\n      return;\n    }\n    assign(this.values_ || (this.values_ = {}), source.values_);\n  };\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [opt_silent] Unset without triggering an event.\n   * @api\n   */\n  BaseObject.prototype.unset = function (key, opt_silent) {\n    if (this.values_ && key in this.values_) {\n      var oldValue = this.values_[key];\n      delete this.values_[key];\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  };\n  return BaseObject;\n}(Observable);\nexport default BaseObject;","map":{"version":3,"names":["Event","ObjectEventType","Observable","assign","isEmpty","getUid","ObjectEvent","_super","__extends","type","key","oldValue","_this","call","BaseObject","opt_values","on","once","un","values_","undefined","setProperties","prototype","get","value","hasOwnProperty","getKeys","Object","keys","getProperties","hasProperties","notify","eventType","concat","hasListener","dispatchEvent","PROPERTYCHANGE","addChangeListener","listener","addEventListener","removeChangeListener","removeEventListener","set","opt_silent","values","applyProperties","source","unset"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\Object.js"],"sourcesContent":["/**\n * @module ol/Object\n */\nimport Event from './events/Event.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport Observable from './Observable.js';\nimport {assign, isEmpty} from './obj.js';\nimport {getUid} from './util.js';\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\n */\nexport class ObjectEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {string} key The property name.\n   * @param {*} oldValue The old value for `key`.\n   */\n  constructor(type, key, oldValue) {\n    super(type);\n\n    /**\n     * The name of the property whose value is changing.\n     * @type {string}\n     * @api\n     */\n    this.key = key;\n\n    /**\n     * The old value. To get the new value use `e.target.get(e.key)` where\n     * `e` is the event object.\n     * @type {*}\n     * @api\n     */\n    this.oldValue = oldValue;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./ObjectEventType\").Types, ObjectEvent, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|import(\"./ObjectEventType\").Types, Return>} ObjectOnSignature\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link module:ol/Observable~Observable} with observable\n * properties, where each property is observable as well as the object as a\n * whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link module:ol/Map~Map} has a `target` property, accessed with\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\n * settable. There are also general-purpose accessors `get()` and `set()`. For\n * example, `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link module:ol/View~View} has a\n * `center` property, so `view.on('change:center', function(evt) {...});` would\n * call the function whenever the value of the center property changes. Within\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\n * would return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @fires ObjectEvent\n * @api\n */\nclass BaseObject extends Observable {\n  /**\n   * @param {Object<string, *>} [opt_values] An object with key-value pairs.\n   */\n  constructor(opt_values) {\n    super();\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {ObjectOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {ObjectOnSignature<void>}\n     */\n    this.un;\n\n    // Call {@link module:ol/util.getUid} to ensure that the order of objects' ids is\n    // the same as the order in which they were created.  This also helps to\n    // ensure that object properties are always added in the same order, which\n    // helps many JavaScript engines generate faster code.\n    getUid(this);\n\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    this.values_ = null;\n\n    if (opt_values !== undefined) {\n      this.setProperties(opt_values);\n    }\n  }\n\n  /**\n   * Gets a value.\n   * @param {string} key Key name.\n   * @return {*} Value.\n   * @api\n   */\n  get(key) {\n    let value;\n    if (this.values_ && this.values_.hasOwnProperty(key)) {\n      value = this.values_[key];\n    }\n    return value;\n  }\n\n  /**\n   * Get a list of object property names.\n   * @return {Array<string>} List of property names.\n   * @api\n   */\n  getKeys() {\n    return (this.values_ && Object.keys(this.values_)) || [];\n  }\n\n  /**\n   * Get an object of all property names and values.\n   * @return {Object<string, *>} Object.\n   * @api\n   */\n  getProperties() {\n    return (this.values_ && assign({}, this.values_)) || {};\n  }\n\n  /**\n   * @return {boolean} The object has properties.\n   */\n  hasProperties() {\n    return !!this.values_;\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {*} oldValue Old value.\n   */\n  notify(key, oldValue) {\n    let eventType;\n    eventType = `change:${key}`;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n    eventType = ObjectEventType.PROPERTYCHANGE;\n    if (this.hasListener(eventType)) {\n      this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\n    }\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  addChangeListener(key, listener) {\n    this.addEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * @param {string} key Key name.\n   * @param {import(\"./events.js\").Listener} listener Listener.\n   */\n  removeChangeListener(key, listener) {\n    this.removeEventListener(`change:${key}`, listener);\n  }\n\n  /**\n   * Sets a value.\n   * @param {string} key Key name.\n   * @param {*} value Value.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n  set(key, value, opt_silent) {\n    const values = this.values_ || (this.values_ = {});\n    if (opt_silent) {\n      values[key] = value;\n    } else {\n      const oldValue = values[key];\n      values[key] = value;\n      if (oldValue !== value) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n\n  /**\n   * Sets a collection of key-value pairs.  Note that this changes any existing\n   * properties and adds new ones (it does not remove any existing properties).\n   * @param {Object<string, *>} values Values.\n   * @param {boolean} [opt_silent] Update without triggering an event.\n   * @api\n   */\n  setProperties(values, opt_silent) {\n    for (const key in values) {\n      this.set(key, values[key], opt_silent);\n    }\n  }\n\n  /**\n   * Apply any properties from another object without triggering events.\n   * @param {BaseObject} source The source object.\n   * @protected\n   */\n  applyProperties(source) {\n    if (!source.values_) {\n      return;\n    }\n    assign(this.values_ || (this.values_ = {}), source.values_);\n  }\n\n  /**\n   * Unsets a property.\n   * @param {string} key Key name.\n   * @param {boolean} [opt_silent] Unset without triggering an event.\n   * @api\n   */\n  unset(key, opt_silent) {\n    if (this.values_ && key in this.values_) {\n      const oldValue = this.values_[key];\n      delete this.values_[key];\n      if (isEmpty(this.values_)) {\n        this.values_ = null;\n      }\n      if (!opt_silent) {\n        this.notify(key, oldValue);\n      }\n    }\n  }\n}\n\nexport default BaseObject;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}