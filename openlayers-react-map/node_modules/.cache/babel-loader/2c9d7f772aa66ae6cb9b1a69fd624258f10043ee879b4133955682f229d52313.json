{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED } from '../css.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { replaceNode } from '../dom.js';\nvar events = ['fullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];\n/**\n * @enum {string}\n */\nvar FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen'\n};\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nvar FullScreen = /** @class */function (_super) {\n  __extends(FullScreen, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function FullScreen(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    }) || this;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    _this.un;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.keys_ = options.keys !== undefined ? options.keys : false;\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    _this.source_ = options.source;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.isInFullscreen_ = false;\n    /**\n     * @private\n     */\n    _this.boundHandleMapTargetChange_ = _this.handleMapTargetChange_.bind(_this);\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.cssClassName_ = options.className !== undefined ? options.className : 'ol-full-screen';\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    _this.documentListeners_ = [];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.activeClassName_ = options.activeClassName !== undefined ? options.activeClassName.split(' ') : [_this.cssClassName_ + '-true'];\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.inactiveClassName_ = options.inactiveClassName !== undefined ? options.inactiveClassName.split(' ') : [_this.cssClassName_ + '-false'];\n    var label = options.label !== undefined ? options.label : '\\u2922';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    _this.labelNode_ = typeof label === 'string' ? document.createTextNode(label) : label;\n    var labelActive = options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    _this.labelActiveNode_ = typeof labelActive === 'string' ? document.createTextNode(labelActive) : labelActive;\n    var tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.button_ = document.createElement('button');\n    _this.button_.title = tipLabel;\n    _this.button_.setAttribute('type', 'button');\n    _this.button_.appendChild(_this.labelNode_);\n    _this.button_.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    _this.setClassName_(_this.button_, _this.isInFullscreen_);\n    _this.element.className = \"\".concat(_this.cssClassName_, \" \").concat(CLASS_UNSELECTABLE, \" \").concat(CLASS_CONTROL);\n    _this.element.appendChild(_this.button_);\n    return _this;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  FullScreen.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  };\n  /**\n   * @private\n   */\n  FullScreen.prototype.handleFullScreen_ = function () {\n    var map = this.getMap();\n    if (!map) {\n      return;\n    }\n    var doc = map.getOwnerDocument();\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      var element = void 0;\n      if (this.source_) {\n        element = typeof this.source_ === 'string' ? doc.getElementById(this.source_) : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  };\n  /**\n   * @private\n   */\n  FullScreen.prototype.handleFullScreenChange_ = function () {\n    var map = this.getMap();\n    if (!map) {\n      return;\n    }\n    var wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n      map.updateSize();\n    }\n  };\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  FullScreen.prototype.setClassName_ = function (element, fullscreen) {\n    var _a, _b, _c, _d;\n    if (fullscreen) {\n      (_a = element.classList).remove.apply(_a, this.inactiveClassName_);\n      (_b = element.classList).add.apply(_b, this.activeClassName_);\n    } else {\n      (_c = element.classList).remove.apply(_c, this.activeClassName_);\n      (_d = element.classList).add.apply(_d, this.inactiveClassName_);\n    }\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  FullScreen.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n    if (oldMap) {\n      oldMap.removeChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n    _super.prototype.setMap.call(this, map);\n    this.handleMapTargetChange_();\n    if (map) {\n      map.addChangeListener(MapProperty.TARGET, this.boundHandleMapTargetChange_);\n    }\n  };\n  /**\n   * @private\n   */\n  FullScreen.prototype.handleMapTargetChange_ = function () {\n    var listeners = this.documentListeners_;\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n    listeners.length = 0;\n    var map = this.getMap();\n    if (map) {\n      var doc = map.getOwnerDocument();\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n      for (var i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(listen(doc, events[i], this.handleFullScreenChange_, this));\n      }\n      this.handleFullScreenChange_();\n    }\n  };\n  return FullScreen;\n}(Control);\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  var body = doc.body;\n  return !!(body['webkitRequestFullscreen'] || body['msRequestFullscreen'] && doc['msFullscreenEnabled'] || body.requestFullscreen && doc.fullscreenEnabled);\n}\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(doc['webkitIsFullScreen'] || doc['msFullscreenElement'] || doc.fullscreenElement);\n}\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['msRequestFullscreen']) {\n    element['msRequestFullscreen']();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['msExitFullscreen']) {\n    doc['msExitFullscreen']();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\nexport default FullScreen;","map":{"version":3,"names":["Control","EventType","MapProperty","CLASS_CONTROL","CLASS_UNSELECTABLE","CLASS_UNSUPPORTED","listen","unlistenByKey","replaceNode","events","FullScreenEventType","ENTERFULLSCREEN","LEAVEFULLSCREEN","FullScreen","_super","__extends","opt_options","_this","options","call","element","document","createElement","target","on","once","un","keys_","keys","undefined","source_","source","isInFullscreen_","boundHandleMapTargetChange_","handleMapTargetChange_","bind","cssClassName_","className","documentListeners_","activeClassName_","activeClassName","split","inactiveClassName_","inactiveClassName","label","labelNode_","createTextNode","labelActive","labelActiveNode_","tipLabel","button_","title","setAttribute","appendChild","addEventListener","CLICK","handleClick_","setClassName_","concat","prototype","event","preventDefault","handleFullScreen_","map","getMap","doc","getOwnerDocument","isFullScreenSupported","isFullScreen","exitFullScreen","getElementById","getTargetElement","requestFullScreenWithKeys","requestFullScreen","handleFullScreenChange_","wasInFullscreen","dispatchEvent","updateSize","fullscreen","_a","classList","remove","apply","_b","add","_c","_d","setMap","oldMap","removeChangeListener","TARGET","addChangeListener","listeners","i","ii","length","push","body","requestFullscreen","fullscreenEnabled","fullscreenElement","exitFullscreen"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\control\\FullScreen.js"],"sourcesContent":["/**\n * @module ol/control/FullScreen\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapProperty from '../MapProperty.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE, CLASS_UNSUPPORTED} from '../css.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {replaceNode} from '../dom.js';\n\nconst events = [\n  'fullscreenchange',\n  'webkitfullscreenchange',\n  'MSFullscreenChange',\n];\n\n/**\n * @enum {string}\n */\nconst FullScreenEventType = {\n  /**\n   * Triggered after the map entered fullscreen.\n   * @event FullScreenEventType#enterfullscreen\n   * @api\n   */\n  ENTERFULLSCREEN: 'enterfullscreen',\n\n  /**\n   * Triggered after the map leave fullscreen.\n   * @event FullScreenEventType#leavefullscreen\n   * @api\n   */\n  LEAVEFULLSCREEN: 'leavefullscreen',\n};\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen', import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|\n *     'enterfullscreen'|'leavefullscreen'|import(\"../ObjectEventType\").Types, Return>} FullScreenOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-full-screen'] CSS class name.\n * @property {string|Text|HTMLElement} [label='\\u2922'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|Text|HTMLElement} [labelActive='\\u00d7'] Text label to use for the\n * button when full-screen is active.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [activeClassName=className + '-true'] CSS class name for the button\n * when full-screen is active.\n * @property {string} [inactiveClassName=className + '-false'] CSS class name for the button\n * when full-screen is inactive.\n * @property {string} [tipLabel='Toggle full-screen'] Text label to use for the button tip.\n * @property {boolean} [keys=false] Full keyboard access.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {HTMLElement|string} [source] The element to be displayed\n * fullscreen. When not provided, the element containing the map viewport will\n * be displayed fullscreen.\n */\n\n/**\n * @classdesc\n * Provides a button that when clicked fills up the full screen with the map.\n * The full screen source element is by default the element containing the map viewport unless\n * overridden by providing the `source` option. In which case, the dom\n * element introduced using this parameter will be displayed in full screen.\n *\n * When in full screen mode, a close button is shown to exit full screen mode.\n * The [Fullscreen API](https://www.w3.org/TR/fullscreen/) is used to\n * toggle the map in full screen mode.\n *\n * @fires FullScreenEventType#enterfullscreen\n * @fires FullScreenEventType#leavefullscreen\n * @api\n */\nclass FullScreen extends Control {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {FullScreenOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {FullScreenOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.keys_ = options.keys !== undefined ? options.keys : false;\n\n    /**\n     * @private\n     * @type {HTMLElement|string|undefined}\n     */\n    this.source_ = options.source;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.isInFullscreen_ = false;\n\n    /**\n     * @private\n     */\n    this.boundHandleMapTargetChange_ = this.handleMapTargetChange_.bind(this);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.cssClassName_ =\n      options.className !== undefined ? options.className : 'ol-full-screen';\n\n    /**\n     * @private\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.documentListeners_ = [];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.activeClassName_ =\n      options.activeClassName !== undefined\n        ? options.activeClassName.split(' ')\n        : [this.cssClassName_ + '-true'];\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.inactiveClassName_ =\n      options.inactiveClassName !== undefined\n        ? options.inactiveClassName.split(' ')\n        : [this.cssClassName_ + '-false'];\n\n    const label = options.label !== undefined ? options.label : '\\u2922';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelNode_ =\n      typeof label === 'string' ? document.createTextNode(label) : label;\n\n    const labelActive =\n      options.labelActive !== undefined ? options.labelActive : '\\u00d7';\n\n    /**\n     * @private\n     * @type {Text|HTMLElement}\n     */\n    this.labelActiveNode_ =\n      typeof labelActive === 'string'\n        ? document.createTextNode(labelActive)\n        : labelActive;\n\n    const tipLabel = options.tipLabel ? options.tipLabel : 'Toggle full-screen';\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.button_ = document.createElement('button');\n    this.button_.title = tipLabel;\n    this.button_.setAttribute('type', 'button');\n    this.button_.appendChild(this.labelNode_);\n    this.button_.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n    this.setClassName_(this.button_, this.isInFullscreen_);\n\n    this.element.className = `${this.cssClassName_} ${CLASS_UNSELECTABLE} ${CLASS_CONTROL}`;\n    this.element.appendChild(this.button_);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleFullScreen_();\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreen_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const doc = map.getOwnerDocument();\n    if (!isFullScreenSupported(doc)) {\n      return;\n    }\n    if (isFullScreen(doc)) {\n      exitFullScreen(doc);\n    } else {\n      let element;\n      if (this.source_) {\n        element =\n          typeof this.source_ === 'string'\n            ? doc.getElementById(this.source_)\n            : this.source_;\n      } else {\n        element = map.getTargetElement();\n      }\n      if (this.keys_) {\n        requestFullScreenWithKeys(element);\n      } else {\n        requestFullScreen(element);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleFullScreenChange_() {\n    const map = this.getMap();\n    if (!map) {\n      return;\n    }\n    const wasInFullscreen = this.isInFullscreen_;\n    this.isInFullscreen_ = isFullScreen(map.getOwnerDocument());\n    if (wasInFullscreen !== this.isInFullscreen_) {\n      this.setClassName_(this.button_, this.isInFullscreen_);\n      if (this.isInFullscreen_) {\n        replaceNode(this.labelActiveNode_, this.labelNode_);\n        this.dispatchEvent(FullScreenEventType.ENTERFULLSCREEN);\n      } else {\n        replaceNode(this.labelNode_, this.labelActiveNode_);\n        this.dispatchEvent(FullScreenEventType.LEAVEFULLSCREEN);\n      }\n      map.updateSize();\n    }\n  }\n\n  /**\n   * @param {HTMLElement} element Target element\n   * @param {boolean} fullscreen True if fullscreen class name should be active\n   * @private\n   */\n  setClassName_(element, fullscreen) {\n    if (fullscreen) {\n      element.classList.remove(...this.inactiveClassName_);\n      element.classList.add(...this.activeClassName_);\n    } else {\n      element.classList.remove(...this.activeClassName_);\n      element.classList.add(...this.inactiveClassName_);\n    }\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (oldMap) {\n      oldMap.removeChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n\n    super.setMap(map);\n\n    this.handleMapTargetChange_();\n    if (map) {\n      map.addChangeListener(\n        MapProperty.TARGET,\n        this.boundHandleMapTargetChange_\n      );\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleMapTargetChange_() {\n    const listeners = this.documentListeners_;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      unlistenByKey(listeners[i]);\n    }\n    listeners.length = 0;\n\n    const map = this.getMap();\n    if (map) {\n      const doc = map.getOwnerDocument();\n      if (isFullScreenSupported(doc)) {\n        this.element.classList.remove(CLASS_UNSUPPORTED);\n      } else {\n        this.element.classList.add(CLASS_UNSUPPORTED);\n      }\n\n      for (let i = 0, ii = events.length; i < ii; ++i) {\n        listeners.push(\n          listen(doc, events[i], this.handleFullScreenChange_, this)\n        );\n      }\n      this.handleFullScreenChange_();\n    }\n  }\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Fullscreen is supported by the current platform.\n */\nfunction isFullScreenSupported(doc) {\n  const body = doc.body;\n  return !!(\n    body['webkitRequestFullscreen'] ||\n    (body['msRequestFullscreen'] && doc['msFullscreenEnabled']) ||\n    (body.requestFullscreen && doc.fullscreenEnabled)\n  );\n}\n\n/**\n * @param {Document} doc The root document to check.\n * @return {boolean} Element is currently in fullscreen.\n */\nfunction isFullScreen(doc) {\n  return !!(\n    doc['webkitIsFullScreen'] ||\n    doc['msFullscreenElement'] ||\n    doc.fullscreenElement\n  );\n}\n\n/**\n * Request to fullscreen an element.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreen(element) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen();\n  } else if (element['msRequestFullscreen']) {\n    element['msRequestFullscreen']();\n  } else if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  }\n}\n\n/**\n * Request to fullscreen an element with keyboard input.\n * @param {HTMLElement} element Element to request fullscreen\n */\nfunction requestFullScreenWithKeys(element) {\n  if (element['webkitRequestFullscreen']) {\n    element['webkitRequestFullscreen']();\n  } else {\n    requestFullScreen(element);\n  }\n}\n\n/**\n * Exit fullscreen.\n * @param {Document} doc The document to exit fullscren from\n */\nfunction exitFullScreen(doc) {\n  if (doc.exitFullscreen) {\n    doc.exitFullscreen();\n  } else if (doc['msExitFullscreen']) {\n    doc['msExitFullscreen']();\n  } else if (doc['webkitExitFullscreen']) {\n    doc['webkitExitFullscreen']();\n  }\n}\n\nexport default FullScreen;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}