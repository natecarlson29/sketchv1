{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport Snap from 'ol/interaction/Snap';\nimport { /*always,*/primaryAction } from 'ol/events/condition';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport DeleteGeo from './map-actions/DeleteGeo';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\nimport QuickShape from './map-actions/QuickShape';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle, closingSegmentStyle } from './ol-styles';\n\n/* svgs */\nimport { DrawIcon, HandIcon } from './svg';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, pointToSegmentDistance } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 1.524;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(true);\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        const highlightSource = highlightLayer.getSource();\n        highlightSource.getFeatures().forEach(f => {\n          if (!f.get('isClosingSegment')) {\n            highlightSource.removeFeature(f);\n          }\n        });\n      }\n    }\n  }\n\n  //Polygon closing line shown with new style in highlight layer\n  function updateClosingSegmentOverlay() {\n    const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    // Remove previous closing segment overlays\n    highlightSource.getFeatures().forEach(f => {\n      if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n    if (drawingRef.current && polygonFeatureRef.current && polygonFeatureRef.current.getGeometry().getType() === 'Polygon') {\n      const coords = polygonFeatureRef.current.getGeometry().getCoordinates()[0];\n      if (coords.length > 1) {\n        const closingLine = new Feature(new LineString([coords[coords.length - 2], coords[0]]));\n        closingLine.setStyle(closingSegmentStyle);\n        closingLine.set('isClosingSegment', true);\n        highlightSource.addFeature(closingLine);\n      }\n    }\n  }\n  function coordsEqual(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n  }\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n    return closestCoord;\n  }\n  function customSnapFeature(feature, vectorSource, map, tolerance = 10) {\n    const geom = feature.getGeometry();\n    if (!geom) return;\n\n    // Get all other features\n    const otherFeatures = vectorSource.getFeatures().filter(f => f !== feature);\n\n    // Get all vertices of the moving feature\n    let coords = [];\n    if (geom.getType() === 'Polygon') {\n      coords = geom.getCoordinates()[0];\n    } else if (geom.getType() === 'LineString') {\n      coords = geom.getCoordinates();\n    }\n    let snapOffset = null;\n\n    // For each vertex in the moving feature\n    for (let i = 0; i < coords.length; i++) {\n      const vertex = coords[i];\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      for (const other of otherFeatures) {\n        const otherGeom = other.getGeometry();\n        let otherCoords = [];\n        if (otherGeom.getType() === 'Polygon') {\n          otherCoords = otherGeom.getCoordinates()[0];\n        } else if (otherGeom.getType() === 'LineString') {\n          otherCoords = otherGeom.getCoordinates();\n        }\n\n        // Snap only to edges (not vertices)\n        for (let j = 0; j < otherCoords.length - 1; j++) {\n          const segStart = otherCoords[j];\n          const segEnd = otherCoords[j + 1];\n          // Project vertex onto segment\n          const snapped = snapPointToSegment(vertex, segStart, segEnd);\n          const snappedPixel = map.getPixelFromCoordinate(snapped);\n          const dist = Math.hypot(vertexPixel[0] - snappedPixel[0], vertexPixel[1] - snappedPixel[1]);\n          if (dist < tolerance) {\n            // Calculate offset needed to snap the whole feature\n            snapOffset = [snapped[0] - vertex[0], snapped[1] - vertex[1]];\n            break;\n          }\n        }\n        if (snapOffset) break;\n      }\n      if (snapOffset) break;\n    }\n\n    // If a snap is needed, move the entire feature by the offset\n    if (snapOffset) {\n      const newCoords = coords.map(([x, y]) => [x + snapOffset[0], y + snapOffset[1]]);\n      if (geom.getType() === 'Polygon') {\n        geom.setCoordinates([newCoords]);\n      } else if (geom.getType() === 'LineString') {\n        geom.setCoordinates(newCoords);\n      }\n    }\n  }\n\n  // Helper: Snap a point to a segment\n  function snapPointToSegment(pt, segA, segB) {\n    const [x, y] = pt;\n    const [x1, y1] = segA;\n    const [x2, y2] = segB;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    if (dx === 0 && dy === 0) return segA.slice();\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t < 0) return segA.slice();\n    if (t > 1) return segB.slice();\n    return [x1 + t * dx, y1 + t * dy];\n  }\n\n  //select features / style\n  useEffect(() => {\n    var _vectorSourceRef$curr, _vectorSourceRef$curr2;\n    const allFeatures = ((_vectorSourceRef$curr = vectorSourceRef.current) === null || _vectorSourceRef$curr === void 0 ? void 0 : (_vectorSourceRef$curr2 = _vectorSourceRef$curr.getFeatures) === null || _vectorSourceRef$curr2 === void 0 ? void 0 : _vectorSourceRef$curr2.call(_vectorSourceRef$curr)) || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  //Read textbox input to be mapped with addSegment\n  useEffect(() => {\n    textRef.current = text;\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  //Select vs Draw mode useEffect\n  useEffect(() => {\n    //sync modeRef with current mode\n    modeRef.current = mode;\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      let translate = new Translate({\n        layers: [vectorLayerRef.current],\n        condition: primaryAction\n      });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', evt => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n\n      // Custom snapping for translate interaction\n      translate.on('translating', evt => {\n        evt.features.forEach(feature => {\n          customSnapFeature(feature, vectorSourceRef.current, mapRef.current, 10); // 10 pixel tolerance\n        });\n      });\n\n      // Listen for translateend to track moves\n      translate.on('translateend', evt => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n        });\n      });\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  /* MAIN USE EFFECT */\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    map.addControl(new Rotate({\n      autoHide: false,\n      duration: 500\n    }));\n    const snapInteraction = new Snap({\n      source: vectorSourceRef.current\n    });\n    map.addInteraction(snapInteraction);\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else /* if (modeRef.current === 'select')*/{\n          highlightSource.getFeatures().forEach(f => {\n            if (!f.get('isClosingSegment')) {\n              highlightSource.removeFeature(f);\n            }\n          });\n          let found = false;\n          // Hover logic for highlightLayer lines\n          map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n            if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n              const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n\n              // Check for vertex hover first\n              for (let i = 0; i < coords.length; i++) {\n                const pixel = map.getPixelFromCoordinate(coords[i]);\n                const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n                if (dist < 8) {\n                  // 8 pixels tolerance for vertex\n                  const vertexFeature = new Feature(new Point(coords[i]));\n                  vertexFeature.setStyle(highlightVertexStyle);\n                  highlightSource.addFeature(vertexFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n\n              // If no vertex found, check for segment hover\n              for (let i = 0; i < coords.length - 1; i++) {\n                const seg = [coords[i], coords[i + 1]];\n                const pixel1 = map.getPixelFromCoordinate(seg[0]);\n                const pixel2 = map.getPixelFromCoordinate(seg[1]);\n                const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n                if (dist < 8) {\n                  // 8 pixels tolerance for segment\n                  const segFeature = new Feature(new LineString(seg));\n                  segFeature.setStyle(highlightSegmentStyle);\n                  highlightSource.addFeature(segFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n            }\n            return found;\n          });\n        }\n    });\n    function editExistingPolygon(snappedCoord, vectorSource) {\n      // Find a LineString whose endpoint matches snappedCoord\n      let foundLine = null;\n      let foundIndex = null;\n      vectorSource.getFeatures().forEach(feature => {\n        if (feature.getGeometry().getType() === 'LineString') {\n          const coords = feature.getGeometry().getCoordinates();\n          // Check both ends\n          if (coordsEqual(coords[0], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = 0;\n          } else if (coordsEqual(coords[coords.length - 1], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = coords.length - 1;\n          }\n        }\n      });\n      if (foundLine) {\n        // Remove the LineString from the source\n        clearPolygonOverlays(foundLine, mapRef);\n        vectorSource.removeFeature(foundLine);\n        let coords = foundLine.getGeometry().getCoordinates();\n        // If the user clicked the end, reverse so snappedCoord is first\n        if (foundIndex === coords.length - 1) {\n          coords = coords.slice().reverse();\n        }\n        // Start a new polygon with these coords (not closed yet)\n        return coords;\n      }\n      // No matching linestring found\n      return null;\n    }\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n        const vectorSource = vectorSourceRef.current;\n        let initialCoords = editExistingPolygon(snappedCoord, vectorSource);\n        let poly, feature;\n        if (initialCoords) {\n          // Remove all instances of snappedCoord from the array\n          let coords = initialCoords.filter(c => !coordsEqual(c, snappedCoord));\n          // Push snappedCoord to the end\n          coords.push(snappedCoord);\n\n          // Ensure the polygon is closed visually\n          if (coords.length > 2 && (coords[0][0] !== coords[coords.length - 1][0] || coords[0][1] !== coords[coords.length - 1][1])) {\n            coords.push([...coords[0]]);\n          }\n          console.log({\n            NEWPOLY: coords\n          });\n          // Create the polygon (now closed)\n          poly = new Polygon([coords]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: initialCoords,\n            // original LineString coordinates\n            newCoords: coords,\n            // new Polygon coordinates\n            geomType: 'Polygon',\n            prevGeomType: 'LineString'\n          });\n        } else {\n          // Normal: start polygon with just the clicked point\n          poly = new Polygon([[snappedCoord, snappedCoord]]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords: [],\n            newCoords: [[coord, coord]]\n          });\n        }\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n      }\n    }\n    function selectClick(evt) {\n      // maybe\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      console.log({\n        AddSegmentCoords: coords\n      });\n      poly.setCoordinates([coords]);\n      updateClosingSegmentOverlay();\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              updateClosingSegmentOverlay();\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-circle') {\n          // Remove the circle feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-square') {\n          // Remove the square feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'delete-geo') {\n          // Restore the deleted feature\n          const format = new GeoJSON();\n          const restoredFeature = format.readFeature(lastAction.geojson);\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the polygon feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the original LineString\n          const restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the LineString feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the Polygon\n          const restoredFeature = new Feature(new Polygon([lastAction.newCoords]));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          restoredFeature.setStyle(activePolygonStyle);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-circle') {\n          // Re-add the circle feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-square') {\n          // Re-add the square feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'delete-geo') {\n          // Remove the feature again\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef); // Clear measurementsa\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n      const [start, end] = coords;\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n        const input = textRef.current.trim().toUpperCase();\n        let dx = 0,\n          dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R':\n                dx += meters;\n                break;\n              case 'L':\n                dx -= meters;\n                break;\n              case 'U':\n                dy += meters;\n                break;\n              case 'D':\n                dy -= meters;\n                break;\n              default:\n                break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords\n          });\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = angleDeg * Math.PI / 180 + rotation;\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n          setMode('');\n        }\n        const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (highlightLayer) {\n          const highlightSource = highlightLayer.getSource();\n          highlightSource.getFeatures().forEach(f => {\n            if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n          });\n        }\n      }\n      // ctrl + z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.key === 'R')) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dimension-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"dimension-input\",\n        ref: inputRef,\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Dimension (ft.)\",\n        autoFocus: true,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1097,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1096,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        title: \"Draw\",\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        disabled: mode === 'draw' && drawing,\n        children: /*#__PURE__*/_jsxDEV(DrawIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1114,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        title: \"Select / Move\",\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        disabled: mode === 'draw' && drawing,\n        children: /*#__PURE__*/_jsxDEV(HandIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1121,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(QuickShape, {\n        mapRef: mapRef,\n        vectorSourceRef: vectorSourceRef,\n        setDrawing: setDrawing,\n        setMode: setMode,\n        addHistoryAction: addHistoryAction,\n        mode: mode,\n        drawing: drawing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeleteGeo, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        clearPolygonOverlays: clearPolygonOverlays,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1124,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1134,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1135,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Clone, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        title: \"Show/Hide History\",\n        id: \"history-toggle\",\n        className: `map-button${showHistory ? ' active' : ''}`,\n        onClick: () => setShowHistory(v => !v),\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction,\n      drawing: drawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1144,\n      columnNumber: 7\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1154,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1095,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"qsOqqvQT66SGHDU5VQVmImt3jbM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","fromLonLat","ScaleLine","Rotate","Translate","Snap","primaryAction","GeoJSON","DeleteGeo","History","FlipHorizButton","FlipVertButton","RightClick","Clone","QuickShape","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","closingSegmentStyle","DrawIcon","HandIcon","clearPolygonOverlays","createSegmentOverlays","pointToSegmentDistance","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","textRef","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","polygonFeatureRef","drawingRef","drawing","setDrawing","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","showHistory","setShowHistory","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","highlightSource","getSource","getFeatures","forEach","f","removeFeature","updateClosingSegmentOverlay","getGeometry","getType","coords","getCoordinates","length","closingLine","setStyle","set","addFeature","coordsEqual","a","b","getSnappedCoordinate","map","vectorSource","pointerPixel","tolerance","closestCoord","minDist","Infinity","geom","coord","pixel","getPixelFromCoordinate","dist","Math","hypot","customSnapFeature","otherFeatures","filter","snapOffset","i","vertex","vertexPixel","other","otherGeom","otherCoords","j","segStart","segEnd","snapped","snapPointToSegment","snappedPixel","newCoords","setCoordinates","pt","segA","segB","x1","y1","x2","y2","dx","dy","slice","t","_vectorSourceRef$curr","_vectorSourceRef$curr2","allFeatures","call","val","parseFloat","isNaN","removeInteraction","translate","layers","condition","addInteraction","on","evt","features","prevCoords","featureId","getId","vectorLayer","source","style","target","view","center","zoom","addControl","units","autoHide","duration","snapInteraction","name","addLayer","coordinate","snappedCoord","ghost","found","forEachFeatureAtPixel","sqrt","pow","vertexFeature","seg","pixel1","pixel2","segFeature","editExistingPolygon","foundLine","foundIndex","reverse","drawClick","initialCoords","poly","c","push","console","log","NEWPOLY","setId","Date","now","toString","geomType","prevGeomType","selectClick","getFeaturesAtPixel","includes","allPolygons","currentIdx","nextIdx","nextFeature","addSegment","direction","last","OFFSET","rotation","getView","getRotation","cos","sin","rotatedDx","rotatedDy","newPt","AddSegmentCoords","handleUndo","lastActionForRedo","lastAction","featureToRemove","restoredFeature","format","readFeature","geojson","redoPrev","handleRedo","require","default","lineFeature","remarkLineSegments","histPrev","rotateMapToHighlightedSegment","start","end","currentRotation","startPixel","endPixel","unrotatedDx","unrotatedDy","angle","atan2","PI","animate","handleKeyDown","e","key","preventDefault","input","trim","toUpperCase","dirPattern","test","parts","split","s","part","dir","meters","distance","angleDeg","distStr","angleStr","angleRad","dx2","dy2","ctrlKey","metaKey","document","addEventListener","setTarget","removeEventListener","children","id","ref","value","onChange","placeholder","autoFocus","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","title","className","onClick","disabled","v","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport Snap from 'ol/interaction/Snap';\nimport { /*always,*/  primaryAction } from 'ol/events/condition';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport DeleteGeo from './map-actions/DeleteGeo';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\nimport QuickShape from './map-actions/QuickShape';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle,\n  closingSegmentStyle\n} from './ol-styles';\n\n/* svgs */\nimport {\n  DrawIcon,\n  HandIcon\n} from './svg';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 1.524;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(true);\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        const highlightSource = highlightLayer.getSource();\n        highlightSource.getFeatures().forEach(f => {\n          if (!f.get('isClosingSegment')) {\n            highlightSource.removeFeature(f);\n          }\n        });\n      }\n    }\n  }\n\n  //Polygon closing line shown with new style in highlight layer\n  function updateClosingSegmentOverlay() {\n    const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    // Remove previous closing segment overlays\n    highlightSource.getFeatures().forEach(f => {\n      if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n\n    if (\n      drawingRef.current &&\n      polygonFeatureRef.current &&\n      polygonFeatureRef.current.getGeometry().getType() === 'Polygon'\n    ) {\n      const coords = polygonFeatureRef.current.getGeometry().getCoordinates()[0];\n\n      if (coords.length > 1) {\n        const closingLine = new Feature(new LineString([coords[coords.length - 2], coords[0]]));\n        closingLine.setStyle(closingSegmentStyle);\n        closingLine.set('isClosingSegment', true);\n        highlightSource.addFeature(closingLine);\n      }\n    }\n  }\n\n  function coordsEqual(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n  }\n\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n\n    return closestCoord;\n  }\n\n  function customSnapFeature(feature, vectorSource, map, tolerance = 10) {\n    const geom = feature.getGeometry();\n    if (!geom) return;\n\n    // Get all other features\n    const otherFeatures = vectorSource.getFeatures().filter(f => f !== feature);\n\n    // Get all vertices of the moving feature\n    let coords = [];\n    if (geom.getType() === 'Polygon') {\n      coords = geom.getCoordinates()[0];\n    } else if (geom.getType() === 'LineString') {\n      coords = geom.getCoordinates();\n    }\n\n    let snapOffset = null;\n\n    // For each vertex in the moving feature\n    for (let i = 0; i < coords.length; i++) {\n      const vertex = coords[i];\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n\n      for (const other of otherFeatures) {\n        const otherGeom = other.getGeometry();\n        let otherCoords = [];\n        if (otherGeom.getType() === 'Polygon') {\n          otherCoords = otherGeom.getCoordinates()[0];\n        } else if (otherGeom.getType() === 'LineString') {\n          otherCoords = otherGeom.getCoordinates();\n        }\n\n        // Snap only to edges (not vertices)\n        for (let j = 0; j < otherCoords.length - 1; j++) {\n          const segStart = otherCoords[j];\n          const segEnd = otherCoords[j + 1];\n          // Project vertex onto segment\n          const snapped = snapPointToSegment(vertex, segStart, segEnd);\n          const snappedPixel = map.getPixelFromCoordinate(snapped);\n          const dist = Math.hypot(vertexPixel[0] - snappedPixel[0], vertexPixel[1] - snappedPixel[1]);\n          if (dist < tolerance) {\n            // Calculate offset needed to snap the whole feature\n            snapOffset = [snapped[0] - vertex[0], snapped[1] - vertex[1]];\n            break;\n          }\n        }\n        if (snapOffset) break;\n      }\n      if (snapOffset) break;\n    }\n\n    // If a snap is needed, move the entire feature by the offset\n    if (snapOffset) {\n      const newCoords = coords.map(([x, y]) => [x + snapOffset[0], y + snapOffset[1]]);\n      if (geom.getType() === 'Polygon') {\n        geom.setCoordinates([newCoords]);\n      } else if (geom.getType() === 'LineString') {\n        geom.setCoordinates(newCoords);\n      }\n    }\n  }\n\n  // Helper: Snap a point to a segment\n  function snapPointToSegment(pt, segA, segB) {\n    const [x, y] = pt;\n    const [x1, y1] = segA;\n    const [x2, y2] = segB;\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    if (dx === 0 && dy === 0) return segA.slice();\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t < 0) return segA.slice();\n    if (t > 1) return segB.slice();\n    return [x1 + t * dx, y1 + t * dy];\n  }\n\n  //select features / style\n  useEffect(() => {\n    const allFeatures = vectorSourceRef.current?.getFeatures?.() || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  //Read textbox input to be mapped with addSegment\n  useEffect(() => {\n    textRef.current = text;\n\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  //Select vs Draw mode useEffect\n  useEffect(() => {\n    //sync modeRef with current mode\n    modeRef.current = mode;\n\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      let translate = new Translate({ layers: [vectorLayerRef.current], condition: primaryAction });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', (evt) => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n\n      // Custom snapping for translate interaction\n      translate.on('translating', (evt) => {\n        evt.features.forEach(feature => {\n          customSnapFeature(feature, vectorSourceRef.current, mapRef.current, 10); // 10 pixel tolerance\n        });\n      });\n\n      // Listen for translateend to track moves\n      translate.on('translateend', (evt) => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords,\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n\n        });\n      });\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  /* MAIN USE EFFECT */\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    map.addControl(new Rotate({ autoHide: false, duration: 500 }));\n\n    const snapInteraction = new Snap({ source: vectorSourceRef.current });\n    map.addInteraction(snapInteraction)\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else/* if (modeRef.current === 'select')*/ {\n        highlightSource.getFeatures().forEach(f => {\n          if (!f.get('isClosingSegment')) {\n            highlightSource.removeFeature(f);\n          }\n        });\n\n        let found = false;\n        // Hover logic for highlightLayer lines\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n\n    function editExistingPolygon(snappedCoord, vectorSource) {\n      // Find a LineString whose endpoint matches snappedCoord\n      let foundLine = null;\n      let foundIndex = null;\n      vectorSource.getFeatures().forEach(feature => {\n        if (feature.getGeometry().getType() === 'LineString') {\n          const coords = feature.getGeometry().getCoordinates();\n          // Check both ends\n          if (coordsEqual(coords[0], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = 0;\n          } else if (coordsEqual(coords[coords.length - 1], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = coords.length - 1;\n          }\n        }\n      });\n\n      if (foundLine) {\n        // Remove the LineString from the source\n        clearPolygonOverlays(foundLine, mapRef);\n        vectorSource.removeFeature(foundLine);\n        let coords = foundLine.getGeometry().getCoordinates();\n        // If the user clicked the end, reverse so snappedCoord is first\n        if (foundIndex === coords.length - 1) {\n          coords = coords.slice().reverse();\n        }\n        // Start a new polygon with these coords (not closed yet)\n        return coords;\n      }\n      // No matching linestring found\n      return null;\n    }\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n\n        const vectorSource = vectorSourceRef.current;\n        let initialCoords = editExistingPolygon(snappedCoord, vectorSource);\n\n        let poly, feature;\n\n        if (initialCoords) {\n          // Remove all instances of snappedCoord from the array\n          let coords = initialCoords.filter(c => !coordsEqual(c, snappedCoord));\n          // Push snappedCoord to the end\n          coords.push(snappedCoord);\n\n          // Ensure the polygon is closed visually\n          if (\n            coords.length > 2 &&\n            (coords[0][0] !== coords[coords.length - 1][0] ||\n              coords[0][1] !== coords[coords.length - 1][1])\n          ) {\n            coords.push([...coords[0]]);\n          }\n\n          console.log({ NEWPOLY: coords });\n          // Create the polygon (now closed)\n          poly = new Polygon([coords]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: initialCoords, // original LineString coordinates\n            newCoords: coords,         // new Polygon coordinates\n            geomType: 'Polygon',\n            prevGeomType: 'LineString'\n          });\n        } else {\n          // Normal: start polygon with just the clicked point\n          poly = new Polygon([[snappedCoord, snappedCoord]]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords: [],\n            newCoords: [[coord, coord]],\n          });\n        }\n\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n      }\n    }\n\n    function selectClick(evt) { // maybe\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      console.log({ AddSegmentCoords: coords });\n      poly.setCoordinates([coords]);\n      updateClosingSegmentOverlay();\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              updateClosingSegmentOverlay();\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-circle') {\n          // Remove the circle feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-square') {\n          // Remove the square feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'delete-geo') {\n          // Restore the deleted feature\n          const format = new GeoJSON();\n          const restoredFeature = format.readFeature(lastAction.geojson);\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the polygon feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the original LineString\n          const restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the LineString feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the Polygon\n          const restoredFeature = new Feature(new Polygon([lastAction.newCoords]));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          restoredFeature.setStyle(activePolygonStyle);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-circle') {\n          // Re-add the circle feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-square') {\n          // Re-add the square feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'delete-geo') {\n          // Remove the feature again\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef); // Clear measurementsa\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [\n        (start[0] + end[0]) / 2,\n        (start[1] + end[1]) / 2\n      ];\n\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n        const input = textRef.current.trim().toUpperCase();\n\n        let dx = 0, dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R': dx += meters; break;\n              case 'L': dx -= meters; break;\n              case 'U': dy += meters; break;\n              case 'D': dy -= meters; break;\n              default: break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords,\n          });\n\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = (angleDeg * Math.PI) / 180 + rotation;\n\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n          setMode('');\n        }\n        const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (highlightLayer) {\n          const highlightSource = highlightLayer.getSource();\n          highlightSource.getFeatures().forEach(f => {\n            if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n          });\n        }\n\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"dimension-input-container\">\n        <input\n          id=\"dimension-input\"\n          ref={inputRef}\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n          placeholder=\"Dimension (ft.)\"\n          autoFocus\n          autoComplete='off'\n        />\n      </div>\n      <div id=\"map-menu-vert\">\n        <button\n          title=\"Draw\"\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n          disabled={mode === 'draw' && drawing}>\n          <DrawIcon />\n        </button>\n        <button\n          title=\"Select / Move\"\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n          disabled={mode === 'draw' && drawing}>\n          <HandIcon />\n        </button>\n        <QuickShape mapRef={mapRef} vectorSourceRef={vectorSourceRef} setDrawing={setDrawing} setMode={setMode} addHistoryAction={addHistoryAction} mode={mode} drawing={drawing} />\n        <DeleteGeo\n          selectedFeature={selectedFeature}\n          vectorSourceRef={vectorSourceRef}\n          setSelectedFeature={setSelectedFeature}\n          addHistoryAction={addHistoryAction}\n          clearPolygonOverlays={clearPolygonOverlays}\n          mapRef={mapRef}\n        />\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <Clone selectedFeature={selectedFeature} vectorSourceRef={vectorSourceRef} setSelectedFeature={setSelectedFeature} addHistoryAction={addHistoryAction} mapRef={mapRef} />\n        <div title=\"Show/Hide History\" id=\"history-toggle\" className={`map-button${showHistory ? ' active' : ''}`} onClick={() => setShowHistory(v => !v)}>\n          History\n        </div>\n        {/* <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div> */}\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n        drawing={drawing}\n      />\n      {showHistory && (\n        <History history={history} redoStack={redoStack} />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}