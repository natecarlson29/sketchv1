{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport { CLASS_SELECTABLE } from './css.js';\nimport { containsExtent } from './extent.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { outerHeight, outerWidth, removeChildren, removeNode } from './dom.js';\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n/**\n * @enum {string}\n * @protected\n */\nvar Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning'\n};\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nvar Overlay = /** @class */function (_super) {\n  __extends(Overlay, _super);\n  /**\n   * @param {Options} options Overlay options.\n   */\n  function Overlay(options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n    _this.un;\n    /**\n     * @protected\n     * @type {Options}\n     */\n    _this.options = options;\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    _this.id = options.id;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    _this.insertFirst = options.insertFirst !== undefined ? options.insertFirst : true;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    _this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.element = document.createElement('div');\n    _this.element.className = options.className !== undefined ? options.className : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    _this.element.style.position = 'absolute';\n    _this.element.style.pointerEvents = 'auto';\n    var autoPan = options.autoPan;\n    if (autoPan && 'object' !== typeof autoPan) {\n      autoPan = {\n        animation: options.autoPanAnimation,\n        margin: options.autoPanMargin\n      };\n    }\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|false}\n     */\n    _this.autoPan = /** @type {PanIntoViewOptions} */autoPan || false;\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    _this.rendered = {\n      transform_: '',\n      visible: true\n    };\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.mapPostrenderListenerKey = null;\n    _this.addChangeListener(Property.ELEMENT, _this.handleElementChanged);\n    _this.addChangeListener(Property.MAP, _this.handleMapChanged);\n    _this.addChangeListener(Property.OFFSET, _this.handleOffsetChanged);\n    _this.addChangeListener(Property.POSITION, _this.handlePositionChanged);\n    _this.addChangeListener(Property.POSITIONING, _this.handlePositioningChanged);\n    if (options.element !== undefined) {\n      _this.setElement(options.element);\n    }\n    _this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n    _this.setPositioning(options.positioning || 'top-left');\n    if (options.position !== undefined) {\n      _this.setPosition(options.position);\n    }\n    return _this;\n  }\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getElement = function () {\n    return /** @type {HTMLElement|undefined} */this.get(Property.ELEMENT);\n  };\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  Overlay.prototype.getId = function () {\n    return this.id;\n  };\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./PluggableMap.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getMap = function () {\n    return /** @type {import(\"./PluggableMap.js\").default|null} */this.get(Property.MAP) || null;\n  };\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getOffset = function () {\n    return /** @type {Array<number>} */this.get(Property.OFFSET);\n  };\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getPosition = function () {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */this.get(Property.POSITION);\n  };\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.getPositioning = function () {\n    return /** @type {Positioning} */this.get(Property.POSITIONING);\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handleElementChanged = function () {\n    removeChildren(this.element);\n    var element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handleMapChanged = function () {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    var map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(map, MapEventType.POSTRENDER, this.render, this);\n      this.updatePixelPosition();\n      var container = this.stopEvent ? map.getOverlayContainerStopEvent() : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.render = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handleOffsetChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handlePositionChanged = function () {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  };\n  /**\n   * @protected\n   */\n  Overlay.prototype.handlePositioningChanged = function () {\n    this.updatePixelPosition();\n  };\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setElement = function (element) {\n    this.set(Property.ELEMENT, element);\n  };\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./PluggableMap.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setMap = function (map) {\n    this.set(Property.MAP, map);\n  };\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setOffset = function (offset) {\n    this.set(Property.OFFSET, offset);\n  };\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setPosition = function (position) {\n    this.set(Property.POSITION, position);\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n  Overlay.prototype.performAutoPan = function () {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  };\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n   * @api\n   */\n  Overlay.prototype.panIntoView = function (opt_panIntoViewOptions) {\n    var map = this.getMap();\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n    var mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    var element = this.getElement();\n    var overlayRect = this.getRect(element, [outerWidth(element), outerHeight(element)]);\n    var panIntoViewOptions = opt_panIntoViewOptions || {};\n    var myMargin = panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      var offsetLeft = overlayRect[0] - mapRect[0];\n      var offsetRight = mapRect[2] - overlayRect[2];\n      var offsetTop = overlayRect[1] - mapRect[1];\n      var offsetBottom = mapRect[3] - overlayRect[3];\n      var delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        var center = /** @type {import(\"./coordinate.js\").Coordinate} */map.getView().getCenterInternal();\n        var centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        var newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n        var panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing\n        });\n      }\n    }\n  };\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  Overlay.prototype.getRect = function (element, size) {\n    var box = element.getBoundingClientRect();\n    var offsetX = box.left + window.pageXOffset;\n    var offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  };\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  Overlay.prototype.setPositioning = function (positioning) {\n    this.set(Property.POSITIONING, positioning);\n  };\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  Overlay.prototype.setVisible = function (visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  };\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  Overlay.prototype.updatePixelPosition = function () {\n    var map = this.getMap();\n    var position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n    var pixel = map.getPixelFromCoordinate(position);\n    var mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  };\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  Overlay.prototype.updateRenderedPosition = function (pixel, mapSize) {\n    var style = this.element.style;\n    var offset = this.getOffset();\n    var positioning = this.getPositioning();\n    this.setVisible(true);\n    var x = Math.round(pixel[0] + offset[0]) + 'px';\n    var y = Math.round(pixel[1] + offset[1]) + 'px';\n    var posX = '0%';\n    var posY = '0%';\n    if (positioning == 'bottom-right' || positioning == 'center-right' || positioning == 'top-right') {\n      posX = '-100%';\n    } else if (positioning == 'bottom-center' || positioning == 'center-center' || positioning == 'top-center') {\n      posX = '-50%';\n    }\n    if (positioning == 'bottom-left' || positioning == 'bottom-center' || positioning == 'bottom-right') {\n      posY = '-100%';\n    } else if (positioning == 'center-left' || positioning == 'center-center' || positioning == 'center-right') {\n      posY = '-50%';\n    }\n    var transform = \"translate(\".concat(posX, \", \").concat(posY, \") translate(\").concat(x, \", \").concat(y, \")\");\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n      // @ts-ignore IE9\n      style.msTransform = transform;\n    }\n  };\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  Overlay.prototype.getOptions = function () {\n    return this.options;\n  };\n  return Overlay;\n}(BaseObject);\nexport default Overlay;","map":{"version":3,"names":["BaseObject","MapEventType","CLASS_SELECTABLE","containsExtent","listen","unlistenByKey","outerHeight","outerWidth","removeChildren","removeNode","Property","ELEMENT","MAP","OFFSET","POSITION","POSITIONING","Overlay","_super","__extends","options","_this","call","on","once","un","id","insertFirst","undefined","stopEvent","element","document","createElement","className","style","position","pointerEvents","autoPan","animation","autoPanAnimation","margin","autoPanMargin","rendered","transform_","visible","mapPostrenderListenerKey","addChangeListener","handleElementChanged","handleMapChanged","handleOffsetChanged","handlePositionChanged","handlePositioningChanged","setElement","setOffset","offset","setPositioning","positioning","setPosition","prototype","getElement","get","getId","getMap","getOffset","getPosition","getPositioning","appendChild","map","POSTRENDER","render","updatePixelPosition","container","getOverlayContainerStopEvent","getOverlayContainer","insertBefore","childNodes","performAutoPan","set","setMap","panIntoView","opt_panIntoViewOptions","getTargetElement","mapRect","getRect","getSize","overlayRect","panIntoViewOptions","myMargin","offsetLeft","offsetRight","offsetTop","offsetBottom","delta","Math","abs","center","getView","getCenterInternal","centerPx","getPixelFromCoordinateInternal","newCenterPx","panOptions","animateInternal","getCoordinateFromPixelInternal","duration","easing","size","box","getBoundingClientRect","offsetX","left","window","pageXOffset","offsetY","top","pageYOffset","setVisible","display","isRendered","pixel","getPixelFromCoordinate","mapSize","updateRenderedPosition","x","round","y","posX","posY","transform","concat","msTransform","getOptions"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\Overlay.js"],"sourcesContent":["/**\n * @module ol/Overlay\n */\nimport BaseObject from './Object.js';\nimport MapEventType from './MapEventType.js';\nimport {CLASS_SELECTABLE} from './css.js';\nimport {containsExtent} from './extent.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {outerHeight, outerWidth, removeChildren, removeNode} from './dom.js';\n\n/**\n * @typedef {'bottom-left' | 'bottom-center' | 'bottom-right' | 'center-left' | 'center-center' | 'center-right' | 'top-left' | 'top-center' | 'top-right'} Positioning\n * The overlay position: `'bottom-left'`, `'bottom-center'`,  `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, or `'top-right'`.\n */\n\n/**\n * @typedef {Object} Options\n * @property {number|string} [id] Set the overlay id. The overlay id can be used\n * with the {@link module:ol/Map~Map#getOverlayById} method.\n * @property {HTMLElement} [element] The overlay element.\n * @property {Array<number>} [offset=[0, 0]] Offsets in pixels used when positioning\n * the overlay. The first element in the\n * array is the horizontal offset. A positive value shifts the overlay right.\n * The second element in the array is the vertical offset. A positive value\n * shifts the overlay down.\n * @property {import(\"./coordinate.js\").Coordinate} [position] The overlay position\n * in map projection.\n * @property {Positioning} [positioning='top-left'] Defines how\n * the overlay is actually positioned with respect to its `position` property.\n * Possible values are `'bottom-left'`, `'bottom-center'`, `'bottom-right'`,\n * `'center-left'`, `'center-center'`, `'center-right'`, `'top-left'`,\n * `'top-center'`, and `'top-right'`.\n * @property {boolean} [stopEvent=true] Whether event propagation to the map\n * viewport should be stopped. If `true` the overlay is placed in the same\n * container as that of the controls (CSS class name\n * `ol-overlaycontainer-stopevent`); if `false` it is placed in the container\n * with CSS class name specified by the `className` property.\n * @property {boolean} [insertFirst=true] Whether the overlay is inserted first\n * in the overlay container, or appended. If the overlay is placed in the same\n * container as that of the controls (see the `stopEvent` option) you will\n * probably set `insertFirst` to `true` so the overlay is displayed below the\n * controls.\n * @property {PanIntoViewOptions|boolean} [autoPan=false] Pan the map when calling\n * `setPosition`, so that the overlay is entirely visible in the current viewport?\n * If `true` (deprecated), then `autoPanAnimation` and `autoPanMargin` will be\n * used to determine the panning parameters; if an object is supplied then other\n * parameters are ignored.\n * @property {PanOptions} [autoPanAnimation] The animation options used to pan\n * the overlay into view. This animation is only used when `autoPan` is enabled.\n * A `duration` and `easing` may be provided to customize the animation.\n * Deprecated and ignored if `autoPan` is supplied as an object.\n * @property {number} [autoPanMargin=20] The margin (in pixels) between the\n * overlay and the borders of the map when autopanning. Deprecated and ignored\n * if `autoPan` is supplied as an object.\n * @property {PanIntoViewOptions} [autoPanOptions] The options to use for the\n * autoPan. This is only used when `autoPan` is enabled and has preference over\n * the individual `autoPanMargin` and `autoPanOptions`.\n * @property {string} [className='ol-overlay-container ol-selectable'] CSS class\n * name.\n */\n\n/**\n * @typedef {Object} PanOptions\n * @property {number} [duration=1000] The duration of the animation in\n * milliseconds.\n * @property {function(number):number} [easing] The easing function to use. Can\n * be one from {@link module:ol/easing} or a custom function.\n * Default is {@link module:ol/easing.inAndOut}.\n */\n\n/**\n * @typedef {Object} PanIntoViewOptions\n * @property {PanOptions} [animation={}] The animation parameters for the pan\n * @property {number} [margin=20] The margin (in pixels) between the\n * overlay and the borders of the map when panning into view.\n */\n\n/**\n * @enum {string}\n * @protected\n */\nconst Property = {\n  ELEMENT: 'element',\n  MAP: 'map',\n  OFFSET: 'offset',\n  POSITION: 'position',\n  POSITIONING: 'positioning',\n};\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:element'|'change:map'|'change:offset'|'change:position'|\n *   'change:positioning'} OverlayObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<OverlayObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|OverlayObjectEventTypes, Return>} OverlayOnSignature\n */\n\n/**\n * @classdesc\n * An element to be displayed over the map and attached to a single map\n * location.  Like {@link module:ol/control/Control~Control}, Overlays are\n * visible widgets. Unlike Controls, they are not in a fixed position on the\n * screen, but are tied to a geographical coordinate, so panning the map will\n * move an Overlay but not a Control.\n *\n * Example:\n *\n *     import Overlay from 'ol/Overlay';\n *\n *     var popup = new Overlay({\n *       element: document.getElementById('popup')\n *     });\n *     popup.setPosition(coordinate);\n *     map.addOverlay(popup);\n *\n * @api\n */\nclass Overlay extends BaseObject {\n  /**\n   * @param {Options} options Overlay options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {OverlayOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {OverlayOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @protected\n     * @type {Options}\n     */\n    this.options = options;\n\n    /**\n     * @protected\n     * @type {number|string|undefined}\n     */\n    this.id = options.id;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.insertFirst =\n      options.insertFirst !== undefined ? options.insertFirst : true;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.stopEvent = options.stopEvent !== undefined ? options.stopEvent : true;\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = document.createElement('div');\n    this.element.className =\n      options.className !== undefined\n        ? options.className\n        : 'ol-overlay-container ' + CLASS_SELECTABLE;\n    this.element.style.position = 'absolute';\n    this.element.style.pointerEvents = 'auto';\n\n    let autoPan = options.autoPan;\n    if (autoPan && 'object' !== typeof autoPan) {\n      autoPan = {\n        animation: options.autoPanAnimation,\n        margin: options.autoPanMargin,\n      };\n    }\n    /**\n     * @protected\n     * @type {PanIntoViewOptions|false}\n     */\n    this.autoPan = /** @type {PanIntoViewOptions} */ (autoPan) || false;\n\n    /**\n     * @protected\n     * @type {{transform_: string,\n     *         visible: boolean}}\n     */\n    this.rendered = {\n      transform_: '',\n      visible: true,\n    };\n\n    /**\n     * @protected\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.mapPostrenderListenerKey = null;\n\n    this.addChangeListener(Property.ELEMENT, this.handleElementChanged);\n    this.addChangeListener(Property.MAP, this.handleMapChanged);\n    this.addChangeListener(Property.OFFSET, this.handleOffsetChanged);\n    this.addChangeListener(Property.POSITION, this.handlePositionChanged);\n    this.addChangeListener(Property.POSITIONING, this.handlePositioningChanged);\n\n    if (options.element !== undefined) {\n      this.setElement(options.element);\n    }\n\n    this.setOffset(options.offset !== undefined ? options.offset : [0, 0]);\n\n    this.setPositioning(options.positioning || 'top-left');\n\n    if (options.position !== undefined) {\n      this.setPosition(options.position);\n    }\n  }\n\n  /**\n   * Get the DOM element of this overlay.\n   * @return {HTMLElement|undefined} The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  getElement() {\n    return /** @type {HTMLElement|undefined} */ (this.get(Property.ELEMENT));\n  }\n\n  /**\n   * Get the overlay identifier which is set on constructor.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id;\n  }\n\n  /**\n   * Get the map associated with this overlay.\n   * @return {import(\"./PluggableMap.js\").default|null} The map that the\n   * overlay is part of.\n   * @observable\n   * @api\n   */\n  getMap() {\n    return /** @type {import(\"./PluggableMap.js\").default|null} */ (\n      this.get(Property.MAP) || null\n    );\n  }\n\n  /**\n   * Get the offset of this overlay.\n   * @return {Array<number>} The offset.\n   * @observable\n   * @api\n   */\n  getOffset() {\n    return /** @type {Array<number>} */ (this.get(Property.OFFSET));\n  }\n\n  /**\n   * Get the current position of this overlay.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The spatial point that the overlay is\n   *     anchored at.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the current positioning of this overlay.\n   * @return {Positioning} How the overlay is positioned\n   *     relative to its point on the map.\n   * @observable\n   * @api\n   */\n  getPositioning() {\n    return /** @type {Positioning} */ (this.get(Property.POSITIONING));\n  }\n\n  /**\n   * @protected\n   */\n  handleElementChanged() {\n    removeChildren(this.element);\n    const element = this.getElement();\n    if (element) {\n      this.element.appendChild(element);\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleMapChanged() {\n    if (this.mapPostrenderListenerKey) {\n      removeNode(this.element);\n      unlistenByKey(this.mapPostrenderListenerKey);\n      this.mapPostrenderListenerKey = null;\n    }\n    const map = this.getMap();\n    if (map) {\n      this.mapPostrenderListenerKey = listen(\n        map,\n        MapEventType.POSTRENDER,\n        this.render,\n        this\n      );\n      this.updatePixelPosition();\n      const container = this.stopEvent\n        ? map.getOverlayContainerStopEvent()\n        : map.getOverlayContainer();\n      if (this.insertFirst) {\n        container.insertBefore(this.element, container.childNodes[0] || null);\n      } else {\n        container.appendChild(this.element);\n      }\n      this.performAutoPan();\n    }\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handleOffsetChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositionChanged() {\n    this.updatePixelPosition();\n    this.performAutoPan();\n  }\n\n  /**\n   * @protected\n   */\n  handlePositioningChanged() {\n    this.updatePixelPosition();\n  }\n\n  /**\n   * Set the DOM element to be associated with this overlay.\n   * @param {HTMLElement|undefined} element The Element containing the overlay.\n   * @observable\n   * @api\n   */\n  setElement(element) {\n    this.set(Property.ELEMENT, element);\n  }\n\n  /**\n   * Set the map to be associated with this overlay.\n   * @param {import(\"./PluggableMap.js\").default|null} map The map that the\n   * overlay is part of. Pass `null` to just remove the overlay from the current map.\n   * @observable\n   * @api\n   */\n  setMap(map) {\n    this.set(Property.MAP, map);\n  }\n\n  /**\n   * Set the offset for this overlay.\n   * @param {Array<number>} offset Offset.\n   * @observable\n   * @api\n   */\n  setOffset(offset) {\n    this.set(Property.OFFSET, offset);\n  }\n\n  /**\n   * Set the position for this overlay. If the position is `undefined` the\n   * overlay is hidden.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} position The spatial point that the overlay\n   *     is anchored at.\n   * @observable\n   * @api\n   */\n  setPosition(position) {\n    this.set(Property.POSITION, position);\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary) using the configured autoPan parameters\n   * @protected\n   */\n  performAutoPan() {\n    if (this.autoPan) {\n      this.panIntoView(this.autoPan);\n    }\n  }\n\n  /**\n   * Pan the map so that the overlay is entirely visible in the current viewport\n   * (if necessary).\n   * @param {PanIntoViewOptions} [opt_panIntoViewOptions] Options for the pan action\n   * @api\n   */\n  panIntoView(opt_panIntoViewOptions) {\n    const map = this.getMap();\n\n    if (!map || !map.getTargetElement() || !this.get(Property.POSITION)) {\n      return;\n    }\n\n    const mapRect = this.getRect(map.getTargetElement(), map.getSize());\n    const element = this.getElement();\n    const overlayRect = this.getRect(element, [\n      outerWidth(element),\n      outerHeight(element),\n    ]);\n\n    const panIntoViewOptions = opt_panIntoViewOptions || {};\n\n    const myMargin =\n      panIntoViewOptions.margin === undefined ? 20 : panIntoViewOptions.margin;\n    if (!containsExtent(mapRect, overlayRect)) {\n      // the overlay is not completely inside the viewport, so pan the map\n      const offsetLeft = overlayRect[0] - mapRect[0];\n      const offsetRight = mapRect[2] - overlayRect[2];\n      const offsetTop = overlayRect[1] - mapRect[1];\n      const offsetBottom = mapRect[3] - overlayRect[3];\n\n      const delta = [0, 0];\n      if (offsetLeft < 0) {\n        // move map to the left\n        delta[0] = offsetLeft - myMargin;\n      } else if (offsetRight < 0) {\n        // move map to the right\n        delta[0] = Math.abs(offsetRight) + myMargin;\n      }\n      if (offsetTop < 0) {\n        // move map up\n        delta[1] = offsetTop - myMargin;\n      } else if (offsetBottom < 0) {\n        // move map down\n        delta[1] = Math.abs(offsetBottom) + myMargin;\n      }\n\n      if (delta[0] !== 0 || delta[1] !== 0) {\n        const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (\n          map.getView().getCenterInternal()\n        );\n        const centerPx = map.getPixelFromCoordinateInternal(center);\n        if (!centerPx) {\n          return;\n        }\n        const newCenterPx = [centerPx[0] + delta[0], centerPx[1] + delta[1]];\n\n        const panOptions = panIntoViewOptions.animation || {};\n        map.getView().animateInternal({\n          center: map.getCoordinateFromPixelInternal(newCenterPx),\n          duration: panOptions.duration,\n          easing: panOptions.easing,\n        });\n      }\n    }\n  }\n\n  /**\n   * Get the extent of an element relative to the document\n   * @param {HTMLElement} element The element.\n   * @param {import(\"./size.js\").Size} size The size of the element.\n   * @return {import(\"./extent.js\").Extent} The extent.\n   * @protected\n   */\n  getRect(element, size) {\n    const box = element.getBoundingClientRect();\n    const offsetX = box.left + window.pageXOffset;\n    const offsetY = box.top + window.pageYOffset;\n    return [offsetX, offsetY, offsetX + size[0], offsetY + size[1]];\n  }\n\n  /**\n   * Set the positioning for this overlay.\n   * @param {Positioning} positioning how the overlay is\n   *     positioned relative to its point on the map.\n   * @observable\n   * @api\n   */\n  setPositioning(positioning) {\n    this.set(Property.POSITIONING, positioning);\n  }\n\n  /**\n   * Modify the visibility of the element.\n   * @param {boolean} visible Element visibility.\n   * @protected\n   */\n  setVisible(visible) {\n    if (this.rendered.visible !== visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.rendered.visible = visible;\n    }\n  }\n\n  /**\n   * Update pixel position.\n   * @protected\n   */\n  updatePixelPosition() {\n    const map = this.getMap();\n    const position = this.getPosition();\n    if (!map || !map.isRendered() || !position) {\n      this.setVisible(false);\n      return;\n    }\n\n    const pixel = map.getPixelFromCoordinate(position);\n    const mapSize = map.getSize();\n    this.updateRenderedPosition(pixel, mapSize);\n  }\n\n  /**\n   * @param {import(\"./pixel.js\").Pixel} pixel The pixel location.\n   * @param {import(\"./size.js\").Size|undefined} mapSize The map size.\n   * @protected\n   */\n  updateRenderedPosition(pixel, mapSize) {\n    const style = this.element.style;\n    const offset = this.getOffset();\n\n    const positioning = this.getPositioning();\n\n    this.setVisible(true);\n\n    const x = Math.round(pixel[0] + offset[0]) + 'px';\n    const y = Math.round(pixel[1] + offset[1]) + 'px';\n    let posX = '0%';\n    let posY = '0%';\n    if (\n      positioning == 'bottom-right' ||\n      positioning == 'center-right' ||\n      positioning == 'top-right'\n    ) {\n      posX = '-100%';\n    } else if (\n      positioning == 'bottom-center' ||\n      positioning == 'center-center' ||\n      positioning == 'top-center'\n    ) {\n      posX = '-50%';\n    }\n    if (\n      positioning == 'bottom-left' ||\n      positioning == 'bottom-center' ||\n      positioning == 'bottom-right'\n    ) {\n      posY = '-100%';\n    } else if (\n      positioning == 'center-left' ||\n      positioning == 'center-center' ||\n      positioning == 'center-right'\n    ) {\n      posY = '-50%';\n    }\n    const transform = `translate(${posX}, ${posY}) translate(${x}, ${y})`;\n    if (this.rendered.transform_ != transform) {\n      this.rendered.transform_ = transform;\n      style.transform = transform;\n      // @ts-ignore IE9\n      style.msTransform = transform;\n    }\n  }\n\n  /**\n   * returns the options this Overlay has been created with\n   * @return {Options} overlay options\n   */\n  getOptions() {\n    return this.options;\n  }\n}\n\nexport default Overlay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}