{"ast":null,"code":"/**\n * @module ol/style/Stroke\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nvar Stroke = /** @class */function () {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function Stroke(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n  }\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  Stroke.prototype.clone = function () {\n    var color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth()\n    });\n  };\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  Stroke.prototype.getColor = function () {\n    return this.color_;\n  };\n  /**\n   * Get the line cap type for the stroke.\n   * @return {CanvasLineCap|undefined} Line cap.\n   * @api\n   */\n  Stroke.prototype.getLineCap = function () {\n    return this.lineCap_;\n  };\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>} Line dash.\n   * @api\n   */\n  Stroke.prototype.getLineDash = function () {\n    return this.lineDash_;\n  };\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n  Stroke.prototype.getLineDashOffset = function () {\n    return this.lineDashOffset_;\n  };\n  /**\n   * Get the line join type for the stroke.\n   * @return {CanvasLineJoin|undefined} Line join.\n   * @api\n   */\n  Stroke.prototype.getLineJoin = function () {\n    return this.lineJoin_;\n  };\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n  Stroke.prototype.getMiterLimit = function () {\n    return this.miterLimit_;\n  };\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n  Stroke.prototype.getWidth = function () {\n    return this.width_;\n  };\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  Stroke.prototype.setColor = function (color) {\n    this.color_ = color;\n  };\n  /**\n   * Set the line cap.\n   *\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\n   * @api\n   */\n  Stroke.prototype.setLineCap = function (lineCap) {\n    this.lineCap_ = lineCap;\n  };\n  /**\n   * Set the line dash.\n   *\n   * Please note that Internet Explorer 10 and lower [do not support][mdn] the\n   * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\n   * property will have no visual effect in these browsers.\n   *\n   * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\n   *\n   * @param {Array<number>} lineDash Line dash.\n   * @api\n   */\n  Stroke.prototype.setLineDash = function (lineDash) {\n    this.lineDash_ = lineDash;\n  };\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n  Stroke.prototype.setLineDashOffset = function (lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  };\n  /**\n   * Set the line join.\n   *\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\n   * @api\n   */\n  Stroke.prototype.setLineJoin = function (lineJoin) {\n    this.lineJoin_ = lineJoin;\n  };\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n  Stroke.prototype.setMiterLimit = function (miterLimit) {\n    this.miterLimit_ = miterLimit;\n  };\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n  Stroke.prototype.setWidth = function (width) {\n    this.width_ = width;\n  };\n  return Stroke;\n}();\nexport default Stroke;","map":{"version":3,"names":["Stroke","opt_options","options","color_","color","undefined","lineCap_","lineCap","lineDash_","lineDash","lineDashOffset_","lineDashOffset","lineJoin_","lineJoin","miterLimit_","miterLimit","width_","width","prototype","clone","getColor","Array","isArray","slice","getLineCap","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","getWidth","setColor","setLineCap","setLineDash","setLineDashOffset","setLineJoin","setMiterLimit","setWidth"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\style\\Stroke.js"],"sourcesContent":["/**\n * @module ol/style/Stroke\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} [color] A color, gradient or pattern.\n * See {@link module:ol/color~Color} and {@link module:ol/colorlike~ColorLike} for possible formats.\n * Default null; if null, the Canvas/renderer default black will be used.\n * @property {CanvasLineCap} [lineCap='round'] Line cap style: `butt`, `round`, or `square`.\n * @property {CanvasLineJoin} [lineJoin='round'] Line join style: `bevel`, `round`, or `miter`.\n * @property {Array<number>} [lineDash] Line dash pattern. Default is `null` (no dash).\n * Please note that Internet Explorer 10 and lower do not support the `setLineDash` method on\n * the `CanvasRenderingContext2D` and therefore this option will have no visual effect in these browsers.\n * @property {number} [lineDashOffset=0] Line dash offset.\n * @property {number} [miterLimit=10] Miter limit.\n * @property {number} [width] Width.\n */\n\n/**\n * @classdesc\n * Set stroke style for vector features.\n * Note that the defaults given are the Canvas defaults, which will be used if\n * option is not defined. The `get` functions return whatever was entered in\n * the options; they will not return the default.\n * @api\n */\nclass Stroke {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike}\n     */\n    this.color_ = options.color !== undefined ? options.color : null;\n\n    /**\n     * @private\n     * @type {CanvasLineCap|undefined}\n     */\n    this.lineCap_ = options.lineCap;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.lineDash_ = options.lineDash !== undefined ? options.lineDash : null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lineDashOffset_ = options.lineDashOffset;\n\n    /**\n     * @private\n     * @type {CanvasLineJoin|undefined}\n     */\n    this.lineJoin_ = options.lineJoin;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.miterLimit_ = options.miterLimit;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.width_ = options.width;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Stroke} The cloned style.\n   * @api\n   */\n  clone() {\n    const color = this.getColor();\n    return new Stroke({\n      color: Array.isArray(color) ? color.slice() : color || undefined,\n      lineCap: this.getLineCap(),\n      lineDash: this.getLineDash() ? this.getLineDash().slice() : undefined,\n      lineDashOffset: this.getLineDashOffset(),\n      lineJoin: this.getLineJoin(),\n      miterLimit: this.getMiterLimit(),\n      width: this.getWidth(),\n    });\n  }\n\n  /**\n   * Get the stroke color.\n   * @return {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the line cap type for the stroke.\n   * @return {CanvasLineCap|undefined} Line cap.\n   * @api\n   */\n  getLineCap() {\n    return this.lineCap_;\n  }\n\n  /**\n   * Get the line dash style for the stroke.\n   * @return {Array<number>} Line dash.\n   * @api\n   */\n  getLineDash() {\n    return this.lineDash_;\n  }\n\n  /**\n   * Get the line dash offset for the stroke.\n   * @return {number|undefined} Line dash offset.\n   * @api\n   */\n  getLineDashOffset() {\n    return this.lineDashOffset_;\n  }\n\n  /**\n   * Get the line join type for the stroke.\n   * @return {CanvasLineJoin|undefined} Line join.\n   * @api\n   */\n  getLineJoin() {\n    return this.lineJoin_;\n  }\n\n  /**\n   * Get the miter limit for the stroke.\n   * @return {number|undefined} Miter limit.\n   * @api\n   */\n  getMiterLimit() {\n    return this.miterLimit_;\n  }\n\n  /**\n   * Get the stroke width.\n   * @return {number|undefined} Width.\n   * @api\n   */\n  getWidth() {\n    return this.width_;\n  }\n\n  /**\n   * Set the color.\n   *\n   * @param {import(\"../color.js\").Color|import(\"../colorlike.js\").ColorLike} color Color.\n   * @api\n   */\n  setColor(color) {\n    this.color_ = color;\n  }\n\n  /**\n   * Set the line cap.\n   *\n   * @param {CanvasLineCap|undefined} lineCap Line cap.\n   * @api\n   */\n  setLineCap(lineCap) {\n    this.lineCap_ = lineCap;\n  }\n\n  /**\n   * Set the line dash.\n   *\n   * Please note that Internet Explorer 10 and lower [do not support][mdn] the\n   * `setLineDash` method on the `CanvasRenderingContext2D` and therefore this\n   * property will have no visual effect in these browsers.\n   *\n   * [mdn]: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility\n   *\n   * @param {Array<number>} lineDash Line dash.\n   * @api\n   */\n  setLineDash(lineDash) {\n    this.lineDash_ = lineDash;\n  }\n\n  /**\n   * Set the line dash offset.\n   *\n   * @param {number|undefined} lineDashOffset Line dash offset.\n   * @api\n   */\n  setLineDashOffset(lineDashOffset) {\n    this.lineDashOffset_ = lineDashOffset;\n  }\n\n  /**\n   * Set the line join.\n   *\n   * @param {CanvasLineJoin|undefined} lineJoin Line join.\n   * @api\n   */\n  setLineJoin(lineJoin) {\n    this.lineJoin_ = lineJoin;\n  }\n\n  /**\n   * Set the miter limit.\n   *\n   * @param {number|undefined} miterLimit Miter limit.\n   * @api\n   */\n  setMiterLimit(miterLimit) {\n    this.miterLimit_ = miterLimit;\n  }\n\n  /**\n   * Set the width.\n   *\n   * @param {number|undefined} width Width.\n   * @api\n   */\n  setWidth(width) {\n    this.width_ = width;\n  }\n}\n\nexport default Stroke;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}