{"ast":null,"code":"/**\n * @module ol/structs/PriorityQueue\n */\nimport { assert } from '../asserts.js';\nimport { clear } from '../obj.js';\n/**\n * @type {number}\n */\nexport var DROP = Infinity;\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nvar PriorityQueue = /** @class */function () {\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  function PriorityQueue(priorityFunction, keyFunction) {\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n    this.keyFunction_ = keyFunction;\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n    this.elements_ = [];\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.priorities_ = [];\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n    this.queuedElements_ = {};\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n  PriorityQueue.prototype.clear = function () {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  };\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n  PriorityQueue.prototype.dequeue = function () {\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n    var elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  };\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  PriorityQueue.prototype.enqueue = function (element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n    var priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  };\n  /**\n   * @return {number} Count.\n   */\n  PriorityQueue.prototype.getCount = function () {\n    return this.elements_.length;\n  };\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n  PriorityQueue.prototype.getLeftChildIndex_ = function (index) {\n    return index * 2 + 1;\n  };\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n  PriorityQueue.prototype.getRightChildIndex_ = function (index) {\n    return index * 2 + 2;\n  };\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n  PriorityQueue.prototype.getParentIndex_ = function (index) {\n    return index - 1 >> 1;\n  };\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n  PriorityQueue.prototype.heapify_ = function () {\n    var i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n  PriorityQueue.prototype.isEmpty = function () {\n    return this.elements_.length === 0;\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n  PriorityQueue.prototype.isKeyQueued = function (key) {\n    return key in this.queuedElements_;\n  };\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n  PriorityQueue.prototype.isQueued = function (element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  };\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n  PriorityQueue.prototype.siftUp_ = function (index) {\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var count = elements.length;\n    var element = elements[index];\n    var priority = priorities[index];\n    var startIndex = index;\n    while (index < count >> 1) {\n      var lIndex = this.getLeftChildIndex_(index);\n      var rIndex = this.getRightChildIndex_(index);\n      var smallerChildIndex = rIndex < count && priorities[rIndex] < priorities[lIndex] ? rIndex : lIndex;\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  };\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n  PriorityQueue.prototype.siftDown_ = function (startIndex, index) {\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var element = elements[index];\n    var priority = priorities[index];\n    while (index > startIndex) {\n      var parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n  PriorityQueue.prototype.reprioritize = function () {\n    var priorityFunction = this.priorityFunction_;\n    var elements = this.elements_;\n    var priorities = this.priorities_;\n    var index = 0;\n    var n = elements.length;\n    var element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  };\n  return PriorityQueue;\n}();\nexport default PriorityQueue;","map":{"version":3,"names":["assert","clear","DROP","Infinity","PriorityQueue","priorityFunction","keyFunction","priorityFunction_","keyFunction_","elements_","priorities_","queuedElements_","prototype","length","dequeue","elements","priorities","element","pop","siftUp_","elementKey","enqueue","priority","push","siftDown_","getCount","getLeftChildIndex_","index","getRightChildIndex_","getParentIndex_","heapify_","i","isEmpty","isKeyQueued","key","isQueued","count","startIndex","lIndex","rIndex","smallerChildIndex","parentIndex","reprioritize","n"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\structs\\PriorityQueue.js"],"sourcesContent":["/**\n * @module ol/structs/PriorityQueue\n */\nimport {assert} from '../asserts.js';\nimport {clear} from '../obj.js';\n\n/**\n * @type {number}\n */\nexport const DROP = Infinity;\n\n/**\n * @classdesc\n * Priority queue.\n *\n * The implementation is inspired from the Closure Library's Heap class and\n * Python's heapq module.\n *\n * See https://github.com/google/closure-library/blob/master/closure/goog/structs/heap.js\n * and https://hg.python.org/cpython/file/2.7/Lib/heapq.py.\n *\n * @template T\n */\nclass PriorityQueue {\n  /**\n   * @param {function(T): number} priorityFunction Priority function.\n   * @param {function(T): string} keyFunction Key function.\n   */\n  constructor(priorityFunction, keyFunction) {\n    /**\n     * @type {function(T): number}\n     * @private\n     */\n    this.priorityFunction_ = priorityFunction;\n\n    /**\n     * @type {function(T): string}\n     * @private\n     */\n    this.keyFunction_ = keyFunction;\n\n    /**\n     * @type {Array<T>}\n     * @private\n     */\n    this.elements_ = [];\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.priorities_ = [];\n\n    /**\n     * @type {!Object<string, boolean>}\n     * @private\n     */\n    this.queuedElements_ = {};\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.elements_.length = 0;\n    this.priorities_.length = 0;\n    clear(this.queuedElements_);\n  }\n\n  /**\n   * Remove and return the highest-priority element. O(log N).\n   * @return {T} Element.\n   */\n  dequeue() {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[0];\n    if (elements.length == 1) {\n      elements.length = 0;\n      priorities.length = 0;\n    } else {\n      elements[0] = elements.pop();\n      priorities[0] = priorities.pop();\n      this.siftUp_(0);\n    }\n    const elementKey = this.keyFunction_(element);\n    delete this.queuedElements_[elementKey];\n    return element;\n  }\n\n  /**\n   * Enqueue an element. O(log N).\n   * @param {T} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    assert(!(this.keyFunction_(element) in this.queuedElements_), 31); // Tried to enqueue an `element` that was already added to the queue\n    const priority = this.priorityFunction_(element);\n    if (priority != DROP) {\n      this.elements_.push(element);\n      this.priorities_.push(priority);\n      this.queuedElements_[this.keyFunction_(element)] = true;\n      this.siftDown_(0, this.elements_.length - 1);\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.elements_.length;\n  }\n\n  /**\n   * Gets the index of the left child of the node at the given index.\n   * @param {number} index The index of the node to get the left child for.\n   * @return {number} The index of the left child.\n   * @private\n   */\n  getLeftChildIndex_(index) {\n    return index * 2 + 1;\n  }\n\n  /**\n   * Gets the index of the right child of the node at the given index.\n   * @param {number} index The index of the node to get the right child for.\n   * @return {number} The index of the right child.\n   * @private\n   */\n  getRightChildIndex_(index) {\n    return index * 2 + 2;\n  }\n\n  /**\n   * Gets the index of the parent of the node at the given index.\n   * @param {number} index The index of the node to get the parent for.\n   * @return {number} The index of the parent.\n   * @private\n   */\n  getParentIndex_(index) {\n    return (index - 1) >> 1;\n  }\n\n  /**\n   * Make this a heap. O(N).\n   * @private\n   */\n  heapify_() {\n    let i;\n    for (i = (this.elements_.length >> 1) - 1; i >= 0; i--) {\n      this.siftUp_(i);\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.elements_.length === 0;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Is key queued.\n   */\n  isKeyQueued(key) {\n    return key in this.queuedElements_;\n  }\n\n  /**\n   * @param {T} element Element.\n   * @return {boolean} Is queued.\n   */\n  isQueued(element) {\n    return this.isKeyQueued(this.keyFunction_(element));\n  }\n\n  /**\n   * @param {number} index The index of the node to move down.\n   * @private\n   */\n  siftUp_(index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const count = elements.length;\n    const element = elements[index];\n    const priority = priorities[index];\n    const startIndex = index;\n\n    while (index < count >> 1) {\n      const lIndex = this.getLeftChildIndex_(index);\n      const rIndex = this.getRightChildIndex_(index);\n\n      const smallerChildIndex =\n        rIndex < count && priorities[rIndex] < priorities[lIndex]\n          ? rIndex\n          : lIndex;\n\n      elements[index] = elements[smallerChildIndex];\n      priorities[index] = priorities[smallerChildIndex];\n      index = smallerChildIndex;\n    }\n\n    elements[index] = element;\n    priorities[index] = priority;\n    this.siftDown_(startIndex, index);\n  }\n\n  /**\n   * @param {number} startIndex The index of the root.\n   * @param {number} index The index of the node to move up.\n   * @private\n   */\n  siftDown_(startIndex, index) {\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    const element = elements[index];\n    const priority = priorities[index];\n\n    while (index > startIndex) {\n      const parentIndex = this.getParentIndex_(index);\n      if (priorities[parentIndex] > priority) {\n        elements[index] = elements[parentIndex];\n        priorities[index] = priorities[parentIndex];\n        index = parentIndex;\n      } else {\n        break;\n      }\n    }\n    elements[index] = element;\n    priorities[index] = priority;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  reprioritize() {\n    const priorityFunction = this.priorityFunction_;\n    const elements = this.elements_;\n    const priorities = this.priorities_;\n    let index = 0;\n    const n = elements.length;\n    let element, i, priority;\n    for (i = 0; i < n; ++i) {\n      element = elements[i];\n      priority = priorityFunction(element);\n      if (priority == DROP) {\n        delete this.queuedElements_[this.keyFunction_(element)];\n      } else {\n        priorities[index] = priority;\n        elements[index++] = element;\n      }\n    }\n    elements.length = index;\n    priorities.length = index;\n    this.heapify_();\n  }\n}\n\nexport default PriorityQueue;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}