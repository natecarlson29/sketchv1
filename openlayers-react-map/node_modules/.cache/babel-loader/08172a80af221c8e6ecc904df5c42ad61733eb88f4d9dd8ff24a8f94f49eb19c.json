{"ast":null,"code":"/**\n * @module ol/color\n */\nimport { assert } from './asserts.js';\nimport { clamp } from './math.js';\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\nvar HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\nvar NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return toString(color);\n  }\n}\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\nfunction fromNamed(color) {\n  var el = document.createElement('div');\n  el.style.color = color;\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    var rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  } else {\n    return '';\n  }\n}\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport var fromString = function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n  /**\n   * @const\n   * @type {number}\n   */\n  var MAX_CACHE_SIZE = 1024;\n  /**\n   * @type {Object<string, Color>}\n   */\n  var cache = {};\n  /**\n   * @type {number}\n   */\n  var cacheSize = 0;\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      var color;\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          var i = 0;\n          for (var key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n      return color;\n    }\n  );\n}();\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return fromString(color);\n  }\n}\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\nfunction fromStringInternal_(s) {\n  var r, g, b, a, color;\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    var n = s.length - 1; // number of hex digits\n    var d =\n    // number of digits per channel\n    void 0; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    var hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.indexOf('rgb(') == 0) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    assert(false, 14); // Invalid color\n  }\n  return color;\n}\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\nexport function normalize(color) {\n  color[0] = clamp(color[0] + 0.5 | 0, 0, 255);\n  color[1] = clamp(color[1] + 0.5 | 0, 0, 255);\n  color[2] = clamp(color[2] + 0.5 | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  var r = color[0];\n  if (r != (r | 0)) {\n    r = r + 0.5 | 0;\n  }\n  var g = color[1];\n  if (g != (g | 0)) {\n    g = g + 0.5 | 0;\n  }\n  var b = color[2];\n  if (b != (b | 0)) {\n    b = b + 0.5 | 0;\n  }\n  var a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n  return HEX_COLOR_RE_.test(s) || s.indexOf('rgba(') === 0 || s.indexOf('rgb(') === 0;\n}","map":{"version":3,"names":["assert","clamp","HEX_COLOR_RE_","NAMED_COLOR_RE_","asString","color","toString","fromNamed","el","document","createElement","style","body","appendChild","rgb","getComputedStyle","removeChild","fromString","MAX_CACHE_SIZE","cache","cacheSize","s","hasOwnProperty","i","key","fromStringInternal_","asArray","Array","isArray","r","g","b","a","exec","n","length","d","hasAlpha","parseInt","substr","indexOf","slice","split","map","Number","normalize","push","undefined","Math","round","isStringColor","test"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\color.js"],"sourcesContent":["/**\n * @module ol/color\n */\nimport {assert} from './asserts.js';\nimport {clamp} from './math.js';\n\n/**\n * A color represented as a short array [red, green, blue, alpha].\n * red, green, and blue should be integers in the range 0..255 inclusive.\n * alpha should be a float in the range 0..1 inclusive. If no alpha value is\n * given then `1` will be used.\n * @typedef {Array<number>} Color\n * @api\n */\n\n/**\n * This RegExp matches # followed by 3, 4, 6, or 8 hex digits.\n * @const\n * @type {RegExp}\n * @private\n */\nconst HEX_COLOR_RE_ = /^#([a-f0-9]{3}|[a-f0-9]{4}(?:[a-f0-9]{2}){0,2})$/i;\n\n/**\n * Regular expression for matching potential named color style strings.\n * @const\n * @type {RegExp}\n * @private\n */\nconst NAMED_COLOR_RE_ = /^([a-z]*)$|^hsla?\\(.*\\)$/i;\n\n/**\n * Return the color as an rgba string.\n * @param {Color|string} color Color.\n * @return {string} Rgba string.\n * @api\n */\nexport function asString(color) {\n  if (typeof color === 'string') {\n    return color;\n  } else {\n    return toString(color);\n  }\n}\n\n/**\n * Return named color as an rgba string.\n * @param {string} color Named color.\n * @return {string} Rgb string.\n */\nfunction fromNamed(color) {\n  const el = document.createElement('div');\n  el.style.color = color;\n  if (el.style.color !== '') {\n    document.body.appendChild(el);\n    const rgb = getComputedStyle(el).color;\n    document.body.removeChild(el);\n    return rgb;\n  } else {\n    return '';\n  }\n}\n\n/**\n * @param {string} s String.\n * @return {Color} Color.\n */\nexport const fromString = (function () {\n  // We maintain a small cache of parsed strings.  To provide cheap LRU-like\n  // semantics, whenever the cache grows too large we simply delete an\n  // arbitrary 25% of the entries.\n\n  /**\n   * @const\n   * @type {number}\n   */\n  const MAX_CACHE_SIZE = 1024;\n\n  /**\n   * @type {Object<string, Color>}\n   */\n  const cache = {};\n\n  /**\n   * @type {number}\n   */\n  let cacheSize = 0;\n\n  return (\n    /**\n     * @param {string} s String.\n     * @return {Color} Color.\n     */\n    function (s) {\n      let color;\n      if (cache.hasOwnProperty(s)) {\n        color = cache[s];\n      } else {\n        if (cacheSize >= MAX_CACHE_SIZE) {\n          let i = 0;\n          for (const key in cache) {\n            if ((i++ & 3) === 0) {\n              delete cache[key];\n              --cacheSize;\n            }\n          }\n        }\n        color = fromStringInternal_(s);\n        cache[s] = color;\n        ++cacheSize;\n      }\n      return color;\n    }\n  );\n})();\n\n/**\n * Return the color as an array. This function maintains a cache of calculated\n * arrays which means the result should not be modified.\n * @param {Color|string} color Color.\n * @return {Color} Color.\n * @api\n */\nexport function asArray(color) {\n  if (Array.isArray(color)) {\n    return color;\n  } else {\n    return fromString(color);\n  }\n}\n\n/**\n * @param {string} s String.\n * @private\n * @return {Color} Color.\n */\nfunction fromStringInternal_(s) {\n  let r, g, b, a, color;\n\n  if (NAMED_COLOR_RE_.exec(s)) {\n    s = fromNamed(s);\n  }\n\n  if (HEX_COLOR_RE_.exec(s)) {\n    // hex\n    const n = s.length - 1; // number of hex digits\n    let d; // number of digits per channel\n    if (n <= 4) {\n      d = 1;\n    } else {\n      d = 2;\n    }\n    const hasAlpha = n === 4 || n === 8;\n    r = parseInt(s.substr(1 + 0 * d, d), 16);\n    g = parseInt(s.substr(1 + 1 * d, d), 16);\n    b = parseInt(s.substr(1 + 2 * d, d), 16);\n    if (hasAlpha) {\n      a = parseInt(s.substr(1 + 3 * d, d), 16);\n    } else {\n      a = 255;\n    }\n    if (d == 1) {\n      r = (r << 4) + r;\n      g = (g << 4) + g;\n      b = (b << 4) + b;\n      if (hasAlpha) {\n        a = (a << 4) + a;\n      }\n    }\n    color = [r, g, b, a / 255];\n  } else if (s.indexOf('rgba(') == 0) {\n    // rgba()\n    color = s.slice(5, -1).split(',').map(Number);\n    normalize(color);\n  } else if (s.indexOf('rgb(') == 0) {\n    // rgb()\n    color = s.slice(4, -1).split(',').map(Number);\n    color.push(1);\n    normalize(color);\n  } else {\n    assert(false, 14); // Invalid color\n  }\n  return color;\n}\n\n/**\n * TODO this function is only used in the test, we probably shouldn't export it\n * @param {Color} color Color.\n * @return {Color} Clamped color.\n */\nexport function normalize(color) {\n  color[0] = clamp((color[0] + 0.5) | 0, 0, 255);\n  color[1] = clamp((color[1] + 0.5) | 0, 0, 255);\n  color[2] = clamp((color[2] + 0.5) | 0, 0, 255);\n  color[3] = clamp(color[3], 0, 1);\n  return color;\n}\n\n/**\n * @param {Color} color Color.\n * @return {string} String.\n */\nexport function toString(color) {\n  let r = color[0];\n  if (r != (r | 0)) {\n    r = (r + 0.5) | 0;\n  }\n  let g = color[1];\n  if (g != (g | 0)) {\n    g = (g + 0.5) | 0;\n  }\n  let b = color[2];\n  if (b != (b | 0)) {\n    b = (b + 0.5) | 0;\n  }\n  const a = color[3] === undefined ? 1 : Math.round(color[3] * 100) / 100;\n  return 'rgba(' + r + ',' + g + ',' + b + ',' + a + ')';\n}\n\n/**\n * @param {string} s String.\n * @return {boolean} Whether the string is actually a valid color\n */\nexport function isStringColor(s) {\n  if (NAMED_COLOR_RE_.test(s)) {\n    s = fromNamed(s);\n  }\n  return (\n    HEX_COLOR_RE_.test(s) || s.indexOf('rgba(') === 0 || s.indexOf('rgb(') === 0\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}