{"ast":null,"code":"/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport { createOrUpdate, equals } from '../extent.js';\nimport { getUid } from '../util.js';\nimport { isEmpty } from '../obj.js';\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nvar RBush = /** @class */function () {\n  /**\n   * @param {number} [opt_maxEntries] Max entries.\n   */\n  function RBush(opt_maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(opt_maxEntries);\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n  }\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  RBush.prototype.insert = function (extent, value) {\n    /** @type {Entry} */\n    var item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value\n    };\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  };\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n  RBush.prototype.load = function (extents, values) {\n    var items = new Array(values.length);\n    for (var i = 0, l = values.length; i < l; i++) {\n      var extent = extents[i];\n      var value = values[i];\n      /** @type {Entry} */\n      var item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  };\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n  RBush.prototype.remove = function (value) {\n    var uid = getUid(value);\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    var item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  };\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  RBush.prototype.update = function (extent, value) {\n    var item = this.items_[getUid(value)];\n    var bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  };\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n  RBush.prototype.getAll = function () {\n    var items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n  RBush.prototype.getInExtent = function (extent) {\n    /** @type {Entry} */\n    var bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3]\n    };\n    var items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  };\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  RBush.prototype.forEach = function (callback) {\n    return this.forEach_(this.getAll(), callback);\n  };\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  RBush.prototype.forEachInExtent = function (extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  };\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n  RBush.prototype.forEach_ = function (values, callback) {\n    var result;\n    for (var i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n  RBush.prototype.isEmpty = function () {\n    return isEmpty(this.items_);\n  };\n  /**\n   * Remove all values from the RBush.\n   */\n  RBush.prototype.clear = function () {\n    this.rbush_.clear();\n    this.items_ = {};\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  RBush.prototype.getExtent = function (opt_extent) {\n    var data = this.rbush_.toJSON();\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, opt_extent);\n  };\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n  RBush.prototype.concat = function (rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (var i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  };\n  return RBush;\n}();\nexport default RBush;","map":{"version":3,"names":["RBush_","createOrUpdate","equals","getUid","isEmpty","RBush","opt_maxEntries","rbush_","items_","prototype","insert","extent","value","item","minX","minY","maxX","maxY","load","extents","values","items","Array","length","i","l","remove","uid","update","bbox","getAll","all","map","getInExtent","search","forEach","callback","forEach_","forEachInExtent","result","clear","getExtent","opt_extent","data","toJSON","concat","rbush"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\structs\\RBush.js"],"sourcesContent":["/**\n * @module ol/structs/RBush\n */\nimport RBush_ from 'rbush';\nimport {createOrUpdate, equals} from '../extent.js';\nimport {getUid} from '../util.js';\nimport {isEmpty} from '../obj.js';\n\n/**\n * @typedef {Object} Entry\n * @property {number} minX MinX.\n * @property {number} minY MinY.\n * @property {number} maxX MaxX.\n * @property {number} maxY MaxY.\n * @property {Object} [value] Value.\n */\n\n/**\n * @classdesc\n * Wrapper around the RBush by Vladimir Agafonkin.\n * See https://github.com/mourner/rbush.\n *\n * @template T\n */\nclass RBush {\n  /**\n   * @param {number} [opt_maxEntries] Max entries.\n   */\n  constructor(opt_maxEntries) {\n    /**\n     * @private\n     */\n    this.rbush_ = new RBush_(opt_maxEntries);\n\n    /**\n     * A mapping between the objects added to this rbush wrapper\n     * and the objects that are actually added to the internal rbush.\n     * @private\n     * @type {Object<string, Entry>}\n     */\n    this.items_ = {};\n  }\n\n  /**\n   * Insert a value into the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  insert(extent, value) {\n    /** @type {Entry} */\n    const item = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n      value: value,\n    };\n\n    this.rbush_.insert(item);\n    this.items_[getUid(value)] = item;\n  }\n\n  /**\n   * Bulk-insert values into the RBush.\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\n   * @param {Array<T>} values Values.\n   */\n  load(extents, values) {\n    const items = new Array(values.length);\n    for (let i = 0, l = values.length; i < l; i++) {\n      const extent = extents[i];\n      const value = values[i];\n\n      /** @type {Entry} */\n      const item = {\n        minX: extent[0],\n        minY: extent[1],\n        maxX: extent[2],\n        maxY: extent[3],\n        value: value,\n      };\n      items[i] = item;\n      this.items_[getUid(value)] = item;\n    }\n    this.rbush_.load(items);\n  }\n\n  /**\n   * Remove a value from the RBush.\n   * @param {T} value Value.\n   * @return {boolean} Removed.\n   */\n  remove(value) {\n    const uid = getUid(value);\n\n    // get the object in which the value was wrapped when adding to the\n    // internal rbush. then use that object to do the removal.\n    const item = this.items_[uid];\n    delete this.items_[uid];\n    return this.rbush_.remove(item) !== null;\n  }\n\n  /**\n   * Update the extent of a value in the RBush.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {T} value Value.\n   */\n  update(extent, value) {\n    const item = this.items_[getUid(value)];\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\n    if (!equals(bbox, extent)) {\n      this.remove(value);\n      this.insert(extent, value);\n    }\n  }\n\n  /**\n   * Return all values in the RBush.\n   * @return {Array<T>} All.\n   */\n  getAll() {\n    const items = this.rbush_.all();\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\n   * Return all values in the given extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<T>} All in extent.\n   */\n  getInExtent(extent) {\n    /** @type {Entry} */\n    const bbox = {\n      minX: extent[0],\n      minY: extent[1],\n      maxX: extent[2],\n      maxY: extent[3],\n    };\n    const items = this.rbush_.search(bbox);\n    return items.map(function (item) {\n      return item.value;\n    });\n  }\n\n  /**\n   * Calls a callback function with each value in the tree.\n   * If the callback returns a truthy value, this value is returned without\n   * checking the rest of the tree.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  forEach(callback) {\n    return this.forEach_(this.getAll(), callback);\n  }\n\n  /**\n   * Calls a callback function with each value in the provided extent.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(T): *} callback Callback.\n   * @return {*} Callback return value.\n   */\n  forEachInExtent(extent, callback) {\n    return this.forEach_(this.getInExtent(extent), callback);\n  }\n\n  /**\n   * @param {Array<T>} values Values.\n   * @param {function(T): *} callback Callback.\n   * @private\n   * @return {*} Callback return value.\n   */\n  forEach_(values, callback) {\n    let result;\n    for (let i = 0, l = values.length; i < l; i++) {\n      result = callback(values[i]);\n      if (result) {\n        return result;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.items_);\n  }\n\n  /**\n   * Remove all values from the RBush.\n   */\n  clear() {\n    this.rbush_.clear();\n    this.items_ = {};\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} [opt_extent] Extent.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getExtent(opt_extent) {\n    const data = this.rbush_.toJSON();\n    return createOrUpdate(\n      data.minX,\n      data.minY,\n      data.maxX,\n      data.maxY,\n      opt_extent\n    );\n  }\n\n  /**\n   * @param {RBush} rbush R-Tree.\n   */\n  concat(rbush) {\n    this.rbush_.load(rbush.rbush_.all());\n    for (const i in rbush.items_) {\n      this.items_[i] = rbush.items_[i];\n    }\n  }\n}\n\nexport default RBush;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}