{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport { /*always,*/primaryAction } from 'ol/events/condition';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle, closingSegmentStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, pointToSegmentDistance } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 1.524;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n  const editingLineStringRef = useRef(null);\n  const editingLineStringOriginalCoords = useRef(null);\n\n  // Helper to check if two coordinates are equal (with small tolerance)\n  function coordsEqual(a, b, tol = 1e-8) {\n    return Math.abs(a[0] - b[0]) < tol && Math.abs(a[1] - b[1]) < tol;\n  }\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n    return closestCoord;\n  }\n  useEffect(() => {\n    var _vectorSourceRef$curr, _vectorSourceRef$curr2;\n    const allFeatures = ((_vectorSourceRef$curr = vectorSourceRef.current) === null || _vectorSourceRef$curr === void 0 ? void 0 : (_vectorSourceRef$curr2 = _vectorSourceRef$curr.getFeatures) === null || _vectorSourceRef$curr2 === void 0 ? void 0 : _vectorSourceRef$curr2.call(_vectorSourceRef$curr)) || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    map.addControl(new Rotate({\n      autoHide: false,\n      duration: 500\n    }));\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else /* if (modeRef.current === 'select')*/{\n          highlightSource.clear();\n          let found = false;\n          map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n            if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n              const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n\n              // Check for vertex hover first\n              for (let i = 0; i < coords.length; i++) {\n                const pixel = map.getPixelFromCoordinate(coords[i]);\n                const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n                if (dist < 8) {\n                  // 8 pixels tolerance for vertex\n                  const vertexFeature = new Feature(new Point(coords[i]));\n                  vertexFeature.setStyle(highlightVertexStyle);\n                  highlightSource.addFeature(vertexFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n\n              // If no vertex found, check for segment hover\n              for (let i = 0; i < coords.length - 1; i++) {\n                const seg = [coords[i], coords[i + 1]];\n                const pixel1 = map.getPixelFromCoordinate(seg[0]);\n                const pixel2 = map.getPixelFromCoordinate(seg[1]);\n                const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n                if (dist < 8) {\n                  // 8 pixels tolerance for segment\n                  const segFeature = new Feature(new LineString(seg));\n                  segFeature.setStyle(highlightSegmentStyle);\n                  highlightSource.addFeature(segFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n            }\n            return found;\n          });\n        }\n    });\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      const vectorSource = vectorSourceRef.current;\n      const map = mapRef.current;\n\n      // 1. If not drawing, check for snap to LineString endpoint\n      if (!drawingRef.current) {\n        let snappedLine = null;\n        let snappedEndIdx = null;\n        let snappedEndpoint = null;\n        // Try to snap to any LineString endpoint\n        vectorSource.getFeatures().forEach(feature => {\n          if (feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getCoordinates();\n            if (coordsEqual(coord, coords[0])) {\n              snappedLine = feature;\n              snappedEndIdx = 0;\n              snappedEndpoint = coords[0];\n            } else if (coordsEqual(coord, coords[coords.length - 1])) {\n              snappedLine = feature;\n              snappedEndIdx = coords.length - 1;\n              snappedEndpoint = coords[coords.length - 1];\n            }\n          }\n        });\n        if (snappedLine) {\n          // Start editing this LineString\n          editingLineStringRef.current = snappedLine;\n          editingLineStringOriginalCoords.current = [...snappedLine.getGeometry().getCoordinates()];\n          drawingRef.current = true;\n          setDrawing(true);\n          polygonFeatureRef.current = snappedLine;\n          snappedLine.setStyle(activePolygonStyle);\n          // Optionally, add a history action for starting edit\n          addHistoryAction({\n            type: 'start-edit-linestring',\n            featureId: snappedLine.getId(),\n            prevCoords: [...editingLineStringOriginalCoords.current],\n            newCoords: [...editingLineStringOriginalCoords.current]\n          });\n          return; // Wait for next click to add a point\n        }\n        // ...existing code for starting a new polygon...\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n        const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]]\n        });\n        return;\n      }\n\n      // 2. If editing a LineString, add points to it\n      if (editingLineStringRef.current) {\n        const feature = editingLineStringRef.current;\n        const geom = feature.getGeometry();\n        let coords = geom.getCoordinates();\n        // Add the new point\n        coords.push(coord);\n        geom.setCoordinates(coords);\n        createSegmentOverlays(feature, mapRef);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: coords.slice(0, -1),\n          newCoords: [...coords]\n        });\n        // 3. Check if this point snaps to the opposite end\n        const start = coords[0];\n        const end = coords[coords.length - 1];\n        if (coords.length > 2 && (coordsEqual(coord, start) || coordsEqual(coord, coords[coords.length - 2]))) {\n          // Convert to Polygon\n          const ring = [...coords];\n          if (!coordsEqual(ring[0], ring[ring.length - 1])) {\n            ring.push(ring[0]);\n          }\n          const poly = new Polygon([ring]);\n          feature.setGeometry(poly);\n          editingLineStringRef.current = null;\n          // Optionally, update style\n          feature.setStyle(activePolygonStyle);\n          polygonFeatureRef.current = feature;\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: coords,\n            newCoords: ring\n          });\n          // Now continue as polygon drawing\n        }\n        return;\n      }\n\n      // 3. Normal polygon drawing (existing logic)\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        // if (lastAction.type === 'delete-segment') {\n        //   let lineFeature = vectorSourceRef.current.getFeatures().find(\n        //     f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n        //   );\n        //   if (lineFeature) {\n        //     clearPolygonOverlays(lineFeature, mapRef);\n        //     vectorSourceRef.current.removeFeature(lineFeature);\n        //   }\n        //   const newPoly = new Feature(new Polygon([prevCoords]));\n        //   if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n        //   vectorSourceRef.current.addFeature(newPoly);\n        //   polygonFeatureRef.current = newPoly;\n        //   if (prevCoords && prevCoords.length > 1) {\n        //     createSegmentOverlays(newPoly, mapRef);\n        //   }\n        //   return prev.slice(0, -1);\n        // }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        // feature.getGeometry().setCoordinates([prevCoords]);\n        // if (prevCoords.length > 1) {\n        //   createSegmentOverlays(feature, mapRef);\n        // }\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n      const [start, end] = coords;\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n        const input = textRef.current.trim().toUpperCase();\n        let dx = 0,\n          dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R':\n                dx += meters;\n                break;\n              case 'L':\n                dx -= meters;\n                break;\n              case 'U':\n                dy += meters;\n                break;\n              case 'D':\n                dy -= meters;\n                break;\n              default:\n                break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords\n          });\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = angleDeg * Math.PI / 180 + rotation;\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n      }\n      // ctrl + z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.key === 'R')) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    //set value to be used in 'Enter' calculations\n    textRef.current = text;\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      let translate = new Translate({\n        layers: [vectorLayerRef.current],\n        condition: primaryAction\n      });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Listen for translateend to track moves\n      translate.on('translateend', evt => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n        });\n      });\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', evt => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dimension-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"dimension-input\",\n        ref: inputRef,\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Dimension (ft.)\",\n        autoFocus: true,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 890,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 889,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 902,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 908,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 901,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 916,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 917,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Clone, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 918,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"history-toggle\",\n        className: `map-button${showHistory ? ' active' : ''}`,\n        onClick: () => setShowHistory(v => !v),\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 919,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 915,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 925,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 926,\n      columnNumber: 7\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 935,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 888,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"oxX2xr5THhcYA4/sSHPZZ7dlXqY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","fromLonLat","ScaleLine","Rotate","Translate","primaryAction","History","FlipHorizButton","FlipVertButton","RightClick","Clone","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","closingSegmentStyle","clearPolygonOverlays","createSegmentOverlays","pointToSegmentDistance","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","textRef","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","polygonFeatureRef","drawingRef","drawing","setDrawing","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","showHistory","setShowHistory","editingLineStringRef","editingLineStringOriginalCoords","coordsEqual","a","b","tol","Math","abs","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","getSource","clear","getSnappedCoordinate","map","vectorSource","pointerPixel","tolerance","closestCoord","minDist","Infinity","getFeatures","forEach","geom","getGeometry","coords","getType","getCoordinates","coord","pixel","getPixelFromCoordinate","dist","hypot","_vectorSourceRef$curr","_vectorSourceRef$curr2","allFeatures","call","f","setStyle","vectorLayer","source","style","target","layers","view","center","zoom","addControl","units","autoHide","duration","highlightSource","name","addLayer","on","evt","coordinate","snappedCoord","removeFeature","ghost","addFeature","found","forEachFeatureAtPixel","i","length","sqrt","pow","vertexFeature","seg","pixel1","pixel2","segFeature","drawClick","snappedLine","snappedEndIdx","snappedEndpoint","featureId","getId","prevCoords","newCoords","poly","setId","Date","now","toString","push","setCoordinates","slice","start","end","ring","setGeometry","selectClick","features","getFeaturesAtPixel","filter","includes","allPolygons","currentIdx","nextIdx","nextFeature","console","log","addSegment","direction","last","dx","dy","OFFSET","rotation","getView","getRotation","cos","sin","rotatedDx","rotatedDy","newPt","handleUndo","lastActionForRedo","lastAction","featureToRemove","restoredFeature","geomType","redoPrev","handleRedo","require","default","lineFeature","remarkLineSegments","histPrev","rotateMapToHighlightedSegment","currentRotation","startPixel","endPixel","unrotatedDx","unrotatedDy","angle","atan2","PI","animate","handleKeyDown","e","key","preventDefault","input","trim","toUpperCase","dirPattern","test","parts","split","s","part","dir","val","parseFloat","isNaN","meters","distance","angleDeg","distStr","angleStr","angleRad","dx2","dy2","ctrlKey","metaKey","document","addEventListener","setTarget","removeEventListener","removeInteraction","translate","condition","addInteraction","set","children","id","ref","value","onChange","placeholder","autoFocus","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","v","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport { /*always,*/  primaryAction } from 'ol/events/condition';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle,\n  closingSegmentStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 1.524;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n\n  const editingLineStringRef = useRef(null);\n  const editingLineStringOriginalCoords = useRef(null);\n\n  // Helper to check if two coordinates are equal (with small tolerance)\n  function coordsEqual(a, b, tol = 1e-8) {\n    return Math.abs(a[0] - b[0]) < tol && Math.abs(a[1] - b[1]) < tol;\n  }\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n\n    return closestCoord;\n  }\n\n  useEffect(() => {\n    const allFeatures = vectorSourceRef.current?.getFeatures?.() || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    map.addControl(new Rotate({ autoHide: false, duration: 500 }));\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else/* if (modeRef.current === 'select')*/ {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      const vectorSource = vectorSourceRef.current;\n      const map = mapRef.current;\n\n      // 1. If not drawing, check for snap to LineString endpoint\n      if (!drawingRef.current) {\n        let snappedLine = null;\n        let snappedEndIdx = null;\n        let snappedEndpoint = null;\n        // Try to snap to any LineString endpoint\n        vectorSource.getFeatures().forEach(feature => {\n          if (feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getCoordinates();\n            if (coordsEqual(coord, coords[0])) {\n              snappedLine = feature;\n              snappedEndIdx = 0;\n              snappedEndpoint = coords[0];\n            } else if (coordsEqual(coord, coords[coords.length - 1])) {\n              snappedLine = feature;\n              snappedEndIdx = coords.length - 1;\n              snappedEndpoint = coords[coords.length - 1];\n            }\n          }\n        });\n        if (snappedLine) {\n          // Start editing this LineString\n          editingLineStringRef.current = snappedLine;\n          editingLineStringOriginalCoords.current = [...snappedLine.getGeometry().getCoordinates()];\n          drawingRef.current = true;\n          setDrawing(true);\n          polygonFeatureRef.current = snappedLine;\n          snappedLine.setStyle(activePolygonStyle);\n          // Optionally, add a history action for starting edit\n          addHistoryAction({\n            type: 'start-edit-linestring',\n            featureId: snappedLine.getId(),\n            prevCoords: [...editingLineStringOriginalCoords.current],\n            newCoords: [...editingLineStringOriginalCoords.current],\n          });\n          return; // Wait for next click to add a point\n        }\n        // ...existing code for starting a new polygon...\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n        const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]],\n        });\n        return;\n      }\n\n      // 2. If editing a LineString, add points to it\n      if (editingLineStringRef.current) {\n        const feature = editingLineStringRef.current;\n        const geom = feature.getGeometry();\n        let coords = geom.getCoordinates();\n        // Add the new point\n        coords.push(coord);\n        geom.setCoordinates(coords);\n        createSegmentOverlays(feature, mapRef);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: coords.slice(0, -1),\n          newCoords: [...coords],\n        });\n        // 3. Check if this point snaps to the opposite end\n        const start = coords[0];\n        const end = coords[coords.length - 1];\n        if (coords.length > 2 && (coordsEqual(coord, start) || coordsEqual(coord, coords[coords.length - 2]))) {\n          // Convert to Polygon\n          const ring = [...coords];\n          if (!coordsEqual(ring[0], ring[ring.length - 1])) {\n            ring.push(ring[0]);\n          }\n          const poly = new Polygon([ring]);\n          feature.setGeometry(poly);\n          editingLineStringRef.current = null;\n          // Optionally, update style\n          feature.setStyle(activePolygonStyle);\n          polygonFeatureRef.current = feature;\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: coords,\n            newCoords: ring,\n          });\n          // Now continue as polygon drawing\n        }\n        return;\n      }\n\n      // 3. Normal polygon drawing (existing logic)\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        // if (lastAction.type === 'delete-segment') {\n        //   let lineFeature = vectorSourceRef.current.getFeatures().find(\n        //     f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n        //   );\n        //   if (lineFeature) {\n        //     clearPolygonOverlays(lineFeature, mapRef);\n        //     vectorSourceRef.current.removeFeature(lineFeature);\n        //   }\n        //   const newPoly = new Feature(new Polygon([prevCoords]));\n        //   if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n        //   vectorSourceRef.current.addFeature(newPoly);\n        //   polygonFeatureRef.current = newPoly;\n        //   if (prevCoords && prevCoords.length > 1) {\n        //     createSegmentOverlays(newPoly, mapRef);\n        //   }\n        //   return prev.slice(0, -1);\n        // }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        // feature.getGeometry().setCoordinates([prevCoords]);\n        // if (prevCoords.length > 1) {\n        //   createSegmentOverlays(feature, mapRef);\n        // }\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [\n        (start[0] + end[0]) / 2,\n        (start[1] + end[1]) / 2\n      ];\n\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n        const input = textRef.current.trim().toUpperCase();\n\n        let dx = 0, dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R': dx += meters; break;\n              case 'L': dx -= meters; break;\n              case 'U': dy += meters; break;\n              case 'D': dy -= meters; break;\n              default: break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, mapRef);\n\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords,\n          });\n\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = (angleDeg * Math.PI) / 180 + rotation;\n\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    //set value to be used in 'Enter' calculations\n    textRef.current = text;\n\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      let translate = new Translate({ layers: [vectorLayerRef.current], condition: primaryAction });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Listen for translateend to track moves\n      translate.on('translateend', (evt) => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords,\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n\n        });\n      });\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', (evt) => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  return (\n    <div>\n      <div id=\"dimension-input-container\">\n        <input\n          id=\"dimension-input\"\n          ref={inputRef}\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n          placeholder=\"Dimension (ft.)\"\n          autoFocus\n          autoComplete='off'\n        />\n      </div>\n      <div id=\"map-menu-vert\">\n        <button\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n          disabled={mode === 'draw' && drawing}>\n          Draw\n        </button>\n        <button\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n          disabled={mode === 'draw' && drawing}>\n          Select\n        </button>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <Clone selectedFeature={selectedFeature} vectorSourceRef={vectorSourceRef} setSelectedFeature={setSelectedFeature} addHistoryAction={addHistoryAction} mapRef={mapRef} />\n        <div id=\"history-toggle\" className={`map-button${showHistory ? ' active' : ''}`} onClick={() => setShowHistory(v => !v)}>\n          History\n        </div>\n        {/* <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div> */}\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n      />\n      {showHistory && (\n        <History history={history} redoStack={redoStack} />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}