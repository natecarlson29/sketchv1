{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, { zoomByDelta } from './Interaction.js';\nimport { targetNotEditable } from '../events/condition.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nvar KeyboardZoom = /** @class */function (_super) {\n  __extends(KeyboardZoom, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function KeyboardZoom(opt_options) {\n    var _this = _super.call(this) || this;\n    var options = opt_options ? opt_options : {};\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : targetNotEditable;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.delta_ = options.delta ? options.delta : 1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 100;\n    return _this;\n  }\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardZoom}\n   */\n  KeyboardZoom.prototype.handleEvent = function (mapBrowserEvent) {\n    var stopEvent = false;\n    if (mapBrowserEvent.type == EventType.KEYDOWN || mapBrowserEvent.type == EventType.KEYPRESS) {\n      var keyEvent = /** @type {KeyboardEvent} */mapBrowserEvent.originalEvent;\n      var charCode = keyEvent.charCode;\n      if (this.condition_(mapBrowserEvent) && (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))) {\n        var map = mapBrowserEvent.map;\n        var delta = charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n        var view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  };\n  return KeyboardZoom;\n}(Interaction);\nexport default KeyboardZoom;","map":{"version":3,"names":["EventType","Interaction","zoomByDelta","targetNotEditable","KeyboardZoom","_super","__extends","opt_options","_this","call","options","condition_","condition","delta_","delta","duration_","duration","undefined","prototype","handleEvent","mapBrowserEvent","stopEvent","type","KEYDOWN","KEYPRESS","keyEvent","originalEvent","charCode","charCodeAt","map","view","getView","preventDefault"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\interaction\\KeyboardZoom.js"],"sourcesContent":["/**\n * @module ol/interaction/KeyboardZoom\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {zoomByDelta} from './Interaction.js';\nimport {targetNotEditable} from '../events/condition.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [delta=1] The zoom level delta on each key press.\n */\n\n/**\n * @classdesc\n * Allows the user to zoom the map using keyboard + and -.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardPan~KeyboardPan}.\n * @api\n */\nclass KeyboardZoom extends Interaction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : targetNotEditable;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delta_ = options.delta ? options.delta : 1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides whether to zoom in or out (depending on whether the\n   * key pressed was '+' or '-').\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardZoom}\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (\n      mapBrowserEvent.type == EventType.KEYDOWN ||\n      mapBrowserEvent.type == EventType.KEYPRESS\n    ) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const charCode = keyEvent.charCode;\n      if (\n        this.condition_(mapBrowserEvent) &&\n        (charCode == '+'.charCodeAt(0) || charCode == '-'.charCodeAt(0))\n      ) {\n        const map = mapBrowserEvent.map;\n        const delta =\n          charCode == '+'.charCodeAt(0) ? this.delta_ : -this.delta_;\n        const view = map.getView();\n        zoomByDelta(view, delta, undefined, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardZoom;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,WAAW,IAAGC,WAAW,QAAO,kBAAkB;AACzD,SAAQC,iBAAiB,QAAO,wBAAwB;AAExD;;;;;;;;;AAUA;;;;;;;;;;;;;AAaA,IAAAC,YAAA,0BAAAC,MAAA;EAA2BC,SAAA,CAAAF,YAAA,EAAAC,MAAA;EACzB;;;EAGA,SAAAD,aAAYG,WAAW;IAAvB,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,MAAO;IAEP,IAAMC,OAAO,GAAGH,WAAW,GAAGA,WAAW,GAAG,EAAE;IAE9C;;;;IAIAC,KAAI,CAACG,UAAU,GAAGD,OAAO,CAACE,SAAS,GAAGF,OAAO,CAACE,SAAS,GAAGT,iBAAiB;IAE3E;;;;IAIAK,KAAI,CAACK,MAAM,GAAGH,OAAO,CAACI,KAAK,GAAGJ,OAAO,CAACI,KAAK,GAAG,CAAC;IAE/C;;;;IAIAN,KAAI,CAACO,SAAS,GAAGL,OAAO,CAACM,QAAQ,KAAKC,SAAS,GAAGP,OAAO,CAACM,QAAQ,GAAG,GAAG;;EAC1E;EAEA;;;;;;;;EAQAZ,YAAA,CAAAc,SAAA,CAAAC,WAAW,GAAX,UAAYC,eAAe;IACzB,IAAIC,SAAS,GAAG,KAAK;IACrB,IACED,eAAe,CAACE,IAAI,IAAItB,SAAS,CAACuB,OAAO,IACzCH,eAAe,CAACE,IAAI,IAAItB,SAAS,CAACwB,QAAQ,EAC1C;MACA,IAAMC,QAAQ,GAAG,4BACfL,eAAe,CAACM,aACjB;MACD,IAAMC,QAAQ,GAAGF,QAAQ,CAACE,QAAQ;MAClC,IACE,IAAI,CAAChB,UAAU,CAACS,eAAe,CAAC,KAC/BO,QAAQ,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,IAAID,QAAQ,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,CAAC,EAChE;QACA,IAAMC,GAAG,GAAGT,eAAe,CAACS,GAAG;QAC/B,IAAMf,KAAK,GACTa,QAAQ,IAAI,GAAG,CAACC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,CAACf,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM;QAC5D,IAAMiB,IAAI,GAAGD,GAAG,CAACE,OAAO,EAAE;QAC1B7B,WAAW,CAAC4B,IAAI,EAAEhB,KAAK,EAAEG,SAAS,EAAE,IAAI,CAACF,SAAS,CAAC;QACnDU,QAAQ,CAACO,cAAc,EAAE;QACzBX,SAAS,GAAG,IAAI;;;IAGpB,OAAO,CAACA,SAAS;EACnB,CAAC;EACH,OAAAjB,YAAC;AAAD,CAAC,CA7D0BH,WAAW;AA+DtC,eAAeG,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}