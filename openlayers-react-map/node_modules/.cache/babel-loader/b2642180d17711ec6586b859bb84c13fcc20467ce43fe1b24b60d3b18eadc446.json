{"ast":null,"code":"/**\n * @module ol/render/canvas/ExecutorGroup\n */\nimport Executor from './Executor.js';\nimport { buffer, createEmpty, extendCoordinate } from '../../extent.js';\nimport { compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { isEmpty } from '../../obj.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nimport { transform2D } from '../../geom/flat/transform.js';\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nvar ORDER = ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'];\nvar ExecutorGroup = /** @class */function () {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [opt_renderBuffer] Optional rendering buffer.\n   */\n  function ExecutorGroup(maxExtent, resolution, pixelRatio, overlaps, allInstructions, opt_renderBuffer) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = overlaps;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderBuffer_ = opt_renderBuffer;\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Executor\").default>>}\n     */\n    this.executorsByZIndex_ = {};\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.hitDetectionContext_ = null;\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.hitDetectionTransform_ = createTransform();\n    this.createExecutors_(allInstructions);\n  }\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  ExecutorGroup.prototype.clip = function (context, transform) {\n    var flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  };\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   */\n  ExecutorGroup.prototype.createExecutors_ = function (allInstructions) {\n    for (var zIndex in allInstructions) {\n      var executors = this.executorsByZIndex_[zIndex];\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n      var instructionByZindex = allInstructions[zIndex];\n      for (var builderType in instructionByZindex) {\n        var instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(this.resolution_, this.pixelRatio_, this.overlaps_, instructions);\n      }\n    }\n  };\n  /**\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n  ExecutorGroup.prototype.hasExecutors = function (executors) {\n    for (var zIndex in this.executorsByZIndex_) {\n      var candidates = this.executorsByZIndex_[zIndex];\n      for (var i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  ExecutorGroup.prototype.forEachFeatureAtCoordinate = function (coordinate, resolution, rotation, hitTolerance, callback, declutteredFeatures) {\n    hitTolerance = Math.round(hitTolerance);\n    var contextSize = hitTolerance * 2 + 1;\n    var transform = composeTransform(this.hitDetectionTransform_, hitTolerance + 0.5, hitTolerance + 0.5, 1 / resolution, -1 / resolution, -rotation, -coordinate[0], -coordinate[1]);\n    var newContext = !this.hitDetectionContext_;\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(contextSize, contextSize);\n    }\n    var context = this.hitDetectionContext_;\n    if (context.canvas.width !== contextSize || context.canvas.height !== contextSize) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    var hitExtent;\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(hitExtent, resolution * (this.renderBuffer_ + hitTolerance), hitExtent);\n    }\n    var indexes = getPixelIndexArray(hitTolerance);\n    var builderType;\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n    function featureCallback(feature, geometry) {\n      var imageData = context.getImageData(0, 0, contextSize, contextSize).data;\n      for (var i_1 = 0, ii = indexes.length; i_1 < ii; i_1++) {\n        if (imageData[indexes[i_1]] > 0) {\n          if (!declutteredFeatures || builderType !== 'Image' && builderType !== 'Text' || declutteredFeatures.indexOf(feature) !== -1) {\n            var idx = (indexes[i_1] - 3) / 4;\n            var x = hitTolerance - idx % contextSize;\n            var y = hitTolerance - (idx / contextSize | 0);\n            var result_1 = callback(feature, geometry, x * x + y * y);\n            if (result_1) {\n              return result_1;\n            }\n          }\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n      return undefined;\n    }\n    /** @type {Array<number>} */\n    var zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n    var i, j, executors, executor, result;\n    for (i = zs.length - 1; i >= 0; --i) {\n      var zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n      for (j = ORDER.length - 1; j >= 0; --j) {\n        builderType = ORDER[j];\n        executor = executors[builderType];\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(context, transform, rotation, featureCallback, hitExtent);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  };\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */\n  ExecutorGroup.prototype.getClipCoords = function (transform) {\n    var maxExtent = this.maxExtent_;\n    if (!maxExtent) {\n      return null;\n    }\n    var minX = maxExtent[0];\n    var minY = maxExtent[1];\n    var maxX = maxExtent[2];\n    var maxY = maxExtent[3];\n    var flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n  ExecutorGroup.prototype.isEmpty = function () {\n    return isEmpty(this.executorsByZIndex_);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [opt_builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  ExecutorGroup.prototype.execute = function (context, contextScale, transform, viewRotation, snapToPixel, opt_builderTypes, opt_declutterTree) {\n    /** @type {Array<number>} */\n    var zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n    // setup clipping so that the parts of over-simplified geometries are not\n    // visible outside the current extent when panning\n    if (this.maxExtent_) {\n      context.save();\n      this.clip(context, transform);\n    }\n    var builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;\n    var i, ii, j, jj, replays, replay;\n    if (opt_declutterTree) {\n      zs.reverse();\n    }\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      var zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        var builderType = builderTypes[j];\n        replay = replays[builderType];\n        if (replay !== undefined) {\n          replay.execute(context, contextScale, transform, viewRotation, snapToPixel, opt_declutterTree);\n        }\n      }\n    }\n    if (this.maxExtent_) {\n      context.restore();\n    }\n  };\n  return ExecutorGroup;\n}();\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nvar circlePixelIndexArrayCache = {};\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n  var size = radius * 2 + 1;\n  var maxDistanceSq = radius * radius;\n  var distances = new Array(maxDistanceSq + 1);\n  for (var i = 0; i <= radius; ++i) {\n    for (var j = 0; j <= radius; ++j) {\n      var distanceSq = i * i + j * j;\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n      var distance = distances[distanceSq];\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n  var pixelIndex = [];\n  for (var i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push.apply(pixelIndex, distances[i]);\n    }\n  }\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\nexport default ExecutorGroup;","map":{"version":3,"names":["Executor","buffer","createEmpty","extendCoordinate","compose","composeTransform","create","createTransform","createCanvasContext2D","isEmpty","numberSafeCompareFunction","transform2D","ORDER","ExecutorGroup","maxExtent","resolution","pixelRatio","overlaps","allInstructions","opt_renderBuffer","maxExtent_","overlaps_","pixelRatio_","resolution_","renderBuffer_","executorsByZIndex_","hitDetectionContext_","hitDetectionTransform_","createExecutors_","prototype","clip","context","transform","flatClipCoords","getClipCoords","beginPath","moveTo","lineTo","zIndex","executors","undefined","instructionByZindex","builderType","instructions","hasExecutors","candidates","i","ii","length","forEachFeatureAtCoordinate","coordinate","rotation","hitTolerance","callback","declutteredFeatures","Math","round","contextSize","newContext","canvas","width","height","clearRect","hitExtent","indexes","getPixelIndexArray","featureCallback","feature","geometry","imageData","getImageData","data","i_1","indexOf","idx","x","y","result_1","zs","Object","keys","map","Number","sort","j","executor","result","zIndexKey","toString","executeHitDetection","minX","minY","maxX","maxY","execute","contextScale","viewRotation","snapToPixel","opt_builderTypes","opt_declutterTree","save","builderTypes","jj","replays","replay","reverse","restore","circlePixelIndexArrayCache","radius","size","maxDistanceSq","distances","Array","distanceSq","distance","push","pixelIndex","apply"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\render\\canvas\\ExecutorGroup.js"],"sourcesContent":["/**\n * @module ol/render/canvas/ExecutorGroup\n */\n\nimport Executor from './Executor.js';\nimport {buffer, createEmpty, extendCoordinate} from '../../extent.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {isEmpty} from '../../obj.js';\nimport {numberSafeCompareFunction} from '../../array.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @const\n * @type {Array<import(\"../canvas.js\").BuilderType>}\n */\nconst ORDER = ['Polygon', 'Circle', 'LineString', 'Image', 'Text', 'Default'];\n\nclass ExecutorGroup {\n  /**\n   * @param {import(\"../../extent.js\").Extent} maxExtent Max extent for clipping. When a\n   * `maxExtent` was set on the Builder for this executor group, the same `maxExtent`\n   * should be set here, unless the target context does not exceed that extent (which\n   * can be the case when rendering to tiles).\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The executor group can have overlapping geometries.\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions\n   * The serializable instructions.\n   * @param {number} [opt_renderBuffer] Optional rendering buffer.\n   */\n  constructor(\n    maxExtent,\n    resolution,\n    pixelRatio,\n    overlaps,\n    allInstructions,\n    opt_renderBuffer\n  ) {\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.maxExtent_ = maxExtent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = overlaps;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ = pixelRatio;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.resolution_ = resolution;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderBuffer_ = opt_renderBuffer;\n\n    /**\n     * @private\n     * @type {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"./Executor\").default>>}\n     */\n    this.executorsByZIndex_ = {};\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.hitDetectionContext_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.hitDetectionTransform_ = createTransform();\n\n    this.createExecutors_(allInstructions);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   */\n  clip(context, transform) {\n    const flatClipCoords = this.getClipCoords(transform);\n    context.beginPath();\n    context.moveTo(flatClipCoords[0], flatClipCoords[1]);\n    context.lineTo(flatClipCoords[2], flatClipCoords[3]);\n    context.lineTo(flatClipCoords[4], flatClipCoords[5]);\n    context.lineTo(flatClipCoords[6], flatClipCoords[7]);\n    context.clip();\n  }\n\n  /**\n   * Create executors and populate them using the provided instructions.\n   * @private\n   * @param {!Object<string, !Object<import(\"../canvas.js\").BuilderType, import(\"../canvas.js\").SerializableInstructions>>} allInstructions The serializable instructions\n   */\n  createExecutors_(allInstructions) {\n    for (const zIndex in allInstructions) {\n      let executors = this.executorsByZIndex_[zIndex];\n      if (executors === undefined) {\n        executors = {};\n        this.executorsByZIndex_[zIndex] = executors;\n      }\n      const instructionByZindex = allInstructions[zIndex];\n      for (const builderType in instructionByZindex) {\n        const instructions = instructionByZindex[builderType];\n        executors[builderType] = new Executor(\n          this.resolution_,\n          this.pixelRatio_,\n          this.overlaps_,\n          instructions\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {Array<import(\"../canvas.js\").BuilderType>} executors Executors.\n   * @return {boolean} Has executors of the provided types.\n   */\n  hasExecutors(executors) {\n    for (const zIndex in this.executorsByZIndex_) {\n      const candidates = this.executorsByZIndex_[zIndex];\n      for (let i = 0, ii = executors.length; i < ii; ++i) {\n        if (executors[i] in candidates) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default, number): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    resolution,\n    rotation,\n    hitTolerance,\n    callback,\n    declutteredFeatures\n  ) {\n    hitTolerance = Math.round(hitTolerance);\n    const contextSize = hitTolerance * 2 + 1;\n    const transform = composeTransform(\n      this.hitDetectionTransform_,\n      hitTolerance + 0.5,\n      hitTolerance + 0.5,\n      1 / resolution,\n      -1 / resolution,\n      -rotation,\n      -coordinate[0],\n      -coordinate[1]\n    );\n\n    const newContext = !this.hitDetectionContext_;\n    if (newContext) {\n      this.hitDetectionContext_ = createCanvasContext2D(\n        contextSize,\n        contextSize\n      );\n    }\n    const context = this.hitDetectionContext_;\n\n    if (\n      context.canvas.width !== contextSize ||\n      context.canvas.height !== contextSize\n    ) {\n      context.canvas.width = contextSize;\n      context.canvas.height = contextSize;\n    } else if (!newContext) {\n      context.clearRect(0, 0, contextSize, contextSize);\n    }\n\n    /**\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    let hitExtent;\n    if (this.renderBuffer_ !== undefined) {\n      hitExtent = createEmpty();\n      extendCoordinate(hitExtent, coordinate);\n      buffer(\n        hitExtent,\n        resolution * (this.renderBuffer_ + hitTolerance),\n        hitExtent\n      );\n    }\n\n    const indexes = getPixelIndexArray(hitTolerance);\n\n    let builderType;\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @return {T|undefined} Callback result.\n     */\n    function featureCallback(feature, geometry) {\n      const imageData = context.getImageData(\n        0,\n        0,\n        contextSize,\n        contextSize\n      ).data;\n      for (let i = 0, ii = indexes.length; i < ii; i++) {\n        if (imageData[indexes[i]] > 0) {\n          if (\n            !declutteredFeatures ||\n            (builderType !== 'Image' && builderType !== 'Text') ||\n            declutteredFeatures.indexOf(feature) !== -1\n          ) {\n            const idx = (indexes[i] - 3) / 4;\n            const x = hitTolerance - (idx % contextSize);\n            const y = hitTolerance - ((idx / contextSize) | 0);\n            const result = callback(feature, geometry, x * x + y * y);\n            if (result) {\n              return result;\n            }\n          }\n          context.clearRect(0, 0, contextSize, contextSize);\n          break;\n        }\n      }\n      return undefined;\n    }\n\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n\n    let i, j, executors, executor, result;\n    for (i = zs.length - 1; i >= 0; --i) {\n      const zIndexKey = zs[i].toString();\n      executors = this.executorsByZIndex_[zIndexKey];\n      for (j = ORDER.length - 1; j >= 0; --j) {\n        builderType = ORDER[j];\n        executor = executors[builderType];\n        if (executor !== undefined) {\n          result = executor.executeHitDetection(\n            context,\n            transform,\n            rotation,\n            featureCallback,\n            hitExtent\n          );\n          if (result) {\n            return result;\n          }\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @return {Array<number>|null} Clip coordinates.\n   */\n  getClipCoords(transform) {\n    const maxExtent = this.maxExtent_;\n    if (!maxExtent) {\n      return null;\n    }\n    const minX = maxExtent[0];\n    const minY = maxExtent[1];\n    const maxX = maxExtent[2];\n    const maxY = maxExtent[3];\n    const flatClipCoords = [minX, minY, minX, maxY, maxX, maxY, maxX, minY];\n    transform2D(flatClipCoords, 0, 8, 2, transform, flatClipCoords);\n    return flatClipCoords;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return isEmpty(this.executorsByZIndex_);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and test to integer pixel.\n   * @param {Array<import(\"../canvas.js\").BuilderType>} [opt_builderTypes] Ordered replay types to replay.\n   *     Default is {@link module:ol/render/replay~ORDER}\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    contextScale,\n    transform,\n    viewRotation,\n    snapToPixel,\n    opt_builderTypes,\n    opt_declutterTree\n  ) {\n    /** @type {Array<number>} */\n    const zs = Object.keys(this.executorsByZIndex_).map(Number);\n    zs.sort(numberSafeCompareFunction);\n\n    // setup clipping so that the parts of over-simplified geometries are not\n    // visible outside the current extent when panning\n    if (this.maxExtent_) {\n      context.save();\n      this.clip(context, transform);\n    }\n\n    const builderTypes = opt_builderTypes ? opt_builderTypes : ORDER;\n    let i, ii, j, jj, replays, replay;\n    if (opt_declutterTree) {\n      zs.reverse();\n    }\n    for (i = 0, ii = zs.length; i < ii; ++i) {\n      const zIndexKey = zs[i].toString();\n      replays = this.executorsByZIndex_[zIndexKey];\n      for (j = 0, jj = builderTypes.length; j < jj; ++j) {\n        const builderType = builderTypes[j];\n        replay = replays[builderType];\n        if (replay !== undefined) {\n          replay.execute(\n            context,\n            contextScale,\n            transform,\n            viewRotation,\n            snapToPixel,\n            opt_declutterTree\n          );\n        }\n      }\n    }\n\n    if (this.maxExtent_) {\n      context.restore();\n    }\n  }\n}\n\n/**\n * This cache is used to store arrays of indexes for calculated pixel circles\n * to increase performance.\n * It is a static property to allow each Replaygroup to access it.\n * @type {Object<number, Array<number>>}\n */\nconst circlePixelIndexArrayCache = {};\n\n/**\n * This methods creates an array with indexes of all pixels within a circle,\n * ordered by how close they are to the center.\n * A cache is used to increase performance.\n * @param {number} radius Radius.\n * @return {Array<number>} An array with indexes within a circle.\n */\nexport function getPixelIndexArray(radius) {\n  if (circlePixelIndexArrayCache[radius] !== undefined) {\n    return circlePixelIndexArrayCache[radius];\n  }\n\n  const size = radius * 2 + 1;\n  const maxDistanceSq = radius * radius;\n  const distances = new Array(maxDistanceSq + 1);\n  for (let i = 0; i <= radius; ++i) {\n    for (let j = 0; j <= radius; ++j) {\n      const distanceSq = i * i + j * j;\n      if (distanceSq > maxDistanceSq) {\n        break;\n      }\n      let distance = distances[distanceSq];\n      if (!distance) {\n        distance = [];\n        distances[distanceSq] = distance;\n      }\n      distance.push(((radius + i) * size + (radius + j)) * 4 + 3);\n      if (i > 0) {\n        distance.push(((radius - i) * size + (radius + j)) * 4 + 3);\n      }\n      if (j > 0) {\n        distance.push(((radius + i) * size + (radius - j)) * 4 + 3);\n        if (i > 0) {\n          distance.push(((radius - i) * size + (radius - j)) * 4 + 3);\n        }\n      }\n    }\n  }\n\n  const pixelIndex = [];\n  for (let i = 0, ii = distances.length; i < ii; ++i) {\n    if (distances[i]) {\n      pixelIndex.push(...distances[i]);\n    }\n  }\n\n  circlePixelIndexArrayCache[radius] = pixelIndex;\n  return pixelIndex;\n}\n\nexport default ExecutorGroup;\n"],"mappings":"AAAA;;;AAIA,OAAOA,QAAQ,MAAM,eAAe;AACpC,SAAQC,MAAM,EAAEC,WAAW,EAAEC,gBAAgB,QAAO,iBAAiB;AACrE,SACEC,OAAO,IAAIC,gBAAgB,EAC3BC,MAAM,IAAIC,eAAe,QACpB,oBAAoB;AAC3B,SAAQC,qBAAqB,QAAO,cAAc;AAClD,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,yBAAyB,QAAO,gBAAgB;AACxD,SAAQC,WAAW,QAAO,8BAA8B;AAExD;;;;AAIA,IAAMC,KAAK,GAAG,CAAC,SAAS,EAAE,QAAQ,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,CAAC;AAE7E,IAAAC,aAAA;EACE;;;;;;;;;;;;EAYA,SAAAA,cACEC,SAAS,EACTC,UAAU,EACVC,UAAU,EACVC,QAAQ,EACRC,eAAe,EACfC,gBAAgB;IAEhB;;;;IAIA,IAAI,CAACC,UAAU,GAAGN,SAAS;IAE3B;;;;IAIA,IAAI,CAACO,SAAS,GAAGJ,QAAQ;IAEzB;;;;IAIA,IAAI,CAACK,WAAW,GAAGN,UAAU;IAE7B;;;;IAIA,IAAI,CAACO,WAAW,GAAGR,UAAU;IAE7B;;;;IAIA,IAAI,CAACS,aAAa,GAAGL,gBAAgB;IAErC;;;;IAIA,IAAI,CAACM,kBAAkB,GAAG,EAAE;IAE5B;;;;IAIA,IAAI,CAACC,oBAAoB,GAAG,IAAI;IAEhC;;;;IAIA,IAAI,CAACC,sBAAsB,GAAGpB,eAAe,EAAE;IAE/C,IAAI,CAACqB,gBAAgB,CAACV,eAAe,CAAC;EACxC;EAEA;;;;EAIAL,aAAA,CAAAgB,SAAA,CAAAC,IAAI,GAAJ,UAAKC,OAAO,EAAEC,SAAS;IACrB,IAAMC,cAAc,GAAG,IAAI,CAACC,aAAa,CAACF,SAAS,CAAC;IACpDD,OAAO,CAACI,SAAS,EAAE;IACnBJ,OAAO,CAACK,MAAM,CAACH,cAAc,CAAC,CAAC,CAAC,EAAEA,cAAc,CAAC,CAAC,CAAC,CAAC;IACpDF,OAAO,CAACM,MAAM,CAACJ,cAAc,CAAC,CAAC,CAAC,EAAEA,cAAc,CAAC,CAAC,CAAC,CAAC;IACpDF,OAAO,CAACM,MAAM,CAACJ,cAAc,CAAC,CAAC,CAAC,EAAEA,cAAc,CAAC,CAAC,CAAC,CAAC;IACpDF,OAAO,CAACM,MAAM,CAACJ,cAAc,CAAC,CAAC,CAAC,EAAEA,cAAc,CAAC,CAAC,CAAC,CAAC;IACpDF,OAAO,CAACD,IAAI,EAAE;EAChB,CAAC;EAED;;;;;EAKAjB,aAAA,CAAAgB,SAAA,CAAAD,gBAAgB,GAAhB,UAAiBV,eAAe;IAC9B,KAAK,IAAMoB,MAAM,IAAIpB,eAAe,EAAE;MACpC,IAAIqB,SAAS,GAAG,IAAI,CAACd,kBAAkB,CAACa,MAAM,CAAC;MAC/C,IAAIC,SAAS,KAAKC,SAAS,EAAE;QAC3BD,SAAS,GAAG,EAAE;QACd,IAAI,CAACd,kBAAkB,CAACa,MAAM,CAAC,GAAGC,SAAS;;MAE7C,IAAME,mBAAmB,GAAGvB,eAAe,CAACoB,MAAM,CAAC;MACnD,KAAK,IAAMI,WAAW,IAAID,mBAAmB,EAAE;QAC7C,IAAME,YAAY,GAAGF,mBAAmB,CAACC,WAAW,CAAC;QACrDH,SAAS,CAACG,WAAW,CAAC,GAAG,IAAI1C,QAAQ,CACnC,IAAI,CAACuB,WAAW,EAChB,IAAI,CAACD,WAAW,EAChB,IAAI,CAACD,SAAS,EACdsB,YAAY,CACb;;;EAGP,CAAC;EAED;;;;EAIA9B,aAAA,CAAAgB,SAAA,CAAAe,YAAY,GAAZ,UAAaL,SAAS;IACpB,KAAK,IAAMD,MAAM,IAAI,IAAI,CAACb,kBAAkB,EAAE;MAC5C,IAAMoB,UAAU,GAAG,IAAI,CAACpB,kBAAkB,CAACa,MAAM,CAAC;MAClD,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGR,SAAS,CAACS,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QAClD,IAAIP,SAAS,CAACO,CAAC,CAAC,IAAID,UAAU,EAAE;UAC9B,OAAO,IAAI;;;;IAIjB,OAAO,KAAK;EACd,CAAC;EAED;;;;;;;;;;EAUAhC,aAAA,CAAAgB,SAAA,CAAAoB,0BAA0B,GAA1B,UACEC,UAAU,EACVnC,UAAU,EACVoC,QAAQ,EACRC,YAAY,EACZC,QAAQ,EACRC,mBAAmB;IAEnBF,YAAY,GAAGG,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC;IACvC,IAAMK,WAAW,GAAGL,YAAY,GAAG,CAAC,GAAG,CAAC;IACxC,IAAMpB,SAAS,GAAG3B,gBAAgB,CAChC,IAAI,CAACsB,sBAAsB,EAC3ByB,YAAY,GAAG,GAAG,EAClBA,YAAY,GAAG,GAAG,EAClB,CAAC,GAAGrC,UAAU,EACd,CAAC,CAAC,GAAGA,UAAU,EACf,CAACoC,QAAQ,EACT,CAACD,UAAU,CAAC,CAAC,CAAC,EACd,CAACA,UAAU,CAAC,CAAC,CAAC,CACf;IAED,IAAMQ,UAAU,GAAG,CAAC,IAAI,CAAChC,oBAAoB;IAC7C,IAAIgC,UAAU,EAAE;MACd,IAAI,CAAChC,oBAAoB,GAAGlB,qBAAqB,CAC/CiD,WAAW,EACXA,WAAW,CACZ;;IAEH,IAAM1B,OAAO,GAAG,IAAI,CAACL,oBAAoB;IAEzC,IACEK,OAAO,CAAC4B,MAAM,CAACC,KAAK,KAAKH,WAAW,IACpC1B,OAAO,CAAC4B,MAAM,CAACE,MAAM,KAAKJ,WAAW,EACrC;MACA1B,OAAO,CAAC4B,MAAM,CAACC,KAAK,GAAGH,WAAW;MAClC1B,OAAO,CAAC4B,MAAM,CAACE,MAAM,GAAGJ,WAAW;KACpC,MAAM,IAAI,CAACC,UAAU,EAAE;MACtB3B,OAAO,CAAC+B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEL,WAAW,EAAEA,WAAW,CAAC;;IAGnD;;;IAGA,IAAIM,SAAS;IACb,IAAI,IAAI,CAACvC,aAAa,KAAKgB,SAAS,EAAE;MACpCuB,SAAS,GAAG7D,WAAW,EAAE;MACzBC,gBAAgB,CAAC4D,SAAS,EAAEb,UAAU,CAAC;MACvCjD,MAAM,CACJ8D,SAAS,EACThD,UAAU,IAAI,IAAI,CAACS,aAAa,GAAG4B,YAAY,CAAC,EAChDW,SAAS,CACV;;IAGH,IAAMC,OAAO,GAAGC,kBAAkB,CAACb,YAAY,CAAC;IAEhD,IAAIV,WAAW;IAEf;;;;;IAKA,SAASwB,eAAeA,CAACC,OAAO,EAAEC,QAAQ;MACxC,IAAMC,SAAS,GAAGtC,OAAO,CAACuC,YAAY,CACpC,CAAC,EACD,CAAC,EACDb,WAAW,EACXA,WAAW,CACZ,CAACc,IAAI;MACN,KAAK,IAAIC,GAAC,GAAG,CAAC,EAAEzB,EAAE,GAAGiB,OAAO,CAAChB,MAAM,EAAEwB,GAAC,GAAGzB,EAAE,EAAEyB,GAAC,EAAE,EAAE;QAChD,IAAIH,SAAS,CAACL,OAAO,CAACQ,GAAC,CAAC,CAAC,GAAG,CAAC,EAAE;UAC7B,IACE,CAAClB,mBAAmB,IACnBZ,WAAW,KAAK,OAAO,IAAIA,WAAW,KAAK,MAAO,IACnDY,mBAAmB,CAACmB,OAAO,CAACN,OAAO,CAAC,KAAK,CAAC,CAAC,EAC3C;YACA,IAAMO,GAAG,GAAG,CAACV,OAAO,CAACQ,GAAC,CAAC,GAAG,CAAC,IAAI,CAAC;YAChC,IAAMG,CAAC,GAAGvB,YAAY,GAAIsB,GAAG,GAAGjB,WAAY;YAC5C,IAAMmB,CAAC,GAAGxB,YAAY,IAAKsB,GAAG,GAAGjB,WAAW,GAAI,CAAC,CAAC;YAClD,IAAMoB,QAAM,GAAGxB,QAAQ,CAACc,OAAO,EAAEC,QAAQ,EAAEO,CAAC,GAAGA,CAAC,GAAGC,CAAC,GAAGA,CAAC,CAAC;YACzD,IAAIC,QAAM,EAAE;cACV,OAAOA,QAAM;;;UAGjB9C,OAAO,CAAC+B,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEL,WAAW,EAAEA,WAAW,CAAC;UACjD;;;MAGJ,OAAOjB,SAAS;IAClB;IAEA;IACA,IAAMsC,EAAE,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACvD,kBAAkB,CAAC,CAACwD,GAAG,CAACC,MAAM,CAAC;IAC3DJ,EAAE,CAACK,IAAI,CAACzE,yBAAyB,CAAC;IAElC,IAAIoC,CAAC,EAAEsC,CAAC,EAAE7C,SAAS,EAAE8C,QAAQ,EAAEC,MAAM;IACrC,KAAKxC,CAAC,GAAGgC,EAAE,CAAC9B,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;MACnC,IAAMyC,SAAS,GAAGT,EAAE,CAAChC,CAAC,CAAC,CAAC0C,QAAQ,EAAE;MAClCjD,SAAS,GAAG,IAAI,CAACd,kBAAkB,CAAC8D,SAAS,CAAC;MAC9C,KAAKH,CAAC,GAAGxE,KAAK,CAACoC,MAAM,GAAG,CAAC,EAAEoC,CAAC,IAAI,CAAC,EAAE,EAAEA,CAAC,EAAE;QACtC1C,WAAW,GAAG9B,KAAK,CAACwE,CAAC,CAAC;QACtBC,QAAQ,GAAG9C,SAAS,CAACG,WAAW,CAAC;QACjC,IAAI2C,QAAQ,KAAK7C,SAAS,EAAE;UAC1B8C,MAAM,GAAGD,QAAQ,CAACI,mBAAmB,CACnC1D,OAAO,EACPC,SAAS,EACTmB,QAAQ,EACRe,eAAe,EACfH,SAAS,CACV;UACD,IAAIuB,MAAM,EAAE;YACV,OAAOA,MAAM;;;;;IAKrB,OAAO9C,SAAS;EAClB,CAAC;EAED;;;;EAIA3B,aAAA,CAAAgB,SAAA,CAAAK,aAAa,GAAb,UAAcF,SAAS;IACrB,IAAMlB,SAAS,GAAG,IAAI,CAACM,UAAU;IACjC,IAAI,CAACN,SAAS,EAAE;MACd,OAAO,IAAI;;IAEb,IAAM4E,IAAI,GAAG5E,SAAS,CAAC,CAAC,CAAC;IACzB,IAAM6E,IAAI,GAAG7E,SAAS,CAAC,CAAC,CAAC;IACzB,IAAM8E,IAAI,GAAG9E,SAAS,CAAC,CAAC,CAAC;IACzB,IAAM+E,IAAI,GAAG/E,SAAS,CAAC,CAAC,CAAC;IACzB,IAAMmB,cAAc,GAAG,CAACyD,IAAI,EAAEC,IAAI,EAAED,IAAI,EAAEG,IAAI,EAAED,IAAI,EAAEC,IAAI,EAAED,IAAI,EAAED,IAAI,CAAC;IACvEhF,WAAW,CAACsB,cAAc,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAED,SAAS,EAAEC,cAAc,CAAC;IAC/D,OAAOA,cAAc;EACvB,CAAC;EAED;;;EAGApB,aAAA,CAAAgB,SAAA,CAAApB,OAAO,GAAP;IACE,OAAOA,OAAO,CAAC,IAAI,CAACgB,kBAAkB,CAAC;EACzC,CAAC;EAED;;;;;;;;;;EAUAZ,aAAA,CAAAgB,SAAA,CAAAiE,OAAO,GAAP,UACE/D,OAAO,EACPgE,YAAY,EACZ/D,SAAS,EACTgE,YAAY,EACZC,WAAW,EACXC,gBAAgB,EAChBC,iBAAiB;IAEjB;IACA,IAAMrB,EAAE,GAAGC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACvD,kBAAkB,CAAC,CAACwD,GAAG,CAACC,MAAM,CAAC;IAC3DJ,EAAE,CAACK,IAAI,CAACzE,yBAAyB,CAAC;IAElC;IACA;IACA,IAAI,IAAI,CAACU,UAAU,EAAE;MACnBW,OAAO,CAACqE,IAAI,EAAE;MACd,IAAI,CAACtE,IAAI,CAACC,OAAO,EAAEC,SAAS,CAAC;;IAG/B,IAAMqE,YAAY,GAAGH,gBAAgB,GAAGA,gBAAgB,GAAGtF,KAAK;IAChE,IAAIkC,CAAC,EAAEC,EAAE,EAAEqC,CAAC,EAAEkB,EAAE,EAAEC,OAAO,EAAEC,MAAM;IACjC,IAAIL,iBAAiB,EAAE;MACrBrB,EAAE,CAAC2B,OAAO,EAAE;;IAEd,KAAK3D,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAG+B,EAAE,CAAC9B,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MACvC,IAAMyC,SAAS,GAAGT,EAAE,CAAChC,CAAC,CAAC,CAAC0C,QAAQ,EAAE;MAClCe,OAAO,GAAG,IAAI,CAAC9E,kBAAkB,CAAC8D,SAAS,CAAC;MAC5C,KAAKH,CAAC,GAAG,CAAC,EAAEkB,EAAE,GAAGD,YAAY,CAACrD,MAAM,EAAEoC,CAAC,GAAGkB,EAAE,EAAE,EAAElB,CAAC,EAAE;QACjD,IAAM1C,WAAW,GAAG2D,YAAY,CAACjB,CAAC,CAAC;QACnCoB,MAAM,GAAGD,OAAO,CAAC7D,WAAW,CAAC;QAC7B,IAAI8D,MAAM,KAAKhE,SAAS,EAAE;UACxBgE,MAAM,CAACV,OAAO,CACZ/D,OAAO,EACPgE,YAAY,EACZ/D,SAAS,EACTgE,YAAY,EACZC,WAAW,EACXE,iBAAiB,CAClB;;;;IAKP,IAAI,IAAI,CAAC/E,UAAU,EAAE;MACnBW,OAAO,CAAC2E,OAAO,EAAE;;EAErB,CAAC;EACH,OAAA7F,aAAC;AAAD,CAAC,CApVD;AAsVA;;;;;;AAMA,IAAM8F,0BAA0B,GAAG,EAAE;AAErC;;;;;;;AAOA,OAAM,SAAU1C,kBAAkBA,CAAC2C,MAAM;EACvC,IAAID,0BAA0B,CAACC,MAAM,CAAC,KAAKpE,SAAS,EAAE;IACpD,OAAOmE,0BAA0B,CAACC,MAAM,CAAC;;EAG3C,IAAMC,IAAI,GAAGD,MAAM,GAAG,CAAC,GAAG,CAAC;EAC3B,IAAME,aAAa,GAAGF,MAAM,GAAGA,MAAM;EACrC,IAAMG,SAAS,GAAG,IAAIC,KAAK,CAACF,aAAa,GAAG,CAAC,CAAC;EAC9C,KAAK,IAAIhE,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI8D,MAAM,EAAE,EAAE9D,CAAC,EAAE;IAChC,KAAK,IAAIsC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIwB,MAAM,EAAE,EAAExB,CAAC,EAAE;MAChC,IAAM6B,UAAU,GAAGnE,CAAC,GAAGA,CAAC,GAAGsC,CAAC,GAAGA,CAAC;MAChC,IAAI6B,UAAU,GAAGH,aAAa,EAAE;QAC9B;;MAEF,IAAII,QAAQ,GAAGH,SAAS,CAACE,UAAU,CAAC;MACpC,IAAI,CAACC,QAAQ,EAAE;QACbA,QAAQ,GAAG,EAAE;QACbH,SAAS,CAACE,UAAU,CAAC,GAAGC,QAAQ;;MAElCA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACP,MAAM,GAAG9D,CAAC,IAAI+D,IAAI,IAAID,MAAM,GAAGxB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;MAC3D,IAAItC,CAAC,GAAG,CAAC,EAAE;QACToE,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACP,MAAM,GAAG9D,CAAC,IAAI+D,IAAI,IAAID,MAAM,GAAGxB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;MAE7D,IAAIA,CAAC,GAAG,CAAC,EAAE;QACT8B,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACP,MAAM,GAAG9D,CAAC,IAAI+D,IAAI,IAAID,MAAM,GAAGxB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAC3D,IAAItC,CAAC,GAAG,CAAC,EAAE;UACToE,QAAQ,CAACC,IAAI,CAAC,CAAC,CAACP,MAAM,GAAG9D,CAAC,IAAI+D,IAAI,IAAID,MAAM,GAAGxB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;;;;;EAMnE,IAAMgC,UAAU,GAAG,EAAE;EACrB,KAAK,IAAItE,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGgE,SAAS,CAAC/D,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;IAClD,IAAIiE,SAAS,CAACjE,CAAC,CAAC,EAAE;MAChBsE,UAAU,CAACD,IAAI,CAAAE,KAAA,CAAfD,UAAU,EAASL,SAAS,CAACjE,CAAC,CAAC;;;EAInC6D,0BAA0B,CAACC,MAAM,CAAC,GAAGQ,UAAU;EAC/C,OAAOA,UAAU;AACnB;AAEA,eAAevG,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}