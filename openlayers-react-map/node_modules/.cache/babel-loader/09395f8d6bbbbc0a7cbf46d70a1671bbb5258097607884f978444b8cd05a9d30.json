{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/events/Target\n */\nimport Disposable from '../Disposable.js';\nimport Event from './Event.js';\nimport { VOID } from '../functions.js';\nimport { clear } from '../obj.js';\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */\nvar Target = /** @class */function (_super) {\n  __extends(Target, _super);\n  /**\n   * @param {*} [opt_target] Default event target for dispatched events.\n   */\n  function Target(opt_target) {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {*}\n     */\n    _this.eventTarget_ = opt_target;\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    _this.pendingRemovals_ = null;\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    _this.dispatching_ = null;\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>}\n     */\n    _this.listeners_ = null;\n    return _this;\n  }\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  Target.prototype.addEventListener = function (type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n    var listeners = this.listeners_ || (this.listeners_ = {});\n    var listenersForType = listeners[type] || (listeners[type] = []);\n    if (listenersForType.indexOf(listener) === -1) {\n      listenersForType.push(listener);\n    }\n  };\n  /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */\n  Target.prototype.dispatchEvent = function (event) {\n    var isString = typeof event === 'string';\n    var type = isString ? event : event.type;\n    var listeners = this.listeners_ && this.listeners_[type];\n    if (!listeners) {\n      return;\n    }\n    var evt = isString ? new Event(event) : (/** @type {Event} */event);\n    if (!evt.target) {\n      evt.target = this.eventTarget_ || this;\n    }\n    var dispatching = this.dispatching_ || (this.dispatching_ = {});\n    var pendingRemovals = this.pendingRemovals_ || (this.pendingRemovals_ = {});\n    if (!(type in dispatching)) {\n      dispatching[type] = 0;\n      pendingRemovals[type] = 0;\n    }\n    ++dispatching[type];\n    var propagate;\n    for (var i = 0, ii = listeners.length; i < ii; ++i) {\n      if ('handleEvent' in listeners[i]) {\n        propagate = /** @type {import(\"../events.js\").ListenerObject} */listeners[i].handleEvent(evt);\n      } else {\n        propagate = /** @type {import(\"../events.js\").ListenerFunction} */listeners[i].call(this, evt);\n      }\n      if (propagate === false || evt.propagationStopped) {\n        propagate = false;\n        break;\n      }\n    }\n    if (--dispatching[type] === 0) {\n      var pr = pendingRemovals[type];\n      delete pendingRemovals[type];\n      while (pr--) {\n        this.removeEventListener(type, VOID);\n      }\n      delete dispatching[type];\n    }\n    return propagate;\n  };\n  /**\n   * Clean up.\n   */\n  Target.prototype.disposeInternal = function () {\n    this.listeners_ && clear(this.listeners_);\n  };\n  /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\n   */\n  Target.prototype.getListeners = function (type) {\n    return this.listeners_ && this.listeners_[type] || undefined;\n  };\n  /**\n   * @param {string} [opt_type] Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */\n  Target.prototype.hasListener = function (opt_type) {\n    if (!this.listeners_) {\n      return false;\n    }\n    return opt_type ? opt_type in this.listeners_ : Object.keys(this.listeners_).length > 0;\n  };\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  Target.prototype.removeEventListener = function (type, listener) {\n    var listeners = this.listeners_ && this.listeners_[type];\n    if (listeners) {\n      var index = listeners.indexOf(listener);\n      if (index !== -1) {\n        if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n          // make listener a no-op, and remove later in #dispatchEvent()\n          listeners[index] = VOID;\n          ++this.pendingRemovals_[type];\n        } else {\n          listeners.splice(index, 1);\n          if (listeners.length === 0) {\n            delete this.listeners_[type];\n          }\n        }\n      }\n    }\n  };\n  return Target;\n}(Disposable);\nexport default Target;","map":{"version":3,"names":["Disposable","Event","VOID","clear","Target","_super","__extends","opt_target","_this","call","eventTarget_","pendingRemovals_","dispatching_","listeners_","prototype","addEventListener","type","listener","listeners","listenersForType","indexOf","push","dispatchEvent","event","isString","evt","target","dispatching","pendingRemovals","propagate","i","ii","length","handleEvent","propagationStopped","pr","removeEventListener","disposeInternal","getListeners","undefined","hasListener","opt_type","Object","keys","index","splice"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\events\\Target.js"],"sourcesContent":["/**\n * @module ol/events/Target\n */\nimport Disposable from '../Disposable.js';\nimport Event from './Event.js';\nimport {VOID} from '../functions.js';\nimport {clear} from '../obj.js';\n\n/**\n * @typedef {EventTarget|Target} EventTargetLike\n */\n\n/**\n * @classdesc\n * A simplified implementation of the W3C DOM Level 2 EventTarget interface.\n * See https://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-EventTarget.\n *\n * There are two important simplifications compared to the specification:\n *\n * 1. The handling of `useCapture` in `addEventListener` and\n *    `removeEventListener`. There is no real capture model.\n * 2. The handling of `stopPropagation` and `preventDefault` on `dispatchEvent`.\n *    There is no event target hierarchy. When a listener calls\n *    `stopPropagation` or `preventDefault` on an event object, it means that no\n *    more listeners after this one will be called. Same as when the listener\n *    returns false.\n */\nclass Target extends Disposable {\n  /**\n   * @param {*} [opt_target] Default event target for dispatched events.\n   */\n  constructor(opt_target) {\n    super();\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.eventTarget_ = opt_target;\n\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.pendingRemovals_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, number>}\n     */\n    this.dispatching_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").Listener>>}\n     */\n    this.listeners_ = null;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  addEventListener(type, listener) {\n    if (!type || !listener) {\n      return;\n    }\n    const listeners = this.listeners_ || (this.listeners_ = {});\n    const listenersForType = listeners[type] || (listeners[type] = []);\n    if (listenersForType.indexOf(listener) === -1) {\n      listenersForType.push(listener);\n    }\n  }\n\n  /**\n   * Dispatches an event and calls all listeners listening for events\n   * of this type. The event parameter can either be a string or an\n   * Object with a `type` property.\n   *\n   * @param {import(\"./Event.js\").default|string} event Event object.\n   * @return {boolean|undefined} `false` if anyone called preventDefault on the\n   *     event object or if any of the listeners returned false.\n   * @api\n   */\n  dispatchEvent(event) {\n    const isString = typeof event === 'string';\n    const type = isString ? event : event.type;\n    const listeners = this.listeners_ && this.listeners_[type];\n    if (!listeners) {\n      return;\n    }\n\n    const evt = isString ? new Event(event) : /** @type {Event} */ (event);\n    if (!evt.target) {\n      evt.target = this.eventTarget_ || this;\n    }\n    const dispatching = this.dispatching_ || (this.dispatching_ = {});\n    const pendingRemovals =\n      this.pendingRemovals_ || (this.pendingRemovals_ = {});\n    if (!(type in dispatching)) {\n      dispatching[type] = 0;\n      pendingRemovals[type] = 0;\n    }\n    ++dispatching[type];\n    let propagate;\n    for (let i = 0, ii = listeners.length; i < ii; ++i) {\n      if ('handleEvent' in listeners[i]) {\n        propagate = /** @type {import(\"../events.js\").ListenerObject} */ (\n          listeners[i]\n        ).handleEvent(evt);\n      } else {\n        propagate = /** @type {import(\"../events.js\").ListenerFunction} */ (\n          listeners[i]\n        ).call(this, evt);\n      }\n      if (propagate === false || evt.propagationStopped) {\n        propagate = false;\n        break;\n      }\n    }\n    if (--dispatching[type] === 0) {\n      let pr = pendingRemovals[type];\n      delete pendingRemovals[type];\n      while (pr--) {\n        this.removeEventListener(type, VOID);\n      }\n      delete dispatching[type];\n    }\n    return propagate;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.listeners_ && clear(this.listeners_);\n  }\n\n  /**\n   * Get the listeners for a specified event type. Listeners are returned in the\n   * order that they will be called in.\n   *\n   * @param {string} type Type.\n   * @return {Array<import(\"../events.js\").Listener>|undefined} Listeners.\n   */\n  getListeners(type) {\n    return (this.listeners_ && this.listeners_[type]) || undefined;\n  }\n\n  /**\n   * @param {string} [opt_type] Type. If not provided,\n   *     `true` will be returned if this event target has any listeners.\n   * @return {boolean} Has listeners.\n   */\n  hasListener(opt_type) {\n    if (!this.listeners_) {\n      return false;\n    }\n    return opt_type\n      ? opt_type in this.listeners_\n      : Object.keys(this.listeners_).length > 0;\n  }\n\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../events.js\").Listener} listener Listener.\n   */\n  removeEventListener(type, listener) {\n    const listeners = this.listeners_ && this.listeners_[type];\n    if (listeners) {\n      const index = listeners.indexOf(listener);\n      if (index !== -1) {\n        if (this.pendingRemovals_ && type in this.pendingRemovals_) {\n          // make listener a no-op, and remove later in #dispatchEvent()\n          listeners[index] = VOID;\n          ++this.pendingRemovals_[type];\n        } else {\n          listeners.splice(index, 1);\n          if (listeners.length === 0) {\n            delete this.listeners_[type];\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default Target;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,UAAU,MAAM,kBAAkB;AACzC,OAAOC,KAAK,MAAM,YAAY;AAC9B,SAAQC,IAAI,QAAO,iBAAiB;AACpC,SAAQC,KAAK,QAAO,WAAW;AAE/B;;;AAIA;;;;;;;;;;;;;;;AAeA,IAAAC,MAAA,0BAAAC,MAAA;EAAqBC,SAAA,CAAAF,MAAA,EAAAC,MAAA;EACnB;;;EAGA,SAAAD,OAAYG,UAAU;IAAtB,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,MAAO;IAEP;;;;IAIAD,KAAI,CAACE,YAAY,GAAGH,UAAU;IAE9B;;;;IAIAC,KAAI,CAACG,gBAAgB,GAAG,IAAI;IAE5B;;;;IAIAH,KAAI,CAACI,YAAY,GAAG,IAAI;IAExB;;;;IAIAJ,KAAI,CAACK,UAAU,GAAG,IAAI;;EACxB;EAEA;;;;EAIAT,MAAA,CAAAU,SAAA,CAAAC,gBAAgB,GAAhB,UAAiBC,IAAI,EAAEC,QAAQ;IAC7B,IAAI,CAACD,IAAI,IAAI,CAACC,QAAQ,EAAE;MACtB;;IAEF,IAAMC,SAAS,GAAG,IAAI,CAACL,UAAU,KAAK,IAAI,CAACA,UAAU,GAAG,EAAE,CAAC;IAC3D,IAAMM,gBAAgB,GAAGD,SAAS,CAACF,IAAI,CAAC,KAAKE,SAAS,CAACF,IAAI,CAAC,GAAG,EAAE,CAAC;IAClE,IAAIG,gBAAgB,CAACC,OAAO,CAACH,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE;MAC7CE,gBAAgB,CAACE,IAAI,CAACJ,QAAQ,CAAC;;EAEnC,CAAC;EAED;;;;;;;;;;EAUAb,MAAA,CAAAU,SAAA,CAAAQ,aAAa,GAAb,UAAcC,KAAK;IACjB,IAAMC,QAAQ,GAAG,OAAOD,KAAK,KAAK,QAAQ;IAC1C,IAAMP,IAAI,GAAGQ,QAAQ,GAAGD,KAAK,GAAGA,KAAK,CAACP,IAAI;IAC1C,IAAME,SAAS,GAAG,IAAI,CAACL,UAAU,IAAI,IAAI,CAACA,UAAU,CAACG,IAAI,CAAC;IAC1D,IAAI,CAACE,SAAS,EAAE;MACd;;IAGF,IAAMO,GAAG,GAAGD,QAAQ,GAAG,IAAIvB,KAAK,CAACsB,KAAK,CAAC,IAAG,oBAAsBA,KAAK,CAAC;IACtE,IAAI,CAACE,GAAG,CAACC,MAAM,EAAE;MACfD,GAAG,CAACC,MAAM,GAAG,IAAI,CAAChB,YAAY,IAAI,IAAI;;IAExC,IAAMiB,WAAW,GAAG,IAAI,CAACf,YAAY,KAAK,IAAI,CAACA,YAAY,GAAG,EAAE,CAAC;IACjE,IAAMgB,eAAe,GACnB,IAAI,CAACjB,gBAAgB,KAAK,IAAI,CAACA,gBAAgB,GAAG,EAAE,CAAC;IACvD,IAAI,EAAEK,IAAI,IAAIW,WAAW,CAAC,EAAE;MAC1BA,WAAW,CAACX,IAAI,CAAC,GAAG,CAAC;MACrBY,eAAe,CAACZ,IAAI,CAAC,GAAG,CAAC;;IAE3B,EAAEW,WAAW,CAACX,IAAI,CAAC;IACnB,IAAIa,SAAS;IACb,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGb,SAAS,CAACc,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAClD,IAAI,aAAa,IAAIZ,SAAS,CAACY,CAAC,CAAC,EAAE;QACjCD,SAAS,GAAG,oDACVX,SAAS,CAACY,CAAC,CAAC,CACZG,WAAW,CAACR,GAAG,CAAC;OACnB,MAAM;QACLI,SAAS,GAAG,sDACVX,SAAS,CAACY,CAAC,CAAC,CACZrB,IAAI,CAAC,IAAI,EAAEgB,GAAG,CAAC;;MAEnB,IAAII,SAAS,KAAK,KAAK,IAAIJ,GAAG,CAACS,kBAAkB,EAAE;QACjDL,SAAS,GAAG,KAAK;QACjB;;;IAGJ,IAAI,EAAEF,WAAW,CAACX,IAAI,CAAC,KAAK,CAAC,EAAE;MAC7B,IAAImB,EAAE,GAAGP,eAAe,CAACZ,IAAI,CAAC;MAC9B,OAAOY,eAAe,CAACZ,IAAI,CAAC;MAC5B,OAAOmB,EAAE,EAAE,EAAE;QACX,IAAI,CAACC,mBAAmB,CAACpB,IAAI,EAAEd,IAAI,CAAC;;MAEtC,OAAOyB,WAAW,CAACX,IAAI,CAAC;;IAE1B,OAAOa,SAAS;EAClB,CAAC;EAED;;;EAGAzB,MAAA,CAAAU,SAAA,CAAAuB,eAAe,GAAf;IACE,IAAI,CAACxB,UAAU,IAAIV,KAAK,CAAC,IAAI,CAACU,UAAU,CAAC;EAC3C,CAAC;EAED;;;;;;;EAOAT,MAAA,CAAAU,SAAA,CAAAwB,YAAY,GAAZ,UAAatB,IAAI;IACf,OAAQ,IAAI,CAACH,UAAU,IAAI,IAAI,CAACA,UAAU,CAACG,IAAI,CAAC,IAAKuB,SAAS;EAChE,CAAC;EAED;;;;;EAKAnC,MAAA,CAAAU,SAAA,CAAA0B,WAAW,GAAX,UAAYC,QAAQ;IAClB,IAAI,CAAC,IAAI,CAAC5B,UAAU,EAAE;MACpB,OAAO,KAAK;;IAEd,OAAO4B,QAAQ,GACXA,QAAQ,IAAI,IAAI,CAAC5B,UAAU,GAC3B6B,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC9B,UAAU,CAAC,CAACmB,MAAM,GAAG,CAAC;EAC7C,CAAC;EAED;;;;EAIA5B,MAAA,CAAAU,SAAA,CAAAsB,mBAAmB,GAAnB,UAAoBpB,IAAI,EAAEC,QAAQ;IAChC,IAAMC,SAAS,GAAG,IAAI,CAACL,UAAU,IAAI,IAAI,CAACA,UAAU,CAACG,IAAI,CAAC;IAC1D,IAAIE,SAAS,EAAE;MACb,IAAM0B,KAAK,GAAG1B,SAAS,CAACE,OAAO,CAACH,QAAQ,CAAC;MACzC,IAAI2B,KAAK,KAAK,CAAC,CAAC,EAAE;QAChB,IAAI,IAAI,CAACjC,gBAAgB,IAAIK,IAAI,IAAI,IAAI,CAACL,gBAAgB,EAAE;UAC1D;UACAO,SAAS,CAAC0B,KAAK,CAAC,GAAG1C,IAAI;UACvB,EAAE,IAAI,CAACS,gBAAgB,CAACK,IAAI,CAAC;SAC9B,MAAM;UACLE,SAAS,CAAC2B,MAAM,CAACD,KAAK,EAAE,CAAC,CAAC;UAC1B,IAAI1B,SAAS,CAACc,MAAM,KAAK,CAAC,EAAE;YAC1B,OAAO,IAAI,CAACnB,UAAU,CAACG,IAAI,CAAC;;;;;EAKtC,CAAC;EACH,OAAAZ,MAAC;AAAD,CAAC,CA9JoBJ,UAAU;AAgK/B,eAAeI,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}