{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport Modify from 'ol/interaction/Modify';\nimport { never } from 'ol/events/condition';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport LineString from 'ol/geom/LineString';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\n\n/* map stylings */\nimport { vertexStyle, polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle } from './ol-styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]); // overlays for current drawing\n  const allOverlaysRef = useRef([]); // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  // --- Overlay clearing helper (now available everywhere in App) ---\n  // Only clears overlays for a specific feature\n  function clearPolygonOverlays(feature) {\n    if (feature && feature._segmentOverlays) {\n      feature._segmentOverlays.forEach(overlay => {\n        if (mapRef.current) mapRef.current.removeOverlay(overlay);\n      });\n      feature._segmentOverlays = [];\n    }\n  }\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    mapRef.current = map;\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + \"'\";\n    }\n    function createSegmentOverlays(feature, coords) {\n      clearPolygonOverlays(feature);\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n      feature._segmentOverlays = [];\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        feature._segmentOverlays.push(overlay);\n      }\n    }\n\n    // --- Remark segments for a given feature ---\n    function remarkPolygonSegments(feature) {\n      if (!feature) return;\n      const poly = feature.getGeometry();\n      const coords = poly.getCoordinates()[0];\n      createSegmentOverlays(feature, coords);\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays(feature, [coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n      // No manual selection logic here anymore!\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          createSegmentOverlays(feature, coords);\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = remarkPolygonSegments;\n\n    // Prevent browser context menu on map\n    const mapDiv = document.getElementById('map');\n    if (mapDiv) {\n      mapDiv.addEventListener('contextmenu', e => e.preventDefault());\n    }\n\n    // Custom context menu for vertex/segment deletion\n    function handleCustomContextMenu(e) {\n      e.preventDefault();\n      if (!mapRef.current) return;\n      const pixel = mapRef.current.getEventPixel(e);\n      const features = vectorSourceRef.current.getFeatures();\n\n      // Check for vertex\n      let found = false;\n      for (const feature of features) {\n        const geom = feature.getGeometry();\n        if (geom.getType() === 'Polygon') {\n          const coords = geom.getCoordinates()[0];\n          for (let i = 0; i < coords.length - 1; i++) {\n            const coordPixel = mapRef.current.getPixelFromCoordinate(coords[i]);\n            if (Math.hypot(pixel[0] - coordPixel[0], pixel[1] - coordPixel[1]) < 8) {\n              setContextMenu({\n                visible: true,\n                x: e.clientX,\n                y: e.clientY,\n                type: 'vertex',\n                feature,\n                index: i\n              });\n              found = true;\n              break;\n            }\n          }\n        }\n        if (found) break;\n      }\n\n      // If not vertex, check for segment\n      if (!found) {\n        for (const feature of features) {\n          const geom = feature.getGeometry();\n          if (geom.getType() === 'Polygon') {\n            const coords = geom.getCoordinates()[0];\n            for (let i = 0; i < coords.length - 1; i++) {\n              const c1 = mapRef.current.getPixelFromCoordinate(coords[i]);\n              const c2 = mapRef.current.getPixelFromCoordinate(coords[i + 1]);\n              // Distance from point to segment\n              const t = ((pixel[0] - c1[0]) * (c2[0] - c1[0]) + (pixel[1] - c1[1]) * (c2[1] - c1[1])) / ((c2[0] - c1[0]) ** 2 + (c2[1] - c1[1]) ** 2);\n              if (t >= 0 && t <= 1) {\n                const proj = [c1[0] + t * (c2[0] - c1[0]), c1[1] + t * (c2[1] - c1[1])];\n                if (Math.hypot(pixel[0] - proj[0], pixel[1] - proj[1]) < 8) {\n                  setContextMenu({\n                    visible: true,\n                    x: e.clientX,\n                    y: e.clientY,\n                    type: 'segment',\n                    feature,\n                    index: i\n                  });\n                  found = true;\n                  break;\n                }\n              }\n            }\n          }\n          if (found) break;\n        }\n      }\n\n      // If not found, hide menu\n      if (!found) setContextMenu({\n        visible: true,\n        x: e.clientX,\n        y: e.clientY,\n        type: null,\n        feature: null,\n        index: null\n      });\n    }\n    if (mapDiv) {\n      mapDiv.addEventListener('contextmenu', handleCustomContextMenu);\n    }\n\n    // Hide menu on click elsewhere\n    function hideMenu() {\n      setContextMenu(menu => menu.visible ? {\n        ...menu,\n        visible: false\n      } : menu);\n    }\n    window.addEventListener('click', hideMenu);\n\n    // Clean up on unmount\n    return () => {\n      // Remove all overlays for all polygons\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (mapDiv) {\n        mapDiv.removeEventListener('contextmenu', handleCustomContextMenu);\n      }\n      window.removeEventListener('click', hideMenu);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      if (map.modifyInteraction) {\n        map.removeInteraction(map.modifyInteraction);\n        map.modifyInteraction = null;\n      }\n    };\n  }, []);\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select/modify interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select/modify interactions if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (map.modifyInteraction) {\n      map.removeInteraction(map.modifyInteraction);\n      map.modifyInteraction = null;\n    }\n    if (mode === 'select') {\n      // Add OpenLayers Select interaction\n      const select = new Select({\n        layers: [map.getLayers().item(1)],\n        // Only vectorLayer\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        // Only allow single selection\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n\n      // No Modify interaction needed for custom context menu delete\n    } else {\n      // Remove selection style if switching out of select mode\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n\n    // Clean up on unmount or mode change\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      if (map.modifyInteraction) {\n        map.removeInteraction(map.modifyInteraction);\n        map.modifyInteraction = null;\n      }\n    };\n  }, [mode, selectedFeature, polygonStyle, selectedPolygonStyle]);\n\n  // --- Render custom context menu ---\n  const handleMenuAction = action => {\n    if (!contextMenu.feature) return;\n    const geom = contextMenu.feature.getGeometry();\n    let coords = Array.from(geom.getCoordinates()[0]);\n    if (action === 'delete-vertex' && coords.length > 3) {\n      coords.splice(contextMenu.index, 1);\n      coords[coords.length - 1] = coords[0];\n      geom.setCoordinates([coords]);\n      if (mapRef.current && mapRef.current.remarkPolygonSegments) {\n        mapRef.current.remarkPolygonSegments(contextMenu.feature);\n      }\n      setContextMenu({\n        ...contextMenu,\n        visible: false\n      });\n    }\n    if (action === 'delete-segment' && coords.length > 3) {\n      // Remove the closing coordinate if present\n      if (coords.length > 2 && coords[0][0] === coords[coords.length - 1][0] && coords[0][1] === coords[coords.length - 1][1]) {\n        coords = coords.slice(0, coords.length - 1);\n      }\n      // Remove the segment by splitting the ring at the segment\n      // The segment to remove is between coords[index] and coords[index+1]\n      // The new LineString will be: coords[index+1] ... end, start ... coords[index]\n      const index = contextMenu.index;\n      const newCoords = [...coords.slice(index + 1), ...coords.slice(0, index + 1)];\n      // Remove the polygon feature and add a LineString feature\n      vectorSourceRef.current.removeFeature(contextMenu.feature);\n      const lineFeature = new Feature(new LineString(newCoords));\n      vectorSourceRef.current.addFeature(lineFeature);\n      if (mapRef.current && mapRef.current.remarkPolygonSegments) {\n        mapRef.current.remarkPolygonSegments(lineFeature);\n      }\n      setContextMenu({\n        ...contextMenu,\n        visible: false\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 522,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 7\n    }, this), contextMenu.visible && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'fixed',\n        top: contextMenu.y,\n        left: contextMenu.x,\n        background: '#fff',\n        border: '1px solid #ccc',\n        zIndex: 1000,\n        padding: 4,\n        minWidth: 120\n      },\n      onContextMenu: e => e.preventDefault(),\n      onMouseLeave: () => setContextMenu({\n        ...contextMenu,\n        visible: false\n      }),\n      children: [contextMenu.type === 'vertex' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menu-item\",\n        onClick: () => handleMenuAction('delete-vertex'),\n        style: {\n          cursor: 'pointer',\n          padding: '4px 8px'\n        },\n        children: \"Delete Vertex\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 546,\n        columnNumber: 13\n      }, this), contextMenu.type === 'segment' && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"menu-item\",\n        onClick: () => handleMenuAction('delete-segment'),\n        style: {\n          cursor: 'pointer',\n          padding: '4px 8px'\n        },\n        children: \"Delete Segment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 13\n      }, this), !contextMenu.type && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: '#888',\n          padding: '4px 8px'\n        },\n        children: \"No actions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 496,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"CgHT6V4VNsMdoXoTeHOcv/7GGj0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","Select","Modify","never","fromLonLat","getLength","LineString","Style","CircleStyle","Fill","Stroke","ScaleLine","FlipHorizButton","FlipVertButton","vertexStyle","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","clearPolygonOverlays","_segmentOverlays","forEach","overlay","current","removeOverlay","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","addControl","units","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","DIM_OFFSET","i","length","c1","c2","pixel1","getPixelFromCoordinate","pixel2","dx","dy","len","Math","sqrt","perp","offsetMidPixel","offsetMidCoord","getCoordinateFromPixel","tooltip","document","createElement","className","innerHTML","isVertical","abs","transform","element","position","positioning","stopEvent","addOverlay","push","remarkPolygonSegments","poly","getGeometry","getCoordinates","on","evt","coord","coordinate","removeFeature","ghost","setStyle","addFeature","slice","setCoordinates","addSegment","direction","last","OFFSET","newPt","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","splice","addEventListener","mapDiv","getElementById","handleCustomContextMenu","pixel","getEventPixel","features","getFeatures","found","geom","getType","coordPixel","hypot","clientX","clientY","t","proj","hideMenu","menu","window","f","setTarget","removeEventListener","removeInteraction","modifyInteraction","val","parseFloat","isNaN","select","getLayers","item","selected","addInteraction","handleMenuAction","action","Array","from","newCoords","lineFeature","children","id","ref","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","top","left","background","border","zIndex","padding","minWidth","onContextMenu","onMouseLeave","cursor","color","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport Modify from 'ol/interaction/Modify';\nimport { never } from 'ol/events/condition';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport LineString from 'ol/geom/LineString';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\n\n/* map stylings */\nimport { vertexStyle, polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle } from './ol-styles';\n\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);      // overlays for current drawing\n  const allOverlaysRef = useRef([]);   // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  // --- Overlay clearing helper (now available everywhere in App) ---\n  // Only clears overlays for a specific feature\n  function clearPolygonOverlays(feature) {\n    if (feature && feature._segmentOverlays) {\n      feature._segmentOverlays.forEach(overlay => {\n        if (mapRef.current) mapRef.current.removeOverlay(overlay);\n      });\n      feature._segmentOverlays = [];\n    }\n  }\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    mapRef.current = map;\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + \"'\";\n    }\n\n    function createSegmentOverlays(feature, coords) {\n      clearPolygonOverlays(feature);\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n      feature._segmentOverlays = [];\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\n        ];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        mapRef.current.addOverlay(overlay);\n        feature._segmentOverlays.push(overlay);\n      }\n    }\n\n    // --- Remark segments for a given feature ---\n    function remarkPolygonSegments(feature) {\n      if (!feature) return;\n      const poly = feature.getGeometry();\n      const coords = poly.getCoordinates()[0];\n      createSegmentOverlays(feature, coords);\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays(feature, [coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n      // No manual selection logic here anymore!\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, coords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          createSegmentOverlays(feature, coords);\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z') &&\n        drawingRef.current &&\n        modeRef.current === 'draw'\n      ) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = remarkPolygonSegments;\n\n    // Prevent browser context menu on map\n    const mapDiv = document.getElementById('map');\n    if (mapDiv) {\n      mapDiv.addEventListener('contextmenu', e => e.preventDefault());\n    }\n\n    // Custom context menu for vertex/segment deletion\n    function handleCustomContextMenu(e) {\n      e.preventDefault();\n      if (!mapRef.current) return;\n      const pixel = mapRef.current.getEventPixel(e);\n      const features = vectorSourceRef.current.getFeatures();\n\n      // Check for vertex\n      let found = false;\n      for (const feature of features) {\n        const geom = feature.getGeometry();\n        if (geom.getType() === 'Polygon') {\n          const coords = geom.getCoordinates()[0];\n          for (let i = 0; i < coords.length - 1; i++) {\n            const coordPixel = mapRef.current.getPixelFromCoordinate(coords[i]);\n            if (Math.hypot(pixel[0] - coordPixel[0], pixel[1] - coordPixel[1]) < 8) {\n              setContextMenu({ visible: true, x: e.clientX, y: e.clientY, type: 'vertex', feature, index: i });\n              found = true;\n              break;\n            }\n          }\n        }\n        if (found) break;\n      }\n\n      // If not vertex, check for segment\n      if (!found) {\n        for (const feature of features) {\n          const geom = feature.getGeometry();\n          if (geom.getType() === 'Polygon') {\n            const coords = geom.getCoordinates()[0];\n            for (let i = 0; i < coords.length - 1; i++) {\n              const c1 = mapRef.current.getPixelFromCoordinate(coords[i]);\n              const c2 = mapRef.current.getPixelFromCoordinate(coords[i + 1]);\n              // Distance from point to segment\n              const t = ((pixel[0] - c1[0]) * (c2[0] - c1[0]) + (pixel[1] - c1[1]) * (c2[1] - c1[1])) /\n                ((c2[0] - c1[0]) ** 2 + (c2[1] - c1[1]) ** 2);\n              if (t >= 0 && t <= 1) {\n                const proj = [c1[0] + t * (c2[0] - c1[0]), c1[1] + t * (c2[1] - c1[1])];\n                if (Math.hypot(pixel[0] - proj[0], pixel[1] - proj[1]) < 8) {\n                  setContextMenu({ visible: true, x: e.clientX, y: e.clientY, type: 'segment', feature, index: i });\n                  found = true;\n                  break;\n                }\n              }\n            }\n          }\n          if (found) break;\n        }\n      }\n\n      // If not found, hide menu\n      if (!found) setContextMenu({ visible: true, x: e.clientX, y: e.clientY, type: null, feature: null, index: null });\n    }\n\n    if (mapDiv) {\n      mapDiv.addEventListener('contextmenu', handleCustomContextMenu);\n    }\n\n    // Hide menu on click elsewhere\n    function hideMenu() {\n      setContextMenu(menu => menu.visible ? { ...menu, visible: false } : menu);\n    }\n    window.addEventListener('click', hideMenu);\n\n    // Clean up on unmount\n    return () => {\n      // Remove all overlays for all polygons\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (mapDiv) {\n        mapDiv.removeEventListener('contextmenu', handleCustomContextMenu);\n      }\n      window.removeEventListener('click', hideMenu);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      if (map.modifyInteraction) {\n        map.removeInteraction(map.modifyInteraction);\n        map.modifyInteraction = null;\n      }\n    };\n  }, []);\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select/modify interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select/modify interactions if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (map.modifyInteraction) {\n      map.removeInteraction(map.modifyInteraction);\n      map.modifyInteraction = null;\n    }\n\n    if (mode === 'select') {\n      // Add OpenLayers Select interaction\n      const select = new Select({\n        layers: [map.getLayers().item(1)], // Only vectorLayer\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        // Only allow single selection\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n\n      // No Modify interaction needed for custom context menu delete\n    } else {\n      // Remove selection style if switching out of select mode\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n\n    // Clean up on unmount or mode change\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      if (map.modifyInteraction) {\n        map.removeInteraction(map.modifyInteraction);\n        map.modifyInteraction = null;\n      }\n    };\n  }, [mode, selectedFeature, polygonStyle, selectedPolygonStyle]);\n\n  // --- Render custom context menu ---\n  const handleMenuAction = (action) => {\n    if (!contextMenu.feature) return;\n    const geom = contextMenu.feature.getGeometry();\n    let coords = Array.from(geom.getCoordinates()[0]);\n\n    if (action === 'delete-vertex' && coords.length > 3) {\n      coords.splice(contextMenu.index, 1);\n      coords[coords.length - 1] = coords[0];\n      geom.setCoordinates([coords]);\n      if (mapRef.current && mapRef.current.remarkPolygonSegments) {\n        mapRef.current.remarkPolygonSegments(contextMenu.feature);\n      }\n      setContextMenu({ ...contextMenu, visible: false });\n    }\n\n    if (action === 'delete-segment' && coords.length > 3) {\n      // Remove the closing coordinate if present\n      if (\n        coords.length > 2 &&\n        coords[0][0] === coords[coords.length - 1][0] &&\n        coords[0][1] === coords[coords.length - 1][1]\n      ) {\n        coords = coords.slice(0, coords.length - 1);\n      }\n      // Remove the segment by splitting the ring at the segment\n      // The segment to remove is between coords[index] and coords[index+1]\n      // The new LineString will be: coords[index+1] ... end, start ... coords[index]\n      const index = contextMenu.index;\n      const newCoords = [\n        ...coords.slice(index + 1),\n        ...coords.slice(0, index + 1)\n      ];\n      // Remove the polygon feature and add a LineString feature\n      vectorSourceRef.current.removeFeature(contextMenu.feature);\n      const lineFeature = new Feature(new LineString(newCoords));\n      vectorSourceRef.current.addFeature(lineFeature);\n      if (mapRef.current && mapRef.current.remarkPolygonSegments) {\n        mapRef.current.remarkPolygonSegments(lineFeature);\n      }\n      setContextMenu({ ...contextMenu, visible: false });\n    }\n  };\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} />\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\"></div>\n      {contextMenu.visible && (\n        <div\n          style={{\n            position: 'fixed',\n            top: contextMenu.y,\n            left: contextMenu.x,\n            background: '#fff',\n            border: '1px solid #ccc',\n            zIndex: 1000,\n            padding: 4,\n            minWidth: 120\n          }}\n          onContextMenu={e => e.preventDefault()}\n          onMouseLeave={() => setContextMenu({ ...contextMenu, visible: false })}\n        >\n          {contextMenu.type === 'vertex' && (\n            <div\n              className=\"menu-item\"\n              onClick={() => handleMenuAction('delete-vertex')}\n              style={{ cursor: 'pointer', padding: '4px 8px' }}\n            >\n              Delete Vertex\n            </div>\n          )}\n          {contextMenu.type === 'segment' && (\n            <div\n              className=\"menu-item\"\n              onClick={() => handleMenuAction('delete-segment')}\n              style={{ cursor: 'pointer', padding: '4px 8px' }}\n            >\n              Delete Segment\n            </div>\n          )}\n          {!contextMenu.type && <div style={{ color: '#888', padding: '4px 8px' }}>No actions</div>}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}