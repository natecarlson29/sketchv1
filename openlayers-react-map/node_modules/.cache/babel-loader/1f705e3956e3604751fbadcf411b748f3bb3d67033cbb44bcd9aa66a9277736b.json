{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, { canvasPool } from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { HIT_DETECT_RESOLUTION, createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { apply, makeInverse, makeScale, toString as transformToString } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { createCanvasContext2D, releaseCanvas } from '../../dom.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { equals } from '../../array.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent, toUserResolution } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /** @class */function (_super) {\n  __extends(CanvasVectorLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  function CanvasVectorLayerRenderer(vectorLayer) {\n    var _this = _super.call(this, vectorLayer) || this;\n    /** @private */\n    _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n    /**\n     * @type {boolean}\n     */\n    _this.animatingOrInteracting_;\n    /**\n     * @type {ImageData}\n     */\n    _this.hitDetectionImageData_ = null;\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    _this.renderedFeatures_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedResolution_ = NaN;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.renderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.wrappedRenderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRotation_;\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    _this.renderedCenter_ = null;\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    _this.renderedProjection_ = null;\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    _this.renderedRenderOrder_ = null;\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.replayGroup_ = null;\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    _this.replayGroupChanged = true;\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.declutterExecutorGroup = null;\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    _this.clipping = true;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.compositionContext_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.opacity_ = 1;\n    return _this;\n  }\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  CanvasVectorLayerRenderer.prototype.renderWorlds = function (executorGroup, frameState, opt_declutterTree) {\n    var extent = frameState.extent;\n    var viewState = frameState.viewState;\n    var center = viewState.center;\n    var resolution = viewState.resolution;\n    var projection = viewState.projection;\n    var rotation = viewState.rotation;\n    var projectionExtent = projection.getExtent();\n    var vectorSource = this.getLayer().getSource();\n    var pixelRatio = frameState.pixelRatio;\n    var viewHints = frameState.viewHints;\n    var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    var context = this.compositionContext_;\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n    var multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    var worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    var endWorld = multiWorld ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1 : 1;\n    var world = multiWorld ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth) : 0;\n    do {\n      var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, world * worldWidth);\n      executorGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, opt_declutterTree);\n    } while (++world < endWorld);\n  };\n  CanvasVectorLayerRenderer.prototype.setupCompositionContext_ = function () {\n    if (this.opacity_ !== 1) {\n      var compositionContext = createCanvasContext2D(this.context.canvas.width, this.context.canvas.height, canvasPool);\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  };\n  CanvasVectorLayerRenderer.prototype.releaseCompositionContext_ = function () {\n    if (this.opacity_ !== 1) {\n      var alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      releaseCanvas(this.compositionContext_);\n      canvasPool.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  };\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  CanvasVectorLayerRenderer.prototype.renderDeclutter = function (frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(this.declutterExecutorGroup, frameState, frameState.declutterTree);\n      this.releaseCompositionContext_();\n    }\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n    var pixelRatio = frameState.pixelRatio;\n    var layerState = frameState.layerStatesArray[frameState.layerIndex];\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    var canvasTransform = transformToString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    var context = this.context;\n    var canvas = context.canvas;\n    var replayGroup = this.replayGroup_;\n    var declutterExecutorGroup = this.declutterExecutorGroup;\n    if ((!replayGroup || replayGroup.isEmpty()) && (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())) {\n      return null;\n    }\n    // resize and clear\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n    this.preRender(context, frameState);\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_();\n    // clipped rendering if layer extent is set\n    var clipped = false;\n    var render = true;\n    if (layerState.extent && this.clipping) {\n      var layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n    this.releaseCompositionContext_();\n    this.postRender(context, frameState);\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  };\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n  CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n    return new Promise(\n    /**\n     * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (resolve) {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        var size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        var center = this.renderedCenter_;\n        var resolution = this.renderedResolution_;\n        var rotation = this.renderedRotation_;\n        var projection = this.renderedProjection_;\n        var extent = this.wrappedRenderedExtent_;\n        var layer = this.getLayer();\n        var transforms = [];\n        var width = size[0] * HIT_DETECT_RESOLUTION;\n        var height = size[1] * HIT_DETECT_RESOLUTION;\n        transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, 0).slice());\n        var source = layer.getSource();\n        var projectionExtent = projection.getExtent();\n        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n          var startX = extent[0];\n          var worldWidth = getWidth(projectionExtent);\n          var world = 0;\n          var offsetX = void 0;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, HIT_DETECT_RESOLUTION, width, height, offsetX).slice());\n            startX -= worldWidth;\n          }\n        }\n        this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n      }\n      resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n    }.bind(this));\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, matches) {\n    var _this = this;\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    var resolution = frameState.viewState.resolution;\n    var rotation = frameState.viewState.rotation;\n    var layer = this.getLayer();\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    var features = {};\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    var featureCallback = function (feature, geometry, distanceSq) {\n      var key = getUid(feature);\n      var match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(features[key] = {\n          feature: feature,\n          layer: layer,\n          geometry: geometry,\n          distanceSq: distanceSq,\n          callback: callback\n        });\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n    var result;\n    var executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some(function (executorGroup) {\n      return result = executorGroup.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance, featureCallback, executorGroup === _this.declutterExecutorGroup && frameState.declutterTree ? frameState.declutterTree.all().map(function (item) {\n        return item.value;\n      }) : null);\n    });\n    return result;\n  };\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n    var layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  };\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n    this.renderIfReadyAndVisible();\n  };\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n    var vectorLayer = this.getLayer();\n    var vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n    var animating = frameState.viewHints[ViewHint.ANIMATING];\n    var interacting = frameState.viewHints[ViewHint.INTERACTING];\n    var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n    if (this.ready && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n    var frameStateExtent = frameState.extent;\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    var resolution = viewState.resolution;\n    var pixelRatio = frameState.pixelRatio;\n    var vectorLayerRevision = vectorLayer.getRevision();\n    var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n    var center = viewState.center.slice();\n    var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    var renderedExtent = extent.slice();\n    var loadExtents = [extent.slice()];\n    var projectionExtent = projection.getExtent();\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      var worldWidth = getWidth(projectionExtent);\n      var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      var loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n      } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n      }\n    }\n    if (this.ready && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.wrappedRenderedExtent_, extent)) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n    this.replayGroup_ = null;\n    var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    var declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio);\n    }\n    var userProjection = getUserProjection();\n    var userTransform;\n    if (userProjection) {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        var extent_1 = loadExtents[i];\n        var userExtent_1 = toUserExtent(extent_1, projection);\n        vectorSource.loadFeatures(userExtent_1, toUserResolution(resolution, projection), userProjection);\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n    var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    var ready = true;\n    var render =\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    function (feature) {\n      var styles;\n      var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n      if (styles) {\n        var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform, declutterBuilderGroup);\n        ready = ready && !dirty;\n      }\n    }.bind(this);\n    var userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    var features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n    var replayGroupInstructions = replayGroup.finish();\n    var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), declutterBuilderGroup.finish(), vectorLayer.getRenderBuffer());\n    }\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  };\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform, opt_declutterBuilderGroup) {\n    if (!styles) {\n      return false;\n    }\n    var loading = false;\n    if (Array.isArray(styles)) {\n      for (var i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform, opt_declutterBuilderGroup);\n    }\n    return loading;\n  };\n  return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer);\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"names":["CanvasBuilderGroup","CanvasLayerRenderer","canvasPool","ExecutorGroup","ViewHint","HIT_DETECT_RESOLUTION","createHitDetectionImageData","hitDetect","apply","makeInverse","makeScale","toString","transformToString","buffer","containsExtent","createEmpty","getWidth","intersects","intersectsExtent","wrapX","wrapExtentX","createCanvasContext2D","releaseCanvas","defaultOrder","defaultRenderOrder","getTolerance","getRenderTolerance","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","equals","fromUserExtent","getTransformFromProjections","getUserProjection","toUserExtent","toUserResolution","getUid","wrapCoordinateX","CanvasVectorLayerRenderer","_super","__extends","vectorLayer","_this","call","boundHandleStyleImageChange_","handleStyleImageChange_","bind","animatingOrInteracting_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","renderedExtent_","wrappedRenderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","declutterExecutorGroup","clipping","compositionContext_","opacity_","prototype","renderWorlds","executorGroup","frameState","opt_declutterTree","extent","viewState","center","resolution","projection","rotation","projectionExtent","getExtent","vectorSource","getLayer","getSource","pixelRatio","viewHints","snapToPixel","ANIMATING","INTERACTING","context","width","Math","round","size","height","multiWorld","getWrapX","canWrapX","worldWidth","endWorld","ceil","world","floor","transform","getRenderTransform","execute","undefined","setupCompositionContext_","compositionContext","canvas","releaseCompositionContext_","alpha","globalAlpha","drawImage","push","renderDeclutter","declutterTree","renderFrame","target","layerState","layerStatesArray","layerIndex","pixelTransform","inversePixelTransform","canvasTransform","useContainer","getBackground","replayGroup","isEmpty","style","containerReused","clearRect","preRender","opacity","clipped","render","layerExtent","clipUnrotated","restore","postRender","container","getFeatures","pixel","Promise","resolve","layer","transforms","slice","source","startX","offsetX","getStyleFunction","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","matches","features","featureCallback","feature","geometry","distanceSq","key","match","splice","lastIndexOf","result","executorGroups","some","all","map","item","value","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","prepareFrame","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","ready","frameStateExtent","vectorLayerRevision","getRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","renderedExtent","loadExtents","gutter","max","loadExtent","declutterBuilderGroup","getDeclutter","userProjection","userTransform","i","ii","length","extent_1","userExtent_1","loadFeatures","squaredTolerance","styles","styleFunction","dirty","userExtent","getFeaturesInExtent","sort","replayGroupInstructions","finish","getOverlaps","builderGroup","opt_transform","opt_declutterBuilderGroup","loading","Array","isArray"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\renderer\\canvas\\VectorLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer, {canvasPool} from './Layer.js';\nimport ExecutorGroup from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  HIT_DETECT_RESOLUTION,\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  apply,\n  makeInverse,\n  makeScale,\n  toString as transformToString,\n} from '../../transform.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {createCanvasContext2D, releaseCanvas} from '../../dom.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getTolerance as getRenderTolerance,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {equals} from '../../array.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n  toUserResolution,\n} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/BaseVector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @type {ImageData}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.wrappedRenderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.declutterExecutorGroup = null;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.compositionContext_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = 1;\n  }\n\n  /**\n   * @param {ExecutorGroup} executorGroup Executor group.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  renderWorlds(executorGroup, frameState, opt_declutterTree) {\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n    const pixelRatio = frameState.pixelRatio;\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n    const context = this.compositionContext_;\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n\n    const multiWorld = vectorSource.getWrapX() && projection.canWrapX();\n    const worldWidth = multiWorld ? getWidth(projectionExtent) : null;\n    const endWorld = multiWorld\n      ? Math.ceil((extent[2] - projectionExtent[2]) / worldWidth) + 1\n      : 1;\n    let world = multiWorld\n      ? Math.floor((extent[0] - projectionExtent[0]) / worldWidth)\n      : 0;\n    do {\n      const transform = this.getRenderTransform(\n        center,\n        resolution,\n        rotation,\n        pixelRatio,\n        width,\n        height,\n        world * worldWidth\n      );\n      executorGroup.execute(\n        context,\n        1,\n        transform,\n        rotation,\n        snapToPixel,\n        undefined,\n        opt_declutterTree\n      );\n    } while (++world < endWorld);\n  }\n\n  setupCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const compositionContext = createCanvasContext2D(\n        this.context.canvas.width,\n        this.context.canvas.height,\n        canvasPool\n      );\n      this.compositionContext_ = compositionContext;\n    } else {\n      this.compositionContext_ = this.context;\n    }\n  }\n\n  releaseCompositionContext_() {\n    if (this.opacity_ !== 1) {\n      const alpha = this.context.globalAlpha;\n      this.context.globalAlpha = this.opacity_;\n      this.context.drawImage(this.compositionContext_.canvas, 0, 0);\n      this.context.globalAlpha = alpha;\n      releaseCanvas(this.compositionContext_);\n      canvasPool.push(this.compositionContext_.canvas);\n      this.compositionContext_ = null;\n    }\n  }\n\n  /**\n   * Render declutter items for this layer\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  renderDeclutter(frameState) {\n    if (this.declutterExecutorGroup) {\n      this.setupCompositionContext_();\n      this.renderWorlds(\n        this.declutterExecutorGroup,\n        frameState,\n        frameState.declutterTree\n      );\n      this.releaseCompositionContext_();\n    }\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = transformToString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\n    const context = this.context;\n    const canvas = context.canvas;\n\n    const replayGroup = this.replayGroup_;\n    const declutterExecutorGroup = this.declutterExecutorGroup;\n    if (\n      (!replayGroup || replayGroup.isEmpty()) &&\n      (!declutterExecutorGroup || declutterExecutorGroup.isEmpty())\n    ) {\n      return null;\n    }\n\n    // resize and clear\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n\n    this.opacity_ = layerState.opacity;\n    this.setupCompositionContext_();\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    let render = true;\n    if (layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      render = intersectsExtent(layerExtent, frameState.extent);\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(this.compositionContext_, frameState, layerExtent);\n      }\n    }\n\n    if (render) {\n      this.renderWorlds(replayGroup, frameState);\n    }\n\n    if (clipped) {\n      this.compositionContext_.restore();\n    }\n\n    this.releaseCompositionContext_();\n\n    this.postRender(context, frameState);\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise(\n      /**\n       * @param {function(Array<import(\"../../Feature\").default|import(\"../../render/Feature\").default>): void} resolve Resolver function.\n       * @this {CanvasVectorLayerRenderer}\n       */\n      function (resolve) {\n        if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n          const size = [this.context.canvas.width, this.context.canvas.height];\n          apply(this.pixelTransform, size);\n          const center = this.renderedCenter_;\n          const resolution = this.renderedResolution_;\n          const rotation = this.renderedRotation_;\n          const projection = this.renderedProjection_;\n          const extent = this.wrappedRenderedExtent_;\n          const layer = this.getLayer();\n          const transforms = [];\n          const width = size[0] * HIT_DETECT_RESOLUTION;\n          const height = size[1] * HIT_DETECT_RESOLUTION;\n          transforms.push(\n            this.getRenderTransform(\n              center,\n              resolution,\n              rotation,\n              HIT_DETECT_RESOLUTION,\n              width,\n              height,\n              0\n            ).slice()\n          );\n          const source = layer.getSource();\n          const projectionExtent = projection.getExtent();\n          if (\n            source.getWrapX() &&\n            projection.canWrapX() &&\n            !containsExtent(projectionExtent, extent)\n          ) {\n            let startX = extent[0];\n            const worldWidth = getWidth(projectionExtent);\n            let world = 0;\n            let offsetX;\n            while (startX < projectionExtent[0]) {\n              --world;\n              offsetX = worldWidth * world;\n              transforms.push(\n                this.getRenderTransform(\n                  center,\n                  resolution,\n                  rotation,\n                  HIT_DETECT_RESOLUTION,\n                  width,\n                  height,\n                  offsetX\n                ).slice()\n              );\n              startX += worldWidth;\n            }\n            world = 0;\n            startX = extent[2];\n            while (startX > projectionExtent[2]) {\n              ++world;\n              offsetX = worldWidth * world;\n              transforms.push(\n                this.getRenderTransform(\n                  center,\n                  resolution,\n                  rotation,\n                  HIT_DETECT_RESOLUTION,\n                  width,\n                  height,\n                  offsetX\n                ).slice()\n              );\n              startX -= worldWidth;\n            }\n          }\n\n          this.hitDetectionImageData_ = createHitDetectionImageData(\n            size,\n            transforms,\n            this.renderedFeatures_,\n            layer.getStyleFunction(),\n            extent,\n            resolution,\n            rotation\n          );\n        }\n        resolve(\n          hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\n        );\n      }.bind(this)\n    );\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {import(\"../vector.js\").FeatureCallback<T>} callback Feature callback.\n   * @param {Array<import(\"../Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    matches\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    }\n    const resolution = frameState.viewState.resolution;\n    const rotation = frameState.viewState.rotation;\n    const layer = this.getLayer();\n\n    /** @type {!Object<string, import(\"../Map.js\").HitMatch<T>|true>} */\n    const features = {};\n\n    /**\n     * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n     * @param {import(\"../../geom/SimpleGeometry.js\").default} geometry Geometry.\n     * @param {number} distanceSq The squared distance to the click position\n     * @return {T|undefined} Callback result.\n     */\n    const featureCallback = function (feature, geometry, distanceSq) {\n      const key = getUid(feature);\n      const match = features[key];\n      if (!match) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          return callback(feature, layer, geometry);\n        }\n        matches.push(\n          (features[key] = {\n            feature: feature,\n            layer: layer,\n            geometry: geometry,\n            distanceSq: distanceSq,\n            callback: callback,\n          })\n        );\n      } else if (match !== true && distanceSq < match.distanceSq) {\n        if (distanceSq === 0) {\n          features[key] = true;\n          matches.splice(matches.lastIndexOf(match), 1);\n          return callback(feature, layer, geometry);\n        }\n        match.geometry = geometry;\n        match.distanceSq = distanceSq;\n      }\n      return undefined;\n    };\n\n    let result;\n    const executorGroups = [this.replayGroup_];\n    if (this.declutterExecutorGroup) {\n      executorGroups.push(this.declutterExecutorGroup);\n    }\n    executorGroups.some((executorGroup) => {\n      return (result = executorGroup.forEachFeatureAtCoordinate(\n        coordinate,\n        resolution,\n        rotation,\n        hitTolerance,\n        featureCallback,\n        executorGroup === this.declutterExecutorGroup &&\n          frameState.declutterTree\n          ? frameState.declutterTree.all().map((item) => item.value)\n          : null\n      ));\n    });\n\n    return result;\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (this.ready && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution\n    );\n    const renderedExtent = extent.slice();\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      this.ready &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      containsExtent(this.wrappedRenderedExtent_, extent)\n    ) {\n      if (!equals(this.renderedExtent_, renderedExtent)) {\n        this.hitDetectionImageData_ = null;\n        this.renderedExtent_ = renderedExtent;\n      }\n      this.renderedCenter_ = center;\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio\n    );\n\n    let declutterBuilderGroup;\n    if (this.getLayer().getDeclutter()) {\n      declutterBuilderGroup = new CanvasBuilderGroup(\n        getRenderTolerance(resolution, pixelRatio),\n        extent,\n        resolution,\n        pixelRatio\n      );\n    }\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        const extent = loadExtents[i];\n        const userExtent = toUserExtent(extent, projection);\n        vectorSource.loadFeatures(\n          userExtent,\n          toUserResolution(resolution, projection),\n          userProjection\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    let ready = true;\n    const render =\n      /**\n       * @param {import(\"../../Feature.js\").default} feature Feature.\n       * @this {CanvasVectorLayerRenderer}\n       */\n      function (feature) {\n        let styles;\n        const styleFunction =\n          feature.getStyleFunction() || vectorLayer.getStyleFunction();\n        if (styleFunction) {\n          styles = styleFunction(feature, resolution);\n        }\n        if (styles) {\n          const dirty = this.renderFeature(\n            feature,\n            squaredTolerance,\n            styles,\n            replayGroup,\n            userTransform,\n            declutterBuilderGroup\n          );\n          ready = ready && !dirty;\n        }\n      }.bind(this);\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    this.ready = ready;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer()\n    );\n\n    if (declutterBuilderGroup) {\n      this.declutterExecutorGroup = new ExecutorGroup(\n        extent,\n        resolution,\n        pixelRatio,\n        vectorSource.getOverlaps(),\n        declutterBuilderGroup.finish(),\n        vectorLayer.getRenderBuffer()\n      );\n    }\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = renderedExtent;\n    this.wrappedRenderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction} [opt_transform] Transform from user to view projection.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} [opt_declutterBuilderGroup] Builder for decluttering.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    opt_transform,\n    opt_declutterBuilderGroup\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            opt_transform,\n            opt_declutterBuilderGroup\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        opt_transform,\n        opt_declutterBuilderGroup\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}