{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/PluggableMap\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, { GroupEvent } from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, { getTilePriority } from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { TRUE } from './functions.js';\nimport { apply as applyTransform, create as createTransform } from './transform.js';\nimport { assert } from './asserts.js';\nimport { clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty } from './extent.js';\nimport { fromUserCoordinate, toUserCoordinate } from './proj.js';\nimport { getUid } from './util.js';\nimport { hasArea } from './size.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { removeNode } from './dom.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} PluggableMapOnSignature\n */\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {PluggableMap} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    var layers = layer.getLayers().getArray();\n    for (var i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nvar PluggableMap = /** @class */function (_super) {\n  __extends(PluggableMap, _super);\n  /**\n   * @param {MapOptions} options Map options.\n   */\n  function PluggableMap(options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {PluggableMapOnSignature<void>}\n     */\n    _this.un;\n    var optionsInternal = createOptionsInternal(options);\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    _this.renderComplete_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.loaded_ = true;\n    /** @private */\n    _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n    /**\n     * @private\n     * @type {*}\n     */\n    _this.postRenderTimeoutHandle_;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.animationDelayKey_;\n    /**\n     * @private\n     */\n    _this.animationDelay_ = /** @this {PluggableMap} */function () {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_(Date.now());\n    }.bind(_this);\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    _this.coordinateToPixelTransform_ = createTransform();\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    _this.pixelToCoordinateTransform_ = createTransform();\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.frameIndex_ = 0;\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    _this.frameState_ = null;\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    _this.previousExtent_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.viewPropertyListenerKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.viewChangeListenerKey_ = null;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    _this.layerGroupPropertyListenerKeys_ = null;\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    _this.viewport_ = document.createElement('div');\n    _this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    _this.viewport_.style.position = 'relative';\n    _this.viewport_.style.overflow = 'hidden';\n    _this.viewport_.style.width = '100%';\n    _this.viewport_.style.height = '100%';\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    _this.overlayContainer_ = document.createElement('div');\n    _this.overlayContainer_.style.position = 'absolute';\n    _this.overlayContainer_.style.zIndex = '0';\n    _this.overlayContainer_.style.width = '100%';\n    _this.overlayContainer_.style.height = '100%';\n    _this.overlayContainer_.style.pointerEvents = 'none';\n    _this.overlayContainer_.className = 'ol-overlaycontainer';\n    _this.viewport_.appendChild(_this.overlayContainer_);\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    _this.overlayContainerStopEvent_ = document.createElement('div');\n    _this.overlayContainerStopEvent_.style.position = 'absolute';\n    _this.overlayContainerStopEvent_.style.zIndex = '0';\n    _this.overlayContainerStopEvent_.style.width = '100%';\n    _this.overlayContainerStopEvent_.style.height = '100%';\n    _this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    _this.viewport_.appendChild(_this.overlayContainerStopEvent_);\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    _this.mapBrowserEventHandler_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.moveTolerance_ = options.moveTolerance;\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    _this.targetChangeHandlerKeys_ = null;\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    _this.controls = optionsInternal.controls || new Collection();\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    _this.interactions = optionsInternal.interactions || new Collection();\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    _this.overlays_ = optionsInternal.overlays;\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    _this.overlayIdIndex_ = {};\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n    _this.renderer_ = null;\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    _this.postRenderFunctions_ = [];\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));\n    _this.addChangeListener(MapProperty.LAYERGROUP, _this.handleLayerGroupChanged_);\n    _this.addChangeListener(MapProperty.VIEW, _this.handleViewChanged_);\n    _this.addChangeListener(MapProperty.SIZE, _this.handleSizeChanged_);\n    _this.addChangeListener(MapProperty.TARGET, _this.handleTargetChanged_);\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    _this.setProperties(optionsInternal.values);\n    var map = _this;\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n    _this.controls.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(_this));\n    _this.controls.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(_this));\n    _this.interactions.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(_this));\n    _this.interactions.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(_this));\n    _this.overlays_.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      this.addOverlayInternal_(/** @type {import(\"./Overlay.js\").default} */event.element);\n    }.bind(_this));\n    _this.overlays_.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      var overlay = /** @type {import(\"./Overlay.js\").default} */event.element;\n      var id = overlay.getId();\n      if (id !== undefined) {\n        delete this.overlayIdIndex_[id.toString()];\n      }\n      event.element.setMap(null);\n    }.bind(_this));\n    _this.controls.forEach(\n    /**\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @this {PluggableMap}\n     */\n    function (control) {\n      control.setMap(this);\n    }.bind(_this));\n    _this.interactions.forEach(\n    /**\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n     * @this {PluggableMap}\n     */\n    function (interaction) {\n      interaction.setMap(this);\n    }.bind(_this));\n    _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));\n    return _this;\n  }\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n  PluggableMap.prototype.createRenderer = function () {\n    throw new Error('Use a map type that has a createRenderer method');\n  };\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  PluggableMap.prototype.addControl = function (control) {\n    this.getControls().push(control);\n  };\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  PluggableMap.prototype.addInteraction = function (interaction) {\n    this.getInteractions().push(interaction);\n  };\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  PluggableMap.prototype.addLayer = function (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  };\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */\n  PluggableMap.prototype.handleLayerAdd_ = function (event) {\n    setLayerMapProperty(event.layer, this);\n  };\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  PluggableMap.prototype.addOverlay = function (overlay) {\n    this.getOverlays().push(overlay);\n  };\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  PluggableMap.prototype.addOverlayInternal_ = function (overlay) {\n    var id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  };\n  /**\n   *\n   * Clean up.\n   */\n  PluggableMap.prototype.disposeInternal = function () {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.setTarget(null);\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */\n  PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    var coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n  };\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {\n    var features = [];\n    this.forEachFeatureAtPixel(pixel, function (feature) {\n      features.push(feature);\n    }, opt_options);\n    return features;\n  };\n  /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */\n  PluggableMap.prototype.getAllLayers = function () {\n    var layers = [];\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n    addLayersFrom(this.getLayers());\n    return layers;\n  };\n  /**\n   * Please the `layer.getData()` method for {@link module:ol/layer/Tile~TileLayer#getData tile layers} or\n   * {@link module:ol/layer/Image~ImageLayer#getData image layers} instead of using this method.\n   *\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   *\n   * Note: In maps with more than one layer, this method will typically return pixel data\n   * representing the composed image of all layers visible at the given pixel – because layers\n   * will generally share the same rendering context.  To force layers to render separately, and\n   * to get pixel data representing only one layer at a time, you can assign each layer a unique\n   * `className` in its constructor.\n   *\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer~Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions} [opt_options] Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   * @deprecated\n   */\n  PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    var options = opt_options || {};\n    var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    var layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);\n  };\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n    var coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n    var checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n  };\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  PluggableMap.prototype.getEventCoordinate = function (event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  };\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  PluggableMap.prototype.getEventCoordinateInternal = function (event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  };\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  PluggableMap.prototype.getEventPixel = function (event) {\n    var viewportPosition = this.viewport_.getBoundingClientRect();\n    var eventPosition =\n    //FIXME Are we really calling this with a TouchEvent anywhere?\n    'changedTouches' in event ? /** @type {TouchEvent} */event.changedTouches[0] : (/** @type {MouseEvent} */event);\n    return [eventPosition.clientX - viewportPosition.left, eventPosition.clientY - viewportPosition.top];\n  };\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getTarget = function () {\n    return /** @type {HTMLElement|string|undefined} */this.get(MapProperty.TARGET);\n  };\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  PluggableMap.prototype.getTargetElement = function () {\n    var target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string' ? document.getElementById(target) : target;\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {\n    return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n  };\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {\n    var frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n  };\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  PluggableMap.prototype.getControls = function () {\n    return this.controls;\n  };\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  PluggableMap.prototype.getOverlays = function () {\n    return this.overlays_;\n  };\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  PluggableMap.prototype.getOverlayById = function (id) {\n    var overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  };\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  PluggableMap.prototype.getInteractions = function () {\n    return this.interactions;\n  };\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getLayerGroup = function () {\n    return /** @type {LayerGroup} */this.get(MapProperty.LAYERGROUP);\n  };\n  /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */\n  PluggableMap.prototype.setLayers = function (layers) {\n    var group = this.getLayerGroup();\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n    var collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  };\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  PluggableMap.prototype.getLayers = function () {\n    var layers = this.getLayerGroup().getLayers();\n    return layers;\n  };\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  PluggableMap.prototype.getLoadingOrNotReady = function () {\n    var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var state = layerStatesArray[i];\n      if (!state.visible) {\n        continue;\n      }\n      var renderer = state.layer.getRenderer();\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n      var source = /** @type {import(\"./layer/Layer.js\").default} */state.layer.getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {\n    var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  };\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {\n    var frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n  };\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */\n  PluggableMap.prototype.getRenderer = function () {\n    return this.renderer_;\n  };\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getSize = function () {\n    return /** @type {import(\"./size.js\").Size|undefined} */this.get(MapProperty.SIZE);\n  };\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getView = function () {\n    return /** @type {View} */this.get(MapProperty.VIEW);\n  };\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  PluggableMap.prototype.getViewport = function () {\n    return this.viewport_;\n  };\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  PluggableMap.prototype.getOverlayContainer = function () {\n    return this.overlayContainer_;\n  };\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  PluggableMap.prototype.getOverlayContainerStopEvent = function () {\n    return this.overlayContainerStopEvent_;\n  };\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n  PluggableMap.prototype.getOwnerDocument = function () {\n    var targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  };\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n  };\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [opt_type] Type.\n   */\n  PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {\n    var type = opt_type || browserEvent.type;\n    var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  };\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    var originalEvent = /** @type {PointerEvent} */mapBrowserEvent.originalEvent;\n    var eventType = originalEvent.type;\n    if (eventType === PointerEventType.POINTERDOWN || eventType === EventType.WHEEL || eventType === EventType.KEYDOWN) {\n      var doc = this.getOwnerDocument();\n      var rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : doc;\n      var target = /** @type {Node} */originalEvent.target;\n      if (\n      // Abort if the target is a child of the container for elements whose events are not meant\n      // to be handled by map interactions.\n      this.overlayContainerStopEvent_.contains(target) ||\n      // Abort if the event target is a child of the container that is no longer in the page.\n      // It's possible for the target to no longer be in the page if it has been removed in an\n      // event listener, this might happen in a Control that recreates it's content based on\n      // user interaction either manually or via a render in something like https://reactjs.org/\n      !(rootNode === doc ? doc.documentElement : rootNode).contains(target)) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      var interactionsArray = this.getInteractions().getArray().slice();\n      for (var i = interactionsArray.length - 1; i >= 0; i--) {\n        var interaction = interactionsArray[i];\n        if (interaction.getMap() !== this || !interaction.getActive() || !this.getTargetElement()) {\n          continue;\n        }\n        var cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n  PluggableMap.prototype.handlePostRender = function () {\n    var frameState = this.frameState_;\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    var tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      var maxTotalLoading = this.maxTilesLoading_;\n      var maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        var hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          var lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n        }\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(new MapEvent(MapEventType.LOADEND, this, frameState));\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(new MapEvent(MapEventType.LOADSTART, this, frameState));\n      }\n    }\n    var postRenderFunctions = this.postRenderFunctions_;\n    for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleSizeChanged_ = function () {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n    this.render();\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleTargetChanged_ = function () {\n    if (this.mapBrowserEventHandler_) {\n      for (var i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n      this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n    var targetElement = this.getTargetElement();\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = this.createRenderer();\n      }\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);\n      for (var key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));\n      }\n      this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n      this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? {\n        passive: false\n      } : false);\n      var defaultView = this.getOwnerDocument().defaultView;\n      var keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this), listen(defaultView, EventType.RESIZE, this.updateSize, this)];\n    }\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleTileChange_ = function () {\n    this.render();\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleViewPropertyChanged_ = function () {\n    this.render();\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleViewChanged_ = function () {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    var view = this.getView();\n    if (view) {\n      this.updateViewportSize_();\n      this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n      view.resolveConstraints(0);\n    }\n    this.render();\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleLayerGroupChanged_ = function () {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    var layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this), listen(layerGroup, 'addlayer', this.handleLayerAdd_, this), listen(layerGroup, 'removelayer', this.handleLayerRemove_, this)];\n    }\n    this.render();\n  };\n  /**\n   * @return {boolean} Is rendered.\n   */\n  PluggableMap.prototype.isRendered = function () {\n    return !!this.frameState_;\n  };\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  PluggableMap.prototype.renderSync = function () {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  };\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  PluggableMap.prototype.redrawText = function () {\n    var layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (var i = 0, ii = layerStates.length; i < ii; ++i) {\n      var layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  };\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  PluggableMap.prototype.render = function () {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  };\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeControl = function (control) {\n    return this.getControls().remove(control);\n  };\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeInteraction = function (interaction) {\n    return this.getInteractions().remove(interaction);\n  };\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeLayer = function (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  };\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */\n  PluggableMap.prototype.handleLayerRemove_ = function (event) {\n    removeLayerMapProperty(event.layer);\n  };\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeOverlay = function (overlay) {\n    return this.getOverlays().remove(overlay);\n  };\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  PluggableMap.prototype.renderFrame_ = function (time) {\n    var _this = this;\n    var size = this.getSize();\n    var view = this.getView();\n    var previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    var frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      var viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {}\n      };\n      if (viewState.nextCenter && viewState.nextResolution) {\n        var rotation = isNaN(viewState.nextRotation) ? viewState.rotation : viewState.nextRotation;\n        frameState.nextExtent = getForViewAndSize(viewState.nextCenter, viewState.nextResolution, rotation, size);\n      }\n    }\n    this.frameState_ = frameState;\n    /** @type {import(\"./renderer/Map.js\").default} */\n    this.renderer_.renderFrame(frameState);\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n      if (previousFrameState) {\n        var moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equals(frameState.extent, this.previousExtent_);\n        if (moveStart) {\n          this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n      var idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equals(frameState.extent, this.previousExtent_);\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n    this.renderComplete_ = this.hasListener(MapEventType.LOADSTART) || this.hasListener(MapEventType.LOADEND) || this.hasListener(RenderEventType.RENDERCOMPLETE) ? !this.tileQueue_.getTilesLoading() && !this.tileQueue_.getCount() && !this.getLoadingOrNotReady() : undefined;\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(function () {\n        _this.postRenderTimeoutHandle_ = undefined;\n        _this.handlePostRender();\n      }, 0);\n    }\n  };\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setLayerGroup = function (layerGroup) {\n    var oldLayerGroup = this.getLayerGroup();\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  };\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setSize = function (size) {\n    this.set(MapProperty.SIZE, size);\n  };\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setTarget = function (target) {\n    this.set(MapProperty.TARGET, target);\n  };\n  /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setView = function (view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n    this.set(MapProperty.VIEW, new View());\n    var map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  };\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  PluggableMap.prototype.updateSize = function () {\n    var targetElement = this.getTargetElement();\n    var size = undefined;\n    if (targetElement) {\n      var computedStyle = getComputedStyle(targetElement);\n      var width = targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']);\n      var height = targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth']);\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n        if (!hasArea(size) && !!(targetElement.offsetWidth || targetElement.offsetHeight || targetElement.getClientRects().length)) {\n          // eslint-disable-next-line\n          console.warn(\"No map visible because the map container's width or height are 0.\");\n        }\n      }\n    }\n    this.setSize(size);\n    this.updateViewportSize_();\n  };\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n  PluggableMap.prototype.updateViewportSize_ = function () {\n    var view = this.getView();\n    if (view) {\n      var size = undefined;\n      var computedStyle = getComputedStyle(this.viewport_);\n      if (computedStyle.width && computedStyle.height) {\n        size = [parseInt(computedStyle.width, 10), parseInt(computedStyle.height, 10)];\n      }\n      view.setViewportSize(size);\n    }\n  };\n  return PluggableMap;\n}(BaseObject);\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  var keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n  /**\n   * @type {Object<string, *>}\n   */\n  var values = {};\n  var layerGroup = options.layers && typeof (/** @type {?} */options.layers.getLayers) === 'function' ? (/** @type {LayerGroup} */options.layers) : new LayerGroup({\n    layers: (/** @type {Collection} */options.layers)\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view instanceof View ? options.view : new View();\n  var controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof (/** @type {?} */options.controls.getArray) === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = /** @type {Collection} */options.controls;\n    }\n  }\n  var interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof (/** @type {?} */options.interactions.getArray) === 'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = /** @type {Collection} */options.interactions;\n    }\n  }\n  var overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof (/** @type {?} */options.overlays.getArray) === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\nexport default PluggableMap;","map":{"version":3,"names":["BaseObject","Collection","CollectionEventType","EventType","Layer","LayerGroup","GroupEvent","MapBrowserEvent","MapBrowserEventHandler","MapBrowserEventType","MapEvent","MapEventType","MapProperty","ObjectEventType","PointerEventType","RenderEventType","TileQueue","getTilePriority","View","ViewHint","DEVICE_PIXEL_RATIO","PASSIVE_EVENT_LISTENERS","TRUE","apply","applyTransform","create","createTransform","assert","clone","createOrUpdateEmpty","equals","getForViewAndSize","isEmpty","fromUserCoordinate","toUserCoordinate","getUid","hasArea","listen","unlistenByKey","removeNode","removeLayerMapProperty","layer","setMapInternal","getLayers","forEach","setLayerMapProperty","map","layers","getArray","i","ii","length","PluggableMap","_super","__extends","options","_this","call","on","once","un","optionsInternal","createOptionsInternal","renderComplete_","loaded_","boundHandleBrowserEvent_","handleBrowserEvent","bind","maxTilesLoading_","maxTilesLoading","undefined","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","renderFrame_","Date","now","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","document","createElement","className","window","style","position","overflow","width","height","overlayContainer_","zIndex","pointerEvents","appendChild","overlayContainerStopEvent_","mapBrowserEventHandler_","moveTolerance_","moveTolerance","keyboardEventTarget_","keyboardEventTarget","targetChangeHandlerKeys_","controls","interactions","overlays_","overlays","overlayIdIndex_","renderer_","postRenderFunctions_","tileQueue_","handleTileChange_","addChangeListener","LAYERGROUP","handleLayerGroupChanged_","VIEW","handleViewChanged_","SIZE","handleSizeChanged_","TARGET","handleTargetChanged_","setProperties","values","view","then","viewOptions","setView","addEventListener","ADD","event","element","setMap","REMOVE","addOverlayInternal_","overlay","id","getId","toString","control","interaction","prototype","createRenderer","Error","addControl","getControls","push","addInteraction","getInteractions","addLayer","getLayerGroup","handleLayerAdd_","addOverlay","getOverlays","disposeInternal","clear","setTarget","forEachFeatureAtPixel","pixel","callback","opt_options","coordinate","getCoordinateFromPixelInternal","hitTolerance","layerFilter","checkWrapped","forEachFeatureAtCoordinate","getFeaturesAtPixel","features","feature","getAllLayers","addLayersFrom","layerGroup","forEachLayerAtPixel","hasFeatureAtPixel","hasFeatureAtCoordinate","getEventCoordinate","getCoordinateFromPixel","getEventPixel","getEventCoordinateInternal","viewportPosition","getBoundingClientRect","eventPosition","changedTouches","clientX","left","clientY","top","getTarget","get","getTargetElement","target","getElementById","getView","getProjection","frameState","pixelToCoordinateTransform","slice","getOverlayById","setLayers","group","collection","extend","getLoadingOrNotReady","layerStatesArray","getLayerStatesArray","state","visible","renderer","getRenderer","ready","source","getSource","loading","getPixelFromCoordinate","viewCoordinate","getPixelFromCoordinateInternal","coordinateToPixelTransform","getSize","getViewport","getOverlayContainer","getOverlayContainerStopEvent","getOwnerDocument","targetElement","ownerDocument","tile","tileSourceKey","tileCenter","tileResolution","browserEvent","opt_type","type","mapBrowserEvent","handleMapBrowserEvent","originalEvent","eventType","POINTERDOWN","WHEEL","KEYDOWN","doc","rootNode","getRootNode","contains","documentElement","dispatchEvent","interactionsArray","getMap","getActive","cont","handleEvent","propagationStopped","handlePostRender","tileQueue","maxTotalLoading","maxNewLoads","hints","viewHints","ANIMATING","INTERACTING","lowOnFrameBudget","time","getTilesLoading","reprioritize","loadMoreTiles","animate","hasListener","RENDERCOMPLETE","dispatchRenderEvent","LOADEND","LOADSTART","postRenderFunctions","getAnimating","resolveConstraints","render","removeEventListener","CONTEXTMENU","dispose","clearTimeout","cancelAnimationFrame","key","passive","defaultView","KEYPRESS","RESIZE","updateSize","handleViewPropertyChanged_","updateViewportSize_","PROPERTYCHANGE","CHANGE","handleLayerRemove_","isRendered","renderSync","redrawText","layerStates","hasRenderer","handleFontsChanged","requestAnimationFrame","removeControl","remove","removeInteraction","removeLayer","removeOverlay","size","previousFrameState","isDef","getHints","viewState","getState","declutterTree","extent","center","resolution","rotation","index","layerIndex","usedTiles","wantedTiles","mapId","renderTargets","nextCenter","nextResolution","isNaN","nextRotation","nextExtent","renderFrame","Array","moveStart","MOVESTART","idle","MOVEEND","POSTRENDER","getCount","setTimeout","setLayerGroup","oldLayerGroup","set","setSize","computedStyle","getComputedStyle","offsetWidth","parseFloat","offsetHeight","getClientRects","console","warn","parseInt","setViewportSize","isArray"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\PluggableMap.js"],"sourcesContent":["/**\n * @module ol/PluggableMap\n */\nimport BaseObject from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport EventType from './events/EventType.js';\nimport Layer from './layer/Layer.js';\nimport LayerGroup, {GroupEvent} from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, {getTilePriority} from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport {DEVICE_PIXEL_RATIO, PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {TRUE} from './functions.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n} from './transform.js';\nimport {assert} from './asserts.js';\nimport {\n  clone,\n  createOrUpdateEmpty,\n  equals,\n  getForViewAndSize,\n  isEmpty,\n} from './extent.js';\nimport {fromUserCoordinate, toUserCoordinate} from './proj.js';\nimport {getUid} from './util.js';\nimport {hasArea} from './size.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {removeNode} from './dom.js';\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate Animate.\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform CoordinateToPixelTransform.\n * @property {import(\"rbush\").default} declutterTree DeclutterTree.\n * @property {null|import(\"./extent.js\").Extent} extent Extent.\n * @property {import(\"./extent.js\").Extent} [nextExtent] Next extent during an animation series.\n * @property {number} index Index.\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray LayerStatesArray.\n * @property {number} layerIndex LayerIndex.\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform PixelToCoordinateTransform.\n * @property {Array<PostRenderFunction>} postRenderFunctions PostRenderFunctions.\n * @property {import(\"./size.js\").Size} size Size.\n * @property {TileQueue} tileQueue TileQueue.\n * @property {!Object<string, Object<string, boolean>>} usedTiles UsedTiles.\n * @property {Array<number>} viewHints ViewHints.\n * @property {!Object<string, Object<string, boolean>>} wantedTiles WantedTiles.\n * @property {string} mapId The id of the map.\n * @property {Object<string, boolean>} renderTargets Identifiers of previously rendered elements.\n */\n\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer~Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in css pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls] Controls.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions] Interactions.\n * @property {HTMLElement|Document} keyboardEventTarget KeyboardEventTarget.\n * @property {Collection<import(\"./Overlay.js\").default>} overlays Overlays.\n * @property {Object<string, *>} values Values.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:layergroup'|'change:size'|'change:target'|'change:view'} MapObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *    import(\"./Observable\").OnSignature<MapObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapBrowserEventType\").Types, import(\"./MapBrowserEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./MapEventType\").Types, import(\"./MapEvent\").default, Return> &\n *    import(\"./Observable\").OnSignature<import(\"./render/EventType\").MapRenderEventTypes, import(\"./render/Event\").default, Return> &\n *    import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|MapObjectEventTypes|\n *      import(\"./MapBrowserEventType\").Types|import(\"./MapEventType\").Types|\n *      import(\"./render/EventType\").MapRenderEventTypes, Return>} PluggableMapOnSignature\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control.defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction.defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered. If passed by element, the container can be in a secondary document.\n * @property {View|Promise<import(\"./View.js\").ViewOptions>} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n */\nfunction removeLayerMapProperty(layer) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(null);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    layer.getLayers().forEach(removeLayerMapProperty);\n  }\n}\n\n/**\n * @param {import(\"./layer/Base.js\").default} layer Layer.\n * @param {PluggableMap} map Map.\n */\nfunction setLayerMapProperty(layer, map) {\n  if (layer instanceof Layer) {\n    layer.setMapInternal(map);\n    return;\n  }\n  if (layer instanceof LayerGroup) {\n    const layers = layer.getLayers().getArray();\n    for (let i = 0, ii = layers.length; i < ii; ++i) {\n      setLayerMapProperty(layers[i], map);\n    }\n  }\n}\n\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nclass PluggableMap extends BaseObject {\n  /**\n   * @param {MapOptions} options Map options.\n   */\n  constructor(options) {\n    super();\n\n    /***\n     * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {PluggableMapOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {PluggableMapOnSignature<void>}\n     */\n    this.un;\n\n    const optionsInternal = createOptionsInternal(options);\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.renderComplete_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.loaded_ = true;\n\n    /** @private */\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ =\n      options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ =\n      options.pixelRatio !== undefined\n        ? options.pixelRatio\n        : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.postRenderTimeoutHandle_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = /** @this {PluggableMap} */ function () {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_(Date.now());\n    }.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className =\n      'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.moveTolerance_ = options.moveTolerance;\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.targetChangeHandlerKeys_ = null;\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || new Collection();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions = optionsInternal.interactions || new Collection();\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default|null}\n     * @private\n     */\n    this.renderer_ = null;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(\n      this.getTilePriority.bind(this),\n      this.handleTileChange_.bind(this)\n    );\n\n    this.addChangeListener(\n      MapProperty.LAYERGROUP,\n      this.handleLayerGroupChanged_\n    );\n    this.addChangeListener(MapProperty.VIEW, this.handleViewChanged_);\n    this.addChangeListener(MapProperty.SIZE, this.handleSizeChanged_);\n    this.addChangeListener(MapProperty.TARGET, this.handleTargetChanged_);\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n\n    const map = this;\n    if (options.view && !(options.view instanceof View)) {\n      options.view.then(function (viewOptions) {\n        map.setView(new View(viewOptions));\n      });\n    }\n\n    this.controls.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.controls.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        this.addOverlayInternal_(\n          /** @type {import(\"./Overlay.js\").default} */ (event.element)\n        );\n      }.bind(this)\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        const overlay = /** @type {import(\"./Overlay.js\").default} */ (\n          event.element\n        );\n        const id = overlay.getId();\n        if (id !== undefined) {\n          delete this.overlayIdIndex_[id.toString()];\n        }\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.controls.forEach(\n      /**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       * @this {PluggableMap}\n       */\n      function (control) {\n        control.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.forEach(\n      /**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       * @this {PluggableMap}\n       */\n      function (interaction) {\n        interaction.setMap(this);\n      }.bind(this)\n    );\n\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n  createRenderer() {\n    throw new Error('Use a map type that has a createRenderer method');\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteractions()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer add event.\n   * @private\n   */\n  handleLayerAdd_(event) {\n    setLayerMapProperty(event.layer, this);\n  }\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\n   *\n   * Clean up.\n   */\n  disposeInternal() {\n    this.controls.clear();\n    this.interactions.clear();\n    this.overlays_.clear();\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(import(\"./Feature.js\").FeatureLike, import(\"./layer/Layer.js\").default<import(\"./source/Source\").default>, import(\"./geom/SimpleGeometry.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature~Feature feature} or\n   *     {@link module:ol/render/Feature~RenderFeature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer~Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template T\n   * @api\n   */\n  forEachFeatureAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    const hitTolerance =\n      opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n    const layerFilter =\n      opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    const checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      callback,\n      null,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  getFeaturesAtPixel(pixel, opt_options) {\n    const features = [];\n    this.forEachFeatureAtPixel(\n      pixel,\n      function (feature) {\n        features.push(feature);\n      },\n      opt_options\n    );\n    return features;\n  }\n\n  /**\n   * Get all layers from all layer groups.\n   * @return {Array<import(\"./layer/Layer.js\").default>} Layers.\n   * @api\n   */\n  getAllLayers() {\n    const layers = [];\n    function addLayersFrom(layerGroup) {\n      layerGroup.forEach(function (layer) {\n        if (layer instanceof LayerGroup) {\n          addLayersFrom(layer.getLayers());\n        } else {\n          layers.push(layer);\n        }\n      });\n    }\n    addLayersFrom(this.getLayers());\n    return layers;\n  }\n\n  /**\n   * Please the `layer.getData()` method for {@link module:ol/layer/Tile~TileLayer#getData tile layers} or\n   * {@link module:ol/layer/Image~ImageLayer#getData image layers} instead of using this method.\n   *\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   *\n   * Note: In maps with more than one layer, this method will typically return pixel data\n   * representing the composed image of all layers visible at the given pixel – because layers\n   * will generally share the same rendering context.  To force layers to render separately, and\n   * to get pixel data representing only one layer at a time, you can assign each layer a unique\n   * `className` in its constructor.\n   *\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer~Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions} [opt_options] Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   * @deprecated\n   */\n  forEachLayerAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return;\n    }\n    const options = opt_options || {};\n    const hitTolerance =\n      options.hitTolerance !== undefined ? options.hitTolerance : 0;\n    const layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(\n      pixel,\n      this.frameState_,\n      hitTolerance,\n      callback,\n      layerFilter\n    );\n  }\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions} [opt_options] Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  hasFeatureAtPixel(pixel, opt_options) {\n    if (!this.frameState_ || !this.renderer_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    const layerFilter =\n      opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    const hitTolerance =\n      opt_options.hitTolerance !== undefined ? opt_options.hitTolerance : 0;\n    const checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  getEventPixel(event) {\n    const viewportPosition = this.viewport_.getBoundingClientRect();\n    const eventPosition =\n      //FIXME Are we really calling this with a TouchEvent anywhere?\n      'changedTouches' in event\n        ? /** @type {TouchEvent} */ (event).changedTouches[0]\n        : /** @type {MouseEvent} */ (event);\n\n    return [\n      eventPosition.clientX - viewportPosition.left,\n      eventPosition.clientY - viewportPosition.top,\n    ];\n  }\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  getTarget() {\n    return /** @type {HTMLElement|string|undefined} */ (\n      this.get(MapProperty.TARGET)\n    );\n  }\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  getTargetElement() {\n    const target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string'\n        ? document.getElementById(target)\n        : target;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(\n      this.getCoordinateFromPixelInternal(pixel),\n      this.getView().getProjection()\n    );\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.pixelToCoordinateTransform,\n        pixel.slice()\n      );\n    }\n  }\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  getLayerGroup() {\n    return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\n  }\n\n  /**\n   * Clear any existing layers and add layers to the map.\n   * @param {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>} layers The layers to be added to the map.\n   * @api\n   */\n  setLayers(layers) {\n    const group = this.getLayerGroup();\n    if (layers instanceof Collection) {\n      group.setLayers(layers);\n      return;\n    }\n\n    const collection = group.getLayers();\n    collection.clear();\n    collection.extend(layers);\n  }\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  getLoadingOrNotReady() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const state = layerStatesArray[i];\n      if (!state.visible) {\n        continue;\n      }\n      const renderer = state.layer.getRenderer();\n      if (renderer && !renderer.ready) {\n        return true;\n      }\n      const source = /** @type {import(\"./layer/Layer.js\").default} */ (\n        state.layer\n      ).getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(\n      coordinate,\n      this.getView().getProjection()\n    );\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.coordinateToPixelTransform,\n        coordinate.slice(0, 2)\n      );\n    }\n  }\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default|null} Renderer\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  getSize() {\n    return /** @type {import(\"./size.js\").Size|undefined} */ (\n      this.get(MapProperty.SIZE)\n    );\n  }\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  getView() {\n    return /** @type {View} */ (this.get(MapProperty.VIEW));\n  }\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\n   * @return {!Document} The document where the map is displayed.\n   */\n  getOwnerDocument() {\n    const targetElement = this.getTargetElement();\n    return targetElement ? targetElement.ownerDocument : document;\n  }\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(\n      this.frameState_,\n      tile,\n      tileSourceKey,\n      tileCenter,\n      tileResolution\n    );\n  }\n\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string} [opt_type] Type.\n   */\n  handleBrowserEvent(browserEvent, opt_type) {\n    const type = opt_type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    const originalEvent = /** @type {PointerEvent} */ (\n      mapBrowserEvent.originalEvent\n    );\n    const eventType = originalEvent.type;\n    if (\n      eventType === PointerEventType.POINTERDOWN ||\n      eventType === EventType.WHEEL ||\n      eventType === EventType.KEYDOWN\n    ) {\n      const doc = this.getOwnerDocument();\n      const rootNode = this.viewport_.getRootNode\n        ? this.viewport_.getRootNode()\n        : doc;\n      const target = /** @type {Node} */ (originalEvent.target);\n      if (\n        // Abort if the target is a child of the container for elements whose events are not meant\n        // to be handled by map interactions.\n        this.overlayContainerStopEvent_.contains(target) ||\n        // Abort if the event target is a child of the container that is no longer in the page.\n        // It's possible for the target to no longer be in the page if it has been removed in an\n        // event listener, this might happen in a Control that recreates it's content based on\n        // user interaction either manually or via a render in something like https://reactjs.org/\n        !(rootNode === doc ? doc.documentElement : rootNode).contains(target)\n      ) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      const interactionsArray = this.getInteractions().getArray().slice();\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (\n          interaction.getMap() !== this ||\n          !interaction.getActive() ||\n          !this.getTargetElement()\n        ) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont || mapBrowserEvent.propagationStopped) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePostRender() {\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget = Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (frameState && this.renderer_ && !frameState.animate) {\n      if (this.renderComplete_ === true) {\n        if (this.hasListener(RenderEventType.RENDERCOMPLETE)) {\n          this.renderer_.dispatchRenderEvent(\n            RenderEventType.RENDERCOMPLETE,\n            frameState\n          );\n        }\n        if (this.loaded_ === false) {\n          this.loaded_ = true;\n          this.dispatchEvent(\n            new MapEvent(MapEventType.LOADEND, this, frameState)\n          );\n        }\n      } else if (this.loaded_ === true) {\n        this.loaded_ = false;\n        this.dispatchEvent(\n          new MapEvent(MapEventType.LOADSTART, this, frameState)\n        );\n      }\n    }\n\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleTargetChanged_() {\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.targetChangeHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.targetChangeHandlerKeys_[i]);\n      }\n      this.targetChangeHandlerKeys_ = null;\n      this.viewport_.removeEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_\n      );\n      this.viewport_.removeEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_\n      );\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    const targetElement = this.getTargetElement();\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderTimeoutHandle_ = undefined;\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = this.createRenderer();\n      }\n\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(\n        this,\n        this.moveTolerance_\n      );\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(\n          MapBrowserEventType[key],\n          this.handleMapBrowserEvent.bind(this)\n        );\n      }\n      this.viewport_.addEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_,\n        false\n      );\n      this.viewport_.addEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_,\n        PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n      );\n\n      const defaultView = this.getOwnerDocument().defaultView;\n      const keyboardEventTarget = !this.keyboardEventTarget_\n        ? targetElement\n        : this.keyboardEventTarget_;\n      this.targetChangeHandlerKeys_ = [\n        listen(\n          keyboardEventTarget,\n          EventType.KEYDOWN,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(\n          keyboardEventTarget,\n          EventType.KEYPRESS,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(defaultView, EventType.RESIZE, this.updateSize, this),\n      ];\n    }\n\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\n   * @private\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.updateViewportSize_();\n\n      this.viewPropertyListenerKey_ = listen(\n        view,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n      this.viewChangeListenerKey_ = listen(\n        view,\n        EventType.CHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n\n      view.resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.handleLayerAdd_(new GroupEvent('addlayer', layerGroup));\n      this.layerGroupPropertyListenerKeys_ = [\n        listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n        listen(layerGroup, EventType.CHANGE, this.render, this),\n        listen(layerGroup, 'addlayer', this.handleLayerAdd_, this),\n        listen(layerGroup, 'removelayer', this.handleLayerRemove_, this),\n      ];\n    }\n    this.render();\n  }\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\n   * @param {import(\"./layer/Group.js\").GroupEvent} event The layer remove event.\n   * @private\n   */\n  handleLayerRemove_(event) {\n    removeLayerMapProperty(event.layer);\n  }\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(\n        this.frameState_ ? this.frameState_.viewHints : undefined\n      );\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterTree: null,\n        extent: getForViewAndSize(\n          viewState.center,\n          viewState.resolution,\n          viewState.rotation,\n          size\n        ),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n        mapId: getUid(this),\n        renderTargets: {},\n      };\n      if (viewState.nextCenter && viewState.nextResolution) {\n        const rotation = isNaN(viewState.nextRotation)\n          ? viewState.rotation\n          : viewState.nextRotation;\n\n        frameState.nextExtent = getForViewAndSize(\n          viewState.nextCenter,\n          viewState.nextResolution,\n          rotation,\n          size\n        );\n      }\n    }\n\n    this.frameState_ = frameState;\n    /** @type {import(\"./renderer/Map.js\").default} */ (\n      this.renderer_\n    ).renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(\n        this.postRenderFunctions_,\n        frameState.postRenderFunctions\n      );\n\n      if (previousFrameState) {\n        const moveStart =\n          !this.previousExtent_ ||\n          (!isEmpty(this.previousExtent_) &&\n            !equals(frameState.extent, this.previousExtent_));\n        if (moveStart) {\n          this.dispatchEvent(\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState)\n          );\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      const idle =\n        this.previousExtent_ &&\n        !frameState.viewHints[ViewHint.ANIMATING] &&\n        !frameState.viewHints[ViewHint.INTERACTING] &&\n        !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(\n          new MapEvent(MapEventType.MOVEEND, this, frameState)\n        );\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n\n    this.renderComplete_ =\n      this.hasListener(MapEventType.LOADSTART) ||\n      this.hasListener(MapEventType.LOADEND) ||\n      this.hasListener(RenderEventType.RENDERCOMPLETE)\n        ? !this.tileQueue_.getTilesLoading() &&\n          !this.tileQueue_.getCount() &&\n          !this.getLoadingOrNotReady()\n        : undefined;\n\n    if (!this.postRenderTimeoutHandle_) {\n      this.postRenderTimeoutHandle_ = setTimeout(() => {\n        this.postRenderTimeoutHandle_ = undefined;\n        this.handlePostRender();\n      }, 0);\n    }\n  }\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  setLayerGroup(layerGroup) {\n    const oldLayerGroup = this.getLayerGroup();\n    if (oldLayerGroup) {\n      this.handleLayerRemove_(new GroupEvent('removelayer', oldLayerGroup));\n    }\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string} [target] The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\n   * Set the view for this map.\n   * @param {View|Promise<import(\"./View.js\").ViewOptions>} view The view that controls this map.\n   * It is also possible to pass a promise that resolves to options for constructing a view.  This\n   * alternative allows view properties to be resolved by sources or other components that load\n   * view-related metadata.\n   * @observable\n   * @api\n   */\n  setView(view) {\n    if (!view || view instanceof View) {\n      this.set(MapProperty.VIEW, view);\n      return;\n    }\n    this.set(MapProperty.VIEW, new View());\n\n    const map = this;\n    view.then(function (viewOptions) {\n      map.setView(new View(viewOptions));\n    });\n  }\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n\n    let size = undefined;\n    if (targetElement) {\n      const computedStyle = getComputedStyle(targetElement);\n      const width =\n        targetElement.offsetWidth -\n        parseFloat(computedStyle['borderLeftWidth']) -\n        parseFloat(computedStyle['paddingLeft']) -\n        parseFloat(computedStyle['paddingRight']) -\n        parseFloat(computedStyle['borderRightWidth']);\n      const height =\n        targetElement.offsetHeight -\n        parseFloat(computedStyle['borderTopWidth']) -\n        parseFloat(computedStyle['paddingTop']) -\n        parseFloat(computedStyle['paddingBottom']) -\n        parseFloat(computedStyle['borderBottomWidth']);\n      if (!isNaN(width) && !isNaN(height)) {\n        size = [width, height];\n        if (\n          !hasArea(size) &&\n          !!(\n            targetElement.offsetWidth ||\n            targetElement.offsetHeight ||\n            targetElement.getClientRects().length\n          )\n        ) {\n          // eslint-disable-next-line\n          console.warn(\n            \"No map visible because the map container's width or height are 0.\"\n          );\n        }\n      }\n    }\n\n    this.setSize(size);\n    this.updateViewportSize_();\n  }\n\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n  updateViewportSize_() {\n    const view = this.getView();\n    if (view) {\n      let size = undefined;\n      const computedStyle = getComputedStyle(this.viewport_);\n      if (computedStyle.width && computedStyle.height) {\n        size = [\n          parseInt(computedStyle.width, 10),\n          parseInt(computedStyle.height, 10),\n        ];\n      }\n      view.setViewportSize(size);\n    }\n  }\n}\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget =\n      typeof options.keyboardEventTarget === 'string'\n        ? document.getElementById(options.keyboardEventTarget)\n        : options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  const values = {};\n\n  const layerGroup =\n    options.layers &&\n    typeof (/** @type {?} */ (options.layers).getLayers) === 'function'\n      ? /** @type {LayerGroup} */ (options.layers)\n      : new LayerGroup({layers: /** @type {Collection} */ (options.layers)});\n  values[MapProperty.LAYERGROUP] = layerGroup;\n\n  values[MapProperty.TARGET] = options.target;\n\n  values[MapProperty.VIEW] =\n    options.view instanceof View ? options.view : new View();\n\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.controls).getArray) === 'function',\n        47\n      ); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = /** @type {Collection} */ (options.controls);\n    }\n  }\n\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.interactions).getArray) ===\n          'function',\n        48\n      ); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = /** @type {Collection} */ (options.interactions);\n    }\n  }\n\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.overlays).getArray) === 'function',\n        49\n      ); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values,\n  };\n}\nexport default PluggableMap;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,UAAU,MAAM,aAAa;AACpC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,mBAAmB,MAAM,0BAA0B;AAC1D,OAAOC,SAAS,MAAM,uBAAuB;AAC7C,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,UAAU,IAAGC,UAAU,QAAO,kBAAkB;AACvD,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,sBAAsB,MAAM,6BAA6B;AAChE,OAAOC,mBAAmB,MAAM,0BAA0B;AAC1D,OAAOC,QAAQ,MAAM,eAAe;AACpC,OAAOC,YAAY,MAAM,mBAAmB;AAC5C,OAAOC,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,eAAe,MAAM,sBAAsB;AAClD,OAAOC,gBAAgB,MAAM,wBAAwB;AACrD,OAAOC,eAAe,MAAM,uBAAuB;AACnD,OAAOC,SAAS,IAAGC,eAAe,QAAO,gBAAgB;AACzD,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,QAAQ,MAAM,eAAe;AACpC,SAAQC,kBAAkB,EAAEC,uBAAuB,QAAO,UAAU;AACpE,SAAQC,IAAI,QAAO,gBAAgB;AACnC,SACEC,KAAK,IAAIC,cAAc,EACvBC,MAAM,IAAIC,eAAe,QACpB,gBAAgB;AACvB,SAAQC,MAAM,QAAO,cAAc;AACnC,SACEC,KAAK,EACLC,mBAAmB,EACnBC,MAAM,EACNC,iBAAiB,EACjBC,OAAO,QACF,aAAa;AACpB,SAAQC,kBAAkB,EAAEC,gBAAgB,QAAO,WAAW;AAC9D,SAAQC,MAAM,QAAO,WAAW;AAChC,SAAQC,OAAO,QAAO,WAAW;AACjC,SAAQC,MAAM,EAAEC,aAAa,QAAO,aAAa;AACjD,SAAQC,UAAU,QAAO,UAAU;AAEnC;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;;;AAIA;;;;;;;;;;;;AAaA;;;;;;;;AASA;;;AAIA;;;;;;;;;;;AAYA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;;;AAGA,SAASC,sBAAsBA,CAACC,KAAK;EACnC,IAAIA,KAAK,YAAYrC,KAAK,EAAE;IAC1BqC,KAAK,CAACC,cAAc,CAAC,IAAI,CAAC;IAC1B;;EAEF,IAAID,KAAK,YAAYpC,UAAU,EAAE;IAC/BoC,KAAK,CAACE,SAAS,EAAE,CAACC,OAAO,CAACJ,sBAAsB,CAAC;;AAErD;AAEA;;;;AAIA,SAASK,mBAAmBA,CAACJ,KAAK,EAAEK,GAAG;EACrC,IAAIL,KAAK,YAAYrC,KAAK,EAAE;IAC1BqC,KAAK,CAACC,cAAc,CAACI,GAAG,CAAC;IACzB;;EAEF,IAAIL,KAAK,YAAYpC,UAAU,EAAE;IAC/B,IAAM0C,MAAM,GAAGN,KAAK,CAACE,SAAS,EAAE,CAACK,QAAQ,EAAE;IAC3C,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGH,MAAM,CAACI,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAC/CJ,mBAAmB,CAACE,MAAM,CAACE,CAAC,CAAC,EAAEH,GAAG,CAAC;;;AAGzC;AAEA;;;;;;;;AAQA,IAAAM,YAAA,0BAAAC,MAAA;EAA2BC,SAAA,CAAAF,YAAA,EAAAC,MAAA;EACzB;;;EAGA,SAAAD,aAAYG,OAAO;IAAnB,IAAAC,KAAA,GACEH,MAAA,CAAAI,IAAA,MAAO;IAEP;;;IAGAD,KAAI,CAACE,EAAE;IAEP;;;IAGAF,KAAI,CAACG,IAAI;IAET;;;IAGAH,KAAI,CAACI,EAAE;IAEP,IAAMC,eAAe,GAAGC,qBAAqB,CAACP,OAAO,CAAC;IAEtD;;;;IAIAC,KAAI,CAACO,eAAe;IAEpB;;;;IAIAP,KAAI,CAACQ,OAAO,GAAG,IAAI;IAEnB;IACAR,KAAI,CAACS,wBAAwB,GAAGT,KAAI,CAACU,kBAAkB,CAACC,IAAI,CAACX,KAAI,CAAC;IAElE;;;;IAIAA,KAAI,CAACY,gBAAgB,GACnBb,OAAO,CAACc,eAAe,KAAKC,SAAS,GAAGf,OAAO,CAACc,eAAe,GAAG,EAAE;IAEtE;;;;IAIAb,KAAI,CAACe,WAAW,GACdhB,OAAO,CAACiB,UAAU,KAAKF,SAAS,GAC5Bf,OAAO,CAACiB,UAAU,GAClBpD,kBAAkB;IAExB;;;;IAIAoC,KAAI,CAACiB,wBAAwB;IAE7B;;;;IAIAjB,KAAI,CAACkB,kBAAkB;IAEvB;;;IAGAlB,KAAI,CAACmB,eAAe,GAAG,2BAA4B;MACjD,IAAI,CAACD,kBAAkB,GAAGJ,SAAS;MACnC,IAAI,CAACM,YAAY,CAACC,IAAI,CAACC,GAAG,EAAE,CAAC;IAC/B,CAAC,CAACX,IAAI,CAACX,KAAI,CAAC;IAEZ;;;;IAIAA,KAAI,CAACuB,2BAA2B,GAAGrD,eAAe,EAAE;IAEpD;;;;IAIA8B,KAAI,CAACwB,2BAA2B,GAAGtD,eAAe,EAAE;IAEpD;;;;IAIA8B,KAAI,CAACyB,WAAW,GAAG,CAAC;IAEpB;;;;IAIAzB,KAAI,CAAC0B,WAAW,GAAG,IAAI;IAEvB;;;;;IAKA1B,KAAI,CAAC2B,eAAe,GAAG,IAAI;IAE3B;;;;IAIA3B,KAAI,CAAC4B,wBAAwB,GAAG,IAAI;IAEpC;;;;IAIA5B,KAAI,CAAC6B,sBAAsB,GAAG,IAAI;IAElC;;;;IAIA7B,KAAI,CAAC8B,+BAA+B,GAAG,IAAI;IAE3C;;;;IAIA9B,KAAI,CAAC+B,SAAS,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC9CjC,KAAI,CAAC+B,SAAS,CAACG,SAAS,GACtB,aAAa,IAAI,cAAc,IAAIC,MAAM,GAAG,WAAW,GAAG,EAAE,CAAC;IAC/DnC,KAAI,CAAC+B,SAAS,CAACK,KAAK,CAACC,QAAQ,GAAG,UAAU;IAC1CrC,KAAI,CAAC+B,SAAS,CAACK,KAAK,CAACE,QAAQ,GAAG,QAAQ;IACxCtC,KAAI,CAAC+B,SAAS,CAACK,KAAK,CAACG,KAAK,GAAG,MAAM;IACnCvC,KAAI,CAAC+B,SAAS,CAACK,KAAK,CAACI,MAAM,GAAG,MAAM;IAEpC;;;;IAIAxC,KAAI,CAACyC,iBAAiB,GAAGT,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IACtDjC,KAAI,CAACyC,iBAAiB,CAACL,KAAK,CAACC,QAAQ,GAAG,UAAU;IAClDrC,KAAI,CAACyC,iBAAiB,CAACL,KAAK,CAACM,MAAM,GAAG,GAAG;IACzC1C,KAAI,CAACyC,iBAAiB,CAACL,KAAK,CAACG,KAAK,GAAG,MAAM;IAC3CvC,KAAI,CAACyC,iBAAiB,CAACL,KAAK,CAACI,MAAM,GAAG,MAAM;IAC5CxC,KAAI,CAACyC,iBAAiB,CAACL,KAAK,CAACO,aAAa,GAAG,MAAM;IACnD3C,KAAI,CAACyC,iBAAiB,CAACP,SAAS,GAAG,qBAAqB;IACxDlC,KAAI,CAAC+B,SAAS,CAACa,WAAW,CAAC5C,KAAI,CAACyC,iBAAiB,CAAC;IAElD;;;;IAIAzC,KAAI,CAAC6C,0BAA0B,GAAGb,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC/DjC,KAAI,CAAC6C,0BAA0B,CAACT,KAAK,CAACC,QAAQ,GAAG,UAAU;IAC3DrC,KAAI,CAAC6C,0BAA0B,CAACT,KAAK,CAACM,MAAM,GAAG,GAAG;IAClD1C,KAAI,CAAC6C,0BAA0B,CAACT,KAAK,CAACG,KAAK,GAAG,MAAM;IACpDvC,KAAI,CAAC6C,0BAA0B,CAACT,KAAK,CAACI,MAAM,GAAG,MAAM;IACrDxC,KAAI,CAAC6C,0BAA0B,CAACT,KAAK,CAACO,aAAa,GAAG,MAAM;IAC5D3C,KAAI,CAAC6C,0BAA0B,CAACX,SAAS,GAAG,+BAA+B;IAC3ElC,KAAI,CAAC+B,SAAS,CAACa,WAAW,CAAC5C,KAAI,CAAC6C,0BAA0B,CAAC;IAE3D;;;;IAIA7C,KAAI,CAAC8C,uBAAuB,GAAG,IAAI;IAEnC;;;;IAIA9C,KAAI,CAAC+C,cAAc,GAAGhD,OAAO,CAACiD,aAAa;IAE3C;;;;IAIAhD,KAAI,CAACiD,oBAAoB,GAAG5C,eAAe,CAAC6C,mBAAmB;IAE/D;;;;IAIAlD,KAAI,CAACmD,wBAAwB,GAAG,IAAI;IAEpC;;;;IAIAnD,KAAI,CAACoD,QAAQ,GAAG/C,eAAe,CAAC+C,QAAQ,IAAI,IAAI3G,UAAU,EAAE;IAE5D;;;;IAIAuD,KAAI,CAACqD,YAAY,GAAGhD,eAAe,CAACgD,YAAY,IAAI,IAAI5G,UAAU,EAAE;IAEpE;;;;IAIAuD,KAAI,CAACsD,SAAS,GAAGjD,eAAe,CAACkD,QAAQ;IAEzC;;;;;IAKAvD,KAAI,CAACwD,eAAe,GAAG,EAAE;IAEzB;;;;IAIAxD,KAAI,CAACyD,SAAS,GAAG,IAAI;IAErB;;;;IAIAzD,KAAI,CAAC0D,oBAAoB,GAAG,EAAE;IAE9B;;;;IAIA1D,KAAI,CAAC2D,UAAU,GAAG,IAAInG,SAAS,CAC7BwC,KAAI,CAACvC,eAAe,CAACkD,IAAI,CAACX,KAAI,CAAC,EAC/BA,KAAI,CAAC4D,iBAAiB,CAACjD,IAAI,CAACX,KAAI,CAAC,CAClC;IAEDA,KAAI,CAAC6D,iBAAiB,CACpBzG,WAAW,CAAC0G,UAAU,EACtB9D,KAAI,CAAC+D,wBAAwB,CAC9B;IACD/D,KAAI,CAAC6D,iBAAiB,CAACzG,WAAW,CAAC4G,IAAI,EAAEhE,KAAI,CAACiE,kBAAkB,CAAC;IACjEjE,KAAI,CAAC6D,iBAAiB,CAACzG,WAAW,CAAC8G,IAAI,EAAElE,KAAI,CAACmE,kBAAkB,CAAC;IACjEnE,KAAI,CAAC6D,iBAAiB,CAACzG,WAAW,CAACgH,MAAM,EAAEpE,KAAI,CAACqE,oBAAoB,CAAC;IAErE;IACA;IACArE,KAAI,CAACsE,aAAa,CAACjE,eAAe,CAACkE,MAAM,CAAC;IAE1C,IAAMjF,GAAG,GAAGU,KAAI;IAChB,IAAID,OAAO,CAACyE,IAAI,IAAI,EAAEzE,OAAO,CAACyE,IAAI,YAAY9G,IAAI,CAAC,EAAE;MACnDqC,OAAO,CAACyE,IAAI,CAACC,IAAI,CAAC,UAAUC,WAAW;QACrCpF,GAAG,CAACqF,OAAO,CAAC,IAAIjH,IAAI,CAACgH,WAAW,CAAC,CAAC;MACpC,CAAC,CAAC;;IAGJ1E,KAAI,CAACoD,QAAQ,CAACwB,gBAAgB,CAC5BlI,mBAAmB,CAACmI,GAAG;IACvB;;;IAGA,UAAUC,KAAK;MACbA,KAAK,CAACC,OAAO,CAACC,MAAM,CAAC,IAAI,CAAC;IAC5B,CAAC,CAACrE,IAAI,CAACX,KAAI,CAAC,CACb;IAEDA,KAAI,CAACoD,QAAQ,CAACwB,gBAAgB,CAC5BlI,mBAAmB,CAACuI,MAAM;IAC1B;;;IAGA,UAAUH,KAAK;MACbA,KAAK,CAACC,OAAO,CAACC,MAAM,CAAC,IAAI,CAAC;IAC5B,CAAC,CAACrE,IAAI,CAACX,KAAI,CAAC,CACb;IAEDA,KAAI,CAACqD,YAAY,CAACuB,gBAAgB,CAChClI,mBAAmB,CAACmI,GAAG;IACvB;;;IAGA,UAAUC,KAAK;MACbA,KAAK,CAACC,OAAO,CAACC,MAAM,CAAC,IAAI,CAAC;IAC5B,CAAC,CAACrE,IAAI,CAACX,KAAI,CAAC,CACb;IAEDA,KAAI,CAACqD,YAAY,CAACuB,gBAAgB,CAChClI,mBAAmB,CAACuI,MAAM;IAC1B;;;IAGA,UAAUH,KAAK;MACbA,KAAK,CAACC,OAAO,CAACC,MAAM,CAAC,IAAI,CAAC;IAC5B,CAAC,CAACrE,IAAI,CAACX,KAAI,CAAC,CACb;IAEDA,KAAI,CAACsD,SAAS,CAACsB,gBAAgB,CAC7BlI,mBAAmB,CAACmI,GAAG;IACvB;;;IAGA,UAAUC,KAAK;MACb,IAAI,CAACI,mBAAmB,CACtB,6CAA+CJ,KAAK,CAACC,OAAQ,CAC9D;IACH,CAAC,CAACpE,IAAI,CAACX,KAAI,CAAC,CACb;IAEDA,KAAI,CAACsD,SAAS,CAACsB,gBAAgB,CAC7BlI,mBAAmB,CAACuI,MAAM;IAC1B;;;IAGA,UAAUH,KAAK;MACb,IAAMK,OAAO,GAAG,6CACdL,KAAK,CAACC,OACP;MACD,IAAMK,EAAE,GAAGD,OAAO,CAACE,KAAK,EAAE;MAC1B,IAAID,EAAE,KAAKtE,SAAS,EAAE;QACpB,OAAO,IAAI,CAAC0C,eAAe,CAAC4B,EAAE,CAACE,QAAQ,EAAE,CAAC;;MAE5CR,KAAK,CAACC,OAAO,CAACC,MAAM,CAAC,IAAI,CAAC;IAC5B,CAAC,CAACrE,IAAI,CAACX,KAAI,CAAC,CACb;IAEDA,KAAI,CAACoD,QAAQ,CAAChE,OAAO;IACnB;;;;IAIA,UAAUmG,OAAO;MACfA,OAAO,CAACP,MAAM,CAAC,IAAI,CAAC;IACtB,CAAC,CAACrE,IAAI,CAACX,KAAI,CAAC,CACb;IAEDA,KAAI,CAACqD,YAAY,CAACjE,OAAO;IACvB;;;;IAIA,UAAUoG,WAAW;MACnBA,WAAW,CAACR,MAAM,CAAC,IAAI,CAAC;IAC1B,CAAC,CAACrE,IAAI,CAACX,KAAI,CAAC,CACb;IAEDA,KAAI,CAACsD,SAAS,CAAClE,OAAO,CAACY,KAAI,CAACkF,mBAAmB,CAACvE,IAAI,CAACX,KAAI,CAAC,CAAC;;EAC7D;EAEA;;;;EAIAJ,YAAA,CAAA6F,SAAA,CAAAC,cAAc,GAAd;IACE,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;EACpE,CAAC;EAED;;;;;EAKA/F,YAAA,CAAA6F,SAAA,CAAAG,UAAU,GAAV,UAAWL,OAAO;IAChB,IAAI,CAACM,WAAW,EAAE,CAACC,IAAI,CAACP,OAAO,CAAC;EAClC,CAAC;EAED;;;;;;;;;EASA3F,YAAA,CAAA6F,SAAA,CAAAM,cAAc,GAAd,UAAeP,WAAW;IACxB,IAAI,CAACQ,eAAe,EAAE,CAACF,IAAI,CAACN,WAAW,CAAC;EAC1C,CAAC;EAED;;;;;;;EAOA5F,YAAA,CAAA6F,SAAA,CAAAQ,QAAQ,GAAR,UAAShH,KAAK;IACZ,IAAMM,MAAM,GAAG,IAAI,CAAC2G,aAAa,EAAE,CAAC/G,SAAS,EAAE;IAC/CI,MAAM,CAACuG,IAAI,CAAC7G,KAAK,CAAC;EACpB,CAAC;EAED;;;;EAIAW,YAAA,CAAA6F,SAAA,CAAAU,eAAe,GAAf,UAAgBrB,KAAK;IACnBzF,mBAAmB,CAACyF,KAAK,CAAC7F,KAAK,EAAE,IAAI,CAAC;EACxC,CAAC;EAED;;;;;EAKAW,YAAA,CAAA6F,SAAA,CAAAW,UAAU,GAAV,UAAWjB,OAAO;IAChB,IAAI,CAACkB,WAAW,EAAE,CAACP,IAAI,CAACX,OAAO,CAAC;EAClC,CAAC;EAED;;;;;EAKAvF,YAAA,CAAA6F,SAAA,CAAAP,mBAAmB,GAAnB,UAAoBC,OAAO;IACzB,IAAMC,EAAE,GAAGD,OAAO,CAACE,KAAK,EAAE;IAC1B,IAAID,EAAE,KAAKtE,SAAS,EAAE;MACpB,IAAI,CAAC0C,eAAe,CAAC4B,EAAE,CAACE,QAAQ,EAAE,CAAC,GAAGH,OAAO;;IAE/CA,OAAO,CAACH,MAAM,CAAC,IAAI,CAAC;EACtB,CAAC;EAED;;;;EAIApF,YAAA,CAAA6F,SAAA,CAAAa,eAAe,GAAf;IACE,IAAI,CAAClD,QAAQ,CAACmD,KAAK,EAAE;IACrB,IAAI,CAAClD,YAAY,CAACkD,KAAK,EAAE;IACzB,IAAI,CAACjD,SAAS,CAACiD,KAAK,EAAE;IACtB,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC;IACpB3G,MAAA,CAAA4F,SAAA,CAAMa,eAAe,CAAArG,IAAA,MAAE;EACzB,CAAC;EAED;;;;;;;;;;;;;;;;;;EAkBAL,YAAA,CAAA6F,SAAA,CAAAgB,qBAAqB,GAArB,UAAsBC,KAAK,EAAEC,QAAQ,EAAEC,WAAW;IAChD,IAAI,CAAC,IAAI,CAAClF,WAAW,IAAI,CAAC,IAAI,CAAC+B,SAAS,EAAE;MACxC;;IAEF,IAAMoD,UAAU,GAAG,IAAI,CAACC,8BAA8B,CAACJ,KAAK,CAAC;IAC7DE,WAAW,GAAGA,WAAW,KAAK9F,SAAS,GAAG8F,WAAW,GAAG,EAAE;IAC1D,IAAMG,YAAY,GAChBH,WAAW,CAACG,YAAY,KAAKjG,SAAS,GAAG8F,WAAW,CAACG,YAAY,GAAG,CAAC;IACvE,IAAMC,WAAW,GACfJ,WAAW,CAACI,WAAW,KAAKlG,SAAS,GAAG8F,WAAW,CAACI,WAAW,GAAGlJ,IAAI;IACxE,IAAMmJ,YAAY,GAAGL,WAAW,CAACK,YAAY,KAAK,KAAK;IACvD,OAAO,IAAI,CAACxD,SAAS,CAACyD,0BAA0B,CAC9CL,UAAU,EACV,IAAI,CAACnF,WAAW,EAChBqF,YAAY,EACZE,YAAY,EACZN,QAAQ,EACR,IAAI,EACJK,WAAW,EACX,IAAI,CACL;EACH,CAAC;EAED;;;;;;;;EAQApH,YAAA,CAAA6F,SAAA,CAAA0B,kBAAkB,GAAlB,UAAmBT,KAAK,EAAEE,WAAW;IACnC,IAAMQ,QAAQ,GAAG,EAAE;IACnB,IAAI,CAACX,qBAAqB,CACxBC,KAAK,EACL,UAAUW,OAAO;MACfD,QAAQ,CAACtB,IAAI,CAACuB,OAAO,CAAC;IACxB,CAAC,EACDT,WAAW,CACZ;IACD,OAAOQ,QAAQ;EACjB,CAAC;EAED;;;;;EAKAxH,YAAA,CAAA6F,SAAA,CAAA6B,YAAY,GAAZ;IACE,IAAM/H,MAAM,GAAG,EAAE;IACjB,SAASgI,aAAaA,CAACC,UAAU;MAC/BA,UAAU,CAACpI,OAAO,CAAC,UAAUH,KAAK;QAChC,IAAIA,KAAK,YAAYpC,UAAU,EAAE;UAC/B0K,aAAa,CAACtI,KAAK,CAACE,SAAS,EAAE,CAAC;SACjC,MAAM;UACLI,MAAM,CAACuG,IAAI,CAAC7G,KAAK,CAAC;;MAEtB,CAAC,CAAC;IACJ;IACAsI,aAAa,CAAC,IAAI,CAACpI,SAAS,EAAE,CAAC;IAC/B,OAAOI,MAAM;EACf,CAAC;EAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA4BAK,YAAA,CAAA6F,SAAA,CAAAgC,mBAAmB,GAAnB,UAAoBf,KAAK,EAAEC,QAAQ,EAAEC,WAAW;IAC9C,IAAI,CAAC,IAAI,CAAClF,WAAW,IAAI,CAAC,IAAI,CAAC+B,SAAS,EAAE;MACxC;;IAEF,IAAM1D,OAAO,GAAG6G,WAAW,IAAI,EAAE;IACjC,IAAMG,YAAY,GAChBhH,OAAO,CAACgH,YAAY,KAAKjG,SAAS,GAAGf,OAAO,CAACgH,YAAY,GAAG,CAAC;IAC/D,IAAMC,WAAW,GAAGjH,OAAO,CAACiH,WAAW,IAAIlJ,IAAI;IAC/C,OAAO,IAAI,CAAC2F,SAAS,CAACgE,mBAAmB,CACvCf,KAAK,EACL,IAAI,CAAChF,WAAW,EAChBqF,YAAY,EACZJ,QAAQ,EACRK,WAAW,CACZ;EACH,CAAC;EAED;;;;;;;;EAQApH,YAAA,CAAA6F,SAAA,CAAAiC,iBAAiB,GAAjB,UAAkBhB,KAAK,EAAEE,WAAW;IAClC,IAAI,CAAC,IAAI,CAAClF,WAAW,IAAI,CAAC,IAAI,CAAC+B,SAAS,EAAE;MACxC,OAAO,KAAK;;IAEd,IAAMoD,UAAU,GAAG,IAAI,CAACC,8BAA8B,CAACJ,KAAK,CAAC;IAC7DE,WAAW,GAAGA,WAAW,KAAK9F,SAAS,GAAG8F,WAAW,GAAG,EAAE;IAC1D,IAAMI,WAAW,GACfJ,WAAW,CAACI,WAAW,KAAKlG,SAAS,GAAG8F,WAAW,CAACI,WAAW,GAAGlJ,IAAI;IACxE,IAAMiJ,YAAY,GAChBH,WAAW,CAACG,YAAY,KAAKjG,SAAS,GAAG8F,WAAW,CAACG,YAAY,GAAG,CAAC;IACvE,IAAME,YAAY,GAAGL,WAAW,CAACK,YAAY,KAAK,KAAK;IACvD,OAAO,IAAI,CAACxD,SAAS,CAACkE,sBAAsB,CAC1Cd,UAAU,EACV,IAAI,CAACnF,WAAW,EAChBqF,YAAY,EACZE,YAAY,EACZD,WAAW,EACX,IAAI,CACL;EACH,CAAC;EAED;;;;;;EAMApH,YAAA,CAAA6F,SAAA,CAAAmC,kBAAkB,GAAlB,UAAmB9C,KAAK;IACtB,OAAO,IAAI,CAAC+C,sBAAsB,CAAC,IAAI,CAACC,aAAa,CAAChD,KAAK,CAAC,CAAC;EAC/D,CAAC;EAED;;;;;EAKAlF,YAAA,CAAA6F,SAAA,CAAAsC,0BAA0B,GAA1B,UAA2BjD,KAAK;IAC9B,OAAO,IAAI,CAACgC,8BAA8B,CAAC,IAAI,CAACgB,aAAa,CAAChD,KAAK,CAAC,CAAC;EACvE,CAAC;EAED;;;;;;EAMAlF,YAAA,CAAA6F,SAAA,CAAAqC,aAAa,GAAb,UAAchD,KAAK;IACjB,IAAMkD,gBAAgB,GAAG,IAAI,CAACjG,SAAS,CAACkG,qBAAqB,EAAE;IAC/D,IAAMC,aAAa;IACjB;IACA,gBAAgB,IAAIpD,KAAK,GACrB,yBAA2BA,KAAK,CAAEqD,cAAc,CAAC,CAAC,CAAC,IACnD,yBAA2BrD,KAAK,CAAC;IAEvC,OAAO,CACLoD,aAAa,CAACE,OAAO,GAAGJ,gBAAgB,CAACK,IAAI,EAC7CH,aAAa,CAACI,OAAO,GAAGN,gBAAgB,CAACO,GAAG,CAC7C;EACH,CAAC;EAED;;;;;;;;;EASA3I,YAAA,CAAA6F,SAAA,CAAA+C,SAAS,GAAT;IACE,OAAO,2CACL,IAAI,CAACC,GAAG,CAACrL,WAAW,CAACgH,MAAM,CAAC;EAEhC,CAAC;EAED;;;;;;;EAOAxE,YAAA,CAAA6F,SAAA,CAAAiD,gBAAgB,GAAhB;IACE,IAAMC,MAAM,GAAG,IAAI,CAACH,SAAS,EAAE;IAC/B,IAAIG,MAAM,KAAK7H,SAAS,EAAE;MACxB,OAAO,OAAO6H,MAAM,KAAK,QAAQ,GAC7B3G,QAAQ,CAAC4G,cAAc,CAACD,MAAM,CAAC,GAC/BA,MAAM;KACX,MAAM;MACL,OAAO,IAAI;;EAEf,CAAC;EAED;;;;;;;EAOA/I,YAAA,CAAA6F,SAAA,CAAAoC,sBAAsB,GAAtB,UAAuBnB,KAAK;IAC1B,OAAOhI,gBAAgB,CACrB,IAAI,CAACoI,8BAA8B,CAACJ,KAAK,CAAC,EAC1C,IAAI,CAACmC,OAAO,EAAE,CAACC,aAAa,EAAE,CAC/B;EACH,CAAC;EAED;;;;;;EAMAlJ,YAAA,CAAA6F,SAAA,CAAAqB,8BAA8B,GAA9B,UAA+BJ,KAAK;IAClC,IAAMqC,UAAU,GAAG,IAAI,CAACrH,WAAW;IACnC,IAAI,CAACqH,UAAU,EAAE;MACf,OAAO,IAAI;KACZ,MAAM;MACL,OAAO/K,cAAc,CACnB+K,UAAU,CAACC,0BAA0B,EACrCtC,KAAK,CAACuC,KAAK,EAAE,CACd;;EAEL,CAAC;EAED;;;;;;EAMArJ,YAAA,CAAA6F,SAAA,CAAAI,WAAW,GAAX;IACE,OAAO,IAAI,CAACzC,QAAQ;EACtB,CAAC;EAED;;;;;;EAMAxD,YAAA,CAAA6F,SAAA,CAAAY,WAAW,GAAX;IACE,OAAO,IAAI,CAAC/C,SAAS;EACvB,CAAC;EAED;;;;;;;;EAQA1D,YAAA,CAAA6F,SAAA,CAAAyD,cAAc,GAAd,UAAe9D,EAAE;IACf,IAAMD,OAAO,GAAG,IAAI,CAAC3B,eAAe,CAAC4B,EAAE,CAACE,QAAQ,EAAE,CAAC;IACnD,OAAOH,OAAO,KAAKrE,SAAS,GAAGqE,OAAO,GAAG,IAAI;EAC/C,CAAC;EAED;;;;;;;;EAQAvF,YAAA,CAAA6F,SAAA,CAAAO,eAAe,GAAf;IACE,OAAO,IAAI,CAAC3C,YAAY;EAC1B,CAAC;EAED;;;;;;EAMAzD,YAAA,CAAA6F,SAAA,CAAAS,aAAa,GAAb;IACE,OAAO,yBAA2B,IAAI,CAACuC,GAAG,CAACrL,WAAW,CAAC0G,UAAU,CAAC;EACpE,CAAC;EAED;;;;;EAKAlE,YAAA,CAAA6F,SAAA,CAAA0D,SAAS,GAAT,UAAU5J,MAAM;IACd,IAAM6J,KAAK,GAAG,IAAI,CAAClD,aAAa,EAAE;IAClC,IAAI3G,MAAM,YAAY9C,UAAU,EAAE;MAChC2M,KAAK,CAACD,SAAS,CAAC5J,MAAM,CAAC;MACvB;;IAGF,IAAM8J,UAAU,GAAGD,KAAK,CAACjK,SAAS,EAAE;IACpCkK,UAAU,CAAC9C,KAAK,EAAE;IAClB8C,UAAU,CAACC,MAAM,CAAC/J,MAAM,CAAC;EAC3B,CAAC;EAED;;;;;EAKAK,YAAA,CAAA6F,SAAA,CAAAtG,SAAS,GAAT;IACE,IAAMI,MAAM,GAAG,IAAI,CAAC2G,aAAa,EAAE,CAAC/G,SAAS,EAAE;IAC/C,OAAOI,MAAM;EACf,CAAC;EAED;;;EAGAK,YAAA,CAAA6F,SAAA,CAAA8D,oBAAoB,GAApB;IACE,IAAMC,gBAAgB,GAAG,IAAI,CAACtD,aAAa,EAAE,CAACuD,mBAAmB,EAAE;IACnE,KAAK,IAAIhK,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAG8J,gBAAgB,CAAC7J,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MACzD,IAAMiK,KAAK,GAAGF,gBAAgB,CAAC/J,CAAC,CAAC;MACjC,IAAI,CAACiK,KAAK,CAACC,OAAO,EAAE;QAClB;;MAEF,IAAMC,QAAQ,GAAGF,KAAK,CAACzK,KAAK,CAAC4K,WAAW,EAAE;MAC1C,IAAID,QAAQ,IAAI,CAACA,QAAQ,CAACE,KAAK,EAAE;QAC/B,OAAO,IAAI;;MAEb,IAAMC,MAAM,GAAG,iDACbL,KAAK,CAACzK,KAAK,CACX+K,SAAS,EAAE;MACb,IAAID,MAAM,IAAIA,MAAM,CAACE,OAAO,EAAE;QAC5B,OAAO,IAAI;;;IAGf,OAAO,KAAK;EACd,CAAC;EAED;;;;;;;EAOArK,YAAA,CAAA6F,SAAA,CAAAyE,sBAAsB,GAAtB,UAAuBrD,UAAU;IAC/B,IAAMsD,cAAc,GAAG1L,kBAAkB,CACvCoI,UAAU,EACV,IAAI,CAACgC,OAAO,EAAE,CAACC,aAAa,EAAE,CAC/B;IACD,OAAO,IAAI,CAACsB,8BAA8B,CAACD,cAAc,CAAC;EAC5D,CAAC;EAED;;;;;;EAMAvK,YAAA,CAAA6F,SAAA,CAAA2E,8BAA8B,GAA9B,UAA+BvD,UAAU;IACvC,IAAMkC,UAAU,GAAG,IAAI,CAACrH,WAAW;IACnC,IAAI,CAACqH,UAAU,EAAE;MACf,OAAO,IAAI;KACZ,MAAM;MACL,OAAO/K,cAAc,CACnB+K,UAAU,CAACsB,0BAA0B,EACrCxD,UAAU,CAACoC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACvB;;EAEL,CAAC;EAED;;;;EAIArJ,YAAA,CAAA6F,SAAA,CAAAoE,WAAW,GAAX;IACE,OAAO,IAAI,CAACpG,SAAS;EACvB,CAAC;EAED;;;;;;EAMA7D,YAAA,CAAA6F,SAAA,CAAA6E,OAAO,GAAP;IACE,OAAO,iDACL,IAAI,CAAC7B,GAAG,CAACrL,WAAW,CAAC8G,IAAI,CAAC;EAE9B,CAAC;EAED;;;;;;;EAOAtE,YAAA,CAAA6F,SAAA,CAAAoD,OAAO,GAAP;IACE,OAAO,mBAAqB,IAAI,CAACJ,GAAG,CAACrL,WAAW,CAAC4G,IAAI,CAAC;EACxD,CAAC;EAED;;;;;EAKApE,YAAA,CAAA6F,SAAA,CAAA8E,WAAW,GAAX;IACE,OAAO,IAAI,CAACxI,SAAS;EACvB,CAAC;EAED;;;;;;;EAOAnC,YAAA,CAAA6F,SAAA,CAAA+E,mBAAmB,GAAnB;IACE,OAAO,IAAI,CAAC/H,iBAAiB;EAC/B,CAAC;EAED;;;;;;;EAOA7C,YAAA,CAAA6F,SAAA,CAAAgF,4BAA4B,GAA5B;IACE,OAAO,IAAI,CAAC5H,0BAA0B;EACxC,CAAC;EAED;;;EAGAjD,YAAA,CAAA6F,SAAA,CAAAiF,gBAAgB,GAAhB;IACE,IAAMC,aAAa,GAAG,IAAI,CAACjC,gBAAgB,EAAE;IAC7C,OAAOiC,aAAa,GAAGA,aAAa,CAACC,aAAa,GAAG5I,QAAQ;EAC/D,CAAC;EAED;;;;;;;EAOApC,YAAA,CAAA6F,SAAA,CAAAhI,eAAe,GAAf,UAAgBoN,IAAI,EAAEC,aAAa,EAAEC,UAAU,EAAEC,cAAc;IAC7D,OAAOvN,eAAe,CACpB,IAAI,CAACiE,WAAW,EAChBmJ,IAAI,EACJC,aAAa,EACbC,UAAU,EACVC,cAAc,CACf;EACH,CAAC;EAED;;;;EAIApL,YAAA,CAAA6F,SAAA,CAAA/E,kBAAkB,GAAlB,UAAmBuK,YAAY,EAAEC,QAAQ;IACvC,IAAMC,IAAI,GAAGD,QAAQ,IAAID,YAAY,CAACE,IAAI;IAC1C,IAAMC,eAAe,GAAG,IAAIrO,eAAe,CAACoO,IAAI,EAAE,IAAI,EAAEF,YAAY,CAAC;IACrE,IAAI,CAACI,qBAAqB,CAACD,eAAe,CAAC;EAC7C,CAAC;EAED;;;EAGAxL,YAAA,CAAA6F,SAAA,CAAA4F,qBAAqB,GAArB,UAAsBD,eAAe;IACnC,IAAI,CAAC,IAAI,CAAC1J,WAAW,EAAE;MACrB;MACA;MACA;;IAEF,IAAM4J,aAAa,GAAG,2BACpBF,eAAe,CAACE,aACjB;IACD,IAAMC,SAAS,GAAGD,aAAa,CAACH,IAAI;IACpC,IACEI,SAAS,KAAKjO,gBAAgB,CAACkO,WAAW,IAC1CD,SAAS,KAAK5O,SAAS,CAAC8O,KAAK,IAC7BF,SAAS,KAAK5O,SAAS,CAAC+O,OAAO,EAC/B;MACA,IAAMC,GAAG,GAAG,IAAI,CAACjB,gBAAgB,EAAE;MACnC,IAAMkB,QAAQ,GAAG,IAAI,CAAC7J,SAAS,CAAC8J,WAAW,GACvC,IAAI,CAAC9J,SAAS,CAAC8J,WAAW,EAAE,GAC5BF,GAAG;MACP,IAAMhD,MAAM,GAAG,mBAAqB2C,aAAa,CAAC3C,MAAO;MACzD;MACE;MACA;MACA,IAAI,CAAC9F,0BAA0B,CAACiJ,QAAQ,CAACnD,MAAM,CAAC;MAChD;MACA;MACA;MACA;MACA,CAAC,CAACiD,QAAQ,KAAKD,GAAG,GAAGA,GAAG,CAACI,eAAe,GAAGH,QAAQ,EAAEE,QAAQ,CAACnD,MAAM,CAAC,EACrE;QACA;;;IAGJyC,eAAe,CAACrC,UAAU,GAAG,IAAI,CAACrH,WAAW;IAC7C,IAAI,IAAI,CAACsK,aAAa,CAACZ,eAAe,CAAC,KAAK,KAAK,EAAE;MACjD,IAAMa,iBAAiB,GAAG,IAAI,CAACjG,eAAe,EAAE,CAACxG,QAAQ,EAAE,CAACyJ,KAAK,EAAE;MACnE,KAAK,IAAIxJ,CAAC,GAAGwM,iBAAiB,CAACtM,MAAM,GAAG,CAAC,EAAEF,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;QACtD,IAAM+F,WAAW,GAAGyG,iBAAiB,CAACxM,CAAC,CAAC;QACxC,IACE+F,WAAW,CAAC0G,MAAM,EAAE,KAAK,IAAI,IAC7B,CAAC1G,WAAW,CAAC2G,SAAS,EAAE,IACxB,CAAC,IAAI,CAACzD,gBAAgB,EAAE,EACxB;UACA;;QAEF,IAAM0D,IAAI,GAAG5G,WAAW,CAAC6G,WAAW,CAACjB,eAAe,CAAC;QACrD,IAAI,CAACgB,IAAI,IAAIhB,eAAe,CAACkB,kBAAkB,EAAE;UAC/C;;;;EAIR,CAAC;EAED;;;EAGA1M,YAAA,CAAA6F,SAAA,CAAA8G,gBAAgB,GAAhB;IACE,IAAMxD,UAAU,GAAG,IAAI,CAACrH,WAAW;IAEnC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAM8K,SAAS,GAAG,IAAI,CAAC7I,UAAU;IACjC,IAAI,CAAC6I,SAAS,CAAChO,OAAO,EAAE,EAAE;MACxB,IAAIiO,eAAe,GAAG,IAAI,CAAC7L,gBAAgB;MAC3C,IAAI8L,WAAW,GAAGD,eAAe;MACjC,IAAI1D,UAAU,EAAE;QACd,IAAM4D,KAAK,GAAG5D,UAAU,CAAC6D,SAAS;QAClC,IAAID,KAAK,CAAChP,QAAQ,CAACkP,SAAS,CAAC,IAAIF,KAAK,CAAChP,QAAQ,CAACmP,WAAW,CAAC,EAAE;UAC5D,IAAMC,gBAAgB,GAAG1L,IAAI,CAACC,GAAG,EAAE,GAAGyH,UAAU,CAACiE,IAAI,GAAG,CAAC;UACzDP,eAAe,GAAGM,gBAAgB,GAAG,CAAC,GAAG,CAAC;UAC1CL,WAAW,GAAGK,gBAAgB,GAAG,CAAC,GAAG,CAAC;;;MAG1C,IAAIP,SAAS,CAACS,eAAe,EAAE,GAAGR,eAAe,EAAE;QACjDD,SAAS,CAACU,YAAY,EAAE,CAAC,CAAC;QAC1BV,SAAS,CAACW,aAAa,CAACV,eAAe,EAAEC,WAAW,CAAC;;;IAIzD,IAAI3D,UAAU,IAAI,IAAI,CAACtF,SAAS,IAAI,CAACsF,UAAU,CAACqE,OAAO,EAAE;MACvD,IAAI,IAAI,CAAC7M,eAAe,KAAK,IAAI,EAAE;QACjC,IAAI,IAAI,CAAC8M,WAAW,CAAC9P,eAAe,CAAC+P,cAAc,CAAC,EAAE;UACpD,IAAI,CAAC7J,SAAS,CAAC8J,mBAAmB,CAChChQ,eAAe,CAAC+P,cAAc,EAC9BvE,UAAU,CACX;;QAEH,IAAI,IAAI,CAACvI,OAAO,KAAK,KAAK,EAAE;UAC1B,IAAI,CAACA,OAAO,GAAG,IAAI;UACnB,IAAI,CAACwL,aAAa,CAChB,IAAI9O,QAAQ,CAACC,YAAY,CAACqQ,OAAO,EAAE,IAAI,EAAEzE,UAAU,CAAC,CACrD;;OAEJ,MAAM,IAAI,IAAI,CAACvI,OAAO,KAAK,IAAI,EAAE;QAChC,IAAI,CAACA,OAAO,GAAG,KAAK;QACpB,IAAI,CAACwL,aAAa,CAChB,IAAI9O,QAAQ,CAACC,YAAY,CAACsQ,SAAS,EAAE,IAAI,EAAE1E,UAAU,CAAC,CACvD;;;IAIL,IAAM2E,mBAAmB,GAAG,IAAI,CAAChK,oBAAoB;IACrD,KAAK,IAAIjE,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGgO,mBAAmB,CAAC/N,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAC5DiO,mBAAmB,CAACjO,CAAC,CAAC,CAAC,IAAI,EAAEsJ,UAAU,CAAC;;IAE1C2E,mBAAmB,CAAC/N,MAAM,GAAG,CAAC;EAChC,CAAC;EAED;;;EAGAC,YAAA,CAAA6F,SAAA,CAAAtB,kBAAkB,GAAlB;IACE,IAAI,IAAI,CAAC0E,OAAO,EAAE,IAAI,CAAC,IAAI,CAACA,OAAO,EAAE,CAAC8E,YAAY,EAAE,EAAE;MACpD,IAAI,CAAC9E,OAAO,EAAE,CAAC+E,kBAAkB,CAAC,CAAC,CAAC;;IAGtC,IAAI,CAACC,MAAM,EAAE;EACf,CAAC;EAED;;;EAGAjO,YAAA,CAAA6F,SAAA,CAAApB,oBAAoB,GAApB;IACE,IAAI,IAAI,CAACvB,uBAAuB,EAAE;MAChC,KAAK,IAAIrD,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAG,IAAI,CAACyD,wBAAwB,CAACxD,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QACtEX,aAAa,CAAC,IAAI,CAACqE,wBAAwB,CAAC1D,CAAC,CAAC,CAAC;;MAEjD,IAAI,CAAC0D,wBAAwB,GAAG,IAAI;MACpC,IAAI,CAACpB,SAAS,CAAC+L,mBAAmB,CAChCnR,SAAS,CAACoR,WAAW,EACrB,IAAI,CAACtN,wBAAwB,CAC9B;MACD,IAAI,CAACsB,SAAS,CAAC+L,mBAAmB,CAChCnR,SAAS,CAAC8O,KAAK,EACf,IAAI,CAAChL,wBAAwB,CAC9B;MACD,IAAI,CAACqC,uBAAuB,CAACkL,OAAO,EAAE;MACtC,IAAI,CAAClL,uBAAuB,GAAG,IAAI;MACnC/D,UAAU,CAAC,IAAI,CAACgD,SAAS,CAAC;;IAG5B;IACA;IACA;IACA;IAEA,IAAM4I,aAAa,GAAG,IAAI,CAACjC,gBAAgB,EAAE;IAC7C,IAAI,CAACiC,aAAa,EAAE;MAClB,IAAI,IAAI,CAAClH,SAAS,EAAE;QAClBwK,YAAY,CAAC,IAAI,CAAChN,wBAAwB,CAAC;QAC3C,IAAI,CAACA,wBAAwB,GAAGH,SAAS;QACzC,IAAI,CAAC4C,oBAAoB,CAAC/D,MAAM,GAAG,CAAC;QACpC,IAAI,CAAC8D,SAAS,CAACuK,OAAO,EAAE;QACxB,IAAI,CAACvK,SAAS,GAAG,IAAI;;MAEvB,IAAI,IAAI,CAACvC,kBAAkB,EAAE;QAC3BgN,oBAAoB,CAAC,IAAI,CAAChN,kBAAkB,CAAC;QAC7C,IAAI,CAACA,kBAAkB,GAAGJ,SAAS;;KAEtC,MAAM;MACL6J,aAAa,CAAC/H,WAAW,CAAC,IAAI,CAACb,SAAS,CAAC;MACzC,IAAI,CAAC,IAAI,CAAC0B,SAAS,EAAE;QACnB,IAAI,CAACA,SAAS,GAAG,IAAI,CAACiC,cAAc,EAAE;;MAGxC,IAAI,CAAC5C,uBAAuB,GAAG,IAAI9F,sBAAsB,CACvD,IAAI,EACJ,IAAI,CAAC+F,cAAc,CACpB;MACD,KAAK,IAAMoL,GAAG,IAAIlR,mBAAmB,EAAE;QACrC,IAAI,CAAC6F,uBAAuB,CAAC8B,gBAAgB,CAC3C3H,mBAAmB,CAACkR,GAAG,CAAC,EACxB,IAAI,CAAC9C,qBAAqB,CAAC1K,IAAI,CAAC,IAAI,CAAC,CACtC;;MAEH,IAAI,CAACoB,SAAS,CAAC6C,gBAAgB,CAC7BjI,SAAS,CAACoR,WAAW,EACrB,IAAI,CAACtN,wBAAwB,EAC7B,KAAK,CACN;MACD,IAAI,CAACsB,SAAS,CAAC6C,gBAAgB,CAC7BjI,SAAS,CAAC8O,KAAK,EACf,IAAI,CAAChL,wBAAwB,EAC7B5C,uBAAuB,GAAG;QAACuQ,OAAO,EAAE;MAAK,CAAC,GAAG,KAAK,CACnD;MAED,IAAMC,WAAW,GAAG,IAAI,CAAC3D,gBAAgB,EAAE,CAAC2D,WAAW;MACvD,IAAMnL,mBAAmB,GAAG,CAAC,IAAI,CAACD,oBAAoB,GAClD0H,aAAa,GACb,IAAI,CAAC1H,oBAAoB;MAC7B,IAAI,CAACE,wBAAwB,GAAG,CAC9BtE,MAAM,CACJqE,mBAAmB,EACnBvG,SAAS,CAAC+O,OAAO,EACjB,IAAI,CAAChL,kBAAkB,EACvB,IAAI,CACL,EACD7B,MAAM,CACJqE,mBAAmB,EACnBvG,SAAS,CAAC2R,QAAQ,EAClB,IAAI,CAAC5N,kBAAkB,EACvB,IAAI,CACL,EACD7B,MAAM,CAACwP,WAAW,EAAE1R,SAAS,CAAC4R,MAAM,EAAE,IAAI,CAACC,UAAU,EAAE,IAAI,CAAC,CAC7D;;IAGH,IAAI,CAACA,UAAU,EAAE;IACjB;IACA;EACF,CAAC;EAED;;;EAGA5O,YAAA,CAAA6F,SAAA,CAAA7B,iBAAiB,GAAjB;IACE,IAAI,CAACiK,MAAM,EAAE;EACf,CAAC;EAED;;;EAGAjO,YAAA,CAAA6F,SAAA,CAAAgJ,0BAA0B,GAA1B;IACE,IAAI,CAACZ,MAAM,EAAE;EACf,CAAC;EAED;;;EAGAjO,YAAA,CAAA6F,SAAA,CAAAxB,kBAAkB,GAAlB;IACE,IAAI,IAAI,CAACrC,wBAAwB,EAAE;MACjC9C,aAAa,CAAC,IAAI,CAAC8C,wBAAwB,CAAC;MAC5C,IAAI,CAACA,wBAAwB,GAAG,IAAI;;IAEtC,IAAI,IAAI,CAACC,sBAAsB,EAAE;MAC/B/C,aAAa,CAAC,IAAI,CAAC+C,sBAAsB,CAAC;MAC1C,IAAI,CAACA,sBAAsB,GAAG,IAAI;;IAEpC,IAAM2C,IAAI,GAAG,IAAI,CAACqE,OAAO,EAAE;IAC3B,IAAIrE,IAAI,EAAE;MACR,IAAI,CAACkK,mBAAmB,EAAE;MAE1B,IAAI,CAAC9M,wBAAwB,GAAG/C,MAAM,CACpC2F,IAAI,EACJnH,eAAe,CAACsR,cAAc,EAC9B,IAAI,CAACF,0BAA0B,EAC/B,IAAI,CACL;MACD,IAAI,CAAC5M,sBAAsB,GAAGhD,MAAM,CAClC2F,IAAI,EACJ7H,SAAS,CAACiS,MAAM,EAChB,IAAI,CAACH,0BAA0B,EAC/B,IAAI,CACL;MAEDjK,IAAI,CAACoJ,kBAAkB,CAAC,CAAC,CAAC;;IAE5B,IAAI,CAACC,MAAM,EAAE;EACf,CAAC;EAED;;;EAGAjO,YAAA,CAAA6F,SAAA,CAAA1B,wBAAwB,GAAxB;IACE,IAAI,IAAI,CAACjC,+BAA+B,EAAE;MACxC,IAAI,CAACA,+BAA+B,CAAC1C,OAAO,CAACN,aAAa,CAAC;MAC3D,IAAI,CAACgD,+BAA+B,GAAG,IAAI;;IAE7C,IAAM0F,UAAU,GAAG,IAAI,CAACtB,aAAa,EAAE;IACvC,IAAIsB,UAAU,EAAE;MACd,IAAI,CAACrB,eAAe,CAAC,IAAIrJ,UAAU,CAAC,UAAU,EAAE0K,UAAU,CAAC,CAAC;MAC5D,IAAI,CAAC1F,+BAA+B,GAAG,CACrCjD,MAAM,CAAC2I,UAAU,EAAEnK,eAAe,CAACsR,cAAc,EAAE,IAAI,CAACd,MAAM,EAAE,IAAI,CAAC,EACrEhP,MAAM,CAAC2I,UAAU,EAAE7K,SAAS,CAACiS,MAAM,EAAE,IAAI,CAACf,MAAM,EAAE,IAAI,CAAC,EACvDhP,MAAM,CAAC2I,UAAU,EAAE,UAAU,EAAE,IAAI,CAACrB,eAAe,EAAE,IAAI,CAAC,EAC1DtH,MAAM,CAAC2I,UAAU,EAAE,aAAa,EAAE,IAAI,CAACqH,kBAAkB,EAAE,IAAI,CAAC,CACjE;;IAEH,IAAI,CAAChB,MAAM,EAAE;EACf,CAAC;EAED;;;EAGAjO,YAAA,CAAA6F,SAAA,CAAAqJ,UAAU,GAAV;IACE,OAAO,CAAC,CAAC,IAAI,CAACpN,WAAW;EAC3B,CAAC;EAED;;;;EAIA9B,YAAA,CAAA6F,SAAA,CAAAsJ,UAAU,GAAV;IACE,IAAI,IAAI,CAAC7N,kBAAkB,EAAE;MAC3BgN,oBAAoB,CAAC,IAAI,CAAChN,kBAAkB,CAAC;;IAE/C,IAAI,CAACC,eAAe,EAAE;EACxB,CAAC;EAED;;;EAGAvB,YAAA,CAAA6F,SAAA,CAAAuJ,UAAU,GAAV;IACE,IAAMC,WAAW,GAAG,IAAI,CAAC/I,aAAa,EAAE,CAACuD,mBAAmB,EAAE;IAC9D,KAAK,IAAIhK,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGuP,WAAW,CAACtP,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MACpD,IAAMR,KAAK,GAAGgQ,WAAW,CAACxP,CAAC,CAAC,CAACR,KAAK;MAClC,IAAIA,KAAK,CAACiQ,WAAW,EAAE,EAAE;QACvBjQ,KAAK,CAAC4K,WAAW,EAAE,CAACsF,kBAAkB,EAAE;;;EAG9C,CAAC;EAED;;;;EAIAvP,YAAA,CAAA6F,SAAA,CAAAoI,MAAM,GAAN;IACE,IAAI,IAAI,CAACpK,SAAS,IAAI,IAAI,CAACvC,kBAAkB,KAAKJ,SAAS,EAAE;MAC3D,IAAI,CAACI,kBAAkB,GAAGkO,qBAAqB,CAAC,IAAI,CAACjO,eAAe,CAAC;;EAEzE,CAAC;EAED;;;;;;;EAOAvB,YAAA,CAAA6F,SAAA,CAAA4J,aAAa,GAAb,UAAc9J,OAAO;IACnB,OAAO,IAAI,CAACM,WAAW,EAAE,CAACyJ,MAAM,CAAC/J,OAAO,CAAC;EAC3C,CAAC;EAED;;;;;;;EAOA3F,YAAA,CAAA6F,SAAA,CAAA8J,iBAAiB,GAAjB,UAAkB/J,WAAW;IAC3B,OAAO,IAAI,CAACQ,eAAe,EAAE,CAACsJ,MAAM,CAAC9J,WAAW,CAAC;EACnD,CAAC;EAED;;;;;;;EAOA5F,YAAA,CAAA6F,SAAA,CAAA+J,WAAW,GAAX,UAAYvQ,KAAK;IACf,IAAMM,MAAM,GAAG,IAAI,CAAC2G,aAAa,EAAE,CAAC/G,SAAS,EAAE;IAC/C,OAAOI,MAAM,CAAC+P,MAAM,CAACrQ,KAAK,CAAC;EAC7B,CAAC;EAED;;;;EAIAW,YAAA,CAAA6F,SAAA,CAAAoJ,kBAAkB,GAAlB,UAAmB/J,KAAK;IACtB9F,sBAAsB,CAAC8F,KAAK,CAAC7F,KAAK,CAAC;EACrC,CAAC;EAED;;;;;;;EAOAW,YAAA,CAAA6F,SAAA,CAAAgK,aAAa,GAAb,UAActK,OAAO;IACnB,OAAO,IAAI,CAACkB,WAAW,EAAE,CAACiJ,MAAM,CAACnK,OAAO,CAAC;EAC3C,CAAC;EAED;;;;EAIAvF,YAAA,CAAA6F,SAAA,CAAArE,YAAY,GAAZ,UAAa4L,IAAI;IAAjB,IAAAhN,KAAA;IACE,IAAM0P,IAAI,GAAG,IAAI,CAACpF,OAAO,EAAE;IAC3B,IAAM9F,IAAI,GAAG,IAAI,CAACqE,OAAO,EAAE;IAC3B,IAAM8G,kBAAkB,GAAG,IAAI,CAACjO,WAAW;IAC3C;IACA,IAAIqH,UAAU,GAAG,IAAI;IACrB,IAAI2G,IAAI,KAAK5O,SAAS,IAAIlC,OAAO,CAAC8Q,IAAI,CAAC,IAAIlL,IAAI,IAAIA,IAAI,CAACoL,KAAK,EAAE,EAAE;MAC/D,IAAMhD,SAAS,GAAGpI,IAAI,CAACqL,QAAQ,CAC7B,IAAI,CAACnO,WAAW,GAAG,IAAI,CAACA,WAAW,CAACkL,SAAS,GAAG9L,SAAS,CAC1D;MACD,IAAMgP,SAAS,GAAGtL,IAAI,CAACuL,QAAQ,EAAE;MACjChH,UAAU,GAAG;QACXqE,OAAO,EAAE,KAAK;QACd/C,0BAA0B,EAAE,IAAI,CAAC9I,2BAA2B;QAC5DyO,aAAa,EAAE,IAAI;QACnBC,MAAM,EAAE1R,iBAAiB,CACvBuR,SAAS,CAACI,MAAM,EAChBJ,SAAS,CAACK,UAAU,EACpBL,SAAS,CAACM,QAAQ,EAClBV,IAAI,CACL;QACDW,KAAK,EAAE,IAAI,CAAC5O,WAAW,EAAE;QACzB6O,UAAU,EAAE,CAAC;QACb9G,gBAAgB,EAAE,IAAI,CAACtD,aAAa,EAAE,CAACuD,mBAAmB,EAAE;QAC5DzI,UAAU,EAAE,IAAI,CAACD,WAAW;QAC5BiI,0BAA0B,EAAE,IAAI,CAACxH,2BAA2B;QAC5DkM,mBAAmB,EAAE,EAAE;QACvBgC,IAAI,EAAEA,IAAI;QACVlD,SAAS,EAAE,IAAI,CAAC7I,UAAU;QAC1BqJ,IAAI,EAAEA,IAAI;QACVuD,SAAS,EAAE,EAAE;QACbT,SAAS,EAAEA,SAAS;QACpBlD,SAAS,EAAEA,SAAS;QACpB4D,WAAW,EAAE,EAAE;QACfC,KAAK,EAAE9R,MAAM,CAAC,IAAI,CAAC;QACnB+R,aAAa,EAAE;OAChB;MACD,IAAIZ,SAAS,CAACa,UAAU,IAAIb,SAAS,CAACc,cAAc,EAAE;QACpD,IAAMR,QAAQ,GAAGS,KAAK,CAACf,SAAS,CAACgB,YAAY,CAAC,GAC1ChB,SAAS,CAACM,QAAQ,GAClBN,SAAS,CAACgB,YAAY;QAE1B/H,UAAU,CAACgI,UAAU,GAAGxS,iBAAiB,CACvCuR,SAAS,CAACa,UAAU,EACpBb,SAAS,CAACc,cAAc,EACxBR,QAAQ,EACRV,IAAI,CACL;;;IAIL,IAAI,CAAChO,WAAW,GAAGqH,UAAU;IAC7B;IACE,IAAI,CAACtF,SAAS,CACduN,WAAW,CAACjI,UAAU,CAAC;IAEzB,IAAIA,UAAU,EAAE;MACd,IAAIA,UAAU,CAACqE,OAAO,EAAE;QACtB,IAAI,CAACS,MAAM,EAAE;;MAEfoD,KAAK,CAACxL,SAAS,CAACK,IAAI,CAAC/H,KAAK,CACxB,IAAI,CAAC2F,oBAAoB,EACzBqF,UAAU,CAAC2E,mBAAmB,CAC/B;MAED,IAAIiC,kBAAkB,EAAE;QACtB,IAAMuB,SAAS,GACb,CAAC,IAAI,CAACvP,eAAe,IACpB,CAACnD,OAAO,CAAC,IAAI,CAACmD,eAAe,CAAC,IAC7B,CAACrD,MAAM,CAACyK,UAAU,CAACkH,MAAM,EAAE,IAAI,CAACtO,eAAe,CAAE;QACrD,IAAIuP,SAAS,EAAE;UACb,IAAI,CAAClF,aAAa,CAChB,IAAI9O,QAAQ,CAACC,YAAY,CAACgU,SAAS,EAAE,IAAI,EAAExB,kBAAkB,CAAC,CAC/D;UACD,IAAI,CAAChO,eAAe,GAAGtD,mBAAmB,CAAC,IAAI,CAACsD,eAAe,CAAC;;;MAIpE,IAAMyP,IAAI,GACR,IAAI,CAACzP,eAAe,IACpB,CAACoH,UAAU,CAAC6D,SAAS,CAACjP,QAAQ,CAACkP,SAAS,CAAC,IACzC,CAAC9D,UAAU,CAAC6D,SAAS,CAACjP,QAAQ,CAACmP,WAAW,CAAC,IAC3C,CAACxO,MAAM,CAACyK,UAAU,CAACkH,MAAM,EAAE,IAAI,CAACtO,eAAe,CAAC;MAElD,IAAIyP,IAAI,EAAE;QACR,IAAI,CAACpF,aAAa,CAChB,IAAI9O,QAAQ,CAACC,YAAY,CAACkU,OAAO,EAAE,IAAI,EAAEtI,UAAU,CAAC,CACrD;QACD3K,KAAK,CAAC2K,UAAU,CAACkH,MAAM,EAAE,IAAI,CAACtO,eAAe,CAAC;;;IAIlD,IAAI,CAACqK,aAAa,CAAC,IAAI9O,QAAQ,CAACC,YAAY,CAACmU,UAAU,EAAE,IAAI,EAAEvI,UAAU,CAAC,CAAC;IAE3E,IAAI,CAACxI,eAAe,GAClB,IAAI,CAAC8M,WAAW,CAAClQ,YAAY,CAACsQ,SAAS,CAAC,IACxC,IAAI,CAACJ,WAAW,CAAClQ,YAAY,CAACqQ,OAAO,CAAC,IACtC,IAAI,CAACH,WAAW,CAAC9P,eAAe,CAAC+P,cAAc,CAAC,GAC5C,CAAC,IAAI,CAAC3J,UAAU,CAACsJ,eAAe,EAAE,IAClC,CAAC,IAAI,CAACtJ,UAAU,CAAC4N,QAAQ,EAAE,IAC3B,CAAC,IAAI,CAAChI,oBAAoB,EAAE,GAC5BzI,SAAS;IAEf,IAAI,CAAC,IAAI,CAACG,wBAAwB,EAAE;MAClC,IAAI,CAACA,wBAAwB,GAAGuQ,UAAU,CAAC;QACzCxR,KAAI,CAACiB,wBAAwB,GAAGH,SAAS;QACzCd,KAAI,CAACuM,gBAAgB,EAAE;MACzB,CAAC,EAAE,CAAC,CAAC;;EAET,CAAC;EAED;;;;;;EAMA3M,YAAA,CAAA6F,SAAA,CAAAgM,aAAa,GAAb,UAAcjK,UAAU;IACtB,IAAMkK,aAAa,GAAG,IAAI,CAACxL,aAAa,EAAE;IAC1C,IAAIwL,aAAa,EAAE;MACjB,IAAI,CAAC7C,kBAAkB,CAAC,IAAI/R,UAAU,CAAC,aAAa,EAAE4U,aAAa,CAAC,CAAC;;IAEvE,IAAI,CAACC,GAAG,CAACvU,WAAW,CAAC0G,UAAU,EAAE0D,UAAU,CAAC;EAC9C,CAAC;EAED;;;;;;EAMA5H,YAAA,CAAA6F,SAAA,CAAAmM,OAAO,GAAP,UAAQlC,IAAI;IACV,IAAI,CAACiC,GAAG,CAACvU,WAAW,CAAC8G,IAAI,EAAEwL,IAAI,CAAC;EAClC,CAAC;EAED;;;;;;;EAOA9P,YAAA,CAAA6F,SAAA,CAAAe,SAAS,GAAT,UAAUmC,MAAM;IACd,IAAI,CAACgJ,GAAG,CAACvU,WAAW,CAACgH,MAAM,EAAEuE,MAAM,CAAC;EACtC,CAAC;EAED;;;;;;;;;EASA/I,YAAA,CAAA6F,SAAA,CAAAd,OAAO,GAAP,UAAQH,IAAI;IACV,IAAI,CAACA,IAAI,IAAIA,IAAI,YAAY9G,IAAI,EAAE;MACjC,IAAI,CAACiU,GAAG,CAACvU,WAAW,CAAC4G,IAAI,EAAEQ,IAAI,CAAC;MAChC;;IAEF,IAAI,CAACmN,GAAG,CAACvU,WAAW,CAAC4G,IAAI,EAAE,IAAItG,IAAI,EAAE,CAAC;IAEtC,IAAM4B,GAAG,GAAG,IAAI;IAChBkF,IAAI,CAACC,IAAI,CAAC,UAAUC,WAAW;MAC7BpF,GAAG,CAACqF,OAAO,CAAC,IAAIjH,IAAI,CAACgH,WAAW,CAAC,CAAC;IACpC,CAAC,CAAC;EACJ,CAAC;EAED;;;;;EAKA9E,YAAA,CAAA6F,SAAA,CAAA+I,UAAU,GAAV;IACE,IAAM7D,aAAa,GAAG,IAAI,CAACjC,gBAAgB,EAAE;IAE7C,IAAIgH,IAAI,GAAG5O,SAAS;IACpB,IAAI6J,aAAa,EAAE;MACjB,IAAMkH,aAAa,GAAGC,gBAAgB,CAACnH,aAAa,CAAC;MACrD,IAAMpI,KAAK,GACToI,aAAa,CAACoH,WAAW,GACzBC,UAAU,CAACH,aAAa,CAAC,iBAAiB,CAAC,CAAC,GAC5CG,UAAU,CAACH,aAAa,CAAC,aAAa,CAAC,CAAC,GACxCG,UAAU,CAACH,aAAa,CAAC,cAAc,CAAC,CAAC,GACzCG,UAAU,CAACH,aAAa,CAAC,kBAAkB,CAAC,CAAC;MAC/C,IAAMrP,MAAM,GACVmI,aAAa,CAACsH,YAAY,GAC1BD,UAAU,CAACH,aAAa,CAAC,gBAAgB,CAAC,CAAC,GAC3CG,UAAU,CAACH,aAAa,CAAC,YAAY,CAAC,CAAC,GACvCG,UAAU,CAACH,aAAa,CAAC,eAAe,CAAC,CAAC,GAC1CG,UAAU,CAACH,aAAa,CAAC,mBAAmB,CAAC,CAAC;MAChD,IAAI,CAAChB,KAAK,CAACtO,KAAK,CAAC,IAAI,CAACsO,KAAK,CAACrO,MAAM,CAAC,EAAE;QACnCkN,IAAI,GAAG,CAACnN,KAAK,EAAEC,MAAM,CAAC;QACtB,IACE,CAAC5D,OAAO,CAAC8Q,IAAI,CAAC,IACd,CAAC,EACC/E,aAAa,CAACoH,WAAW,IACzBpH,aAAa,CAACsH,YAAY,IAC1BtH,aAAa,CAACuH,cAAc,EAAE,CAACvS,MAAM,CACtC,EACD;UACA;UACAwS,OAAO,CAACC,IAAI,CACV,mEAAmE,CACpE;;;;IAKP,IAAI,CAACR,OAAO,CAAClC,IAAI,CAAC;IAClB,IAAI,CAAChB,mBAAmB,EAAE;EAC5B,CAAC;EAED;;;;EAIA9O,YAAA,CAAA6F,SAAA,CAAAiJ,mBAAmB,GAAnB;IACE,IAAMlK,IAAI,GAAG,IAAI,CAACqE,OAAO,EAAE;IAC3B,IAAIrE,IAAI,EAAE;MACR,IAAIkL,IAAI,GAAG5O,SAAS;MACpB,IAAM+Q,aAAa,GAAGC,gBAAgB,CAAC,IAAI,CAAC/P,SAAS,CAAC;MACtD,IAAI8P,aAAa,CAACtP,KAAK,IAAIsP,aAAa,CAACrP,MAAM,EAAE;QAC/CkN,IAAI,GAAG,CACL2C,QAAQ,CAACR,aAAa,CAACtP,KAAK,EAAE,EAAE,CAAC,EACjC8P,QAAQ,CAACR,aAAa,CAACrP,MAAM,EAAE,EAAE,CAAC,CACnC;;MAEHgC,IAAI,CAAC8N,eAAe,CAAC5C,IAAI,CAAC;;EAE9B,CAAC;EACH,OAAA9P,YAAC;AAAD,CAAC,CAtgD0BpD,UAAU;AAwgDrC;;;;AAIA,SAAS8D,qBAAqBA,CAACP,OAAO;EACpC;;;EAGA,IAAImD,mBAAmB,GAAG,IAAI;EAC9B,IAAInD,OAAO,CAACmD,mBAAmB,KAAKpC,SAAS,EAAE;IAC7CoC,mBAAmB,GACjB,OAAOnD,OAAO,CAACmD,mBAAmB,KAAK,QAAQ,GAC3ClB,QAAQ,CAAC4G,cAAc,CAAC7I,OAAO,CAACmD,mBAAmB,CAAC,GACpDnD,OAAO,CAACmD,mBAAmB;;EAGnC;;;EAGA,IAAMqB,MAAM,GAAG,EAAE;EAEjB,IAAMiD,UAAU,GACdzH,OAAO,CAACR,MAAM,IACd,QAAQ,gBAAkBQ,OAAO,CAACR,MAAM,CAAEJ,SAAS,CAAC,KAAK,UAAU,IAC/D,yBAA2BY,OAAO,CAACR,MAAM,IACzC,IAAI1C,UAAU,CAAC;IAAC0C,MAAM,GAAE,yBAA2BQ,OAAO,CAACR,MAAM;EAAC,CAAC,CAAC;EAC1EgF,MAAM,CAACnH,WAAW,CAAC0G,UAAU,CAAC,GAAG0D,UAAU;EAE3CjD,MAAM,CAACnH,WAAW,CAACgH,MAAM,CAAC,GAAGrE,OAAO,CAAC4I,MAAM;EAE3CpE,MAAM,CAACnH,WAAW,CAAC4G,IAAI,CAAC,GACtBjE,OAAO,CAACyE,IAAI,YAAY9G,IAAI,GAAGqC,OAAO,CAACyE,IAAI,GAAG,IAAI9G,IAAI,EAAE;EAE1D,IAAI0F,QAAQ;EACZ,IAAIrD,OAAO,CAACqD,QAAQ,KAAKtC,SAAS,EAAE;IAClC,IAAImQ,KAAK,CAACsB,OAAO,CAACxS,OAAO,CAACqD,QAAQ,CAAC,EAAE;MACnCA,QAAQ,GAAG,IAAI3G,UAAU,CAACsD,OAAO,CAACqD,QAAQ,CAAC6F,KAAK,EAAE,CAAC;KACpD,MAAM;MACL9K,MAAM,CACJ,QAAQ,gBAAkB4B,OAAO,CAACqD,QAAQ,CAAE5D,QAAQ,CAAC,KAAK,UAAU,EACpE,EAAE,CACH,CAAC,CAAC;MACH4D,QAAQ,GAAG,yBAA2BrD,OAAO,CAACqD,QAAS;;;EAI3D,IAAIC,YAAY;EAChB,IAAItD,OAAO,CAACsD,YAAY,KAAKvC,SAAS,EAAE;IACtC,IAAImQ,KAAK,CAACsB,OAAO,CAACxS,OAAO,CAACsD,YAAY,CAAC,EAAE;MACvCA,YAAY,GAAG,IAAI5G,UAAU,CAACsD,OAAO,CAACsD,YAAY,CAAC4F,KAAK,EAAE,CAAC;KAC5D,MAAM;MACL9K,MAAM,CACJ,QAAQ,gBAAkB4B,OAAO,CAACsD,YAAY,CAAE7D,QAAQ,CAAC,KACvD,UAAU,EACZ,EAAE,CACH,CAAC,CAAC;MACH6D,YAAY,GAAG,yBAA2BtD,OAAO,CAACsD,YAAa;;;EAInE,IAAIE,QAAQ;EACZ,IAAIxD,OAAO,CAACwD,QAAQ,KAAKzC,SAAS,EAAE;IAClC,IAAImQ,KAAK,CAACsB,OAAO,CAACxS,OAAO,CAACwD,QAAQ,CAAC,EAAE;MACnCA,QAAQ,GAAG,IAAI9G,UAAU,CAACsD,OAAO,CAACwD,QAAQ,CAAC0F,KAAK,EAAE,CAAC;KACpD,MAAM;MACL9K,MAAM,CACJ,QAAQ,gBAAkB4B,OAAO,CAACwD,QAAQ,CAAE/D,QAAQ,CAAC,KAAK,UAAU,EACpE,EAAE,CACH,CAAC,CAAC;MACH+D,QAAQ,GAAGxD,OAAO,CAACwD,QAAQ;;GAE9B,MAAM;IACLA,QAAQ,GAAG,IAAI9G,UAAU,EAAE;;EAG7B,OAAO;IACL2G,QAAQ,EAAEA,QAAQ;IAClBC,YAAY,EAAEA,YAAY;IAC1BH,mBAAmB,EAAEA,mBAAmB;IACxCK,QAAQ,EAAEA,QAAQ;IAClBgB,MAAM,EAAEA;GACT;AACH;AACA,eAAe3E,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}