{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport { abstract } from '../util.js';\nimport { createOrUpdateFromFlatCoordinates, getCenter } from '../extent.js';\nimport { rotate, scale, transform2D, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nvar SimpleGeometry = /** @class */function (_super) {\n  __extends(SimpleGeometry, _super);\n  function SimpleGeometry() {\n    var _this = _super.call(this) || this;\n    /**\n     * @protected\n     * @type {import(\"./GeometryLayout.js\").default}\n     */\n    _this.layout = GeometryLayout.XY;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.stride = 2;\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    _this.flatCoordinates = null;\n    return _this;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  SimpleGeometry.prototype.computeExtent = function (extent) {\n    return createOrUpdateFromFlatCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  SimpleGeometry.prototype.getCoordinates = function () {\n    return abstract();\n  };\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  SimpleGeometry.prototype.getFirstCoordinate = function () {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  SimpleGeometry.prototype.getFlatCoordinates = function () {\n    return this.flatCoordinates;\n  };\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  SimpleGeometry.prototype.getLastCoordinate = function () {\n    return this.flatCoordinates.slice(this.flatCoordinates.length - this.stride);\n  };\n  /**\n   * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n   * @return {import(\"./GeometryLayout.js\").default} Layout.\n   * @api\n   */\n  SimpleGeometry.prototype.getLayout = function () {\n    return this.layout;\n  };\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n  SimpleGeometry.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n    var simplifiedGeometry = this.getSimplifiedGeometryInternal(squaredTolerance);\n    var simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    } else {\n      // Simplification did not actually remove any coordinates.  We now know\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\n      // than or equal to the current squaredTolerance will also not have any\n      // effect.  This allows us to short circuit simplification (saving CPU\n      // cycles) and prevents the cache of simplified geometries from filling\n      // up with useless identical copies of this geometry (saving memory).\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  SimpleGeometry.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    return this;\n  };\n  /**\n   * @return {number} Stride.\n   */\n  SimpleGeometry.prototype.getStride = function () {\n    return this.stride;\n  };\n  /**\n   * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  SimpleGeometry.prototype.setFlatCoordinates = function (layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  };\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  SimpleGeometry.prototype.setCoordinates = function (coordinates, opt_layout) {\n    abstract();\n  };\n  /**\n   * @param {import(\"./GeometryLayout.js\").default|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  SimpleGeometry.prototype.setLayout = function (layout, coordinates, nesting) {\n    /** @type {number} */\n    var stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (var i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = GeometryLayout.XY;\n          this.stride = 2;\n          return;\n        } else {\n          coordinates = /** @type {Array} */coordinates[0];\n        }\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  };\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  SimpleGeometry.prototype.applyTransform = function (transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  SimpleGeometry.prototype.rotate = function (angle, anchor) {\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      rotate(flatCoordinates, 0, flatCoordinates.length, stride, angle, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  SimpleGeometry.prototype.scale = function (sx, opt_sy, opt_anchor) {\n    var sy = opt_sy;\n    if (sy === undefined) {\n      sy = sx;\n    }\n    var anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      scale(flatCoordinates, 0, flatCoordinates.length, stride, sx, sy, anchor, flatCoordinates);\n      this.changed();\n    }\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  SimpleGeometry.prototype.translate = function (deltaX, deltaY) {\n    var flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      var stride = this.getStride();\n      translate(flatCoordinates, 0, flatCoordinates.length, stride, deltaX, deltaY, flatCoordinates);\n      this.changed();\n    }\n  };\n  return SimpleGeometry;\n}(Geometry);\n/**\n * @param {number} stride Stride.\n * @return {import(\"./GeometryLayout.js\").default} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  var layout;\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n  return /** @type {import(\"./GeometryLayout.js\").default} */layout;\n}\n/**\n * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  var stride;\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n  return /** @type {number} */stride;\n}\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  var flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    var stride = simpleGeometry.getStride();\n    return transform2D(flatCoordinates, 0, flatCoordinates.length, stride, transform, opt_dest);\n  }\n}\nexport default SimpleGeometry;","map":{"version":3,"names":["Geometry","GeometryLayout","abstract","createOrUpdateFromFlatCoordinates","getCenter","rotate","scale","transform2D","translate","SimpleGeometry","_super","__extends","_this","call","layout","XY","stride","flatCoordinates","prototype","computeExtent","extent","length","getCoordinates","getFirstCoordinate","slice","getFlatCoordinates","getLastCoordinate","getLayout","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometry","getSimplifiedGeometryInternal","simplifiedFlatCoordinates","getStride","setFlatCoordinates","getStrideForLayout","setCoordinates","coordinates","opt_layout","setLayout","nesting","i","getLayoutForStride","applyTransform","transformFn","changed","angle","anchor","sx","opt_sy","opt_anchor","sy","undefined","getExtent","deltaX","deltaY","XYZ","XYZM","XYM","transformGeom2D","simpleGeometry","transform","opt_dest"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\SimpleGeometry.js"],"sourcesContent":["/**\n * @module ol/geom/SimpleGeometry\n */\nimport Geometry from './Geometry.js';\nimport GeometryLayout from './GeometryLayout.js';\nimport {abstract} from '../util.js';\nimport {createOrUpdateFromFlatCoordinates, getCenter} from '../extent.js';\nimport {rotate, scale, transform2D, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Abstract base class; only used for creating subclasses; do not instantiate\n * in apps, as cannot be rendered.\n *\n * @abstract\n * @api\n */\nclass SimpleGeometry extends Geometry {\n  constructor() {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"./GeometryLayout.js\").default}\n     */\n    this.layout = GeometryLayout.XY;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.stride = 2;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.flatCoordinates = null;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    return createOrUpdateFromFlatCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {Array<*> | null} Coordinates.\n   */\n  getCoordinates() {\n    return abstract();\n  }\n\n  /**\n   * Return the first coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} First coordinate.\n   * @api\n   */\n  getFirstCoordinate() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getFlatCoordinates() {\n    return this.flatCoordinates;\n  }\n\n  /**\n   * Return the last coordinate of the geometry.\n   * @return {import(\"../coordinate.js\").Coordinate} Last point.\n   * @api\n   */\n  getLastCoordinate() {\n    return this.flatCoordinates.slice(\n      this.flatCoordinates.length - this.stride\n    );\n  }\n\n  /**\n   * Return the {@link module:ol/geom/GeometryLayout layout} of the geometry.\n   * @return {import(\"./GeometryLayout.js\").default} Layout.\n   * @api\n   */\n  getLayout() {\n    return this.layout;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    // If squaredTolerance is negative or if we know that simplification will not\n    // have any effect then just return this.\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance <= this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometry =\n      this.getSimplifiedGeometryInternal(squaredTolerance);\n    const simplifiedFlatCoordinates = simplifiedGeometry.getFlatCoordinates();\n    if (simplifiedFlatCoordinates.length < this.flatCoordinates.length) {\n      return simplifiedGeometry;\n    } else {\n      // Simplification did not actually remove any coordinates.  We now know\n      // that any calls to getSimplifiedGeometry with a squaredTolerance less\n      // than or equal to the current squaredTolerance will also not have any\n      // effect.  This allows us to short circuit simplification (saving CPU\n      // cycles) and prevents the cache of simplified geometries from filling\n      // up with useless identical copies of this geometry (saving memory).\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {SimpleGeometry} Simplified geometry.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return this.stride;\n  }\n\n  /**\n   * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n   * @param {Array<number>} flatCoordinates Flat coordinates.\n   */\n  setFlatCoordinates(layout, flatCoordinates) {\n    this.stride = getStrideForLayout(layout);\n    this.layout = layout;\n    this.flatCoordinates = flatCoordinates;\n  }\n\n  /**\n   * @abstract\n   * @param {!Array<*>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  setCoordinates(coordinates, opt_layout) {\n    abstract();\n  }\n\n  /**\n   * @param {import(\"./GeometryLayout.js\").default|undefined} layout Layout.\n   * @param {Array<*>} coordinates Coordinates.\n   * @param {number} nesting Nesting.\n   * @protected\n   */\n  setLayout(layout, coordinates, nesting) {\n    /** @type {number} */\n    let stride;\n    if (layout) {\n      stride = getStrideForLayout(layout);\n    } else {\n      for (let i = 0; i < nesting; ++i) {\n        if (coordinates.length === 0) {\n          this.layout = GeometryLayout.XY;\n          this.stride = 2;\n          return;\n        } else {\n          coordinates = /** @type {Array} */ (coordinates[0]);\n        }\n      }\n      stride = coordinates.length;\n      layout = getLayoutForStride(stride);\n    }\n    this.layout = layout;\n    this.stride = stride;\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    if (this.flatCoordinates) {\n      transformFn(this.flatCoordinates, this.flatCoordinates, this.stride);\n      this.changed();\n    }\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      rotate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        angle,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    let sy = opt_sy;\n    if (sy === undefined) {\n      sy = sx;\n    }\n    let anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      scale(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        sx,\n        sy,\n        anchor,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const flatCoordinates = this.getFlatCoordinates();\n    if (flatCoordinates) {\n      const stride = this.getStride();\n      translate(\n        flatCoordinates,\n        0,\n        flatCoordinates.length,\n        stride,\n        deltaX,\n        deltaY,\n        flatCoordinates\n      );\n      this.changed();\n    }\n  }\n}\n\n/**\n * @param {number} stride Stride.\n * @return {import(\"./GeometryLayout.js\").default} layout Layout.\n */\nfunction getLayoutForStride(stride) {\n  let layout;\n  if (stride == 2) {\n    layout = GeometryLayout.XY;\n  } else if (stride == 3) {\n    layout = GeometryLayout.XYZ;\n  } else if (stride == 4) {\n    layout = GeometryLayout.XYZM;\n  }\n  return /** @type {import(\"./GeometryLayout.js\").default} */ (layout);\n}\n\n/**\n * @param {import(\"./GeometryLayout.js\").default} layout Layout.\n * @return {number} Stride.\n */\nexport function getStrideForLayout(layout) {\n  let stride;\n  if (layout == GeometryLayout.XY) {\n    stride = 2;\n  } else if (layout == GeometryLayout.XYZ || layout == GeometryLayout.XYM) {\n    stride = 3;\n  } else if (layout == GeometryLayout.XYZM) {\n    stride = 4;\n  }\n  return /** @type {number} */ (stride);\n}\n\n/**\n * @param {SimpleGeometry} simpleGeometry Simple geometry.\n * @param {import(\"../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed flat coordinates.\n */\nexport function transformGeom2D(simpleGeometry, transform, opt_dest) {\n  const flatCoordinates = simpleGeometry.getFlatCoordinates();\n  if (!flatCoordinates) {\n    return null;\n  } else {\n    const stride = simpleGeometry.getStride();\n    return transform2D(\n      flatCoordinates,\n      0,\n      flatCoordinates.length,\n      stride,\n      transform,\n      opt_dest\n    );\n  }\n}\n\nexport default SimpleGeometry;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}