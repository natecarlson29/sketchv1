{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { getKey, getKeyZXY } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection } from '../tilegrid.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nvar TileImage = /** @class */function (_super) {\n  __extends(TileImage, _super);\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  function TileImage(options) {\n    var _this = this;\n    var interpolate = options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction ? options.tileLoadFunction : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @protected\n     * @type {?string}\n     */\n    _this.crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    _this.tileClass = options.tileClass !== undefined ? options.tileClass : ImageTile;\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    _this.tileCacheForProjection = {};\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    _this.tileGridForProjection = {};\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderReprojectionEdges_ = false;\n    return _this;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  TileImage.prototype.canExpireCache = function () {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.canExpireCache.call(this);\n    }\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (var key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  TileImage.prototype.expireCache = function (projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      _super.prototype.expireCache.call(this, projection, usedTiles);\n      return;\n    }\n    var usedTileCache = this.getTileCacheForProjection(projection);\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\n    for (var id in this.tileCacheForProjection) {\n      var tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  TileImage.prototype.getGutterForProjection = function (projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  };\n  /**\n   * @return {number} Gutter.\n   */\n  TileImage.prototype.getGutter = function () {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  TileImage.prototype.getKey = function () {\n    var key = _super.prototype.getKey.call(this);\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  TileImage.prototype.getOpaque = function (projection) {\n    if (ENABLE_RASTER_REPROJECTION && this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\n      return false;\n    } else {\n      return _super.prototype.getOpaque.call(this, projection);\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  TileImage.prototype.getTileGridForProjection = function (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.getTileGridForProjection.call(this, projection);\n    }\n    var thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      var projKey = getUid(projection);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\n      }\n      return this.tileGridForProjection[projKey];\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  TileImage.prototype.getTileCacheForProjection = function (projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return _super.prototype.getTileCacheForProjection.call(this, projection);\n    }\n    var thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      var projKey = getUid(projection);\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  TileImage.prototype.createTile_ = function (z, x, y, pixelRatio, projection, key) {\n    var tileCoord = [z, x, y];\n    var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n    var tileUrl = urlTileCoord ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\n    var tile = new this.tileClass(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.crossOrigin, this.tileLoadFunction, this.tileOptions);\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n  TileImage.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var sourceProjection = this.getProjection();\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\n    } else {\n      var cache = this.getTileCacheForProjection(projection);\n      var tileCoord = [z, x, y];\n      var tile = void 0;\n      var tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n      var key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        var sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        var targetTileGrid = this.getTileGridForProjection(projection);\n        var wrappedTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n        var newTile = new ReprojTile(sourceProjection, sourceTileGrid, projection, targetTileGrid, tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio), this.getGutter(), function (z, x, y, pixelRatio) {\n          return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n        }.bind(this), this.reprojectionErrorThreshold_, this.renderReprojectionEdges_, this.getInterpolate());\n        newTile.key = key;\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n        return newTile;\n      }\n    }\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @protected\n   */\n  TileImage.prototype.getTileInternal = function (z, x, y, pixelRatio, projection) {\n    var tile = null;\n    var tileCoordKey = getKeyZXY(z, x, y);\n    var key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        var interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  };\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  TileImage.prototype.setRenderReprojectionEdges = function (render) {\n    if (!ENABLE_RASTER_REPROJECTION || this.renderReprojectionEdges_ == render) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (var id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  };\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  TileImage.prototype.setTileGridForProjection = function (projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      var proj = getProjection(projection);\n      if (proj) {\n        var projKey = getUid(proj);\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  };\n  return TileImage;\n}(UrlTile);\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */imageTile.getImage().src = src;\n}\nexport default TileImage;","map":{"version":3,"names":["EventType","ImageTile","ReprojTile","TileCache","TileState","UrlTile","ENABLE_RASTER_REPROJECTION","equivalent","get","getProjection","getKey","getKeyZXY","getForProjection","getTileGridForProjection","getUid","TileImage","_super","__extends","options","_this","interpolate","imageSmoothing","undefined","call","attributions","cacheSize","opaque","projection","state","tileGrid","tileLoadFunction","defaultTileLoadFunction","tilePixelRatio","tileUrlFunction","url","urls","wrapX","transition","key","attributionsCollapsible","zDirection","crossOrigin","tileClass","tileCacheForProjection","tileGridForProjection","reprojectionErrorThreshold_","reprojectionErrorThreshold","renderReprojectionEdges_","prototype","canExpireCache","tileCache","expireCache","usedTiles","usedTileCache","getTileCacheForProjection","id","getGutterForProjection","getGutter","getInterpolate","getOpaque","thisProj","projKey","highWaterMark","createTile_","z","x","y","pixelRatio","tileCoord","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","tile","IDLE","EMPTY","tileOptions","addEventListener","CHANGE","handleTileChange","bind","getTile","sourceProjection","getTileInternal","cache","tileCoordKey","containsKey","sourceTileGrid","targetTileGrid","wrappedTileCoord","newTile","getTilePixelRatio","interimTile","refreshInterimChain","replace","set","getState","setRenderReprojectionEdges","render","clear","changed","setTileGridForProjection","tilegrid","proj","imageTile","src","getImage"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\source\\TileImage.js"],"sourcesContent":["/**\n * @module ol/source/TileImage\n */\nimport EventType from '../events/EventType.js';\nimport ImageTile from '../ImageTile.js';\nimport ReprojTile from '../reproj/Tile.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport UrlTile from './UrlTile.js';\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {getKey, getKeyZXY} from '../tilecoord.js';\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Deprecated.  Use the `interpolate` option instead.\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./Source.js\").State} [state] Source state.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\n * service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {Array<string>} [urls] An array of URL templates.\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\n * request out-of-bounds tiles from the server. When set to `false`, only one\n * world will be rendered. When set to `true`, tiles will be requested for one\n * world only, but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {string} [key] Optional tile key for proper cache fetching\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\n * Choose whether to use tiles with a higher or lower zoom level when between integer\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\n */\n\n/**\n * @classdesc\n * Base class for sources providing images divided into a tile grid.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n * @api\n */\nclass TileImage extends UrlTile {\n  /**\n   * @param {!Options} options Image tile options.\n   */\n  constructor(options) {\n    let interpolate =\n      options.imageSmoothing !== undefined ? options.imageSmoothing : true;\n    if (options.interpolate !== undefined) {\n      interpolate = options.interpolate;\n    }\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction\n        ? options.tileLoadFunction\n        : defaultTileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: options.tileUrlFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      interpolate: interpolate,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @protected\n     * @type {?string}\n     */\n    this.crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @protected\n     * @type {typeof ImageTile}\n     */\n    this.tileClass =\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\n\n    /**\n     * @protected\n     * @type {!Object<string, TileCache>}\n     */\n    this.tileCacheForProjection = {};\n\n    /**\n     * @protected\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\n     */\n    this.tileGridForProjection = {};\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderReprojectionEdges_ = false;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.canExpireCache();\n    }\n    if (this.tileCache.canExpireCache()) {\n      return true;\n    } else {\n      for (const key in this.tileCacheForProjection) {\n        if (this.tileCacheForProjection[key].canExpireCache()) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      super.expireCache(projection, usedTiles);\n      return;\n    }\n    const usedTileCache = this.getTileCacheForProjection(projection);\n\n    this.tileCache.expireCache(\n      this.tileCache == usedTileCache ? usedTiles : {}\n    );\n    for (const id in this.tileCacheForProjection) {\n      const tileCache = this.tileCacheForProjection[id];\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    if (\n      ENABLE_RASTER_REPROJECTION &&\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return 0;\n    } else {\n      return this.getGutter();\n    }\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    let key = super.getKey();\n    if (!this.getInterpolate()) {\n      key += ':disable-interpolation';\n    }\n    return key;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    if (\n      ENABLE_RASTER_REPROJECTION &&\n      this.getProjection() &&\n      projection &&\n      !equivalent(this.getProjection(), projection)\n    ) {\n      return false;\n    } else {\n      return super.getOpaque(projection);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.getTileGridForProjection(projection);\n    }\n    const thisProj = this.getProjection();\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\n      return this.tileGrid;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileGridForProjection)) {\n        this.tileGridForProjection[projKey] =\n          getTileGridForProjection(projection);\n      }\n      return this.tileGridForProjection[projKey];\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   */\n  getTileCacheForProjection(projection) {\n    if (!ENABLE_RASTER_REPROJECTION) {\n      return super.getTileCacheForProjection(projection);\n    }\n    const thisProj = this.getProjection();\n    if (!thisProj || equivalent(thisProj, projection)) {\n      return this.tileCache;\n    } else {\n      const projKey = getUid(projection);\n      if (!(projKey in this.tileCacheForProjection)) {\n        this.tileCacheForProjection[projKey] = new TileCache(\n          this.tileCache.highWaterMark\n        );\n      }\n      return this.tileCacheForProjection[projKey];\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {string} key The key set on the tile.\n   * @return {!ImageTile} Tile.\n   * @private\n   */\n  createTile_(z, x, y, pixelRatio, projection, key) {\n    const tileCoord = [z, x, y];\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\n      tileCoord,\n      projection\n    );\n    const tileUrl = urlTileCoord\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\n      : undefined;\n    const tile = new this.tileClass(\n      tileCoord,\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n      tileUrl !== undefined ? tileUrl : '',\n      this.crossOrigin,\n      this.tileLoadFunction,\n      this.tileOptions\n    );\n    tile.key = key;\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\n    return tile;\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !ENABLE_RASTER_REPROJECTION ||\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      return this.getTileInternal(\n        z,\n        x,\n        y,\n        pixelRatio,\n        sourceProjection || projection\n      );\n    } else {\n      const cache = this.getTileCacheForProjection(projection);\n      const tileCoord = [z, x, y];\n      let tile;\n      const tileCoordKey = getKey(tileCoord);\n      if (cache.containsKey(tileCoordKey)) {\n        tile = cache.get(tileCoordKey);\n      }\n      const key = this.getKey();\n      if (tile && tile.key == key) {\n        return tile;\n      } else {\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\n        const targetTileGrid = this.getTileGridForProjection(projection);\n        const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\n          tileCoord,\n          projection\n        );\n        const newTile = new ReprojTile(\n          sourceProjection,\n          sourceTileGrid,\n          projection,\n          targetTileGrid,\n          tileCoord,\n          wrappedTileCoord,\n          this.getTilePixelRatio(pixelRatio),\n          this.getGutter(),\n          function (z, x, y, pixelRatio) {\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\n          }.bind(this),\n          this.reprojectionErrorThreshold_,\n          this.renderReprojectionEdges_,\n          this.getInterpolate()\n        );\n        newTile.key = key;\n\n        if (tile) {\n          newTile.interimTile = tile;\n          newTile.refreshInterimChain();\n          cache.replace(tileCoordKey, newTile);\n        } else {\n          cache.set(tileCoordKey, newTile);\n        }\n        return newTile;\n      }\n    }\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!(ImageTile|ReprojTile)} Tile.\n   * @protected\n   */\n  getTileInternal(z, x, y, pixelRatio, projection) {\n    let tile = null;\n    const tileCoordKey = getKeyZXY(z, x, y);\n    const key = this.getKey();\n    if (!this.tileCache.containsKey(tileCoordKey)) {\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n      this.tileCache.set(tileCoordKey, tile);\n    } else {\n      tile = this.tileCache.get(tileCoordKey);\n      if (tile.key != key) {\n        // The source's params changed. If the tile has an interim tile and if we\n        // can use it then we use it. Otherwise we create a new tile.  In both\n        // cases we attempt to assign an interim tile to the new tile.\n        const interimTile = tile;\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\n\n        //make the new tile the head of the list,\n        if (interimTile.getState() == TileState.IDLE) {\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\n          tile.interimTile = interimTile.interimTile;\n        } else {\n          tile.interimTile = interimTile;\n        }\n        tile.refreshInterimChain();\n        this.tileCache.replace(tileCoordKey, tile);\n      }\n    }\n    return tile;\n  }\n\n  /**\n   * Sets whether to render reprojection edges or not (usually for debugging).\n   * @param {boolean} render Render the edges.\n   * @api\n   */\n  setRenderReprojectionEdges(render) {\n    if (\n      !ENABLE_RASTER_REPROJECTION ||\n      this.renderReprojectionEdges_ == render\n    ) {\n      return;\n    }\n    this.renderReprojectionEdges_ = render;\n    for (const id in this.tileCacheForProjection) {\n      this.tileCacheForProjection[id].clear();\n    }\n    this.changed();\n  }\n\n  /**\n   * Sets the tile grid to use when reprojecting the tiles to the given\n   * projection instead of the default tile grid for the projection.\n   *\n   * This can be useful when the default tile grid cannot be created\n   * (e.g. projection has no extent defined) or\n   * for optimization reasons (custom tile size, resolutions, ...).\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\n   * @api\n   */\n  setTileGridForProjection(projection, tilegrid) {\n    if (ENABLE_RASTER_REPROJECTION) {\n      const proj = getProjection(projection);\n      if (proj) {\n        const projKey = getUid(proj);\n        if (!(projKey in this.tileGridForProjection)) {\n          this.tileGridForProjection[projKey] = tilegrid;\n        }\n      }\n    }\n  }\n}\n\n/**\n * @param {ImageTile} imageTile Image tile.\n * @param {string} src Source.\n */\nfunction defaultTileLoadFunction(imageTile, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\n    src;\n}\n\nexport default TileImage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}