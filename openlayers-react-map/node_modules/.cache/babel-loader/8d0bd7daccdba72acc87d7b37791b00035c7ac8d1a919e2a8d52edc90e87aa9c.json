{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/Control\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport { VOID } from '../functions.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { removeNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nvar Control = /** @class */function (_super) {\n  __extends(Control, _super);\n  /**\n   * @param {Options} options Control options.\n   */\n  function Control(options) {\n    var _this = _super.call(this) || this;\n    var element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.element = element ? element : null;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.target_ = null;\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default|null}\n     */\n    _this.map_ = null;\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    _this.listenerKeys = [];\n    if (options.render) {\n      _this.render = options.render;\n    }\n    if (options.target) {\n      _this.setTarget(options.target);\n    }\n    return _this;\n  }\n  /**\n   * Clean up.\n   */\n  Control.prototype.disposeInternal = function () {\n    removeNode(this.element);\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../PluggableMap.js\").default|null} Map.\n   * @api\n   */\n  Control.prototype.getMap = function () {\n    return this.map_;\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  Control.prototype.setMap = function (map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n    for (var i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      var target = this.target_ ? this.target_ : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n      if (this.render !== VOID) {\n        this.listenerKeys.push(listen(map, MapEventType.POSTRENDER, this.render, this));\n      }\n      map.render();\n    }\n  };\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  Control.prototype.render = function (mapEvent) {};\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  Control.prototype.setTarget = function (target) {\n    this.target_ = typeof target === 'string' ? document.getElementById(target) : target;\n  };\n  return Control;\n}(BaseObject);\nexport default Control;","map":{"version":3,"names":["BaseObject","MapEventType","VOID","listen","unlistenByKey","removeNode","Control","_super","__extends","options","_this","call","element","target","style","pointerEvents","target_","map_","listenerKeys","render","setTarget","prototype","disposeInternal","getMap","setMap","map","i","ii","length","getOverlayContainerStopEvent","appendChild","push","POSTRENDER","mapEvent","document","getElementById"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\control\\Control.js"],"sourcesContent":["/**\n * @module ol/control/Control\n */\nimport BaseObject from '../Object.js';\nimport MapEventType from '../MapEventType.js';\nimport {VOID} from '../functions.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {removeNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {HTMLElement} [element] The element is the control's\n * container element. This only needs to be specified if you're developing\n * a custom control.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want\n * the control to be rendered outside of the map's viewport.\n */\n\n/**\n * @classdesc\n * A control is a visible widget with a DOM element in a fixed position on the\n * screen. They can involve user input (buttons), or be informational only;\n * the position is determined using CSS. By default these are placed in the\n * container with CSS class name `ol-overlaycontainer-stopevent`, but can use\n * any outside DOM element.\n *\n * This is the base class for controls. You can use it for simple custom\n * controls by creating the element with listeners, creating an instance:\n * ```js\n * var myControl = new Control({element: myElement});\n * ```\n * and then adding this to the map.\n *\n * The main advantage of having this as a control rather than a simple separate\n * DOM element is that preventing propagation is handled for you. Controls\n * will also be objects in a {@link module:ol/Collection~Collection}, so you can use their methods.\n *\n * You can also extend this base for your own control class. See\n * examples/custom-controls for an example of how to do this.\n *\n * @api\n */\nclass Control extends BaseObject {\n  /**\n   * @param {Options} options Control options.\n   */\n  constructor(options) {\n    super();\n\n    const element = options.element;\n    if (element && !options.target && !element.style.pointerEvents) {\n      element.style.pointerEvents = 'auto';\n    }\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.element = element ? element : null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../PluggableMap.js\").default|null}\n     */\n    this.map_ = null;\n\n    /**\n     * @protected\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     */\n    this.listenerKeys = [];\n\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.target) {\n      this.setTarget(options.target);\n    }\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    removeNode(this.element);\n    super.disposeInternal();\n  }\n\n  /**\n   * Get the map associated with this control.\n   * @return {import(\"../PluggableMap.js\").default|null} Map.\n   * @api\n   */\n  getMap() {\n    return this.map_;\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.map_) {\n      removeNode(this.element);\n    }\n    for (let i = 0, ii = this.listenerKeys.length; i < ii; ++i) {\n      unlistenByKey(this.listenerKeys[i]);\n    }\n    this.listenerKeys.length = 0;\n    this.map_ = map;\n    if (map) {\n      const target = this.target_\n        ? this.target_\n        : map.getOverlayContainerStopEvent();\n      target.appendChild(this.element);\n      if (this.render !== VOID) {\n        this.listenerKeys.push(\n          listen(map, MapEventType.POSTRENDER, this.render, this)\n        );\n      }\n      map.render();\n    }\n  }\n\n  /**\n   * Renders the control.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @api\n   */\n  render(mapEvent) {}\n\n  /**\n   * This function is used to set a target element for the control. It has no\n   * effect if it is called after the control has been added to the map (i.e.\n   * after `setMap` is called on the control). If no `target` is set in the\n   * options passed to the control constructor and if `setTarget` is not called\n   * then the control is added to the map's overlay container.\n   * @param {HTMLElement|string} target Target.\n   * @api\n   */\n  setTarget(target) {\n    this.target_ =\n      typeof target === 'string' ? document.getElementById(target) : target;\n  }\n}\n\nexport default Control;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}