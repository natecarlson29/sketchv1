{"ast":null,"code":"/**\n * @module ol/proj/transforms\n */\nimport { isEmpty } from '../obj.js';\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nvar transforms = {};\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  var sourceCode = source.getCode();\n  var destinationCode = destination.getCode();\n  var transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  var transform;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n}","map":{"version":3,"names":["isEmpty","transforms","clear","add","source","destination","transformFn","sourceCode","getCode","destinationCode","remove","transform","get"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\proj\\transforms.js"],"sourcesContent":["/**\n * @module ol/proj/transforms\n */\nimport {isEmpty} from '../obj.js';\n\n/**\n * @private\n * @type {!Object<string, Object<string, import(\"../proj.js\").TransformFunction>>}\n */\nlet transforms = {};\n\n/**\n * Clear the transform cache.\n */\nexport function clear() {\n  transforms = {};\n}\n\n/**\n * Registers a conversion function to convert coordinates from the source\n * projection to the destination projection.\n *\n * @param {import(\"./Projection.js\").default} source Source.\n * @param {import(\"./Projection.js\").default} destination Destination.\n * @param {import(\"../proj.js\").TransformFunction} transformFn Transform.\n */\nexport function add(source, destination, transformFn) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  if (!(sourceCode in transforms)) {\n    transforms[sourceCode] = {};\n  }\n  transforms[sourceCode][destinationCode] = transformFn;\n}\n\n/**\n * Unregisters the conversion function to convert coordinates from the source\n * projection to the destination projection.  This method is used to clean up\n * cached transforms during testing.\n *\n * @param {import(\"./Projection.js\").default} source Source projection.\n * @param {import(\"./Projection.js\").default} destination Destination projection.\n * @return {import(\"../proj.js\").TransformFunction} transformFn The unregistered transform.\n */\nexport function remove(source, destination) {\n  const sourceCode = source.getCode();\n  const destinationCode = destination.getCode();\n  const transform = transforms[sourceCode][destinationCode];\n  delete transforms[sourceCode][destinationCode];\n  if (isEmpty(transforms[sourceCode])) {\n    delete transforms[sourceCode];\n  }\n  return transform;\n}\n\n/**\n * Get a transform given a source code and a destination code.\n * @param {string} sourceCode The code for the source projection.\n * @param {string} destinationCode The code for the destination projection.\n * @return {import(\"../proj.js\").TransformFunction|undefined} The transform function (if found).\n */\nexport function get(sourceCode, destinationCode) {\n  let transform;\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\n    transform = transforms[sourceCode][destinationCode];\n  }\n  return transform;\n}\n"],"mappings":"AAAA;;;AAGA,SAAQA,OAAO,QAAO,WAAW;AAEjC;;;;AAIA,IAAIC,UAAU,GAAG,EAAE;AAEnB;;;AAGA,OAAM,SAAUC,KAAKA,CAAA;EACnBD,UAAU,GAAG,EAAE;AACjB;AAEA;;;;;;;;AAQA,OAAM,SAAUE,GAAGA,CAACC,MAAM,EAAEC,WAAW,EAAEC,WAAW;EAClD,IAAMC,UAAU,GAAGH,MAAM,CAACI,OAAO,EAAE;EACnC,IAAMC,eAAe,GAAGJ,WAAW,CAACG,OAAO,EAAE;EAC7C,IAAI,EAAED,UAAU,IAAIN,UAAU,CAAC,EAAE;IAC/BA,UAAU,CAACM,UAAU,CAAC,GAAG,EAAE;;EAE7BN,UAAU,CAACM,UAAU,CAAC,CAACE,eAAe,CAAC,GAAGH,WAAW;AACvD;AAEA;;;;;;;;;AASA,OAAM,SAAUI,MAAMA,CAACN,MAAM,EAAEC,WAAW;EACxC,IAAME,UAAU,GAAGH,MAAM,CAACI,OAAO,EAAE;EACnC,IAAMC,eAAe,GAAGJ,WAAW,CAACG,OAAO,EAAE;EAC7C,IAAMG,SAAS,GAAGV,UAAU,CAACM,UAAU,CAAC,CAACE,eAAe,CAAC;EACzD,OAAOR,UAAU,CAACM,UAAU,CAAC,CAACE,eAAe,CAAC;EAC9C,IAAIT,OAAO,CAACC,UAAU,CAACM,UAAU,CAAC,CAAC,EAAE;IACnC,OAAON,UAAU,CAACM,UAAU,CAAC;;EAE/B,OAAOI,SAAS;AAClB;AAEA;;;;;;AAMA,OAAM,SAAUC,GAAGA,CAACL,UAAU,EAAEE,eAAe;EAC7C,IAAIE,SAAS;EACb,IAAIJ,UAAU,IAAIN,UAAU,IAAIQ,eAAe,IAAIR,UAAU,CAACM,UAAU,CAAC,EAAE;IACzEI,SAAS,GAAGV,UAAU,CAACM,UAAU,CAAC,CAACE,eAAe,CAAC;;EAErD,OAAOE,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}