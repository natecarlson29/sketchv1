{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport History from './map-helpers/History';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, remarkPolygonSegments, remarkLineSegments, pointToSegmentDistance } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 2.018;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = feature => remarkPolygonSegments(feature, mapRef);\n\n    // Expose remarkLineSegments for use in handlers\n    mapRef.current.remarkLineSegments = feature => remarkLineSegments(feature, mapRef);\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else if (modeRef.current === 'select') {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n              if (dist < 8) {\n                // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) {\n                // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n    // ...existing code...\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        // Track action in history\n        console.log({\n          FeatureId: feature.getId()\n        });\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]]\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n      }\n    }\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Find the index of the currently selected feature in the features array\n      let currentIdx = -1;\n      if (selectedFeature) {\n        currentIdx = features.findIndex(f => f === selectedFeature);\n      }\n\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n\n      // Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\n      allPolygons.forEach(f => {\n        f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      });\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n\n        // Undo for deleting a segment (LineString -> Polygon)\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString');\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            createSegmentOverlays(newPoly, [prevCoords], mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Undo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.prevCoords], mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, [prevCoords], mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      let lastRedoAction = null;\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastRedoAction = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n\n        // Redo for deleting a segment (Polygon -> LineString)\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for add-point and delete-vertex\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, [newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      // Find the first highlighted segment (LineString)\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return; // No segment highlighted\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n      const [start, end] = coords;\n\n      // Calculate angle in pixel (screen) space for visual correctness\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      // Angle between the segment and the horizontal axis\n      let angle = Math.atan2(dy, dx);\n\n      // To make the segment vertical, add 90 degrees (PI/2)\n      angle += Math.PI / 2;\n\n      // Normalize angle to [-PI, PI]\n      angle = (angle + Math.PI) % (2 * Math.PI) - Math.PI;\n\n      // Get current rotation\n      const currentRotation = map.getView().getRotation();\n\n      // Only animate if the difference is significant (e.g., > 0.001 radians)\n      if (Math.abs(currentRotation - angle) > 0.001) {\n        map.getView().animate({\n          rotation: angle,\n          duration: 600 // ms\n        });\n      }\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n        }\n      }\n      // ctrl + z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.key === 'R')) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 592,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 591,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 579,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aF1M5fUztgVFNkDElQ2hAESaCqU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","Select","fromLonLat","ScaleLine","FlipHorizButton","FlipVertButton","RightClick","History","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","clearPolygonOverlays","createSegmentOverlays","remarkPolygonSegments","remarkLineSegments","pointToSegmentDistance","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","getSource","clear","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","addControl","units","highlightSource","name","addLayer","on","evt","coord","coordinate","removeFeature","ghost","setStyle","addFeature","found","forEachFeatureAtPixel","pixel","getGeometry","getType","coords","getCoordinates","i","length","getPixelFromCoordinate","dist","Math","sqrt","pow","vertexFeature","seg","pixel1","pixel2","segFeature","drawClick","poly","setId","Date","now","toString","console","log","FeatureId","getId","featureId","prevCoords","newCoords","slice","setCoordinates","selectClick","features","getFeaturesAtPixel","allPolygons","getFeatures","forEach","f","currentIdx","findIndex","nextIdx","nextFeature","addSegment","direction","last","dx","dy","OFFSET","newPt","handleUndo","lastActionForRedo","lastAction","lineFeature","newPoly","redoPrev","handleRedo","lastRedoAction","require","default","histPrev","rotateMapToHighlightedSegment","start","end","startPixel","endPixel","angle","atan2","PI","currentRotation","getView","getRotation","abs","animate","rotation","duration","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","document","addEventListener","overlay","removeOverlay","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","children","id","ref","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport History from './map-helpers/History';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  remarkPolygonSegments,\n  remarkLineSegments,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 2.018;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = (feature) => remarkPolygonSegments(feature, mapRef);\n\n    // Expose remarkLineSegments for use in handlers\n    mapRef.current.remarkLineSegments = (feature) => remarkLineSegments(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else if (modeRef.current === 'select') {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n    // ...existing code...\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        // Track action in history\n        console.log({ FeatureId: feature.getId() });\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]],\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n      }\n    }\n\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Find the index of the currently selected feature in the features array\n      let currentIdx = -1;\n      if (selectedFeature) {\n        currentIdx = features.findIndex(f => f === selectedFeature);\n      }\n\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n\n      // Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\n      allPolygons.forEach(f => {\n        f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      });\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        // Undo for deleting a segment (LineString -> Polygon)\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n          );\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            createSegmentOverlays(newPoly, [prevCoords], mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Undo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.prevCoords], mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, [prevCoords], mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      let lastRedoAction = null;\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastRedoAction = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        // Redo for deleting a segment (Polygon -> LineString)\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for add-point and delete-vertex\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, [newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      // Find the first highlighted segment (LineString)\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return; // No segment highlighted\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      // Calculate angle in pixel (screen) space for visual correctness\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      // Angle between the segment and the horizontal axis\n      let angle = Math.atan2(dy, dx);\n\n      // To make the segment vertical, add 90 degrees (PI/2)\n      angle += Math.PI / 2;\n\n      // Normalize angle to [-PI, PI]\n      angle = ((angle + Math.PI) % (2 * Math.PI)) - Math.PI;\n\n      // Get current rotation\n      const currentRotation = map.getView().getRotation();\n\n      // Only animate if the difference is significant (e.g., > 0.001 radians)\n      if (Math.abs(currentRotation - angle) > 0.001) {\n        map.getView().animate({\n          rotation: angle,\n          duration: 600 // ms\n        });\n      }\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n        }\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n      />\n      <History history={history} redoStack={redoStack} />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}