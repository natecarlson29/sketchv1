{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}. Components\n * like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link import(\"../PluggableMap.js\").default#forEachLayerAtPixel map.forEachLayerAtPixel()} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nvar Layer = /** @class */function (_super) {\n  __extends(Layer, _super);\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  function Layer(options) {\n    var _this = this;\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n    _this = _super.call(this, baseOptions) || this;\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    _this.un;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.mapPrecomposeKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.mapRenderKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.sourceChangeKey_ = null;\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    _this.renderer_ = null;\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    _this.rendered = false;\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      _this.render = options.render;\n    }\n    if (options.map) {\n      _this.setMap(options.map);\n    }\n    _this.addChangeListener(LayerProperty.SOURCE, _this.handleSourcePropertyChange_);\n    var source = options.source ? (/** @type {SourceType} */options.source) : null;\n    _this.setSource(source);\n    return _this;\n  }\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  Layer.prototype.getLayersArray = function (opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  Layer.prototype.getLayerStatesArray = function (opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  Layer.prototype.getSource = function () {\n    return /** @type {SourceType} */this.get(LayerProperty.SOURCE) || null;\n  };\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  Layer.prototype.getRenderSource = function () {\n    return this.getSource();\n  };\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  Layer.prototype.getSourceState = function () {\n    var source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  };\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourceChange_ = function () {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourcePropertyChange_ = function () {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    var source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n    this.changed();\n  };\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n  Layer.prototype.getFeatures = function (pixel) {\n    if (!this.renderer_) {\n      return new Promise(function (resolve) {\n        return resolve([]);\n      });\n    }\n    return this.renderer_.getFeatures(pixel);\n  };\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  Layer.prototype.getData = function (pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  };\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  Layer.prototype.render = function (frameState, target) {\n    var layerRenderer = this.getRenderer();\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  };\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  Layer.prototype.unrender = function () {\n    this.rendered = false;\n  };\n  /**\n   * For use inside the library only.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   */\n  Layer.prototype.setMapInternal = function (map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  };\n  /**\n   * For use inside the library only.\n   * @return {import(\"../PluggableMap.js\").default|null} Map.\n   */\n  Layer.prototype.getMapInternal = function () {\n    return this.get(LayerProperty.MAP);\n  };\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map~Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  Layer.prototype.setMap = function (map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        var renderEvent = /** @type {import(\"../render/Event.js\").default} */evt;\n        var layerStatesArray = renderEvent.frameState.layerStatesArray;\n        var layerState = this.getLayerState(false);\n        // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n        assert(!layerStatesArray.some(function (arrayLayerState) {\n          return arrayLayerState.layer === layerState.layer;\n        }), 67);\n        layerStatesArray.push(layerState);\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  Layer.prototype.setSource = function (source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  Layer.prototype.getRenderer = function () {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  };\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  Layer.prototype.hasRenderer = function () {\n    return !!this.renderer_;\n  };\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  Layer.prototype.createRenderer = function () {\n    return null;\n  };\n  /**\n   * Clean up.\n   */\n  Layer.prototype.disposeInternal = function () {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n    this.setSource(null);\n    _super.prototype.disposeInternal.call(this);\n  };\n  return Layer;\n}(BaseLayer);\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  var resolution = viewState.resolution;\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n  var zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":{"version":3,"names":["BaseLayer","EventType","LayerProperty","RenderEventType","assert","assign","listen","unlistenByKey","Layer","_super","__extends","options","_this","baseOptions","source","call","on","once","un","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","rendered","render","map","setMap","addChangeListener","SOURCE","handleSourcePropertyChange_","setSource","prototype","getLayersArray","opt_array","array","push","getLayerStatesArray","opt_states","states","getLayerState","getSource","get","getRenderSource","getSourceState","getState","handleSourceChange_","changed","CHANGE","getFeatures","pixel","Promise","resolve","getData","frameState","target","layerRenderer","getRenderer","prepareFrame","renderFrame","unrender","setMapInternal","set","MAP","getMapInternal","PRECOMPOSE","evt","renderEvent","layerStatesArray","layerState","some","arrayLayerState","layer","createRenderer","hasRenderer","disposeInternal","dispose","inView","viewState","visible","resolution","minResolution","maxResolution","zoom","minZoom","maxZoom"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\layer\\Layer.js"],"sourcesContent":["/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\n *     'change:source', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|'change:source'|\n *     import(\"../render/EventType\").LayerRenderEventTypes, Return>} LayerOnSignature\n */\n\n/**\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {SourceType} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer~Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default|null} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer Layer.\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {boolean} visible Visible.\n * @property {boolean} managed Managed.\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\n * @property {number} zIndex ZIndex.\n * @property {number} maxResolution Maximum resolution.\n * @property {number} minResolution Minimum resolution.\n * @property {number} minZoom Minimum zoom.\n * @property {number} maxZoom Maximum zoom.\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link import(\"../PluggableMap.js\").default#addLayer map.addLayer()}. Components\n * like {@link module:ol/interaction/Draw~Draw} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link import(\"../PluggableMap.js\").default#forEachLayerAtPixel map.forEachLayerAtPixel()} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} [SourceType=import(\"../source/Source.js\").default]\n * @template {import(\"../renderer/Layer.js\").default} [RendererType=import(\"../renderer/Layer.js\").default]\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options<SourceType>} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {LayerOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {LayerOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {RendererType}\n     */\n    this.renderer_ = null;\n\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.rendered = false;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addChangeListener(\n      LayerProperty.SOURCE,\n      this.handleSourcePropertyChange_\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>} [opt_array] Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(opt_array) {\n    const array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>} [opt_states] Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(opt_states) {\n    const states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType|null} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {SourceType|null} The source being rendered.\n   */\n  getRenderSource() {\n    return this.getSource();\n  }\n\n  /**\n   * @return {import(\"../source/Source.js\").State} Source state.\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? 'undefined' : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this\n      );\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    if (!this.renderer_) {\n      return new Promise((resolve) => resolve([]));\n    }\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\n   */\n  getData(pixel) {\n    if (!this.renderer_ || !this.rendered) {\n      return null;\n    }\n    return this.renderer_.getData(pixel);\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      this.rendered = true;\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  }\n\n  /**\n   * Called when a layer is not visible during a map render.\n   */\n  unrender() {\n    this.rendered = false;\n  }\n\n  /**\n   * For use inside the library only.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   */\n  setMapInternal(map) {\n    if (!map) {\n      this.unrender();\n    }\n    this.set(LayerProperty.MAP, map);\n  }\n\n  /**\n   * For use inside the library only.\n   * @return {import(\"../PluggableMap.js\").default|null} Map.\n   */\n  getMapInternal() {\n    return this.get(LayerProperty.MAP);\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map~Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map~Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        function (evt) {\n          const renderEvent =\n            /** @type {import(\"../render/Event.js\").default} */ (evt);\n          const layerStatesArray = renderEvent.frameState.layerStatesArray;\n          const layerState = this.getLayerState(false);\n          // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n          assert(\n            !layerStatesArray.some(function (arrayLayerState) {\n              return arrayLayerState.layer === layerState.layer;\n            }),\n            67\n          );\n          layerStatesArray.push(layerState);\n        },\n        this\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType|null} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {RendererType|null} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {RendererType} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.renderer_) {\n      this.renderer_.dispose();\n      delete this.renderer_;\n    }\n\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}