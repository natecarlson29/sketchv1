{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\map-actions\\\\Clone.jsx\";\nimport React from 'react';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Clone = ({\n  selectedFeature,\n  vectorSourceRef,\n  setSelectedFeature,\n  addHistoryAction,\n  mapRef\n}) => {\n  const handleClone = () => {\n    if (!selectedFeature) return;\n    const geom = selectedFeature.getGeometry();\n    let coords,\n      width = 0,\n      newCoords;\n    if (geom.getType() === 'Polygon') {\n      coords = geom.getCoordinates()[0];\n      // Calculate width as the difference between max and min x\n      const xs = coords.map(c => c[0]);\n      width = Math.max(...xs) - Math.min(...xs);\n      // Offset all x by width\n      newCoords = [coords.map(([x, y]) => [x + width, y])];\n      const newFeature = new Feature(new Polygon(newCoords));\n      newFeature.setId(Date.now().toString());\n      vectorSourceRef.current.addFeature(newFeature);\n      mapRef.current.createSegmentOverlays(newFeature, mapRef);\n      setSelectedFeature(newFeature);\n      addHistoryAction({\n        type: 'clone-feature',\n        featureId: newFeature.getId(),\n        prevCoords: [],\n        newCoords: newCoords\n      });\n    } else if (geom.getType() === 'LineString') {\n      coords = geom.getCoordinates();\n      const xs = coords.map(c => c[0]);\n      width = Math.max(...xs) - Math.min(...xs);\n      newCoords = coords.map(([x, y]) => [x + width, y]);\n      const newFeature = new Feature(new LineString(newCoords));\n      newFeature.setId(Date.now().toString());\n      vectorSourceRef.current.addFeature(newFeature);\n      mapRef.current.createSegmentOverlays(newFeature, mapRef);\n      setSelectedFeature(newFeature);\n      addHistoryAction({\n        type: 'clone-feature',\n        featureId: newFeature.getId(),\n        prevCoords: [],\n        newCoords: newCoords\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-button\",\n    onClick: handleClone,\n    title: \"Clone selected geometry\",\n    children: \"Clone\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_c = Clone;\nexport default Clone;\nvar _c;\n$RefreshReg$(_c, \"Clone\");","map":{"version":3,"names":["React","Feature","Polygon","LineString","jsxDEV","_jsxDEV","Clone","selectedFeature","vectorSourceRef","setSelectedFeature","addHistoryAction","mapRef","handleClone","geom","getGeometry","coords","width","newCoords","getType","getCoordinates","xs","map","c","Math","max","min","x","y","newFeature","setId","Date","now","toString","current","addFeature","createSegmentOverlays","type","featureId","getId","prevCoords","className","onClick","title","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/map-actions/Clone.jsx"],"sourcesContent":["import React from 'react';\r\nimport Feature from 'ol/Feature';\r\nimport Polygon from 'ol/geom/Polygon';\r\nimport LineString from 'ol/geom/LineString';\r\n\r\nconst Clone = ({ selectedFeature, vectorSourceRef, setSelectedFeature, addHistoryAction, mapRef }) => {\r\n  const handleClone = () => {\r\n    if (!selectedFeature) return;\r\n\r\n    const geom = selectedFeature.getGeometry();\r\n    let coords, width = 0, newCoords;\r\n\r\n    if (geom.getType() === 'Polygon') {\r\n      coords = geom.getCoordinates()[0];\r\n      // Calculate width as the difference between max and min x\r\n      const xs = coords.map(c => c[0]);\r\n      width = Math.max(...xs) - Math.min(...xs);\r\n      // Offset all x by width\r\n      newCoords = [coords.map(([x, y]) => [x + width, y])];\r\n      const newFeature = new Feature(new Polygon(newCoords));\r\n      newFeature.setId(Date.now().toString());\r\n      vectorSourceRef.current.addFeature(newFeature);\r\n      mapRef.current.createSegmentOverlays(newFeature, mapRef);\r\n      setSelectedFeature(newFeature);\r\n      addHistoryAction({\r\n        type: 'clone-feature',\r\n        featureId: newFeature.getId(),\r\n        prevCoords: [],\r\n        newCoords: newCoords,\r\n      });\r\n    } else if (geom.getType() === 'LineString') {\r\n      coords = geom.getCoordinates();\r\n      const xs = coords.map(c => c[0]);\r\n      width = Math.max(...xs) - Math.min(...xs);\r\n      newCoords = coords.map(([x, y]) => [x + width, y]);\r\n      const newFeature = new Feature(new LineString(newCoords));\r\n      newFeature.setId(Date.now().toString());\r\n      vectorSourceRef.current.addFeature(newFeature);\r\n      mapRef.current.createSegmentOverlays(newFeature, mapRef);\r\n      setSelectedFeature(newFeature);\r\n      addHistoryAction({\r\n        type: 'clone-feature',\r\n        featureId: newFeature.getId(),\r\n        prevCoords: [],\r\n        newCoords: newCoords,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"map-button\" onClick={handleClone} title=\"Clone selected geometry\">\r\n      Clone\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Clone;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}