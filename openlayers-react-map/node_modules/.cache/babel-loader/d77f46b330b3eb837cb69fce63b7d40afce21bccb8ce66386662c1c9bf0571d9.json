{"ast":null,"code":"import Style from'ol/style/Style';import CircleStyle from'ol/style/Circle';import Fill from'ol/style/Fill';import Stroke from'ol/style/Stroke';import Point from'ol/geom/Point';// Generalized style function for polygons and linestrings with custom colors\nfunction shapeWithVerticesStyle(options){// options: { strokeColor, fillColor, vertexColor, strokeWidth, lineDash }\nreturn function(feature){const styles=[];const geom=feature.getGeometry();const type=geom.getType();// Main geometry style\nstyles.push(new Style({stroke:new Stroke({color:options.strokeColor,width:options.strokeWidth||3,lineDash:options.lineDash||undefined}),fill:type==='Polygon'?new Fill({color:options.fillColor}):undefined}));// Vertex dots\nlet coords=[];if(type==='Polygon'){coords=geom.getCoordinates()[0];}else if(type==='LineString'){coords=geom.getCoordinates();}coords.forEach(coord=>{styles.push(new Style({geometry:new Point(coord),image:new CircleStyle({radius:6,fill:new Fill({color:options.vertexColor}),stroke:new Stroke({color:'white',width:2})})}));});return styles;};}// Blue for normal polygons/lines\nexport const polygonStyle=shapeWithVerticesStyle({strokeColor:'blue',fillColor:'rgba(30, 144, 255, 0.1)',vertexColor:'blue',strokeWidth:3});// Orange for active polygons/lines\nexport const activePolygonStyle=shapeWithVerticesStyle({strokeColor:'orange',fillColor:'rgba(255, 165, 0, 0.1)',vertexColor:'orange',strokeWidth:3});// Limegreen for selected polygons/lines\nexport const selectedPolygonStyle=shapeWithVerticesStyle({strokeColor:'limegreen',fillColor:'rgba(50, 205, 50, 0.15)',vertexColor:'limegreen',strokeWidth:3// lineDash: [8, 4],\n});export const ghostMarkerStyle=new Style({image:new CircleStyle({radius:7,fill:new Fill({color:'rgba(0,0,255,0.2)'}),stroke:new Stroke({color:'blue',width:2})})});export const highlightSegmentStyle=new Style({stroke:new Stroke({color:'red',width:4})});export const highlightVertexStyle=new Style({image:new CircleStyle({radius:7,fill:new Fill({color:'red'}),stroke:new Stroke({color:'#fff',width:2})})});export const closingSegmentStyle=new Style({stroke:new Stroke({color:'rgb(26, 26, 26, .6)',width:4,lineDash:[4,8]})});","map":{"version":3,"names":["Style","CircleStyle","Fill","Stroke","Point","shapeWithVerticesStyle","options","feature","styles","geom","getGeometry","type","getType","push","stroke","color","strokeColor","width","strokeWidth","lineDash","undefined","fill","fillColor","coords","getCoordinates","forEach","coord","geometry","image","radius","vertexColor","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","closingSegmentStyle"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/ol-styles.js"],"sourcesContent":["import Style from 'ol/style/Style';\r\nimport CircleStyle from 'ol/style/Circle';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport Point from 'ol/geom/Point';\r\n\r\n// Generalized style function for polygons and linestrings with custom colors\r\nfunction shapeWithVerticesStyle(options) {\r\n  // options: { strokeColor, fillColor, vertexColor, strokeWidth, lineDash }\r\n  return function (feature) {\r\n    const styles = [];\r\n    const geom = feature.getGeometry();\r\n    const type = geom.getType();\r\n    // Main geometry style\r\n    styles.push(\r\n      new Style({\r\n        stroke: new Stroke({\r\n          color: options.strokeColor,\r\n          width: options.strokeWidth || 3,\r\n          lineDash: options.lineDash || undefined,\r\n        }),\r\n        fill: type === 'Polygon'\r\n          ? new Fill({ color: options.fillColor })\r\n          : undefined,\r\n      })\r\n    );\r\n    // Vertex dots\r\n    let coords = [];\r\n    if (type === 'Polygon') {\r\n      coords = geom.getCoordinates()[0];\r\n    } else if (type === 'LineString') {\r\n      coords = geom.getCoordinates();\r\n    }\r\n    coords.forEach(coord => {\r\n      styles.push(\r\n        new Style({\r\n          geometry: new Point(coord),\r\n          image: new CircleStyle({\r\n            radius: 6,\r\n            fill: new Fill({ color: options.vertexColor }),\r\n            stroke: new Stroke({ color: 'white', width: 2 }),\r\n          }),\r\n        })\r\n      );\r\n    });\r\n    return styles;\r\n  };\r\n}\r\n\r\n// Blue for normal polygons/lines\r\nexport const polygonStyle = shapeWithVerticesStyle({\r\n  strokeColor: 'blue',\r\n  fillColor: 'rgba(30, 144, 255, 0.1)',\r\n  vertexColor: 'blue',\r\n  strokeWidth: 3,\r\n});\r\n\r\n// Orange for active polygons/lines\r\nexport const activePolygonStyle = shapeWithVerticesStyle({\r\n  strokeColor: 'orange',\r\n  fillColor: 'rgba(255, 165, 0, 0.1)',\r\n  vertexColor: 'orange',\r\n  strokeWidth: 3,\r\n});\r\n\r\n// Limegreen for selected polygons/lines\r\nexport const selectedPolygonStyle = shapeWithVerticesStyle({\r\n  strokeColor: 'limegreen',\r\n  fillColor: 'rgba(50, 205, 50, 0.15)',\r\n  vertexColor: 'limegreen',\r\n  strokeWidth: 3,\r\n  // lineDash: [8, 4],\r\n});\r\n\r\nexport const ghostMarkerStyle = new Style({\r\n  image: new CircleStyle({\r\n    radius: 7,\r\n    fill: new Fill({ color: 'rgba(0,0,255,0.2)' }),\r\n    stroke: new Stroke({ color: 'blue', width: 2 }),\r\n  }),\r\n});\r\n\r\nexport const highlightSegmentStyle = new Style({\r\n  stroke: new Stroke({\r\n    color: 'red',\r\n    width: 4,\r\n  }),\r\n});\r\n\r\nexport const highlightVertexStyle = new Style({\r\n  image: new CircleStyle({\r\n    radius: 7,\r\n    fill: new Fill({ color: 'red' }),\r\n    stroke: new Stroke({ color: '#fff', width: 2 }),\r\n  }),\r\n});\r\n\r\nexport const closingSegmentStyle = new Style({\r\n  stroke: new Stroke({\r\n    color: 'rgb(26, 26, 26, .6)',\r\n    width: 4,\r\n    lineDash: [4, 8]\r\n  }),\r\n});"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}