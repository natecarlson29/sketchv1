{"ast":null,"code":"/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport { DEVICE_PIXEL_RATIO } from './has.js';\nimport { apply as applyTransform, create as createTransform, multiply as multiplyTransform, scale as scaleTransform } from './transform.js';\nimport { getSquaredTolerance } from './renderer/vector.js';\nimport { getTransformFromProjections, getUserProjection } from './proj.js';\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature~Feature} or\n * {@link module:ol/render/Feature~RenderFeature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [opt_options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, opt_options) {\n  var canvas = context.canvas;\n  var options = opt_options ? opt_options : {};\n  var pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  var size = options.size;\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n  var extent = [0, 0, canvas.width, canvas.height];\n  var transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n  if (!(event.context instanceof CanvasRenderingContext2D)) {\n    throw new Error('Only works for render events from Canvas 2D layers');\n  }\n  // canvas may be at a different pixel ratio than frameState.pixelRatio\n  var canvasPixelRatio = event.inversePixelTransform[0];\n  var frameState = event.frameState;\n  var transform = multiplyTransform(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);\n  var squaredTolerance = getSquaredTolerance(frameState.viewState.resolution, canvasPixelRatio);\n  var userTransform;\n  var userProjection = getUserProjection();\n  if (userProjection) {\n    userTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n  }\n  return new CanvasImmediateRenderer(event.context, canvasPixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);\n}\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n  return applyTransform(event.inversePixelTransform, pixel.slice(0));\n}","map":{"version":3,"names":["CanvasImmediateRenderer","DEVICE_PIXEL_RATIO","apply","applyTransform","create","createTransform","multiply","multiplyTransform","scale","scaleTransform","getSquaredTolerance","getTransformFromProjections","getUserProjection","toContext","context","opt_options","canvas","options","pixelRatio","size","width","height","style","extent","transform","getVectorContext","event","CanvasRenderingContext2D","Error","canvasPixelRatio","inversePixelTransform","frameState","slice","coordinateToPixelTransform","squaredTolerance","viewState","resolution","userTransform","userProjection","projection","rotation","getRenderPixel","pixel"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\render.js"],"sourcesContent":["/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport {DEVICE_PIXEL_RATIO} from './has.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  multiply as multiplyTransform,\n  scale as scaleTransform,\n} from './transform.js';\nimport {getSquaredTolerance} from './renderer/vector.js';\nimport {getTransformFromProjections, getUserProjection} from './proj.js';\n\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature Feature.\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry Geometry.\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature~Feature} or\n * {@link module:ol/render/Feature~RenderFeature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions} [opt_options] Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, opt_options) {\n  const canvas = context.canvas;\n  const options = opt_options ? opt_options : {};\n  const pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  const size = options.size;\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n  const extent = [0, 0, canvas.width, canvas.height];\n  const transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @return {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n  if (!(event.context instanceof CanvasRenderingContext2D)) {\n    throw new Error('Only works for render events from Canvas 2D layers');\n  }\n\n  // canvas may be at a different pixel ratio than frameState.pixelRatio\n  const canvasPixelRatio = event.inversePixelTransform[0];\n  const frameState = event.frameState;\n  const transform = multiplyTransform(\n    event.inversePixelTransform.slice(),\n    frameState.coordinateToPixelTransform\n  );\n  const squaredTolerance = getSquaredTolerance(\n    frameState.viewState.resolution,\n    canvasPixelRatio\n  );\n  let userTransform;\n  const userProjection = getUserProjection();\n  if (userProjection) {\n    userTransform = getTransformFromProjections(\n      userProjection,\n      frameState.viewState.projection\n    );\n  }\n\n  return new CanvasImmediateRenderer(\n    event.context,\n    canvasPixelRatio,\n    frameState.extent,\n    transform,\n    frameState.viewState.rotation,\n    squaredTolerance,\n    userTransform\n  );\n}\n\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @return {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n  return applyTransform(event.inversePixelTransform, pixel.slice(0));\n}\n"],"mappings":"AAAA;;;AAGA,OAAOA,uBAAuB,MAAM,8BAA8B;AAClE,SAAQC,kBAAkB,QAAO,UAAU;AAC3C,SACEC,KAAK,IAAIC,cAAc,EACvBC,MAAM,IAAIC,eAAe,EACzBC,QAAQ,IAAIC,iBAAiB,EAC7BC,KAAK,IAAIC,cAAc,QAClB,gBAAgB;AACvB,SAAQC,mBAAmB,QAAO,sBAAsB;AACxD,SAAQC,2BAA2B,EAAEC,iBAAiB,QAAO,WAAW;AAExE;;;;;;;;;;AAWA;;;;;;;AAQA;;;;;;;;;AAUA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAM,SAAUC,SAASA,CAACC,OAAO,EAAEC,WAAW;EAC5C,IAAMC,MAAM,GAAGF,OAAO,CAACE,MAAM;EAC7B,IAAMC,OAAO,GAAGF,WAAW,GAAGA,WAAW,GAAG,EAAE;EAC9C,IAAMG,UAAU,GAAGD,OAAO,CAACC,UAAU,IAAIjB,kBAAkB;EAC3D,IAAMkB,IAAI,GAAGF,OAAO,CAACE,IAAI;EACzB,IAAIA,IAAI,EAAE;IACRH,MAAM,CAACI,KAAK,GAAGD,IAAI,CAAC,CAAC,CAAC,GAAGD,UAAU;IACnCF,MAAM,CAACK,MAAM,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAGD,UAAU;IACpCF,MAAM,CAACM,KAAK,CAACF,KAAK,GAAGD,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;IACnCH,MAAM,CAACM,KAAK,CAACD,MAAM,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;;EAEtC,IAAMI,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAEP,MAAM,CAACI,KAAK,EAAEJ,MAAM,CAACK,MAAM,CAAC;EAClD,IAAMG,SAAS,GAAGf,cAAc,CAACJ,eAAe,EAAE,EAAEa,UAAU,EAAEA,UAAU,CAAC;EAC3E,OAAO,IAAIlB,uBAAuB,CAACc,OAAO,EAAEI,UAAU,EAAEK,MAAM,EAAEC,SAAS,EAAE,CAAC,CAAC;AAC/E;AAEA;;;;;;AAMA,OAAM,SAAUC,gBAAgBA,CAACC,KAAK;EACpC,IAAI,EAAEA,KAAK,CAACZ,OAAO,YAAYa,wBAAwB,CAAC,EAAE;IACxD,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;;EAGvE;EACA,IAAMC,gBAAgB,GAAGH,KAAK,CAACI,qBAAqB,CAAC,CAAC,CAAC;EACvD,IAAMC,UAAU,GAAGL,KAAK,CAACK,UAAU;EACnC,IAAMP,SAAS,GAAGjB,iBAAiB,CACjCmB,KAAK,CAACI,qBAAqB,CAACE,KAAK,EAAE,EACnCD,UAAU,CAACE,0BAA0B,CACtC;EACD,IAAMC,gBAAgB,GAAGxB,mBAAmB,CAC1CqB,UAAU,CAACI,SAAS,CAACC,UAAU,EAC/BP,gBAAgB,CACjB;EACD,IAAIQ,aAAa;EACjB,IAAMC,cAAc,GAAG1B,iBAAiB,EAAE;EAC1C,IAAI0B,cAAc,EAAE;IAClBD,aAAa,GAAG1B,2BAA2B,CACzC2B,cAAc,EACdP,UAAU,CAACI,SAAS,CAACI,UAAU,CAChC;;EAGH,OAAO,IAAIvC,uBAAuB,CAChC0B,KAAK,CAACZ,OAAO,EACbe,gBAAgB,EAChBE,UAAU,CAACR,MAAM,EACjBC,SAAS,EACTO,UAAU,CAACI,SAAS,CAACK,QAAQ,EAC7BN,gBAAgB,EAChBG,aAAa,CACd;AACH;AAEA;;;;;;;;AAQA,OAAM,SAAUI,cAAcA,CAACf,KAAK,EAAEgB,KAAK;EACzC,OAAOvC,cAAc,CAACuB,KAAK,CAACI,qBAAqB,EAAEY,KAAK,CAACV,KAAK,CAAC,CAAC,CAAC,CAAC;AACpE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}