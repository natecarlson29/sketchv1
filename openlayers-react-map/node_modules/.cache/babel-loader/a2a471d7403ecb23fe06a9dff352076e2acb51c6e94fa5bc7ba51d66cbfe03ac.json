{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport History from './map-helpers/History';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, remarkPolygonSegments, remarkLineSegments } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 2.018;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n  }\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = feature => remarkPolygonSegments(feature, mapRef);\n\n    // Expose remarkLineSegments for use in handlers\n    mapRef.current.remarkLineSegments = feature => remarkLineSegments(feature, mapRef);\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else if (modeRef.current === 'select') {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) {\n                // 8 pixels tolerance\n                const segFeature = new Feature(new LineString(seg));\n                highlightSource.addFeature(segFeature);\n                found = true;\n                break;\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        // Track action in history\n        console.log({\n          FeatureId: feature.getId()\n        });\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]]\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n      }\n    }\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Find the index of the currently selected feature in the features array\n      let currentIdx = -1;\n      if (selectedFeature) {\n        currentIdx = features.findIndex(f => f === selectedFeature);\n      }\n\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n\n      // Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\n      allPolygons.forEach(f => {\n        f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      });\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n\n        // Undo for deleting a segment (LineString -> Polygon)\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString');\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            createSegmentOverlays(newPoly, [prevCoords], mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Undo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.prevCoords], mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, [prevCoords], mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      let lastRedoAction = null;\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastRedoAction = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n\n        // Redo for deleting a segment (Polygon -> LineString)\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for add-point and delete-vertex\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, [newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n        }\n      }\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 532,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 498,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"aF1M5fUztgVFNkDElQ2hAESaCqU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Select","fromLonLat","ScaleLine","FlipHorizButton","FlipVertButton","RightClick","History","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","clearPolygonOverlays","createSegmentOverlays","remarkPolygonSegments","remarkLineSegments","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","addHistoryAction","action","prev","current","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","addControl","units","highlightSource","highlightLayer","addLayer","on","evt","coord","coordinate","removeFeature","ghost","setStyle","addFeature","clear","found","forEachFeatureAtPixel","pixel","layer","getGeometry","getType","coords","getCoordinates","i","length","seg","pixel1","getPixelFromCoordinate","pixel2","dist","pointToSegmentDistance","segFeature","LineString","drawClick","poly","setId","Date","now","toString","console","log","FeatureId","getId","featureId","prevCoords","newCoords","slice","setCoordinates","selectClick","features","getFeaturesAtPixel","allPolygons","getFeatures","forEach","f","currentIdx","findIndex","nextIdx","nextFeature","addSegment","direction","last","dx","dy","OFFSET","newPt","handleUndo","lastActionForRedo","lastAction","find","lineFeature","newPoly","redoPrev","handleRedo","lastRedoAction","require","default","histPrev","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","document","addEventListener","overlay","removeOverlay","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","children","id","ref","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport History from './map-helpers/History';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  remarkPolygonSegments,\n  remarkLineSegments\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 2.018;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n  }\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = (feature) => remarkPolygonSegments(feature, mapRef);\n\n    // Expose remarkLineSegments for use in handlers\n    mapRef.current.remarkLineSegments = (feature) => remarkLineSegments(feature, mapRef);\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else if (modeRef.current === 'select') {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance\n                const segFeature = new Feature(new LineString(seg));\n                highlightSource.addFeature(segFeature);\n                found = true;\n                break;\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        // Track action in history\n        console.log({ FeatureId: feature.getId() });\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]],\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n      }\n    }\n\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Find the index of the currently selected feature in the features array\n      let currentIdx = -1;\n      if (selectedFeature) {\n        currentIdx = features.findIndex(f => f === selectedFeature);\n      }\n\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n\n      // Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\n      allPolygons.forEach(f => {\n        f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      });\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        // Undo for deleting a segment (LineString -> Polygon)\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n          );\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            createSegmentOverlays(newPoly, [prevCoords], mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Undo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.prevCoords], mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, [prevCoords], mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      let lastRedoAction = null;\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastRedoAction = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        // Redo for deleting a segment (Polygon -> LineString)\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for add-point and delete-vertex\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, [newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n        }\n      }\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n      />\n      <History history={history} redoStack={redoStack} />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}