{"ast":null,"code":"/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport { toSize } from '../size.js';\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nvar DEFAULT_FILL_COLOR = '#333';\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nvar Text = /** @class */function () {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function Text(opt_options) {\n    var options = opt_options || {};\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.font_ = options.font;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = options.rotation;\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n    this.scale_ = options.scale;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n    this.text_ = options.text;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.textAlign_ = options.textAlign;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.justify_ = options.justify;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.textBaseline_ = options.textBaseline;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : new Fill({\n      color: DEFAULT_FILL_COLOR\n    });\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxAngle_ = options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n    /**\n     * @private\n     * @type {import(\"./TextPlacement.js\").default|string}\n     */\n    this.placement_ = options.placement !== undefined ? options.placement : TextPlacement.POINT;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overflow_ = !!options.overflow;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.backgroundFill_ = options.backgroundFill ? options.backgroundFill : null;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.backgroundStroke_ = options.backgroundStroke ? options.backgroundStroke : null;\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n  Text.prototype.clone = function () {\n    var scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      justify: this.getJustify(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill() ? this.getBackgroundFill().clone() : undefined,\n      backgroundStroke: this.getBackgroundStroke() ? this.getBackgroundStroke().clone() : undefined,\n      padding: this.getPadding() || undefined\n    });\n  };\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n  Text.prototype.getOverflow = function () {\n    return this.overflow_;\n  };\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n  Text.prototype.getFont = function () {\n    return this.font_;\n  };\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n  Text.prototype.getMaxAngle = function () {\n    return this.maxAngle_;\n  };\n  /**\n   * Get the label placement.\n   * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n   * @api\n   */\n  Text.prototype.getPlacement = function () {\n    return this.placement_;\n  };\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n  Text.prototype.getOffsetX = function () {\n    return this.offsetX_;\n  };\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n  Text.prototype.getOffsetY = function () {\n    return this.offsetY_;\n  };\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  Text.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n  Text.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n  Text.prototype.getRotation = function () {\n    return this.rotation_;\n  };\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n  Text.prototype.getScale = function () {\n    return this.scale_;\n  };\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  Text.prototype.getScaleArray = function () {\n    return this.scaleArray_;\n  };\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  Text.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */\n  Text.prototype.getText = function () {\n    return this.text_;\n  };\n  /**\n   * Get the text alignment.\n   * @return {string|undefined} Text align.\n   * @api\n   */\n  Text.prototype.getTextAlign = function () {\n    return this.textAlign_;\n  };\n  /**\n   * Get the justification.\n   * @return {string|undefined} Justification.\n   * @api\n   */\n  Text.prototype.getJustify = function () {\n    return this.justify_;\n  };\n  /**\n   * Get the text baseline.\n   * @return {string|undefined} Text baseline.\n   * @api\n   */\n  Text.prototype.getTextBaseline = function () {\n    return this.textBaseline_;\n  };\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  Text.prototype.getBackgroundFill = function () {\n    return this.backgroundFill_;\n  };\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  Text.prototype.getBackgroundStroke = function () {\n    return this.backgroundStroke_;\n  };\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */\n  Text.prototype.getPadding = function () {\n    return this.padding_;\n  };\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n  Text.prototype.setOverflow = function (overflow) {\n    this.overflow_ = overflow;\n  };\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n  Text.prototype.setFont = function (font) {\n    this.font_ = font;\n  };\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n  Text.prototype.setMaxAngle = function (maxAngle) {\n    this.maxAngle_ = maxAngle;\n  };\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n  Text.prototype.setOffsetX = function (offsetX) {\n    this.offsetX_ = offsetX;\n  };\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n  Text.prototype.setOffsetY = function (offsetY) {\n    this.offsetY_ = offsetY;\n  };\n  /**\n   * Set the text placement.\n   *\n   * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n   * @api\n   */\n  Text.prototype.setPlacement = function (placement) {\n    this.placement_ = placement;\n  };\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  Text.prototype.setRotateWithView = function (rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  };\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  Text.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n  };\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n  Text.prototype.setRotation = function (rotation) {\n    this.rotation_ = rotation;\n  };\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n  Text.prototype.setScale = function (scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  };\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  Text.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n  };\n  /**\n   * Set the text.\n   *\n   * @param {string|Array<string>|undefined} text Text.\n   * @api\n   */\n  Text.prototype.setText = function (text) {\n    this.text_ = text;\n  };\n  /**\n   * Set the text alignment.\n   *\n   * @param {string|undefined} textAlign Text align.\n   * @api\n   */\n  Text.prototype.setTextAlign = function (textAlign) {\n    this.textAlign_ = textAlign;\n  };\n  /**\n   * Set the justification.\n   *\n   * @param {string|undefined} justify Justification.\n   * @api\n   */\n  Text.prototype.setJustify = function (justify) {\n    this.justify_ = justify;\n  };\n  /**\n   * Set the text baseline.\n   *\n   * @param {string|undefined} textBaseline Text baseline.\n   * @api\n   */\n  Text.prototype.setTextBaseline = function (textBaseline) {\n    this.textBaseline_ = textBaseline;\n  };\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  Text.prototype.setBackgroundFill = function (fill) {\n    this.backgroundFill_ = fill;\n  };\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  Text.prototype.setBackgroundStroke = function (stroke) {\n    this.backgroundStroke_ = stroke;\n  };\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */\n  Text.prototype.setPadding = function (padding) {\n    this.padding_ = padding;\n  };\n  return Text;\n}();\nexport default Text;","map":{"version":3,"names":["Fill","TextPlacement","toSize","DEFAULT_FILL_COLOR","Text","opt_options","options","font_","font","rotation_","rotation","rotateWithView_","rotateWithView","scale_","scale","scaleArray_","undefined","text_","text","textAlign_","textAlign","justify_","justify","textBaseline_","textBaseline","fill_","fill","color","maxAngle_","maxAngle","Math","PI","placement_","placement","POINT","overflow_","overflow","stroke_","stroke","offsetX_","offsetX","offsetY_","offsetY","backgroundFill_","backgroundFill","backgroundStroke_","backgroundStroke","padding_","padding","prototype","clone","getScale","getFont","getPlacement","getMaxAngle","getOverflow","getRotation","getRotateWithView","Array","isArray","slice","getText","getTextAlign","getJustify","getTextBaseline","getFill","getStroke","getOffsetX","getOffsetY","getBackgroundFill","getBackgroundStroke","getPadding","getScaleArray","setOverflow","setFont","setMaxAngle","setOffsetX","setOffsetY","setPlacement","setRotateWithView","setFill","setRotation","setScale","setStroke","setText","setTextAlign","setJustify","setTextBaseline","setBackgroundFill","setBackgroundStroke","setPadding"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\style\\Text.js"],"sourcesContent":["/**\n * @module ol/style/Text\n */\nimport Fill from './Fill.js';\nimport TextPlacement from './TextPlacement.js';\nimport {toSize} from '../size.js';\n\n/**\n * The default fill color to use if no fill was set at construction time; a\n * blackish `#333`.\n *\n * @const {string}\n */\nconst DEFAULT_FILL_COLOR = '#333';\n\n/**\n * @typedef {Object} Options\n * @property {string} [font] Font style as CSS 'font' value, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/font. Default is '10px sans-serif'\n * @property {number} [maxAngle=Math.PI/4] When `placement` is set to `'line'`, allow a maximum angle between adjacent characters.\n * The expected value is in radians, and the default is 45Â° (`Math.PI / 4`).\n * @property {number} [offsetX=0] Horizontal text offset in pixels. A positive will shift the text right.\n * @property {number} [offsetY=0] Vertical text offset in pixels. A positive will shift the text down.\n * @property {boolean} [overflow=false] For polygon labels or when `placement` is set to `'line'`, allow text to exceed\n * the width of the polygon at the label position or the length of the path that it follows.\n * @property {import(\"./TextPlacement.js\").default|string} [placement='point'] Text placement.\n * @property {number|import(\"../size.js\").Size} [scale] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the text with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {string|Array<string>} [text] Text content or rich text content. For plain text provide a string, which can\n * contain line breaks (`\\n`). For rich text provide an array of text/font tuples. A tuple consists of the text to\n * render and the font to use (or `''` to use the text style's font). A line break has to be a separate tuple (i.e. `'\\n', ''`).\n * **Example:** `['foo', 'bold 10px sans-serif', ' bar', 'italic 10px sans-serif', ' baz', '']` will yield \"**foo** *bar* baz\".\n * **Note:** Rich text is not supported for the immediate rendering API.\n * @property {string} [textAlign] Text alignment. Possible values: 'left', 'right', 'center', 'end' or 'start'.\n * Default is 'center' for `placement: 'point'`. For `placement: 'line'`, the default is to let the renderer choose a\n * placement where `maxAngle` is not exceeded.\n * @property {string} [justify] Text justification within the text box.\n * If not set, text is justified towards the `textAlign` anchor.\n * Otherwise, use options `'left'`, `'center'`, or `'right'` to justify the text within the text box.\n * **Note:** `justify` is ignored for immediate rendering and also for `placement: 'line'`.\n * @property {string} [textBaseline='middle'] Text base line. Possible values: 'bottom', 'top', 'middle', 'alphabetic',\n * 'hanging', 'ideographic'.\n * @property {import(\"./Fill.js\").default} [fill] Fill style. If none is provided, we'll use a dark fill-style (#333).\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {import(\"./Fill.js\").default} [backgroundFill] Fill style for the text background when `placement` is\n * `'point'`. Default is no fill.\n * @property {import(\"./Stroke.js\").default} [backgroundStroke] Stroke style for the text background  when `placement`\n * is `'point'`. Default is no stroke.\n * @property {Array<number>} [padding=[0, 0, 0, 0]] Padding in pixels around the text for decluttering and background. The order of\n * values in the array is `[top, right, bottom, left]`.\n */\n\n/**\n * @classdesc\n * Set text style for vector features.\n * @api\n */\nclass Text {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.font_ = options.font;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size|undefined}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale !== undefined ? options.scale : 1);\n\n    /**\n     * @private\n     * @type {string|Array<string>|undefined}\n     */\n    this.text_ = options.text;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.textAlign_ = options.textAlign;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.justify_ = options.justify;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.textBaseline_ = options.textBaseline;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ =\n      options.fill !== undefined\n        ? options.fill\n        : new Fill({color: DEFAULT_FILL_COLOR});\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxAngle_ =\n      options.maxAngle !== undefined ? options.maxAngle : Math.PI / 4;\n\n    /**\n     * @private\n     * @type {import(\"./TextPlacement.js\").default|string}\n     */\n    this.placement_ =\n      options.placement !== undefined ? options.placement : TextPlacement.POINT;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overflow_ = !!options.overflow;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetX_ = options.offsetX !== undefined ? options.offsetX : 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.offsetY_ = options.offsetY !== undefined ? options.offsetY : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.backgroundFill_ = options.backgroundFill\n      ? options.backgroundFill\n      : null;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.backgroundStroke_ = options.backgroundStroke\n      ? options.backgroundStroke\n      : null;\n\n    /**\n     * @private\n     * @type {Array<number>|null}\n     */\n    this.padding_ = options.padding === undefined ? null : options.padding;\n  }\n\n  /**\n   * Clones the style.\n   * @return {Text} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new Text({\n      font: this.getFont(),\n      placement: this.getPlacement(),\n      maxAngle: this.getMaxAngle(),\n      overflow: this.getOverflow(),\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      text: this.getText(),\n      textAlign: this.getTextAlign(),\n      justify: this.getJustify(),\n      textBaseline: this.getTextBaseline(),\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      offsetX: this.getOffsetX(),\n      offsetY: this.getOffsetY(),\n      backgroundFill: this.getBackgroundFill()\n        ? this.getBackgroundFill().clone()\n        : undefined,\n      backgroundStroke: this.getBackgroundStroke()\n        ? this.getBackgroundStroke().clone()\n        : undefined,\n      padding: this.getPadding() || undefined,\n    });\n  }\n\n  /**\n   * Get the `overflow` configuration.\n   * @return {boolean} Let text overflow the length of the path they follow.\n   * @api\n   */\n  getOverflow() {\n    return this.overflow_;\n  }\n\n  /**\n   * Get the font name.\n   * @return {string|undefined} Font.\n   * @api\n   */\n  getFont() {\n    return this.font_;\n  }\n\n  /**\n   * Get the maximum angle between adjacent characters.\n   * @return {number} Angle in radians.\n   * @api\n   */\n  getMaxAngle() {\n    return this.maxAngle_;\n  }\n\n  /**\n   * Get the label placement.\n   * @return {import(\"./TextPlacement.js\").default|string} Text placement.\n   * @api\n   */\n  getPlacement() {\n    return this.placement_;\n  }\n\n  /**\n   * Get the x-offset for the text.\n   * @return {number} Horizontal text offset.\n   * @api\n   */\n  getOffsetX() {\n    return this.offsetX_;\n  }\n\n  /**\n   * Get the y-offset for the text.\n   * @return {number} Vertical text offset.\n   * @api\n   */\n  getOffsetY() {\n    return this.offsetY_;\n  }\n\n  /**\n   * Get the fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Determine whether the text rotates with the map.\n   * @return {boolean|undefined} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the text rotation.\n   * @return {number|undefined} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the text scale.\n   * @return {number|import(\"../size.js\").Size|undefined} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Get the text to be rendered.\n   * @return {string|Array<string>|undefined} Text.\n   * @api\n   */\n  getText() {\n    return this.text_;\n  }\n\n  /**\n   * Get the text alignment.\n   * @return {string|undefined} Text align.\n   * @api\n   */\n  getTextAlign() {\n    return this.textAlign_;\n  }\n\n  /**\n   * Get the justification.\n   * @return {string|undefined} Justification.\n   * @api\n   */\n  getJustify() {\n    return this.justify_;\n  }\n\n  /**\n   * Get the text baseline.\n   * @return {string|undefined} Text baseline.\n   * @api\n   */\n  getTextBaseline() {\n    return this.textBaseline_;\n  }\n\n  /**\n   * Get the background fill style for the text.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getBackgroundFill() {\n    return this.backgroundFill_;\n  }\n\n  /**\n   * Get the background stroke style for the text.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getBackgroundStroke() {\n    return this.backgroundStroke_;\n  }\n\n  /**\n   * Get the padding for the text.\n   * @return {Array<number>|null} Padding.\n   * @api\n   */\n  getPadding() {\n    return this.padding_;\n  }\n\n  /**\n   * Set the `overflow` property.\n   *\n   * @param {boolean} overflow Let text overflow the path that it follows.\n   * @api\n   */\n  setOverflow(overflow) {\n    this.overflow_ = overflow;\n  }\n\n  /**\n   * Set the font.\n   *\n   * @param {string|undefined} font Font.\n   * @api\n   */\n  setFont(font) {\n    this.font_ = font;\n  }\n\n  /**\n   * Set the maximum angle between adjacent characters.\n   *\n   * @param {number} maxAngle Angle in radians.\n   * @api\n   */\n  setMaxAngle(maxAngle) {\n    this.maxAngle_ = maxAngle;\n  }\n\n  /**\n   * Set the x offset.\n   *\n   * @param {number} offsetX Horizontal text offset.\n   * @api\n   */\n  setOffsetX(offsetX) {\n    this.offsetX_ = offsetX;\n  }\n\n  /**\n   * Set the y offset.\n   *\n   * @param {number} offsetY Vertical text offset.\n   * @api\n   */\n  setOffsetY(offsetY) {\n    this.offsetY_ = offsetY;\n  }\n\n  /**\n   * Set the text placement.\n   *\n   * @param {import(\"./TextPlacement.js\").default|string} placement Placement.\n   * @api\n   */\n  setPlacement(placement) {\n    this.placement_ = placement;\n  }\n\n  /**\n   * Set whether to rotate the text with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number|undefined} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size|undefined} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale !== undefined ? scale : 1);\n  }\n\n  /**\n   * Set the stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n  }\n\n  /**\n   * Set the text.\n   *\n   * @param {string|Array<string>|undefined} text Text.\n   * @api\n   */\n  setText(text) {\n    this.text_ = text;\n  }\n\n  /**\n   * Set the text alignment.\n   *\n   * @param {string|undefined} textAlign Text align.\n   * @api\n   */\n  setTextAlign(textAlign) {\n    this.textAlign_ = textAlign;\n  }\n\n  /**\n   * Set the justification.\n   *\n   * @param {string|undefined} justify Justification.\n   * @api\n   */\n  setJustify(justify) {\n    this.justify_ = justify;\n  }\n\n  /**\n   * Set the text baseline.\n   *\n   * @param {string|undefined} textBaseline Text baseline.\n   * @api\n   */\n  setTextBaseline(textBaseline) {\n    this.textBaseline_ = textBaseline;\n  }\n\n  /**\n   * Set the background fill.\n   *\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setBackgroundFill(fill) {\n    this.backgroundFill_ = fill;\n  }\n\n  /**\n   * Set the background stroke.\n   *\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setBackgroundStroke(stroke) {\n    this.backgroundStroke_ = stroke;\n  }\n\n  /**\n   * Set the padding (`[top, right, bottom, left]`).\n   *\n   * @param {Array<number>|null} padding Padding.\n   * @api\n   */\n  setPadding(padding) {\n    this.padding_ = padding;\n  }\n}\n\nexport default Text;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}