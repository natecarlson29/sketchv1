{"ast":null,"code":"/**\n * @module ol/geom/flat/orient\n */\nimport { coordinates as reverseCoordinates } from './reverse.js';\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  var edge = 0;\n  var x1 = flatCoordinates[end - stride];\n  var y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n    if (i === 0) {\n      if (right && isClockwise || !right && !isClockwise) {\n        return false;\n      }\n    } else {\n      if (right && !isClockwise || !right && isClockwise) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(flatCoordinates, offset, endss, stride, opt_right) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    if (!linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(flatCoordinates, offset, ends, stride, opt_right) {\n  var right = opt_right !== undefined ? opt_right : false;\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    var isClockwise = linearRingIsClockwise(flatCoordinates, offset, end, stride);\n    var reverse = i === 0 ? right && isClockwise || !right && !isClockwise : right && !isClockwise || !right && isClockwise;\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(flatCoordinates, offset, endss, stride, opt_right) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(flatCoordinates, offset, endss[i], stride, opt_right);\n  }\n  return offset;\n}\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to contruct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n  var endss = [];\n  var offset = 0;\n  var prevEndIndex = 0;\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    // classifies an array of rings into polygons with outer rings and holes\n    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n  return endss;\n}","map":{"version":3,"names":["coordinates","reverseCoordinates","linearRingIsClockwise","flatCoordinates","offset","end","stride","edge","x1","y1","x2","y2","undefined","linearRingsAreOriented","ends","opt_right","right","i","ii","length","isClockwise","linearRingssAreOriented","endss","orientLinearRings","reverse","orientLinearRingsArray","inflateEnds","prevEndIndex","push","slice"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\flat\\orient.js"],"sourcesContent":["/**\n * @module ol/geom/flat/orient\n */\nimport {coordinates as reverseCoordinates} from './reverse.js';\n\n/**\n * Is the linear ring oriented clockwise in a coordinate system with a bottom-left\n * coordinate origin? For a coordinate system with a top-left coordinate origin,\n * the ring's orientation is clockwise when this function returns false.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @return {boolean} Is clockwise.\n */\nexport function linearRingIsClockwise(flatCoordinates, offset, end, stride) {\n  // https://stackoverflow.com/q/1165647/clockwise-method#1165943\n  // https://github.com/OSGeo/gdal/blob/master/gdal/ogr/ogrlinearring.cpp\n  let edge = 0;\n  let x1 = flatCoordinates[end - stride];\n  let y1 = flatCoordinates[end - stride + 1];\n  for (; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    edge += (x2 - x1) * (y2 + y1);\n    x1 = x2;\n    y1 = y2;\n  }\n  return edge === 0 ? undefined : edge > 0;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingsAreOriented(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  opt_right\n) {\n  const right = opt_right !== undefined ? opt_right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    if (i === 0) {\n      if ((right && isClockwise) || (!right && !isClockwise)) {\n        return false;\n      }\n    } else {\n      if ((right && !isClockwise) || (!right && isClockwise)) {\n        return false;\n      }\n    }\n    offset = end;\n  }\n  return true;\n}\n\n/**\n * Determines if linear rings are oriented.  By default, left-hand orientation\n * is tested (first ring must be clockwise, remaining rings counter-clockwise).\n * To test for right-hand orientation, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Test for right-hand orientation\n *     (counter-clockwise exterior ring and clockwise interior rings).\n * @return {boolean} Rings are correctly oriented.\n */\nexport function linearRingssAreOriented(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  opt_right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      !linearRingsAreOriented(flatCoordinates, offset, ends, stride, opt_right)\n    ) {\n      return false;\n    }\n    if (ends.length) {\n      offset = ends[ends.length - 1];\n    }\n  }\n  return true;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRings(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  opt_right\n) {\n  const right = opt_right !== undefined ? opt_right : false;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    const isClockwise = linearRingIsClockwise(\n      flatCoordinates,\n      offset,\n      end,\n      stride\n    );\n    const reverse =\n      i === 0\n        ? (right && isClockwise) || (!right && !isClockwise)\n        : (right && !isClockwise) || (!right && isClockwise);\n    if (reverse) {\n      reverseCoordinates(flatCoordinates, offset, end, stride);\n    }\n    offset = end;\n  }\n  return offset;\n}\n\n/**\n * Orient coordinates in a flat array of linear rings.  By default, rings\n * are oriented following the left-hand rule (clockwise for exterior and\n * counter-clockwise for interior rings).  To orient according to the\n * right-hand rule, use the `opt_right` argument.\n *\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Array of array of end indexes.\n * @param {number} stride Stride.\n * @param {boolean} [opt_right] Follow the right-hand rule for orientation.\n * @return {number} End.\n */\nexport function orientLinearRingsArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  opt_right\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    offset = orientLinearRings(\n      flatCoordinates,\n      offset,\n      endss[i],\n      stride,\n      opt_right\n    );\n  }\n  return offset;\n}\n\n/**\n * Return a two-dimensional endss\n * @param {Array<number>} flatCoordinates Flat coordinates\n * @param {Array<number>} ends Linear ring end indexes\n * @return {Array<Array<number>>} Two dimensional endss array that can\n * be used to contruct a MultiPolygon\n */\nexport function inflateEnds(flatCoordinates, ends) {\n  const endss = [];\n  let offset = 0;\n  let prevEndIndex = 0;\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    // classifies an array of rings into polygons with outer rings and holes\n    if (!linearRingIsClockwise(flatCoordinates, offset, end, 2)) {\n      endss.push(ends.slice(prevEndIndex, i + 1));\n    } else {\n      if (endss.length === 0) {\n        continue;\n      }\n      endss[endss.length - 1].push(ends[prevEndIndex]);\n    }\n    prevEndIndex = i + 1;\n    offset = end;\n  }\n  return endss;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}