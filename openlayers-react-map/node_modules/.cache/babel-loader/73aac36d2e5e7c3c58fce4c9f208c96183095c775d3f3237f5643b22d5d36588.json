{"ast":null,"code":"/**\n * @module ol/proj\n */\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport Units, { METERS_PER_UNIT } from './proj/Units.js';\nimport { PROJECTIONS as EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326 } from './proj/epsg3857.js';\nimport { PROJECTIONS as EPSG4326_PROJECTIONS } from './proj/epsg4326.js';\nimport { add as addProj, clear as clearProj, get as getProj } from './proj/projections.js';\nimport { add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc } from './proj/transforms.js';\nimport { applyTransform, getWidth } from './extent.js';\nimport { clamp, modulo } from './math.js';\nimport { equals, getWorldsAway } from './coordinate.js';\nimport { getDistance } from './sphere.js';\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\nexport { METERS_PER_UNIT };\nexport { Projection };\nvar showCoordinateWarning = true;\n/**\n * @param {boolean} [opt_disable = true] Disable console info about `useGeographic()`\n */\nexport function disableCoordinateWarning(opt_disable) {\n  var hide = opt_disable === undefined ? true : opt_disable;\n  showCoordinateWarning = !hide;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, opt_output, opt_dimension) {\n  var output;\n  if (opt_output !== undefined) {\n    for (var i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    output = opt_output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, opt_output, opt_dimension) {\n  if (opt_output !== undefined && input !== opt_output) {\n    for (var i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    input = opt_output;\n  }\n  return input;\n}\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string' ? getProj(/** @type {string} */projectionLike) : /** @type {Projection} */projectionLike || null;\n}\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").default} [opt_units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, opt_units) {\n  projection = get(projection);\n  var pointResolution;\n  var getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n    if (opt_units && opt_units !== projection.getUnits()) {\n      var metersPerUnit = projection.getMetersPerUnit();\n      if (metersPerUnit) {\n        pointResolution = pointResolution * metersPerUnit / METERS_PER_UNIT[opt_units];\n      }\n    }\n  } else {\n    var units = projection.getUnits();\n    if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      var toEPSG4326_1 = getTransformFromProjections(projection, get('EPSG:4326'));\n      if (toEPSG4326_1 === identityTransform && units !== Units.DEGREES) {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        var vertices = [point[0] - resolution / 2, point[1], point[0] + resolution / 2, point[1], point[0], point[1] - resolution / 2, point[0], point[1] + resolution / 2];\n        vertices = toEPSG4326_1(vertices, vertices, 2);\n        var width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        var height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n      var metersPerUnit = opt_units ? METERS_PER_UNIT[opt_units] : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  } else if (typeof projection === 'string') {\n    return get(projection);\n  } else {\n    return /** @type {Projection} */projection;\n  }\n}\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [opt_output] Output.\n     * @param {number} [opt_dimension] Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, opt_output, opt_dimension) {\n      var length = input.length;\n      var dimension = opt_dimension !== undefined ? opt_dimension : 2;\n      var output = opt_output !== undefined ? opt_output : new Array(length);\n      for (var i = 0; i < length; i += dimension) {\n        var point = coordTransform(input.slice(i, i + dimension));\n        var pointLength = point.length;\n        for (var j = 0, jj = dimension; j < jj; ++j) {\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n      }\n      return output;\n    }\n  );\n}\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\n *     source.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  var sourceProj = get(source);\n  var destProj = get(destination);\n  addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\n  addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\n}\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [opt_projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, opt_projection) {\n  disableCoordinateWarning();\n  return transform(coordinate, 'EPSG:4326', opt_projection !== undefined ? opt_projection : 'EPSG:3857');\n}\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [opt_projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, opt_projection) {\n  var lonLat = transform(coordinate, opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');\n  var lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  var equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  } else {\n    var transformFunc = getTransformFromProjections(projection1, projection2);\n    return transformFunc === cloneTransform && equalUnits;\n  }\n}\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\n  var sourceCode = sourceProjection.getCode();\n  var destinationCode = destinationProjection.getCode();\n  var transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n  return transformFunc;\n}\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  var sourceProjection = get(source);\n  var destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  var transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [opt_stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, opt_stops) {\n  var transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, opt_stops);\n}\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\n  var transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\n  return transformFunc(point);\n}\n/**\n * @type {Projection|null}\n */\nvar userProjection = null;\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n/**\n * Clear the user projection if set.\n * @api\n */\nexport function clearUserProjection() {\n  userProjection = null;\n}\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */\nexport function getUserProjection() {\n  return userProjection;\n}\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.  This includes all API\n * methods except for those interacting with tile grids.\n * @api\n */\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, sourceProjection, userProjection);\n}\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    if (showCoordinateWarning && !equals(coordinate, [0, 0]) && coordinate[0] >= -180 && coordinate[0] <= 180 && coordinate[1] >= -90 && coordinate[1] <= 90) {\n      showCoordinateWarning = false;\n      // eslint-disable-next-line no-console\n      console.warn('Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.');\n    }\n    return coordinate;\n  }\n  return transform(coordinate, userProjection, destProjection);\n}\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, userProjection, destProjection);\n}\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */\nexport function toUserResolution(resolution, sourceProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  var sourceUnits = get(sourceProjection).getUnits();\n  var userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits ? resolution * METERS_PER_UNIT[sourceUnits] / METERS_PER_UNIT[userUnits] : resolution;\n}\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */\nexport function fromUserResolution(resolution, destProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  var sourceUnits = get(destProjection).getUnits();\n  var userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits ? resolution * METERS_PER_UNIT[userUnits] / METERS_PER_UNIT[sourceUnits] : resolution;\n}\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destiation).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destiation).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    var transformed, worldsAway;\n    if (sourceProj.canWrapX()) {\n      var sourceExtent = sourceProj.getExtent();\n      var sourceExtentWidth = getWidth(sourceExtent);\n      coord = coord.slice(0);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n      if (worldsAway) {\n        // Move x to the real world\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n      }\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\n      transformed = transform(coord);\n    } else {\n      transformed = transform(coord);\n    }\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n    return transformed;\n  };\n}\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\n}\naddCommon();","map":{"version":3,"names":["Projection","Units","METERS_PER_UNIT","PROJECTIONS","EPSG3857_PROJECTIONS","fromEPSG4326","toEPSG4326","EPSG4326_PROJECTIONS","add","addProj","clear","clearProj","get","getProj","addTransformFunc","clearTransformFuncs","getTransformFunc","applyTransform","getWidth","clamp","modulo","equals","getWorldsAway","getDistance","showCoordinateWarning","disableCoordinateWarning","opt_disable","hide","undefined","cloneTransform","input","opt_output","opt_dimension","output","i","ii","length","slice","identityTransform","addProjection","projection","getCode","addProjections","projections","forEach","projectionLike","getPointResolution","resolution","point","opt_units","pointResolution","getter","getPointResolutionFunc","getUnits","metersPerUnit","getMetersPerUnit","units","DEGREES","toEPSG4326_1","getTransformFromProjections","vertices","width","height","addEquivalentProjections","source","destination","addEquivalentTransforms","projections1","projections2","forwardTransform","inverseTransform","projection1","projection2","clearAllProjections","createProjection","defaultCode","createTransformFromCoordinateTransform","coordTransform","dimension","Array","pointLength","j","jj","addCoordinateTransforms","forward","inverse","sourceProj","destProj","fromLonLat","coordinate","opt_projection","transform","toLonLat","lonLat","lon","equivalent","equalUnits","transformFunc","sourceProjection","destinationProjection","sourceCode","destinationCode","getTransform","transformExtent","extent","opt_stops","transformWithProjections","userProjection","setUserProjection","clearUserProjection","getUserProjection","useGeographic","toUserCoordinate","fromUserCoordinate","destProjection","console","warn","toUserExtent","fromUserExtent","toUserResolution","sourceUnits","userUnits","fromUserResolution","createSafeCoordinateTransform","coord","transformed","worldsAway","canWrapX","sourceExtent","getExtent","sourceExtentWidth","addCommon"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\proj.js"],"sourcesContent":["/**\n * @module ol/proj\n */\n\n/**\n * The ol/proj module stores:\n * * a list of {@link module:ol/proj/Projection~Projection}\n * objects, one for each projection supported by the application\n * * a list of transform functions needed to convert coordinates in one projection\n * into another.\n *\n * The static functions are the methods used to maintain these.\n * Each transform function can handle not only simple coordinate pairs, but also\n * large arrays of coordinates such as vector geometries.\n *\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\n * for example by Bing Maps or OpenStreetMap), together with the relevant\n * transform functions.\n *\n * Additional transforms may be added by using the http://proj4js.org/\n * library (version 2.2 or later). You can use the full build supplied by\n * Proj4js, or create a custom build to support those projections you need; see\n * the Proj4js website for how to do this. You also need the Proj4js definitions\n * for the required projections. These definitions can be obtained from\n * https://epsg.io/, and are a JS function, so can be loaded in a script\n * tag (as in the examples) or pasted into your application.\n *\n * After all required projection definitions are added to proj4's registry (by\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\n * package. Existing transforms are not changed by this function. See\n * examples/wms-image-custom-proj for an example of this.\n *\n * Additional projection definitions can be registered with `proj4.defs()` any\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\n * know in advance what projections are needed, you can initially load minimal\n * support and then load whichever are requested.\n *\n * Note that Proj4js does not support projection extents. If you want to add\n * one for creating default tile grids, you can add it after the Projection\n * object has been created with `setExtent`, for example,\n * `get('EPSG:1234').setExtent(extent)`.\n *\n * In addition to Proj4js support, any transform functions can be added with\n * {@link module:ol/proj.addCoordinateTransforms}. To use this, you must first create\n * a {@link module:ol/proj/Projection~Projection} object for the new projection and add it with\n * {@link module:ol/proj.addProjection}. You can then add the forward and inverse\n * functions with {@link module:ol/proj.addCoordinateTransforms}. See\n * examples/wms-custom-proj for an example of this.\n *\n * Note that if no transforms are needed and you only need to define the\n * projection, just add a {@link module:ol/proj/Projection~Projection} with\n * {@link module:ol/proj.addProjection}. See examples/wms-no-proj for an example of\n * this.\n */\nimport Projection from './proj/Projection.js';\nimport Units, {METERS_PER_UNIT} from './proj/Units.js';\nimport {\n  PROJECTIONS as EPSG3857_PROJECTIONS,\n  fromEPSG4326,\n  toEPSG4326,\n} from './proj/epsg3857.js';\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\nimport {\n  add as addProj,\n  clear as clearProj,\n  get as getProj,\n} from './proj/projections.js';\nimport {\n  add as addTransformFunc,\n  clear as clearTransformFuncs,\n  get as getTransformFunc,\n} from './proj/transforms.js';\nimport {applyTransform, getWidth} from './extent.js';\nimport {clamp, modulo} from './math.js';\nimport {equals, getWorldsAway} from './coordinate.js';\nimport {getDistance} from './sphere.js';\n\n/**\n * A projection as {@link module:ol/proj/Projection~Projection}, SRS identifier\n * string or undefined.\n * @typedef {Projection|string|undefined} ProjectionLike\n * @api\n */\n\n/**\n * A transform function accepts an array of input coordinate values, an optional\n * output array, and an optional dimension (default should be 2).  The function\n * transforms the input coordinate values, populates the output array, and\n * returns the output array.\n *\n * @typedef {function(Array<number>, Array<number>=, number=): Array<number>} TransformFunction\n * @api\n */\n\nexport {METERS_PER_UNIT};\n\nexport {Projection};\n\nlet showCoordinateWarning = true;\n\n/**\n * @param {boolean} [opt_disable = true] Disable console info about `useGeographic()`\n */\nexport function disableCoordinateWarning(opt_disable) {\n  const hide = opt_disable === undefined ? true : opt_disable;\n  showCoordinateWarning = !hide;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Output coordinate array (new array, same coordinate\n *     values).\n */\nexport function cloneTransform(input, opt_output, opt_dimension) {\n  let output;\n  if (opt_output !== undefined) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    output = opt_output;\n  } else {\n    output = input.slice();\n  }\n  return output;\n}\n\n/**\n * @param {Array<number>} input Input coordinate array.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension.\n * @return {Array<number>} Input coordinate array (same array as input).\n */\nexport function identityTransform(input, opt_output, opt_dimension) {\n  if (opt_output !== undefined && input !== opt_output) {\n    for (let i = 0, ii = input.length; i < ii; ++i) {\n      opt_output[i] = input[i];\n    }\n    input = opt_output;\n  }\n  return input;\n}\n\n/**\n * Add a Projection object to the list of supported projections that can be\n * looked up by their code.\n *\n * @param {Projection} projection Projection instance.\n * @api\n */\nexport function addProjection(projection) {\n  addProj(projection.getCode(), projection);\n  addTransformFunc(projection, projection, cloneTransform);\n}\n\n/**\n * @param {Array<Projection>} projections Projections.\n */\nexport function addProjections(projections) {\n  projections.forEach(addProjection);\n}\n\n/**\n * Fetches a Projection object for the code specified.\n *\n * @param {ProjectionLike} projectionLike Either a code string which is\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\n *     existing projection object, or undefined.\n * @return {Projection|null} Projection object, or null if not in list.\n * @api\n */\nexport function get(projectionLike) {\n  return typeof projectionLike === 'string'\n    ? getProj(/** @type {string} */ (projectionLike))\n    : /** @type {Projection} */ (projectionLike) || null;\n}\n\n/**\n * Get the resolution of the point in degrees or distance units.\n * For projections with degrees as the unit this will simply return the\n * provided resolution. For other projections the point resolution is\n * by default estimated by transforming the `point` pixel to EPSG:4326,\n * measuring its width and height on the normal sphere,\n * and taking the average of the width and height.\n * A custom function can be provided for a specific projection, either\n * by setting the `getPointResolution` option in the\n * {@link module:ol/proj/Projection~Projection} constructor or by using\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\n * projection object.\n * @param {ProjectionLike} projection The projection.\n * @param {number} resolution Nominal resolution in projection units.\n * @param {import(\"./coordinate.js\").Coordinate} point Point to find adjusted resolution at.\n * @param {import(\"./proj/Units.js\").default} [opt_units] Units to get the point resolution in.\n * Default is the projection's units.\n * @return {number} Point resolution.\n * @api\n */\nexport function getPointResolution(projection, resolution, point, opt_units) {\n  projection = get(projection);\n  let pointResolution;\n  const getter = projection.getPointResolutionFunc();\n  if (getter) {\n    pointResolution = getter(resolution, point);\n    if (opt_units && opt_units !== projection.getUnits()) {\n      const metersPerUnit = projection.getMetersPerUnit();\n      if (metersPerUnit) {\n        pointResolution =\n          (pointResolution * metersPerUnit) / METERS_PER_UNIT[opt_units];\n      }\n    }\n  } else {\n    const units = projection.getUnits();\n    if ((units == Units.DEGREES && !opt_units) || opt_units == Units.DEGREES) {\n      pointResolution = resolution;\n    } else {\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\n      // measuring its width and height on the normal sphere, and taking the\n      // average of the width and height.\n      const toEPSG4326 = getTransformFromProjections(\n        projection,\n        get('EPSG:4326')\n      );\n      if (toEPSG4326 === identityTransform && units !== Units.DEGREES) {\n        // no transform is available\n        pointResolution = resolution * projection.getMetersPerUnit();\n      } else {\n        let vertices = [\n          point[0] - resolution / 2,\n          point[1],\n          point[0] + resolution / 2,\n          point[1],\n          point[0],\n          point[1] - resolution / 2,\n          point[0],\n          point[1] + resolution / 2,\n        ];\n        vertices = toEPSG4326(vertices, vertices, 2);\n        const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\n        const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\n        pointResolution = (width + height) / 2;\n      }\n      const metersPerUnit = opt_units\n        ? METERS_PER_UNIT[opt_units]\n        : projection.getMetersPerUnit();\n      if (metersPerUnit !== undefined) {\n        pointResolution /= metersPerUnit;\n      }\n    }\n  }\n  return pointResolution;\n}\n\n/**\n * Registers transformation functions that don't alter coordinates. Those allow\n * to transform between projections with equal meaning.\n *\n * @param {Array<Projection>} projections Projections.\n * @api\n */\nexport function addEquivalentProjections(projections) {\n  addProjections(projections);\n  projections.forEach(function (source) {\n    projections.forEach(function (destination) {\n      if (source !== destination) {\n        addTransformFunc(source, destination, cloneTransform);\n      }\n    });\n  });\n}\n\n/**\n * Registers transformation functions to convert coordinates in any projection\n * in projection1 to any projection in projection2.\n *\n * @param {Array<Projection>} projections1 Projections with equal\n *     meaning.\n * @param {Array<Projection>} projections2 Projections with equal\n *     meaning.\n * @param {TransformFunction} forwardTransform Transformation from any\n *   projection in projection1 to any projection in projection2.\n * @param {TransformFunction} inverseTransform Transform from any projection\n *   in projection2 to any projection in projection1..\n */\nexport function addEquivalentTransforms(\n  projections1,\n  projections2,\n  forwardTransform,\n  inverseTransform\n) {\n  projections1.forEach(function (projection1) {\n    projections2.forEach(function (projection2) {\n      addTransformFunc(projection1, projection2, forwardTransform);\n      addTransformFunc(projection2, projection1, inverseTransform);\n    });\n  });\n}\n\n/**\n * Clear all cached projections and transforms.\n */\nexport function clearAllProjections() {\n  clearProj();\n  clearTransformFuncs();\n}\n\n/**\n * @param {Projection|string|undefined} projection Projection.\n * @param {string} defaultCode Default code.\n * @return {Projection} Projection.\n */\nexport function createProjection(projection, defaultCode) {\n  if (!projection) {\n    return get(defaultCode);\n  } else if (typeof projection === 'string') {\n    return get(projection);\n  } else {\n    return /** @type {Projection} */ (projection);\n  }\n}\n\n/**\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\n * function.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} coordTransform Coordinate\n *     transform.\n * @return {TransformFunction} Transform function.\n */\nexport function createTransformFromCoordinateTransform(coordTransform) {\n  return (\n    /**\n     * @param {Array<number>} input Input.\n     * @param {Array<number>} [opt_output] Output.\n     * @param {number} [opt_dimension] Dimension.\n     * @return {Array<number>} Output.\n     */\n    function (input, opt_output, opt_dimension) {\n      const length = input.length;\n      const dimension = opt_dimension !== undefined ? opt_dimension : 2;\n      const output = opt_output !== undefined ? opt_output : new Array(length);\n      for (let i = 0; i < length; i += dimension) {\n        const point = coordTransform(input.slice(i, i + dimension));\n        const pointLength = point.length;\n        for (let j = 0, jj = dimension; j < jj; ++j) {\n          output[i + j] = j >= pointLength ? input[i + j] : point[j];\n        }\n      }\n      return output;\n    }\n  );\n}\n\n/**\n * Registers coordinate transform functions to convert coordinates between the\n * source projection and the destination projection.\n * The forward and inverse functions convert coordinate pairs; this function\n * converts these into the functions used internally which also handle\n * extents and coordinate arrays.\n *\n * @param {ProjectionLike} source Source projection.\n * @param {ProjectionLike} destination Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} forward The forward transform\n *     function (that is, from the source projection to the destination\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} inverse The inverse transform\n *     function (that is, from the destination projection to the source\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\n *     the transformed {@link module:ol/coordinate~Coordinate}. If the transform function can only\n *     transform less dimensions than the input coordinate, it is supposeed to return a coordinate\n *     with only the length it can transform. The other dimensions will be taken unchanged from the\n *     source.\n * @api\n */\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\n  const sourceProj = get(source);\n  const destProj = get(destination);\n  addTransformFunc(\n    sourceProj,\n    destProj,\n    createTransformFromCoordinateTransform(forward)\n  );\n  addTransformFunc(\n    destProj,\n    sourceProj,\n    createTransformFromCoordinateTransform(inverse)\n  );\n}\n\n/**\n * Transforms a coordinate from longitude/latitude to a different projection.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate as longitude and latitude, i.e.\n *     an array with longitude as 1st and latitude as 2nd element.\n * @param {ProjectionLike} [opt_projection] Target projection. The\n *     default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate projected to the target projection.\n * @api\n */\nexport function fromLonLat(coordinate, opt_projection) {\n  disableCoordinateWarning();\n  return transform(\n    coordinate,\n    'EPSG:4326',\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857'\n  );\n}\n\n/**\n * Transforms a coordinate to longitude/latitude.\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Projected coordinate.\n * @param {ProjectionLike} [opt_projection] Projection of the coordinate.\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate as longitude and latitude, i.e. an array\n *     with longitude as 1st and latitude as 2nd element.\n * @api\n */\nexport function toLonLat(coordinate, opt_projection) {\n  const lonLat = transform(\n    coordinate,\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857',\n    'EPSG:4326'\n  );\n  const lon = lonLat[0];\n  if (lon < -180 || lon > 180) {\n    lonLat[0] = modulo(lon + 180, 360) - 180;\n  }\n  return lonLat;\n}\n\n/**\n * Checks if two projections are the same, that is every coordinate in one\n * projection does represent the same geographic point as the same coordinate in\n * the other projection.\n *\n * @param {Projection} projection1 Projection 1.\n * @param {Projection} projection2 Projection 2.\n * @return {boolean} Equivalent.\n * @api\n */\nexport function equivalent(projection1, projection2) {\n  if (projection1 === projection2) {\n    return true;\n  }\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\n  if (projection1.getCode() === projection2.getCode()) {\n    return equalUnits;\n  } else {\n    const transformFunc = getTransformFromProjections(projection1, projection2);\n    return transformFunc === cloneTransform && equalUnits;\n  }\n}\n\n/**\n * Searches in the list of transform functions for the function for converting\n * coordinates from the source projection to the destination projection.\n *\n * @param {Projection} sourceProjection Source Projection object.\n * @param {Projection} destinationProjection Destination Projection\n *     object.\n * @return {TransformFunction} Transform function.\n */\nexport function getTransformFromProjections(\n  sourceProjection,\n  destinationProjection\n) {\n  const sourceCode = sourceProjection.getCode();\n  const destinationCode = destinationProjection.getCode();\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\n  if (!transformFunc) {\n    transformFunc = identityTransform;\n  }\n  return transformFunc;\n}\n\n/**\n * Given the projection-like objects, searches for a transformation\n * function to convert a coordinates array from the source projection to the\n * destination projection.\n *\n * @param {ProjectionLike} source Source.\n * @param {ProjectionLike} destination Destination.\n * @return {TransformFunction} Transform function.\n * @api\n */\nexport function getTransform(source, destination) {\n  const sourceProjection = get(source);\n  const destinationProjection = get(destination);\n  return getTransformFromProjections(sourceProjection, destinationProjection);\n}\n\n/**\n * Transforms a coordinate from source projection to destination projection.\n * This returns a new coordinate (and does not modify the original).\n *\n * See {@link module:ol/proj.transformExtent} for extent transformation.\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\n * subclasses for geometry transforms.\n *\n * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n * @api\n */\nexport function transform(coordinate, source, destination) {\n  const transformFunc = getTransform(source, destination);\n  return transformFunc(coordinate, undefined, coordinate.length);\n}\n\n/**\n * Transforms an extent from source projection to destination projection.  This\n * returns a new extent (and does not modify the original).\n *\n * @param {import(\"./extent.js\").Extent} extent The extent to transform.\n * @param {ProjectionLike} source Source projection-like.\n * @param {ProjectionLike} destination Destination projection-like.\n * @param {number} [opt_stops] Number of stops per side used for the transform.\n * By default only the corners are used.\n * @return {import(\"./extent.js\").Extent} The transformed extent.\n * @api\n */\nexport function transformExtent(extent, source, destination, opt_stops) {\n  const transformFunc = getTransform(source, destination);\n  return applyTransform(extent, transformFunc, undefined, opt_stops);\n}\n\n/**\n * Transforms the given point to the destination projection.\n *\n * @param {import(\"./coordinate.js\").Coordinate} point Point.\n * @param {Projection} sourceProjection Source projection.\n * @param {Projection} destinationProjection Destination projection.\n * @return {import(\"./coordinate.js\").Coordinate} Point.\n */\nexport function transformWithProjections(\n  point,\n  sourceProjection,\n  destinationProjection\n) {\n  const transformFunc = getTransformFromProjections(\n    sourceProjection,\n    destinationProjection\n  );\n  return transformFunc(point);\n}\n\n/**\n * @type {Projection|null}\n */\nlet userProjection = null;\n\n/**\n * Set the projection for coordinates supplied from and returned by API methods.\n * This includes all API methods except for those interacting with tile grids.\n * @param {ProjectionLike} projection The user projection.\n * @api\n */\nexport function setUserProjection(projection) {\n  userProjection = get(projection);\n}\n\n/**\n * Clear the user projection if set.\n * @api\n */\nexport function clearUserProjection() {\n  userProjection = null;\n}\n\n/**\n * Get the projection for coordinates supplied from and returned by API methods.\n * Note that this method is not yet a part of the stable API.  Support for user\n * projections is not yet complete and should be considered experimental.\n * @return {Projection|null} The user projection (or null if not set).\n * @api\n */\nexport function getUserProjection() {\n  return userProjection;\n}\n\n/**\n * Use geographic coordinates (WGS-84 datum) in API methods.  This includes all API\n * methods except for those interacting with tile grids.\n * @api\n */\nexport function useGeographic() {\n  setUserProjection('EPSG:4326');\n}\n\n/**\n * Return a coordinate transformed into the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} sourceProjection The input coordinate projection.\n * @return {Array<number>} The input coordinate in the user projection.\n */\nexport function toUserCoordinate(coordinate, sourceProjection) {\n  if (!userProjection) {\n    return coordinate;\n  }\n  return transform(coordinate, sourceProjection, userProjection);\n}\n\n/**\n * Return a coordinate transformed from the user projection.  If no user projection\n * is set, the original coordinate is returned.\n * @param {Array<number>} coordinate Input coordinate.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {Array<number>} The input coordinate transformed.\n */\nexport function fromUserCoordinate(coordinate, destProjection) {\n  if (!userProjection) {\n    if (\n      showCoordinateWarning &&\n      !equals(coordinate, [0, 0]) &&\n      coordinate[0] >= -180 &&\n      coordinate[0] <= 180 &&\n      coordinate[1] >= -90 &&\n      coordinate[1] <= 90\n    ) {\n      showCoordinateWarning = false;\n      // eslint-disable-next-line no-console\n      console.warn(\n        'Call useGeographic() from ol/proj once to work with [longitude, latitude] coordinates.'\n      );\n    }\n    return coordinate;\n  }\n  return transform(coordinate, userProjection, destProjection);\n}\n\n/**\n * Return an extent transformed into the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} sourceProjection The input extent projection.\n * @return {import(\"./extent.js\").Extent} The input extent in the user projection.\n */\nexport function toUserExtent(extent, sourceProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, sourceProjection, userProjection);\n}\n\n/**\n * Return an extent transformed from the user projection.  If no user projection\n * is set, the original extent is returned.\n * @param {import(\"./extent.js\").Extent} extent Input extent.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {import(\"./extent.js\").Extent} The input extent transformed.\n */\nexport function fromUserExtent(extent, destProjection) {\n  if (!userProjection) {\n    return extent;\n  }\n  return transformExtent(extent, userProjection, destProjection);\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in input projection units per pixel.\n * @param {ProjectionLike} sourceProjection The input projection.\n * @return {number} Resolution in user projection units per pixel.\n */\nexport function toUserResolution(resolution, sourceProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceUnits = get(sourceProjection).getUnits();\n  const userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits\n    ? (resolution * METERS_PER_UNIT[sourceUnits]) / METERS_PER_UNIT[userUnits]\n    : resolution;\n}\n\n/**\n * Return the resolution in user projection units per pixel. If no user projection\n * is set, or source or user projection are missing units, the original resolution\n * is returned.\n * @param {number} resolution Resolution in user projection units per pixel.\n * @param {ProjectionLike} destProjection The destination projection.\n * @return {number} Resolution in destination projection units per pixel.\n */\nexport function fromUserResolution(resolution, destProjection) {\n  if (!userProjection) {\n    return resolution;\n  }\n  const sourceUnits = get(destProjection).getUnits();\n  const userUnits = userProjection.getUnits();\n  return sourceUnits && userUnits\n    ? (resolution * METERS_PER_UNIT[userUnits]) / METERS_PER_UNIT[sourceUnits]\n    : resolution;\n}\n\n/**\n * Creates a safe coordinate transform function from a coordinate transform function.\n * \"Safe\" means that it can handle wrapping of x-coordinates for global projections,\n * and that coordinates exceeding the source projection validity extent's range will be\n * clamped to the validity range.\n * @param {Projection} sourceProj Source projection.\n * @param {Projection} destProj Destination projection.\n * @param {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} transform Transform function (source to destiation).\n * @return {function(import(\"./coordinate.js\").Coordinate): import(\"./coordinate.js\").Coordinate} Safe transform function (source to destiation).\n */\nexport function createSafeCoordinateTransform(sourceProj, destProj, transform) {\n  return function (coord) {\n    let transformed, worldsAway;\n    if (sourceProj.canWrapX()) {\n      const sourceExtent = sourceProj.getExtent();\n      const sourceExtentWidth = getWidth(sourceExtent);\n      coord = coord.slice(0);\n      worldsAway = getWorldsAway(coord, sourceProj, sourceExtentWidth);\n      if (worldsAway) {\n        // Move x to the real world\n        coord[0] = coord[0] - worldsAway * sourceExtentWidth;\n      }\n      coord[0] = clamp(coord[0], sourceExtent[0], sourceExtent[2]);\n      coord[1] = clamp(coord[1], sourceExtent[1], sourceExtent[3]);\n      transformed = transform(coord);\n    } else {\n      transformed = transform(coord);\n    }\n    if (worldsAway && destProj.canWrapX()) {\n      // Move transformed coordinate back to the offset world\n      transformed[0] += worldsAway * getWidth(destProj.getExtent());\n    }\n    return transformed;\n  };\n}\n\n/**\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\n * by when this module is executed and should only need to be called again after\n * `clearAllProjections()` is called (e.g. in tests).\n */\nexport function addCommon() {\n  // Add transformations that don't alter coordinates to convert within set of\n  // projections with equal meaning.\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\n  // coordinates and back.\n  addEquivalentTransforms(\n    EPSG4326_PROJECTIONS,\n    EPSG3857_PROJECTIONS,\n    fromEPSG4326,\n    toEPSG4326\n  );\n}\n\naddCommon();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}