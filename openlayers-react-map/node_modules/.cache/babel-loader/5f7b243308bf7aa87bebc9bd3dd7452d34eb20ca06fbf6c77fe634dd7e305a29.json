{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/TileQueue\n */\nimport EventType from './events/EventType.js';\nimport PriorityQueue, { DROP } from './structs/PriorityQueue.js';\nimport TileState from './TileState.js';\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\nvar TileQueue = /** @class */function (_super) {\n  __extends(TileQueue, _super);\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  function TileQueue(tilePriorityFunction, tileChangeCallback) {\n    var _this = _super.call(this,\n    /**\n     * @param {Array} element Element.\n     * @return {number} Priority.\n     */\n    function (element) {\n      return tilePriorityFunction.apply(null, element);\n    },\n    /**\n     * @param {Array} element Element.\n     * @return {string} Key.\n     */\n    function (element) {\n      return /** @type {import(\"./Tile.js\").default} */element[0].getKey();\n    }) || this;\n    /** @private */\n    _this.boundHandleTileChange_ = _this.handleTileChange.bind(_this);\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    _this.tileChangeCallback_ = tileChangeCallback;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.tilesLoading_ = 0;\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    _this.tilesLoadingKeys_ = {};\n    return _this;\n  }\n  /**\n   * @param {Array} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  TileQueue.prototype.enqueue = function (element) {\n    var added = _super.prototype.enqueue.call(this, element);\n    if (added) {\n      var tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n    return added;\n  };\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  TileQueue.prototype.getTilesLoading = function () {\n    return this.tilesLoading_;\n  };\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  TileQueue.prototype.handleTileChange = function (event) {\n    var tile = /** @type {import(\"./Tile.js\").default} */event.target;\n    var state = tile.getState();\n    if (state === TileState.LOADED || state === TileState.ERROR || state === TileState.EMPTY) {\n      tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      var tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  };\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  TileQueue.prototype.loadMoreTiles = function (maxTotalLoading, maxNewLoads) {\n    var newLoads = 0;\n    var state, tile, tileKey;\n    while (this.tilesLoading_ < maxTotalLoading && newLoads < maxNewLoads && this.getCount() > 0) {\n      tile = /** @type {import(\"./Tile.js\").default} */this.dequeue()[0];\n      tileKey = tile.getKey();\n      state = tile.getState();\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  };\n  return TileQueue;\n}(PriorityQueue);\nexport default TileQueue;\n/**\n * @param {import('./PluggableMap.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(frameState, tile, tileSourceKey, tileCenter, tileResolution) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  }\n  // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n  var center = frameState.viewState.center;\n  var deltaX = tileCenter[0] - center[0];\n  var deltaY = tileCenter[1] - center[1];\n  return 65536 * Math.log(tileResolution) + Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution;\n}","map":{"version":3,"names":["EventType","PriorityQueue","DROP","TileState","TileQueue","_super","__extends","tilePriorityFunction","tileChangeCallback","_this","call","element","apply","getKey","boundHandleTileChange_","handleTileChange","bind","tileChangeCallback_","tilesLoading_","tilesLoadingKeys_","prototype","enqueue","added","tile","addEventListener","CHANGE","getTilesLoading","event","target","state","getState","LOADED","ERROR","EMPTY","removeEventListener","tileKey","loadMoreTiles","maxTotalLoading","maxNewLoads","newLoads","getCount","dequeue","IDLE","load","getTilePriority","frameState","tileSourceKey","tileCenter","tileResolution","wantedTiles","center","viewState","deltaX","deltaY","Math","log","sqrt"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\TileQueue.js"],"sourcesContent":["/**\n * @module ol/TileQueue\n */\nimport EventType from './events/EventType.js';\nimport PriorityQueue, {DROP} from './structs/PriorityQueue.js';\nimport TileState from './TileState.js';\n\n/**\n * @typedef {function(import(\"./Tile.js\").default, string, import(\"./coordinate.js\").Coordinate, number): number} PriorityFunction\n */\n\nclass TileQueue extends PriorityQueue {\n  /**\n   * @param {PriorityFunction} tilePriorityFunction Tile priority function.\n   * @param {function(): ?} tileChangeCallback Function called on each tile change event.\n   */\n  constructor(tilePriorityFunction, tileChangeCallback) {\n    super(\n      /**\n       * @param {Array} element Element.\n       * @return {number} Priority.\n       */\n      function (element) {\n        return tilePriorityFunction.apply(null, element);\n      },\n      /**\n       * @param {Array} element Element.\n       * @return {string} Key.\n       */\n      function (element) {\n        return /** @type {import(\"./Tile.js\").default} */ (element[0]).getKey();\n      }\n    );\n\n    /** @private */\n    this.boundHandleTileChange_ = this.handleTileChange.bind(this);\n\n    /**\n     * @private\n     * @type {function(): ?}\n     */\n    this.tileChangeCallback_ = tileChangeCallback;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilesLoading_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string,boolean>}\n     */\n    this.tilesLoadingKeys_ = {};\n  }\n\n  /**\n   * @param {Array} element Element.\n   * @return {boolean} The element was added to the queue.\n   */\n  enqueue(element) {\n    const added = super.enqueue(element);\n    if (added) {\n      const tile = element[0];\n      tile.addEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n    }\n    return added;\n  }\n\n  /**\n   * @return {number} Number of tiles loading.\n   */\n  getTilesLoading() {\n    return this.tilesLoading_;\n  }\n\n  /**\n   * @param {import(\"./events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"./Tile.js\").default} */ (event.target);\n    const state = tile.getState();\n    if (\n      state === TileState.LOADED ||\n      state === TileState.ERROR ||\n      state === TileState.EMPTY\n    ) {\n      tile.removeEventListener(EventType.CHANGE, this.boundHandleTileChange_);\n      const tileKey = tile.getKey();\n      if (tileKey in this.tilesLoadingKeys_) {\n        delete this.tilesLoadingKeys_[tileKey];\n        --this.tilesLoading_;\n      }\n      this.tileChangeCallback_();\n    }\n  }\n\n  /**\n   * @param {number} maxTotalLoading Maximum number tiles to load simultaneously.\n   * @param {number} maxNewLoads Maximum number of new tiles to load.\n   */\n  loadMoreTiles(maxTotalLoading, maxNewLoads) {\n    let newLoads = 0;\n    let state, tile, tileKey;\n    while (\n      this.tilesLoading_ < maxTotalLoading &&\n      newLoads < maxNewLoads &&\n      this.getCount() > 0\n    ) {\n      tile = /** @type {import(\"./Tile.js\").default} */ (this.dequeue()[0]);\n      tileKey = tile.getKey();\n      state = tile.getState();\n      if (state === TileState.IDLE && !(tileKey in this.tilesLoadingKeys_)) {\n        this.tilesLoadingKeys_[tileKey] = true;\n        ++this.tilesLoading_;\n        ++newLoads;\n        tile.load();\n      }\n    }\n  }\n}\n\nexport default TileQueue;\n\n/**\n * @param {import('./PluggableMap.js').FrameState} frameState Frame state.\n * @param {import(\"./Tile.js\").default} tile Tile.\n * @param {string} tileSourceKey Tile source key.\n * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n * @param {number} tileResolution Tile resolution.\n * @return {number} Tile priority.\n */\nexport function getTilePriority(\n  frameState,\n  tile,\n  tileSourceKey,\n  tileCenter,\n  tileResolution\n) {\n  // Filter out tiles at higher zoom levels than the current zoom level, or that\n  // are outside the visible extent.\n  if (!frameState || !(tileSourceKey in frameState.wantedTiles)) {\n    return DROP;\n  }\n  if (!frameState.wantedTiles[tileSourceKey][tile.getKey()]) {\n    return DROP;\n  }\n  // Prioritize the highest zoom level tiles closest to the focus.\n  // Tiles at higher zoom levels are prioritized using Math.log(tileResolution).\n  // Within a zoom level, tiles are prioritized by the distance in pixels between\n  // the center of the tile and the center of the viewport.  The factor of 65536\n  // means that the prioritization should behave as desired for tiles up to\n  // 65536 * Math.log(2) = 45426 pixels from the focus.\n  const center = frameState.viewState.center;\n  const deltaX = tileCenter[0] - center[0];\n  const deltaY = tileCenter[1] - center[1];\n  return (\n    65536 * Math.log(tileResolution) +\n    Math.sqrt(deltaX * deltaX + deltaY * deltaY) / tileResolution\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}