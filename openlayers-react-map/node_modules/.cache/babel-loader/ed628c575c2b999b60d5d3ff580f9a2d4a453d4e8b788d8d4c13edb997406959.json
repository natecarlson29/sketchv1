{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport { createCanvasContext2D, releaseCanvas } from './dom.js';\nimport { getUid } from './util.js';\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nvar canvasPool = [];\nvar VectorRenderTile = /** @class */function (_super) {\n  __extends(VectorRenderTile, _super);\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n   * to get source tiles for this tile.\n   */\n  function VectorRenderTile(tileCoord, state, urlTileCoord, getSourceTiles) {\n    var _this = _super.call(this, tileCoord, state, {\n      transition: 0\n    }) || this;\n    /**\n     * @private\n     * @type {!Object<string, CanvasRenderingContext2D>}\n     */\n    _this.context_ = {};\n    /**\n     * Executor groups by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    _this.executorGroups = {};\n    /**\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    _this.declutterExecutorGroups = {};\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n    _this.loadingSourceTiles = 0;\n    /**\n     * @type {Object<number, ImageData>}\n     */\n    _this.hitDetectionImageData = {};\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n    _this.replayState_ = {};\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n    _this.sourceTiles = [];\n    /**\n     * @type {Object<string, boolean>}\n     */\n    _this.errorTileKeys = {};\n    /**\n     * @type {number}\n     */\n    _this.wantedResolution;\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n    _this.getSourceTiles = getSourceTiles.bind(undefined, _this);\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    _this.wrappedTileCoord = urlTileCoord;\n    return _this;\n  }\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n  VectorRenderTile.prototype.getContext = function (layer) {\n    var key = getUid(layer);\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n    }\n    return this.context_[key];\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {boolean} Tile has a rendering context for the given layer.\n   */\n  VectorRenderTile.prototype.hasContext = function (layer) {\n    return getUid(layer) in this.context_;\n  };\n  /**\n   * Get the Canvas for this tile.\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  VectorRenderTile.prototype.getImage = function (layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  };\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {ReplayState} The replay state.\n   */\n  VectorRenderTile.prototype.getReplayState = function (layer) {\n    var key = getUid(layer);\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1\n      };\n    }\n    return this.replayState_[key];\n  };\n  /**\n   * Load the tile.\n   */\n  VectorRenderTile.prototype.load = function () {\n    this.getSourceTiles();\n  };\n  /**\n   * Remove from the cache due to expiry\n   */\n  VectorRenderTile.prototype.release = function () {\n    for (var key in this.context_) {\n      var context = this.context_[key];\n      releaseCanvas(context);\n      canvasPool.push(context.canvas);\n      delete this.context_[key];\n    }\n    _super.prototype.release.call(this);\n  };\n  return VectorRenderTile;\n}(Tile);\nexport default VectorRenderTile;","map":{"version":3,"names":["Tile","createCanvasContext2D","releaseCanvas","getUid","canvasPool","VectorRenderTile","_super","__extends","tileCoord","state","urlTileCoord","getSourceTiles","_this","call","transition","context_","executorGroups","declutterExecutorGroups","loadingSourceTiles","hitDetectionImageData","replayState_","sourceTiles","errorTileKeys","wantedResolution","bind","undefined","wrappedTileCoord","prototype","getContext","layer","key","hasContext","getImage","canvas","getReplayState","dirty","renderedRenderOrder","renderedResolution","NaN","renderedRevision","renderedTileResolution","renderedTileRevision","renderedTileZ","load","release","context","push"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\VectorRenderTile.js"],"sourcesContent":["/**\n * @module ol/VectorRenderTile\n */\nimport Tile from './Tile.js';\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\nimport {getUid} from './util.js';\n\n/**\n * @typedef {Object} ReplayState\n * @property {boolean} dirty Dirty.\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\n * @property {number} renderedTileRevision RenderedTileRevision.\n * @property {number} renderedResolution RenderedResolution.\n * @property {number} renderedRevision RenderedRevision.\n * @property {number} renderedTileResolution RenderedTileResolution.\n * @property {number} renderedTileZ RenderedTileZ.\n */\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nconst canvasPool = [];\n\nclass VectorRenderTile extends Tile {\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"./TileState.js\").default} state State.\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\n   * to get source tiles for this tile.\n   */\n  constructor(tileCoord, state, urlTileCoord, getSourceTiles) {\n    super(tileCoord, state, {transition: 0});\n\n    /**\n     * @private\n     * @type {!Object<string, CanvasRenderingContext2D>}\n     */\n    this.context_ = {};\n\n    /**\n     * Executor groups by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    this.executorGroups = {};\n\n    /**\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\n     */\n    this.declutterExecutorGroups = {};\n\n    /**\n     * Number of loading source tiles. Read/written by the source.\n     * @type {number}\n     */\n    this.loadingSourceTiles = 0;\n\n    /**\n     * @type {Object<number, ImageData>}\n     */\n    this.hitDetectionImageData = {};\n\n    /**\n     * @private\n     * @type {!Object<string, ReplayState>}\n     */\n    this.replayState_ = {};\n\n    /**\n     * @type {Array<import(\"./VectorTile.js\").default>}\n     */\n    this.sourceTiles = [];\n\n    /**\n     * @type {Object<string, boolean>}\n     */\n    this.errorTileKeys = {};\n\n    /**\n     * @type {number}\n     */\n    this.wantedResolution;\n\n    /**\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\n     */\n    this.getSourceTiles = getSourceTiles.bind(undefined, this);\n\n    /**\n     * @type {import(\"./tilecoord.js\").TileCoord}\n     */\n    this.wrappedTileCoord = urlTileCoord;\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {CanvasRenderingContext2D} The rendering context.\n   */\n  getContext(layer) {\n    const key = getUid(layer);\n    if (!(key in this.context_)) {\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\n    }\n    return this.context_[key];\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {boolean} Tile has a rendering context for the given layer.\n   */\n  hasContext(layer) {\n    return getUid(layer) in this.context_;\n  }\n\n  /**\n   * Get the Canvas for this tile.\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {HTMLCanvasElement} Canvas.\n   */\n  getImage(layer) {\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\n  }\n\n  /**\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\n   * @return {ReplayState} The replay state.\n   */\n  getReplayState(layer) {\n    const key = getUid(layer);\n    if (!(key in this.replayState_)) {\n      this.replayState_[key] = {\n        dirty: false,\n        renderedRenderOrder: null,\n        renderedResolution: NaN,\n        renderedRevision: -1,\n        renderedTileResolution: NaN,\n        renderedTileRevision: -1,\n        renderedTileZ: -1,\n      };\n    }\n    return this.replayState_[key];\n  }\n\n  /**\n   * Load the tile.\n   */\n  load() {\n    this.getSourceTiles();\n  }\n\n  /**\n   * Remove from the cache due to expiry\n   */\n  release() {\n    for (const key in this.context_) {\n      const context = this.context_[key];\n      releaseCanvas(context);\n      canvasPool.push(context.canvas);\n      delete this.context_[key];\n    }\n    super.release();\n  }\n}\n\nexport default VectorRenderTile;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}