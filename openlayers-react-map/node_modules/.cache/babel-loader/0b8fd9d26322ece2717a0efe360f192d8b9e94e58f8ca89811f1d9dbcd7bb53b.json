{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\nvar ImageCanvas = /** @class */function (_super) {\n  __extends(ImageCanvas, _super);\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [opt_loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  function ImageCanvas(extent, resolution, pixelRatio, canvas, opt_loader) {\n    var _this = this;\n    var state = opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    _this = _super.call(this, extent, resolution, pixelRatio, state) || this;\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    _this.loader_ = opt_loader !== undefined ? opt_loader : null;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.canvas_ = canvas;\n    /**\n     * @private\n     * @type {?Error}\n     */\n    _this.error_ = null;\n    return _this;\n  }\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  ImageCanvas.prototype.getError = function () {\n    return this.error_;\n  };\n  /**\n   * Handle async drawing complete.\n   * @param {Error} [err] Any error during drawing.\n   * @private\n   */\n  ImageCanvas.prototype.handleLoad_ = function (err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  };\n  /**\n   * Load not yet loaded URI.\n   */\n  ImageCanvas.prototype.load = function () {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  };\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n  ImageCanvas.prototype.getImage = function () {\n    return this.canvas_;\n  };\n  return ImageCanvas;\n}(ImageBase);\nexport default ImageCanvas;","map":{"version":3,"names":["ImageBase","ImageState","ImageCanvas","_super","__extends","extent","resolution","pixelRatio","canvas","opt_loader","_this","state","undefined","IDLE","LOADED","call","loader_","canvas_","error_","prototype","getError","handleLoad_","err","ERROR","changed","load","LOADING","bind","getImage"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\ImageCanvas.js"],"sourcesContent":["/**\n * @module ol/ImageCanvas\n */\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\n\n/**\n * A function that is called to trigger asynchronous canvas drawing.  It is\n * called with a \"done\" callback that should be called when drawing is done.\n * If any error occurs during drawing, the \"done\" callback should be called with\n * that error.\n *\n * @typedef {function(function(Error=): void): void} Loader\n */\n\nclass ImageCanvas extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {HTMLCanvasElement} canvas Canvas.\n   * @param {Loader} [opt_loader] Optional loader function to\n   *     support asynchronous canvas drawing.\n   */\n  constructor(extent, resolution, pixelRatio, canvas, opt_loader) {\n    const state =\n      opt_loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    super(extent, resolution, pixelRatio, state);\n\n    /**\n     * Optional canvas loader function.\n     * @type {?Loader}\n     * @private\n     */\n    this.loader_ = opt_loader !== undefined ? opt_loader : null;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = canvas;\n\n    /**\n     * @private\n     * @type {?Error}\n     */\n    this.error_ = null;\n  }\n\n  /**\n   * Get any error associated with asynchronous rendering.\n   * @return {?Error} Any error that occurred during rendering.\n   */\n  getError() {\n    return this.error_;\n  }\n\n  /**\n   * Handle async drawing complete.\n   * @param {Error} [err] Any error during drawing.\n   * @private\n   */\n  handleLoad_(err) {\n    if (err) {\n      this.error_ = err;\n      this.state = ImageState.ERROR;\n    } else {\n      this.state = ImageState.LOADED;\n    }\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.loader_(this.handleLoad_.bind(this));\n    }\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Canvas element.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n}\n\nexport default ImageCanvas;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,SAAS,MAAM,gBAAgB;AACtC,OAAOC,UAAU,MAAM,iBAAiB;AAExC;;;;;;;;AASA,IAAAC,WAAA,0BAAAC,MAAA;EAA0BC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EACxB;;;;;;;;EAQA,SAAAD,YAAYG,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEC,MAAM,EAAEC,UAAU;IAA9D,IAAAC,KAAA;IACE,IAAMC,KAAK,GACTF,UAAU,KAAKG,SAAS,GAAGX,UAAU,CAACY,IAAI,GAAGZ,UAAU,CAACa,MAAM;YAEhEX,MAAA,CAAAY,IAAA,OAAMV,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEI,KAAK,CAAC;IAE5C;;;;;IAKAD,KAAI,CAACM,OAAO,GAAGP,UAAU,KAAKG,SAAS,GAAGH,UAAU,GAAG,IAAI;IAE3D;;;;IAIAC,KAAI,CAACO,OAAO,GAAGT,MAAM;IAErB;;;;IAIAE,KAAI,CAACQ,MAAM,GAAG,IAAI;;EACpB;EAEA;;;;EAIAhB,WAAA,CAAAiB,SAAA,CAAAC,QAAQ,GAAR;IACE,OAAO,IAAI,CAACF,MAAM;EACpB,CAAC;EAED;;;;;EAKAhB,WAAA,CAAAiB,SAAA,CAAAE,WAAW,GAAX,UAAYC,GAAG;IACb,IAAIA,GAAG,EAAE;MACP,IAAI,CAACJ,MAAM,GAAGI,GAAG;MACjB,IAAI,CAACX,KAAK,GAAGV,UAAU,CAACsB,KAAK;KAC9B,MAAM;MACL,IAAI,CAACZ,KAAK,GAAGV,UAAU,CAACa,MAAM;;IAEhC,IAAI,CAACU,OAAO,EAAE;EAChB,CAAC;EAED;;;EAGAtB,WAAA,CAAAiB,SAAA,CAAAM,IAAI,GAAJ;IACE,IAAI,IAAI,CAACd,KAAK,IAAIV,UAAU,CAACY,IAAI,EAAE;MACjC,IAAI,CAACF,KAAK,GAAGV,UAAU,CAACyB,OAAO;MAC/B,IAAI,CAACF,OAAO,EAAE;MACd,IAAI,CAACR,OAAO,CAAC,IAAI,CAACK,WAAW,CAACM,IAAI,CAAC,IAAI,CAAC,CAAC;;EAE7C,CAAC;EAED;;;EAGAzB,WAAA,CAAAiB,SAAA,CAAAS,QAAQ,GAAR;IACE,OAAO,IAAI,CAACX,OAAO;EACrB,CAAC;EACH,OAAAf,WAAC;AAAD,CAAC,CA3EyBF,SAAS;AA6EnC,eAAeE,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}