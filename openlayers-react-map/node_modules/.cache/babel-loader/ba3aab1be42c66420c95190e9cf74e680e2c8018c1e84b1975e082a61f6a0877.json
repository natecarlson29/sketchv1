{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({\n      color: 'blue'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)'\n  })\n});\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)'\n  })\n});\nconst selectedPolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'limegreen',\n    width: 3,\n    lineDash: [8, 4]\n  }),\n  fill: new Fill({\n    color: 'rgba(50, 205, 50, 0.15)'\n  })\n});\nconst ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'rgba(0,0,255,0.2)'\n    }),\n    stroke: new Stroke({\n      color: 'blue',\n      width: 2\n    })\n  })\n});\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]); // overlays for current drawing\n  const allOverlaysRef = useRef([]); // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    mapRef.current = map;\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n      });\n      overlaysRef.current = [];\n    }\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + \"'\";\n    }\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          updateVertexMarkers([coord, coord]);\n          createSegmentOverlays([coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      } else if (modeRef.current === 'select') {\n        // Selection mode: select polygon on click\n        let selected = null;\n        map.forEachFeatureAtPixel(evt.pixel, function (feature) {\n          if (feature.getGeometry() instanceof Polygon) {\n            selected = feature;\n            return true;\n          }\n          return false;\n        });\n        // Remove previous selection style\n        if (selectedFeature && selectedFeature !== selected) {\n          selectedFeature.setStyle(polygonStyle);\n        }\n        if (selected) {\n          selected.setStyle(selectedPolygonStyle);\n          setSelectedFeature(selected);\n        } else if (selectedFeature) {\n          selectedFeature.setStyle(polygonStyle);\n          setSelectedFeature(null);\n        }\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line\n  }, []); // Only run once on mount\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (no map/layer recreation) ---\n  useEffect(() => {\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    // Remove selection style if switching out of select mode\n    if (mode !== 'select' && selectedFeature) {\n      selectedFeature.setStyle(polygonStyle);\n      setSelectedFeature(null);\n    }\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"FlipHoriz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"FlipVert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 396,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"pA4p68LIeOiW5KUYHqhl9vvDG6s=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","fromLonLat","getLength","Style","CircleStyle","Fill","Stroke","LineString","jsxDEV","_jsxDEV","vertexStyle","image","radius","fill","color","stroke","width","polygonStyle","activePolygonStyle","selectedPolygonStyle","lineDash","ghostMarkerStyle","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","current","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","clearCurrentOverlays","forEach","overlay","removeOverlay","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","DIM_OFFSET","i","length","c1","c2","pixel1","getPixelFromCoordinate","pixel2","dx","dy","len","Math","sqrt","perp","offsetMidPixel","offsetMidCoord","getCoordinateFromPixel","tooltip","document","createElement","className","innerHTML","isVertical","abs","transform","element","position","positioning","stopEvent","addOverlay","push","addVertexMarkers","addFeature","updateVertexMarkers","toRemove","getFeatures","f","get","removeFeature","feat","set","on","evt","coord","coordinate","ghost","setStyle","poly","feature","getGeometry","getCoordinates","slice","setCoordinates","selected","forEachFeatureAtPixel","pixel","addSegment","direction","last","OFFSET","newPt","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","splice","addEventListener","setTarget","removeEventListener","val","parseFloat","isNaN","children","id","ref","type","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","height","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\n\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'white', width: 2 }),\n  }),\n});\n\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)',\n  }),\n});\n\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)',\n  }),\n});\n\nconst selectedPolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'limegreen',\n    width: 3,\n    lineDash: [8, 4],\n  }),\n  fill: new Fill({\n    color: 'rgba(50, 205, 50, 0.15)',\n  }),\n});\n\nconst ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({ color: 'rgba(0,0,255,0.2)' }),\n    stroke: new Stroke({ color: 'blue', width: 2 }),\n  }),\n});\n\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);      // overlays for current drawing\n  const allOverlaysRef = useRef([]);   // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    mapRef.current = map;\n\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n      });\n      overlaysRef.current = [];\n    }\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + \"'\";\n    }\n\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\n        ];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          updateVertexMarkers([coord, coord]);\n          createSegmentOverlays([coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      } else if (modeRef.current === 'select') {\n        // Selection mode: select polygon on click\n        let selected = null;\n        map.forEachFeatureAtPixel(evt.pixel, function (feature) {\n          if (feature.getGeometry() instanceof Polygon) {\n            selected = feature;\n            return true;\n          }\n          return false;\n        });\n        // Remove previous selection style\n        if (selectedFeature && selectedFeature !== selected) {\n          selectedFeature.setStyle(polygonStyle);\n        }\n        if (selected) {\n          selected.setStyle(selectedPolygonStyle);\n          setSelectedFeature(selected);\n        } else if (selectedFeature) {\n          selectedFeature.setStyle(polygonStyle);\n          setSelectedFeature(null);\n        }\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z') &&\n        drawingRef.current &&\n        modeRef.current === 'draw'\n      ) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line\n  }, []); // Only run once on mount\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (no map/layer recreation) ---\n  useEffect(() => {\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    // Remove selection style if switching out of select mode\n    if (mode !== 'select' && selectedFeature) {\n      selectedFeature.setStyle(polygonStyle);\n      setSelectedFeature(null);\n    }\n  }, [mode]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">FlipHoriz</div>\n        <div className=\"map-button\">FlipVert</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}