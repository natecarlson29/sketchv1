{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport Snap from 'ol/interaction/Snap';\nimport { /*always,*/primaryAction } from 'ol/events/condition';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport DeleteGeo from './map-actions/DeleteGeo';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport Edit from './map-helpers/Edit';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\nimport QuickShape from './map-actions/QuickShape';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle, closingSegmentStyle } from './ol-styles';\n\n/* svgs */\nimport { DrawIcon, HandIcon } from './svg';\n\n/*custom snapping imports*/\nimport { coordsEqual, getSnappedCoordinate, customSnapFeature } from './map-helpers/Snapping';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, pointToSegmentDistance } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 1.524;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n  const [showEdit, setShowEdit] = useState(false);\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        const highlightSource = highlightLayer.getSource();\n        highlightSource.getFeatures().forEach(f => {\n          if (!f.get('isClosingSegment')) {\n            highlightSource.removeFeature(f);\n          }\n        });\n      }\n    }\n  }\n\n  //Polygon closing line shown with new style in highlight layer\n  function updateClosingSegmentOverlay() {\n    const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    // Remove previous closing segment overlays\n    highlightSource.getFeatures().forEach(f => {\n      if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n    if (drawingRef.current && polygonFeatureRef.current && polygonFeatureRef.current.getGeometry().getType() === 'Polygon') {\n      const coords = polygonFeatureRef.current.getGeometry().getCoordinates()[0];\n      if (coords.length > 1) {\n        const closingLine = new Feature(new LineString([coords[coords.length - 2], coords[0]]));\n        closingLine.setStyle(closingSegmentStyle);\n        closingLine.set('isClosingSegment', true);\n        highlightSource.addFeature(closingLine);\n      }\n    }\n  }\n  function handleEditHover(segmentIdx) {\n    if (!selectedFeature) return;\n    const map = mapRef.current;\n    if (!map) return;\n    const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n\n    // Remove previous highlights (except closing segments)\n    highlightSource.getFeatures().forEach(f => {\n      if (!f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n    const coords = selectedFeature.getGeometry().getCoordinates()[0];\n    const N = coords.length - 1;\n    if (segmentIdx < 0 || segmentIdx >= N) return;\n    const segment = [coords[segmentIdx], coords[(segmentIdx + 1) % N]];\n    const segFeature = new Feature(new LineString(segment));\n    segFeature.setStyle(highlightSegmentStyle);\n    highlightSource.addFeature(segFeature);\n  }\n  function handleEditUnhover() {\n    const map = mapRef.current;\n    if (!map) return;\n    const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    highlightSource.getFeatures().forEach(f => {\n      if (!f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n  }\n\n  //select features / style\n  useEffect(() => {\n    var _vectorSourceRef$curr, _vectorSourceRef$curr2;\n    const allFeatures = ((_vectorSourceRef$curr = vectorSourceRef.current) === null || _vectorSourceRef$curr === void 0 ? void 0 : (_vectorSourceRef$curr2 = _vectorSourceRef$curr.getFeatures) === null || _vectorSourceRef$curr2 === void 0 ? void 0 : _vectorSourceRef$curr2.call(_vectorSourceRef$curr)) || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  //Read textbox input to be mapped with addSegment\n  useEffect(() => {\n    textRef.current = text;\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  //Select vs Draw mode useEffect\n  useEffect(() => {\n    //sync modeRef with current mode\n    modeRef.current = mode;\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      let translate = new Translate({\n        layers: [vectorLayerRef.current],\n        condition: primaryAction\n      });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', evt => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n\n      // Custom snapping for translate interaction\n      translate.on('translating', evt => {\n        evt.features.forEach(feature => {\n          customSnapFeature(feature, vectorSourceRef.current, mapRef.current, 10); // 10 pixel tolerance\n        });\n      });\n\n      // Listen for translateend to track moves\n      translate.on('translateend', evt => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n        });\n      });\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  /* MAIN USE EFFECT */\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    map.addControl(new Rotate({\n      autoHide: false,\n      duration: 500\n    }));\n    const snapInteraction = new Snap({\n      source: vectorSourceRef.current\n    });\n    map.addInteraction(snapInteraction);\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else /* if (modeRef.current === 'select')*/{\n          highlightSource.getFeatures().forEach(f => {\n            if (!f.get('isClosingSegment')) {\n              highlightSource.removeFeature(f);\n            }\n          });\n          let found = false;\n          // Hover logic for highlightLayer lines\n          map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n            if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n              const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n\n              // Check for vertex hover first\n              for (let i = 0; i < coords.length; i++) {\n                const pixel = map.getPixelFromCoordinate(coords[i]);\n                const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n                if (dist < 8) {\n                  // 8 pixels tolerance for vertex\n                  const vertexFeature = new Feature(new Point(coords[i]));\n                  vertexFeature.setStyle(highlightVertexStyle);\n                  highlightSource.addFeature(vertexFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n\n              // If no vertex found, check for segment hover\n              for (let i = 0; i < coords.length - 1; i++) {\n                const seg = [coords[i], coords[i + 1]];\n                const pixel1 = map.getPixelFromCoordinate(seg[0]);\n                const pixel2 = map.getPixelFromCoordinate(seg[1]);\n                const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n                if (dist < 8) {\n                  // 8 pixels tolerance for segment\n                  const segFeature = new Feature(new LineString(seg));\n                  segFeature.setStyle(highlightSegmentStyle);\n                  highlightSource.addFeature(segFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n            }\n            return found;\n          });\n        }\n    });\n    function editExistingPolygon(snappedCoord, vectorSource) {\n      // Find a LineString whose endpoint matches snappedCoord\n      let foundLine = null;\n      let foundIndex = null;\n      vectorSource.getFeatures().forEach(feature => {\n        if (feature.getGeometry().getType() === 'LineString') {\n          const coords = feature.getGeometry().getCoordinates();\n          // Check both ends\n          if (coordsEqual(coords[0], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = 0;\n          } else if (coordsEqual(coords[coords.length - 1], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = coords.length - 1;\n          }\n        }\n      });\n      if (foundLine) {\n        // Remove the LineString from the source\n        clearPolygonOverlays(foundLine, mapRef);\n        vectorSource.removeFeature(foundLine);\n        let coords = foundLine.getGeometry().getCoordinates();\n        // If the user clicked the end, reverse so snappedCoord is first\n        if (foundIndex === coords.length - 1) {\n          coords = coords.slice().reverse();\n        }\n        // Start a new polygon with these coords (not closed yet)\n        return coords;\n      }\n      // No matching linestring found\n      return null;\n    }\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n        const vectorSource = vectorSourceRef.current;\n        let initialCoords = editExistingPolygon(snappedCoord, vectorSource);\n        let poly, feature;\n        if (initialCoords) {\n          // Remove all instances of snappedCoord from the array\n          let coords = initialCoords.filter(c => !coordsEqual(c, snappedCoord));\n          // Push snappedCoord to the end\n          coords.push(snappedCoord);\n\n          // Ensure the polygon is closed visually\n          if (coords.length > 2 && (coords[0][0] !== coords[coords.length - 1][0] || coords[0][1] !== coords[coords.length - 1][1])) {\n            coords.push([...coords[0]]);\n          }\n          console.log({\n            NEWPOLY: coords\n          });\n          // Create the polygon (now closed)\n          poly = new Polygon([coords]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: initialCoords,\n            // original LineString coordinates\n            newCoords: coords,\n            // new Polygon coordinates\n            geomType: 'Polygon',\n            prevGeomType: 'LineString'\n          });\n        } else {\n          // Normal: start polygon with just the clicked point\n          poly = new Polygon([[snappedCoord, snappedCoord]]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords: [],\n            newCoords: [[coord, coord]],\n            point: snappedCoord,\n            pointIndex: 0\n          });\n        }\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n      }\n    }\n    function selectClick(evt) {\n      // maybe\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      console.log({\n        AddSegmentCoords: coords\n      });\n      poly.setCoordinates([coords]);\n      updateClosingSegmentOverlay();\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n        point: newPt,\n        pointIndex: coords.length - 2\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              updateClosingSegmentOverlay();\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-circle') {\n          // Remove the circle feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-square') {\n          // Remove the square feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'delete-geo') {\n          // Restore the deleted feature\n          const format = new GeoJSON();\n          const restoredFeature = format.readFeature(lastAction.geojson);\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the polygon feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the original LineString\n          const restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'edit-segment-length') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            createSegmentOverlays(feature, mapRef);\n            updateClosingSegmentOverlay();\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the LineString feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the Polygon\n          const restoredFeature = new Feature(new Polygon([lastAction.newCoords]));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          restoredFeature.setStyle(activePolygonStyle);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-circle') {\n          // Re-add the circle feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-square') {\n          // Re-add the square feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'delete-geo') {\n          // Remove the feature again\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef); // Clear measurementsa\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'edit-segment-length') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            createSegmentOverlays(feature, mapRef);\n            updateClosingSegmentOverlay();\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n      const [start, end] = coords;\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n        const input = textRef.current.trim().toUpperCase();\n        let dx = 0,\n          dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R':\n                dx += meters;\n                break;\n              case 'L':\n                dx -= meters;\n                break;\n              case 'U':\n                dy += meters;\n                break;\n              case 'D':\n                dy -= meters;\n                break;\n              default:\n                break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords,\n            point: newPt,\n            pointIndex: coords.length - 2\n          });\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = angleDeg * Math.PI / 180 + rotation;\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n          point: newPt,\n          pointIndex: coords.length - 2\n        });\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n          setMode('');\n        }\n        const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (highlightLayer) {\n          const highlightSource = highlightLayer.getSource();\n          highlightSource.getFeatures().forEach(f => {\n            if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n          });\n        }\n      }\n      // ctrl + z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.key === 'R')) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dimension-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"dimension-input\",\n        ref: inputRef,\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Dimension (ft.)\",\n        autoFocus: true,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1066,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        title: \"Draw\",\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        disabled: mode === 'draw' && drawing,\n        children: /*#__PURE__*/_jsxDEV(DrawIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1084,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        title: \"Select / Move\",\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        disabled: mode === 'draw' && drawing,\n        children: /*#__PURE__*/_jsxDEV(HandIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1091,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1086,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(QuickShape, {\n        mapRef: mapRef,\n        vectorSourceRef: vectorSourceRef,\n        setDrawing: setDrawing,\n        setMode: setMode,\n        addHistoryAction: addHistoryAction,\n        mode: mode,\n        drawing: drawing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1093,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeleteGeo, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        clearPolygonOverlays: clearPolygonOverlays,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1094,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1078,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Clone, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1106,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        title: \"Show/Hide History\",\n        id: \"history-toggle\",\n        className: `map-button${showHistory ? ' active' : ''}`,\n        onClick: () => setShowHistory(v => !v),\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        title: \"Edit Segments\",\n        id: \"edit-toggle\",\n        className: `map-button${showEdit ? ' active' : ''}`,\n        onClick: () => setShowEdit(v => !v),\n        style: {\n          marginLeft: 8,\n          opacity: selectedFeature ? 1 : 0.5,\n          pointerEvents: selectedFeature ? 'auto' : 'none'\n        },\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction,\n      drawing: drawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1123,\n      columnNumber: 7\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1133,\n      columnNumber: 9\n    }, this), showEdit && selectedFeature && /*#__PURE__*/_jsxDEV(Edit, {\n      feature: selectedFeature,\n      onSegmentHover: handleEditHover,\n      onSegmentUnhover: handleEditUnhover,\n      onSegmentLengthChange: onSegmentLengthChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1139,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1065,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"jklY07YRge6ikylbs+GnhBeykdE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","fromLonLat","ScaleLine","Rotate","Translate","Snap","primaryAction","GeoJSON","DeleteGeo","History","Edit","FlipHorizButton","FlipVertButton","RightClick","Clone","QuickShape","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","closingSegmentStyle","DrawIcon","HandIcon","coordsEqual","getSnappedCoordinate","customSnapFeature","clearPolygonOverlays","createSegmentOverlays","pointToSegmentDistance","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","textRef","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","polygonFeatureRef","drawingRef","drawing","setDrawing","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","showHistory","setShowHistory","showEdit","setShowEdit","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","highlightSource","getSource","getFeatures","forEach","f","removeFeature","updateClosingSegmentOverlay","getGeometry","getType","coords","getCoordinates","length","closingLine","setStyle","set","addFeature","handleEditHover","segmentIdx","map","N","segment","segFeature","handleEditUnhover","_vectorSourceRef$curr","_vectorSourceRef$curr2","allFeatures","call","val","parseFloat","isNaN","removeInteraction","translate","layers","condition","addInteraction","on","evt","features","prevCoords","newCoords","featureId","getId","vectorSource","vectorLayer","source","style","target","view","center","zoom","addControl","units","autoHide","duration","snapInteraction","name","addLayer","coord","coordinate","pixel","snappedCoord","ghost","found","forEachFeatureAtPixel","i","getPixelFromCoordinate","dist","Math","sqrt","pow","vertexFeature","seg","pixel1","pixel2","editExistingPolygon","foundLine","foundIndex","slice","reverse","drawClick","initialCoords","poly","filter","c","push","console","log","NEWPOLY","setId","Date","now","toString","geomType","prevGeomType","point","pointIndex","selectClick","getFeaturesAtPixel","includes","allPolygons","currentIdx","nextIdx","nextFeature","addSegment","direction","last","dx","dy","OFFSET","rotation","getView","getRotation","cos","sin","rotatedDx","rotatedDy","newPt","AddSegmentCoords","setCoordinates","handleUndo","lastActionForRedo","lastAction","featureToRemove","restoredFeature","format","readFeature","geojson","redoPrev","handleRedo","require","default","lineFeature","remarkLineSegments","histPrev","rotateMapToHighlightedSegment","start","end","currentRotation","startPixel","endPixel","unrotatedDx","unrotatedDy","angle","atan2","PI","animate","handleKeyDown","e","key","preventDefault","input","trim","toUpperCase","dirPattern","test","parts","split","s","part","dir","meters","distance","angleDeg","distStr","angleStr","angleRad","dx2","dy2","ctrlKey","metaKey","document","addEventListener","setTarget","removeEventListener","children","id","ref","value","onChange","placeholder","autoFocus","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","title","className","onClick","disabled","v","marginLeft","opacity","pointerEvents","onSegmentHover","onSegmentUnhover","onSegmentLengthChange","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport Snap from 'ol/interaction/Snap';\nimport { /*always,*/  primaryAction } from 'ol/events/condition';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport DeleteGeo from './map-actions/DeleteGeo';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport Edit from './map-helpers/Edit';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\nimport QuickShape from './map-actions/QuickShape';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle,\n  closingSegmentStyle\n} from './ol-styles';\n\n/* svgs */\nimport {\n  DrawIcon,\n  HandIcon\n} from './svg';\n\n/*custom snapping imports*/\nimport {\n  coordsEqual,\n  getSnappedCoordinate,\n  customSnapFeature,\n} from './map-helpers/Snapping';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\n\nconst OFFSET_REF_DEFAULT = 1.524;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n  const [showEdit, setShowEdit] = useState(false);\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        const highlightSource = highlightLayer.getSource();\n        highlightSource.getFeatures().forEach(f => {\n          if (!f.get('isClosingSegment')) {\n            highlightSource.removeFeature(f);\n          }\n        });\n      }\n    }\n  }\n\n  //Polygon closing line shown with new style in highlight layer\n  function updateClosingSegmentOverlay() {\n    const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    // Remove previous closing segment overlays\n    highlightSource.getFeatures().forEach(f => {\n      if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n\n    if (\n      drawingRef.current &&\n      polygonFeatureRef.current &&\n      polygonFeatureRef.current.getGeometry().getType() === 'Polygon'\n    ) {\n      const coords = polygonFeatureRef.current.getGeometry().getCoordinates()[0];\n\n      if (coords.length > 1) {\n        const closingLine = new Feature(new LineString([coords[coords.length - 2], coords[0]]));\n        closingLine.setStyle(closingSegmentStyle);\n        closingLine.set('isClosingSegment', true);\n        highlightSource.addFeature(closingLine);\n      }\n    }\n  }\n\n  function handleEditHover(segmentIdx) {\n    if (!selectedFeature) return;\n    const map = mapRef.current;\n    if (!map) return;\n    const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n\n    // Remove previous highlights (except closing segments)\n    highlightSource.getFeatures().forEach(f => {\n      if (!f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n\n    const coords = selectedFeature.getGeometry().getCoordinates()[0];\n    const N = coords.length - 1;\n    if (segmentIdx < 0 || segmentIdx >= N) return;\n\n    const segment = [\n      coords[segmentIdx],\n      coords[(segmentIdx + 1) % N]\n    ];\n\n    const segFeature = new Feature(new LineString(segment));\n    segFeature.setStyle(highlightSegmentStyle);\n    highlightSource.addFeature(segFeature);\n  }\n  function handleEditUnhover() {\n    const map = mapRef.current;\n    if (!map) return;\n    const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    highlightSource.getFeatures().forEach(f => {\n      if (!f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n  }\n\n  //select features / style\n  useEffect(() => {\n    const allFeatures = vectorSourceRef.current?.getFeatures?.() || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  //Read textbox input to be mapped with addSegment\n  useEffect(() => {\n    textRef.current = text;\n\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  //Select vs Draw mode useEffect\n  useEffect(() => {\n    //sync modeRef with current mode\n    modeRef.current = mode;\n\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      let translate = new Translate({ layers: [vectorLayerRef.current], condition: primaryAction });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', (evt) => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n\n      // Custom snapping for translate interaction\n      translate.on('translating', (evt) => {\n        evt.features.forEach(feature => {\n          customSnapFeature(feature, vectorSourceRef.current, mapRef.current, 10); // 10 pixel tolerance\n        });\n      });\n\n      // Listen for translateend to track moves\n      translate.on('translateend', (evt) => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords,\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n        });\n      });\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  /* MAIN USE EFFECT */\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    map.addControl(new Rotate({ autoHide: false, duration: 500 }));\n\n    const snapInteraction = new Snap({ source: vectorSourceRef.current });\n    map.addInteraction(snapInteraction)\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else/* if (modeRef.current === 'select')*/ {\n        highlightSource.getFeatures().forEach(f => {\n          if (!f.get('isClosingSegment')) {\n            highlightSource.removeFeature(f);\n          }\n        });\n\n        let found = false;\n        // Hover logic for highlightLayer lines\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n\n    function editExistingPolygon(snappedCoord, vectorSource) {\n      // Find a LineString whose endpoint matches snappedCoord\n      let foundLine = null;\n      let foundIndex = null;\n      vectorSource.getFeatures().forEach(feature => {\n        if (feature.getGeometry().getType() === 'LineString') {\n          const coords = feature.getGeometry().getCoordinates();\n          // Check both ends\n          if (coordsEqual(coords[0], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = 0;\n          } else if (coordsEqual(coords[coords.length - 1], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = coords.length - 1;\n          }\n        }\n      });\n\n      if (foundLine) {\n        // Remove the LineString from the source\n        clearPolygonOverlays(foundLine, mapRef);\n        vectorSource.removeFeature(foundLine);\n        let coords = foundLine.getGeometry().getCoordinates();\n        // If the user clicked the end, reverse so snappedCoord is first\n        if (foundIndex === coords.length - 1) {\n          coords = coords.slice().reverse();\n        }\n        // Start a new polygon with these coords (not closed yet)\n        return coords;\n      }\n      // No matching linestring found\n      return null;\n    }\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n\n        const vectorSource = vectorSourceRef.current;\n        let initialCoords = editExistingPolygon(snappedCoord, vectorSource);\n\n        let poly, feature;\n\n        if (initialCoords) {\n          // Remove all instances of snappedCoord from the array\n          let coords = initialCoords.filter(c => !coordsEqual(c, snappedCoord));\n          // Push snappedCoord to the end\n          coords.push(snappedCoord);\n\n          // Ensure the polygon is closed visually\n          if (\n            coords.length > 2 &&\n            (coords[0][0] !== coords[coords.length - 1][0] ||\n              coords[0][1] !== coords[coords.length - 1][1])\n          ) {\n            coords.push([...coords[0]]);\n          }\n\n          console.log({ NEWPOLY: coords });\n          // Create the polygon (now closed)\n          poly = new Polygon([coords]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: initialCoords, // original LineString coordinates\n            newCoords: coords,         // new Polygon coordinates\n            geomType: 'Polygon',\n            prevGeomType: 'LineString'\n          });\n        } else {\n          // Normal: start polygon with just the clicked point\n          poly = new Polygon([[snappedCoord, snappedCoord]]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords: [],\n            newCoords: [[coord, coord]],\n            point: snappedCoord,\n            pointIndex: 0\n          });\n        }\n\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n      }\n    }\n\n    function selectClick(evt) { // maybe\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      console.log({ AddSegmentCoords: coords });\n      poly.setCoordinates([coords]);\n      updateClosingSegmentOverlay();\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n        point: newPt,\n        pointIndex: coords.length - 2\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              updateClosingSegmentOverlay();\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-circle') {\n          // Remove the circle feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-square') {\n          // Remove the square feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'delete-geo') {\n          // Restore the deleted feature\n          const format = new GeoJSON();\n          const restoredFeature = format.readFeature(lastAction.geojson);\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the polygon feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the original LineString\n          const restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'edit-segment-length') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            createSegmentOverlays(feature, mapRef);\n            updateClosingSegmentOverlay();\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the LineString feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the Polygon\n          const restoredFeature = new Feature(new Polygon([lastAction.newCoords]));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          restoredFeature.setStyle(activePolygonStyle);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-circle') {\n          // Re-add the circle feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-square') {\n          // Re-add the square feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'delete-geo') {\n          // Remove the feature again\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef); // Clear measurementsa\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'edit-segment-length') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            createSegmentOverlays(feature, mapRef);\n            updateClosingSegmentOverlay();\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [\n        (start[0] + end[0]) / 2,\n        (start[1] + end[1]) / 2\n      ];\n\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n        const input = textRef.current.trim().toUpperCase();\n\n        let dx = 0, dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R': dx += meters; break;\n              case 'L': dx -= meters; break;\n              case 'U': dy += meters; break;\n              case 'D': dy -= meters; break;\n              default: break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords,\n            point: newPt,\n            pointIndex: coords.length - 2\n          });\n\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = (angleDeg * Math.PI) / 180 + rotation;\n\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n          point: newPt,\n          pointIndex: coords.length - 2\n        });\n\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n          setMode('');\n        }\n        const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (highlightLayer) {\n          const highlightSource = highlightLayer.getSource();\n          highlightSource.getFeatures().forEach(f => {\n            if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n          });\n        }\n\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"dimension-input-container\">\n        <input\n          id=\"dimension-input\"\n          ref={inputRef}\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n          placeholder=\"Dimension (ft.)\"\n          autoFocus\n          autoComplete='off'\n        />\n      </div>\n      <div id=\"map-menu-vert\">\n        <button\n          title=\"Draw\"\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n          disabled={mode === 'draw' && drawing}>\n          <DrawIcon />\n        </button>\n        <button\n          title=\"Select / Move\"\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n          disabled={mode === 'draw' && drawing}>\n          <HandIcon />\n        </button>\n        <QuickShape mapRef={mapRef} vectorSourceRef={vectorSourceRef} setDrawing={setDrawing} setMode={setMode} addHistoryAction={addHistoryAction} mode={mode} drawing={drawing} />\n        <DeleteGeo\n          selectedFeature={selectedFeature}\n          vectorSourceRef={vectorSourceRef}\n          setSelectedFeature={setSelectedFeature}\n          addHistoryAction={addHistoryAction}\n          clearPolygonOverlays={clearPolygonOverlays}\n          mapRef={mapRef}\n        />\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <Clone selectedFeature={selectedFeature} vectorSourceRef={vectorSourceRef} setSelectedFeature={setSelectedFeature} addHistoryAction={addHistoryAction} mapRef={mapRef} />\n        <div title=\"Show/Hide History\" id=\"history-toggle\" className={`map-button${showHistory ? ' active' : ''}`} onClick={() => setShowHistory(v => !v)}>\n          History\n        </div>\n        <div\n          title=\"Edit Segments\"\n          id=\"edit-toggle\"\n          className={`map-button${showEdit ? ' active' : ''}`}\n          onClick={() => setShowEdit(v => !v)}\n          style={{ marginLeft: 8, opacity: selectedFeature ? 1 : 0.5, pointerEvents: selectedFeature ? 'auto' : 'none' }}\n        >\n          Edit\n        </div>\n        {/* <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div> */}\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n        drawing={drawing}\n      />\n      {showHistory && (\n        <History\n          history={history}\n          redoStack={redoStack}\n        />\n      )}\n      {showEdit && selectedFeature && (\n        <Edit\n          feature={selectedFeature}\n          onSegmentHover={handleEditHover}\n          onSegmentUnhover={handleEditUnhover}\n          onSegmentLengthChange={onSegmentLengthChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}