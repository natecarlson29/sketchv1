{"ast":null,"code":"/**\n * @module ol/MapBrowserEventHandler\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport EventType from './events/EventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport Target from './events/Target.js';\nimport { PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { VOID } from './functions.js';\nimport { getValues } from './obj.js';\nimport { listen, unlistenByKey } from './events.js';\nvar MapBrowserEventHandler = /** @class */function (_super) {\n  __extends(MapBrowserEventHandler, _super);\n  /**\n   * @param {import(\"./PluggableMap.js\").default} map The map with the viewport to listen to events on.\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n   */\n  function MapBrowserEventHandler(map, moveTolerance) {\n    var _this = _super.call(this, map) || this;\n    /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @private\n     */\n    _this.map_ = map;\n    /**\n     * @type {any}\n     * @private\n     */\n    _this.clickTimeoutId_;\n    /**\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n     * @type {boolean}\n     */\n    _this.emulateClicks_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.dragging_ = false;\n    /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */\n    _this.dragListenerKeys_ = [];\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n    /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {PointerEvent|null}\n     * @private\n     */\n    _this.down_ = null;\n    var element = _this.map_.getViewport();\n    /**\n     * @type {Array<PointerEvent>}\n     * @private\n     */\n    _this.activePointers_ = [];\n    /**\n     * @type {!Object<number, Event>}\n     * @private\n     */\n    _this.trackedTouches_ = {};\n    _this.element_ = element;\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    _this.pointerdownListenerKey_ = listen(element, PointerEventType.POINTERDOWN, _this.handlePointerDown_, _this);\n    /**\n     * @type {PointerEvent}\n     * @private\n     */\n    _this.originalPointerMoveEvent_;\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    _this.relayedListenerKey_ = listen(element, PointerEventType.POINTERMOVE, _this.relayMoveEvent_, _this);\n    /**\n     * @private\n     */\n    _this.boundHandleTouchMove_ = _this.handleTouchMove_.bind(_this);\n    _this.element_.addEventListener(EventType.TOUCHMOVE, _this.boundHandleTouchMove_, PASSIVE_EVENT_LISTENERS ? {\n      passive: false\n    } : false);\n    return _this;\n  }\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.emulateClick_ = function (pointerEvent) {\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.CLICK, this.map_, pointerEvent);\n    this.dispatchEvent(newEvent);\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserEvent(MapBrowserEventType.DBLCLICK, this.map_, pointerEvent);\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(/** @this {MapBrowserEventHandler} */\n      function () {\n        this.clickTimeoutId_ = undefined;\n        var newEvent = new MapBrowserEvent(MapBrowserEventType.SINGLECLICK, this.map_, pointerEvent);\n        this.dispatchEvent(newEvent);\n      }.bind(this), 250);\n    }\n  };\n  /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.updateActivePointers_ = function (pointerEvent) {\n    var event = pointerEvent;\n    var id = event.pointerId;\n    if (event.type == MapBrowserEventType.POINTERUP || event.type == MapBrowserEventType.POINTERCANCEL) {\n      delete this.trackedTouches_[id];\n      for (var pointerId in this.trackedTouches_) {\n        if (this.trackedTouches_[pointerId].target !== event.target) {\n          // Some platforms assign a new pointerId when the target changes.\n          // If this happens, delete one tracked pointer. If there is more\n          // than one tracked pointer for the old target, it will be cleared\n          // by subsequent POINTERUP events from other pointers.\n          delete this.trackedTouches_[pointerId];\n          break;\n        }\n      }\n    } else if (event.type == MapBrowserEventType.POINTERDOWN || event.type == MapBrowserEventType.POINTERMOVE) {\n      this.trackedTouches_[id] = event;\n    }\n    this.activePointers_ = getValues(this.trackedTouches_);\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.handlePointerUp_ = function (pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERUP, this.map_, pointerEvent, undefined, undefined, this.activePointers_);\n    this.dispatchEvent(newEvent);\n    // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.preventDefault().\n    if (this.emulateClicks_ && !newEvent.defaultPrevented && !this.dragging_ && this.isMouseActionButton_(pointerEvent)) {\n      this.emulateClick_(this.down_);\n    }\n    if (this.activePointers_.length === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.isMouseActionButton_ = function (pointerEvent) {\n    return pointerEvent.button === 0;\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.handlePointerDown_ = function (pointerEvent) {\n    this.emulateClicks_ = this.activePointers_.length === 0;\n    this.updateActivePointers_(pointerEvent);\n    var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDOWN, this.map_, pointerEvent, undefined, undefined, this.activePointers_);\n    this.dispatchEvent(newEvent);\n    // Store a copy of the down event\n    this.down_ = /** @type {PointerEvent} */{};\n    for (var property in pointerEvent) {\n      var value = pointerEvent[property];\n      this.down_[property] = typeof value === 'function' ? VOID : value;\n    }\n    if (this.dragListenerKeys_.length === 0) {\n      var doc = this.map_.getOwnerDocument();\n      this.dragListenerKeys_.push(listen(doc, MapBrowserEventType.POINTERMOVE, this.handlePointerMove_, this), listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\n      /* Note that the listener for `pointercancel is set up on\n       * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n       * the `pointerup` and `pointermove` listeners.\n       *\n       * The reason for this is the following: `TouchSource.vacuumTouches_()`\n       * issues `pointercancel` events, when there was no `touchend` for a\n       * `touchstart`. Now, let's say a first `touchstart` is registered on\n       * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n       * But `documentPointerEventHandler_` doesn't know about the first\n       * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n       * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n       * only registered there.\n       */\n      listen(this.element_, MapBrowserEventType.POINTERCANCEL, this.handlePointerUp_, this));\n      if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\n        this.dragListenerKeys_.push(listen(this.element_.getRootNode(), MapBrowserEventType.POINTERUP, this.handlePointerUp_, this));\n      }\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.handlePointerMove_ = function (pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.updateActivePointers_(pointerEvent);\n      this.dragging_ = true;\n      var newEvent = new MapBrowserEvent(MapBrowserEventType.POINTERDRAG, this.map_, pointerEvent, this.dragging_, undefined, this.activePointers_);\n      this.dispatchEvent(newEvent);\n    }\n  };\n  /**\n   * Wrap and relay a pointermove event.\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.relayMoveEvent_ = function (pointerEvent) {\n    this.originalPointerMoveEvent_ = pointerEvent;\n    var dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(new MapBrowserEvent(MapBrowserEventType.POINTERMOVE, this.map_, pointerEvent, dragging));\n  };\n  /**\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n   * when an interaction (currently `DragPan` handles the event.\n   * @param {TouchEvent} event Event.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.handleTouchMove_ = function (event) {\n    // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n    // may not be initialized yet when we get here on a platform without native pointer events.\n    var originalEvent = this.originalPointerMoveEvent_;\n    if ((!originalEvent || originalEvent.defaultPrevented) && (typeof event.cancelable !== 'boolean' || event.cancelable === true)) {\n      event.preventDefault();\n    }\n  };\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */\n  MapBrowserEventHandler.prototype.isMoving_ = function (pointerEvent) {\n    return this.dragging_ || Math.abs(pointerEvent.clientX - this.down_.clientX) > this.moveTolerance_ || Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_;\n  };\n  /**\n   * Clean up.\n   */\n  MapBrowserEventHandler.prototype.disposeInternal = function () {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n    this.element_.removeEventListener(EventType.TOUCHMOVE, this.boundHandleTouchMove_);\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n    this.element_ = null;\n    _super.prototype.disposeInternal.call(this);\n  };\n  return MapBrowserEventHandler;\n}(Target);\nexport default MapBrowserEventHandler;","map":{"version":3,"names":["EventType","MapBrowserEvent","MapBrowserEventType","PointerEventType","Target","PASSIVE_EVENT_LISTENERS","VOID","getValues","listen","unlistenByKey","MapBrowserEventHandler","_super","__extends","map","moveTolerance","_this","call","map_","clickTimeoutId_","emulateClicks_","dragging_","dragListenerKeys_","moveTolerance_","undefined","down_","element","getViewport","activePointers_","trackedTouches_","element_","pointerdownListenerKey_","POINTERDOWN","handlePointerDown_","originalPointerMoveEvent_","relayedListenerKey_","POINTERMOVE","relayMoveEvent_","boundHandleTouchMove_","handleTouchMove_","bind","addEventListener","TOUCHMOVE","passive","prototype","emulateClick_","pointerEvent","newEvent","CLICK","dispatchEvent","clearTimeout","DBLCLICK","setTimeout","SINGLECLICK","updateActivePointers_","event","id","pointerId","type","POINTERUP","POINTERCANCEL","target","handlePointerUp_","defaultPrevented","isMouseActionButton_","length","forEach","button","property","value","doc","getOwnerDocument","push","handlePointerMove_","getRootNode","isMoving_","POINTERDRAG","dragging","originalEvent","cancelable","preventDefault","Math","abs","clientX","clientY","disposeInternal","removeEventListener"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\MapBrowserEventHandler.js"],"sourcesContent":["/**\n * @module ol/MapBrowserEventHandler\n */\n\nimport EventType from './events/EventType.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport Target from './events/Target.js';\nimport {PASSIVE_EVENT_LISTENERS} from './has.js';\nimport {VOID} from './functions.js';\nimport {getValues} from './obj.js';\nimport {listen, unlistenByKey} from './events.js';\n\nclass MapBrowserEventHandler extends Target {\n  /**\n   * @param {import(\"./PluggableMap.js\").default} map The map with the viewport to listen to events on.\n   * @param {number} [moveTolerance] The minimal distance the pointer must travel to trigger a move.\n   */\n  constructor(map, moveTolerance) {\n    super(map);\n\n    /**\n     * This is the element that we will listen to the real events on.\n     * @type {import(\"./PluggableMap.js\").default}\n     * @private\n     */\n    this.map_ = map;\n\n    /**\n     * @type {any}\n     * @private\n     */\n    this.clickTimeoutId_;\n\n    /**\n     * Emulate dblclick and singleclick. Will be true when only one pointer is active.\n     * @type {boolean}\n     */\n    this.emulateClicks_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_ = false;\n\n    /**\n     * @type {!Array<import(\"./events.js\").EventsKey>}\n     * @private\n     */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.moveTolerance_ = moveTolerance === undefined ? 1 : moveTolerance;\n\n    /**\n     * The most recent \"down\" type event (or null if none have occurred).\n     * Set on pointerdown.\n     * @type {PointerEvent|null}\n     * @private\n     */\n    this.down_ = null;\n\n    const element = this.map_.getViewport();\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @private\n     */\n    this.activePointers_ = [];\n\n    /**\n     * @type {!Object<number, Event>}\n     * @private\n     */\n    this.trackedTouches_ = {};\n\n    this.element_ = element;\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.pointerdownListenerKey_ = listen(\n      element,\n      PointerEventType.POINTERDOWN,\n      this.handlePointerDown_,\n      this\n    );\n\n    /**\n     * @type {PointerEvent}\n     * @private\n     */\n    this.originalPointerMoveEvent_;\n\n    /**\n     * @type {?import(\"./events.js\").EventsKey}\n     * @private\n     */\n    this.relayedListenerKey_ = listen(\n      element,\n      PointerEventType.POINTERMOVE,\n      this.relayMoveEvent_,\n      this\n    );\n\n    /**\n     * @private\n     */\n    this.boundHandleTouchMove_ = this.handleTouchMove_.bind(this);\n\n    this.element_.addEventListener(\n      EventType.TOUCHMOVE,\n      this.boundHandleTouchMove_,\n      PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n    );\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  emulateClick_(pointerEvent) {\n    let newEvent = new MapBrowserEvent(\n      MapBrowserEventType.CLICK,\n      this.map_,\n      pointerEvent\n    );\n    this.dispatchEvent(newEvent);\n    if (this.clickTimeoutId_ !== undefined) {\n      // double-click\n      clearTimeout(this.clickTimeoutId_);\n      this.clickTimeoutId_ = undefined;\n      newEvent = new MapBrowserEvent(\n        MapBrowserEventType.DBLCLICK,\n        this.map_,\n        pointerEvent\n      );\n      this.dispatchEvent(newEvent);\n    } else {\n      // click\n      this.clickTimeoutId_ = setTimeout(\n        /** @this {MapBrowserEventHandler} */\n        function () {\n          this.clickTimeoutId_ = undefined;\n          const newEvent = new MapBrowserEvent(\n            MapBrowserEventType.SINGLECLICK,\n            this.map_,\n            pointerEvent\n          );\n          this.dispatchEvent(newEvent);\n        }.bind(this),\n        250\n      );\n    }\n  }\n\n  /**\n   * Keeps track on how many pointers are currently active.\n   *\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  updateActivePointers_(pointerEvent) {\n    const event = pointerEvent;\n    const id = event.pointerId;\n\n    if (\n      event.type == MapBrowserEventType.POINTERUP ||\n      event.type == MapBrowserEventType.POINTERCANCEL\n    ) {\n      delete this.trackedTouches_[id];\n      for (const pointerId in this.trackedTouches_) {\n        if (this.trackedTouches_[pointerId].target !== event.target) {\n          // Some platforms assign a new pointerId when the target changes.\n          // If this happens, delete one tracked pointer. If there is more\n          // than one tracked pointer for the old target, it will be cleared\n          // by subsequent POINTERUP events from other pointers.\n          delete this.trackedTouches_[pointerId];\n          break;\n        }\n      }\n    } else if (\n      event.type == MapBrowserEventType.POINTERDOWN ||\n      event.type == MapBrowserEventType.POINTERMOVE\n    ) {\n      this.trackedTouches_[id] = event;\n    }\n    this.activePointers_ = getValues(this.trackedTouches_);\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerUp_(pointerEvent) {\n    this.updateActivePointers_(pointerEvent);\n    const newEvent = new MapBrowserEvent(\n      MapBrowserEventType.POINTERUP,\n      this.map_,\n      pointerEvent,\n      undefined,\n      undefined,\n      this.activePointers_\n    );\n    this.dispatchEvent(newEvent);\n\n    // We emulate click events on left mouse button click, touch contact, and pen\n    // contact. isMouseActionButton returns true in these cases (evt.button is set\n    // to 0).\n    // See http://www.w3.org/TR/pointerevents/#button-states\n    // We only fire click, singleclick, and doubleclick if nobody has called\n    // event.preventDefault().\n    if (\n      this.emulateClicks_ &&\n      !newEvent.defaultPrevented &&\n      !this.dragging_ &&\n      this.isMouseActionButton_(pointerEvent)\n    ) {\n      this.emulateClick_(this.down_);\n    }\n\n    if (this.activePointers_.length === 0) {\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n      this.dragging_ = false;\n      this.down_ = null;\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} If the left mouse button was pressed.\n   * @private\n   */\n  isMouseActionButton_(pointerEvent) {\n    return pointerEvent.button === 0;\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerDown_(pointerEvent) {\n    this.emulateClicks_ = this.activePointers_.length === 0;\n    this.updateActivePointers_(pointerEvent);\n    const newEvent = new MapBrowserEvent(\n      MapBrowserEventType.POINTERDOWN,\n      this.map_,\n      pointerEvent,\n      undefined,\n      undefined,\n      this.activePointers_\n    );\n    this.dispatchEvent(newEvent);\n\n    // Store a copy of the down event\n    this.down_ = /** @type {PointerEvent} */ ({});\n    for (const property in pointerEvent) {\n      const value = pointerEvent[property];\n      this.down_[property] = typeof value === 'function' ? VOID : value;\n    }\n\n    if (this.dragListenerKeys_.length === 0) {\n      const doc = this.map_.getOwnerDocument();\n      this.dragListenerKeys_.push(\n        listen(\n          doc,\n          MapBrowserEventType.POINTERMOVE,\n          this.handlePointerMove_,\n          this\n        ),\n        listen(doc, MapBrowserEventType.POINTERUP, this.handlePointerUp_, this),\n        /* Note that the listener for `pointercancel is set up on\n         * `pointerEventHandler_` and not `documentPointerEventHandler_` like\n         * the `pointerup` and `pointermove` listeners.\n         *\n         * The reason for this is the following: `TouchSource.vacuumTouches_()`\n         * issues `pointercancel` events, when there was no `touchend` for a\n         * `touchstart`. Now, let's say a first `touchstart` is registered on\n         * `pointerEventHandler_`. The `documentPointerEventHandler_` is set up.\n         * But `documentPointerEventHandler_` doesn't know about the first\n         * `touchstart`. If there is no `touchend` for the `touchstart`, we can\n         * only receive a `touchcancel` from `pointerEventHandler_`, because it is\n         * only registered there.\n         */\n        listen(\n          this.element_,\n          MapBrowserEventType.POINTERCANCEL,\n          this.handlePointerUp_,\n          this\n        )\n      );\n      if (this.element_.getRootNode && this.element_.getRootNode() !== doc) {\n        this.dragListenerKeys_.push(\n          listen(\n            this.element_.getRootNode(),\n            MapBrowserEventType.POINTERUP,\n            this.handlePointerUp_,\n            this\n          )\n        );\n      }\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  handlePointerMove_(pointerEvent) {\n    // Between pointerdown and pointerup, pointermove events are triggered.\n    // To avoid a 'false' touchmove event to be dispatched, we test if the pointer\n    // moved a significant distance.\n    if (this.isMoving_(pointerEvent)) {\n      this.updateActivePointers_(pointerEvent);\n      this.dragging_ = true;\n      const newEvent = new MapBrowserEvent(\n        MapBrowserEventType.POINTERDRAG,\n        this.map_,\n        pointerEvent,\n        this.dragging_,\n        undefined,\n        this.activePointers_\n      );\n      this.dispatchEvent(newEvent);\n    }\n  }\n\n  /**\n   * Wrap and relay a pointermove event.\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @private\n   */\n  relayMoveEvent_(pointerEvent) {\n    this.originalPointerMoveEvent_ = pointerEvent;\n    const dragging = !!(this.down_ && this.isMoving_(pointerEvent));\n    this.dispatchEvent(\n      new MapBrowserEvent(\n        MapBrowserEventType.POINTERMOVE,\n        this.map_,\n        pointerEvent,\n        dragging\n      )\n    );\n  }\n\n  /**\n   * Flexible handling of a `touch-action: none` css equivalent: because calling\n   * `preventDefault()` on a `pointermove` event does not stop native page scrolling\n   * and zooming, we also listen for `touchmove` and call `preventDefault()` on it\n   * when an interaction (currently `DragPan` handles the event.\n   * @param {TouchEvent} event Event.\n   * @private\n   */\n  handleTouchMove_(event) {\n    // Due to https://github.com/mpizenberg/elm-pep/issues/2, `this.originalPointerMoveEvent_`\n    // may not be initialized yet when we get here on a platform without native pointer events.\n    const originalEvent = this.originalPointerMoveEvent_;\n    if (\n      (!originalEvent || originalEvent.defaultPrevented) &&\n      (typeof event.cancelable !== 'boolean' || event.cancelable === true)\n    ) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * @param {PointerEvent} pointerEvent Pointer\n   * event.\n   * @return {boolean} Is moving.\n   * @private\n   */\n  isMoving_(pointerEvent) {\n    return (\n      this.dragging_ ||\n      Math.abs(pointerEvent.clientX - this.down_.clientX) >\n        this.moveTolerance_ ||\n      Math.abs(pointerEvent.clientY - this.down_.clientY) > this.moveTolerance_\n    );\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.relayedListenerKey_) {\n      unlistenByKey(this.relayedListenerKey_);\n      this.relayedListenerKey_ = null;\n    }\n    this.element_.removeEventListener(\n      EventType.TOUCHMOVE,\n      this.boundHandleTouchMove_\n    );\n\n    if (this.pointerdownListenerKey_) {\n      unlistenByKey(this.pointerdownListenerKey_);\n      this.pointerdownListenerKey_ = null;\n    }\n\n    this.dragListenerKeys_.forEach(unlistenByKey);\n    this.dragListenerKeys_.length = 0;\n\n    this.element_ = null;\n    super.disposeInternal();\n  }\n}\n\nexport default MapBrowserEventHandler;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}