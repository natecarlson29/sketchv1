{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport { abstract } from '../util.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nvar JSONFeature = /** @class */function (_super) {\n  __extends(JSONFeature, _super);\n  function JSONFeature() {\n    return _super.call(this) || this;\n  }\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  JSONFeature.prototype.getType = function () {\n    return 'json';\n  };\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  JSONFeature.prototype.readFeature = function (source, opt_options) {\n    return this.readFeatureFromObject(getObject(source), this.getReadOptions(source, opt_options));\n  };\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  JSONFeature.prototype.readFeatures = function (source, opt_options) {\n    return this.readFeaturesFromObject(getObject(source), this.getReadOptions(source, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  JSONFeature.prototype.readFeatureFromObject = function (object, opt_options) {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  JSONFeature.prototype.readFeaturesFromObject = function (object, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  JSONFeature.prototype.readGeometry = function (source, opt_options) {\n    return this.readGeometryFromObject(getObject(source), this.getReadOptions(source, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  JSONFeature.prototype.readGeometryFromObject = function (object, opt_options) {\n    return abstract();\n  };\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  JSONFeature.prototype.readProjection = function (source) {\n    return this.readProjectionFromObject(getObject(source));\n  };\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  JSONFeature.prototype.readProjectionFromObject = function (object) {\n    return abstract();\n  };\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  JSONFeature.prototype.writeFeature = function (feature, opt_options) {\n    return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n  JSONFeature.prototype.writeFeatureObject = function (feature, opt_options) {\n    return abstract();\n  };\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  JSONFeature.prototype.writeFeatures = function (features, opt_options) {\n    return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n  JSONFeature.prototype.writeFeaturesObject = function (features, opt_options) {\n    return abstract();\n  };\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n  JSONFeature.prototype.writeGeometry = function (geometry, opt_options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n  };\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n  JSONFeature.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return abstract();\n  };\n  return JSONFeature;\n}(FeatureFormat);\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    var object = JSON.parse(source);\n    return object ? (/** @type {Object} */object) : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\nexport default JSONFeature;","map":{"version":3,"names":["FeatureFormat","abstract","JSONFeature","_super","__extends","call","prototype","getType","readFeature","source","opt_options","readFeatureFromObject","getObject","getReadOptions","readFeatures","readFeaturesFromObject","object","readGeometry","readGeometryFromObject","readProjection","readProjectionFromObject","writeFeature","feature","JSON","stringify","writeFeatureObject","writeFeatures","features","writeFeaturesObject","writeGeometry","geometry","writeGeometryObject","parse"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\format\\JSONFeature.js"],"sourcesContent":["/**\n * @module ol/format/JSONFeature\n */\nimport FeatureFormat from './Feature.js';\nimport {abstract} from '../util.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for JSON feature formats.\n *\n * @abstract\n */\nclass JSONFeature extends FeatureFormat {\n  constructor() {\n    super();\n  }\n\n  /**\n   * @return {import(\"./Feature.js\").Type} Format.\n   */\n  getType() {\n    return 'json';\n  }\n\n  /**\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\n   * read a feature collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../Feature.js\").default} Feature.\n   * @api\n   */\n  readFeature(source, opt_options) {\n    return this.readFeatureFromObject(\n      getObject(source),\n      this.getReadOptions(source, opt_options)\n    );\n  }\n\n  /**\n   * Read all features.  Works with both a single feature and a feature\n   * collection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   * @api\n   */\n  readFeatures(source, opt_options) {\n    return this.readFeaturesFromObject(\n      getObject(source),\n      this.getReadOptions(source, opt_options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  readFeaturesFromObject(object, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read a geometry.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   * @api\n   */\n  readGeometry(source, opt_options) {\n    return this.readGeometryFromObject(\n      getObject(source),\n      this.getReadOptions(source, opt_options)\n    );\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions} [opt_options] Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Read the projection.\n   *\n   * @param {ArrayBuffer|Document|Element|Object|string} source Source.\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   * @api\n   */\n  readProjection(source) {\n    return this.readProjectionFromObject(getObject(source));\n  }\n\n  /**\n   * @abstract\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    return abstract();\n  }\n\n  /**\n   * Encode a feature as string.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded feature.\n   * @api\n   */\n  writeFeature(feature, opt_options) {\n    return JSON.stringify(this.writeFeatureObject(feature, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeatureObject(feature, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Encode an array of features as string.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded features.\n   * @api\n   */\n  writeFeatures(features, opt_options) {\n    return JSON.stringify(this.writeFeaturesObject(features, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n  writeFeaturesObject(features, opt_options) {\n    return abstract();\n  }\n\n  /**\n   * Encode a geometry as string.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {string} Encoded geometry.\n   * @api\n   */\n  writeGeometry(geometry, opt_options) {\n    return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions} [opt_options] Write options.\n   * @return {Object} Object.\n   */\n  writeGeometryObject(geometry, opt_options) {\n    return abstract();\n  }\n}\n\n/**\n * @param {Document|Element|Object|string} source Source.\n * @return {Object} Object.\n */\nfunction getObject(source) {\n  if (typeof source === 'string') {\n    const object = JSON.parse(source);\n    return object ? /** @type {Object} */ (object) : null;\n  } else if (source !== null) {\n    return source;\n  } else {\n    return null;\n  }\n}\n\nexport default JSONFeature;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}