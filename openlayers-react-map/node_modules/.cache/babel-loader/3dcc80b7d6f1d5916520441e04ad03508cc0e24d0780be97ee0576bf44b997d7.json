{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport Snap from 'ol/interaction/Snap';\nimport { /*always,*/primaryAction } from 'ol/events/condition';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport DeleteGeo from './map-actions/DeleteGeo';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport Edit from './map-helpers/Edit';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\nimport QuickShape from './map-actions/QuickShape';\nimport CurvatureTool from './map-actions/CurvatureTool';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle, closingSegmentStyle } from './ol-styles';\n\n/* svgs */\nimport { DrawIcon, HandIcon } from './svg';\n\n/*custom snapping imports*/\nimport { coordsEqual, getSnappedCoordinate, customSnapFeature } from './map-helpers/Snapping';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, pointToSegmentDistance } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 1.524;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n  const [showEdit, setShowEdit] = useState(false);\n  const altKeyRef = useRef(false);\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        const highlightSource = highlightLayer.getSource();\n        highlightSource.getFeatures().forEach(f => {\n          if (!f.get('isClosingSegment')) {\n            highlightSource.removeFeature(f);\n          }\n        });\n      }\n    }\n  }\n  function handleAddCurve(rise, run, bulge) {\n    // Get the last point of the current drawing\n    const feature = polygonFeatureRef.current;\n    if (!feature) return;\n    const poly = feature.getGeometry();\n    let coords = poly.getCoordinates()[0];\n    const start = coords[coords.length - 2];\n    const end = [start[0] + run, start[1] + rise];\n\n    // Calculate curve points (quadratic Bezier for simplicity)\n    const mid = [(start[0] + end[0]) / 2 + (bulge || 0), (start[1] + end[1]) / 2];\n\n    // Generate points along the curve\n    const curvePoints = [];\n    const segments = 32;\n    for (let t = 0; t <= 1; t += 1 / segments) {\n      const x = (1 - t) * (1 - t) * start[0] + 2 * (1 - t) * t * mid[0] + t * t * end[0];\n      const y = (1 - t) * (1 - t) * start[1] + 2 * (1 - t) * t * mid[1] + t * t * end[1];\n      curvePoints.push([x, y]);\n    }\n\n    // Insert curve points into coords (replace last point with curve)\n    coords = [...coords.slice(0, -1), ...curvePoints, curvePoints[curvePoints.length - 1]];\n    poly.setCoordinates([coords]);\n    createSegmentOverlays(feature, mapRef);\n\n    // Track in history for undo/redo\n    addHistoryAction({\n      type: 'add-curve',\n      featureId: feature.getId(),\n      prevCoords: poly.getCoordinates()[0],\n      newCoords: coords,\n      curveParams: {\n        rise,\n        run,\n        bulge\n      }\n    });\n  }\n  function isPolygonValid(coords) {\n    // Simple check: at least 4 points (3 unique + closing), and no duplicate consecutive points\n    if (!coords || coords.length < 4) return false;\n    for (let i = 1; i < coords.length; i++) {\n      if (coords[i][0] === coords[i - 1][0] && coords[i][1] === coords[i - 1][1]) return false;\n    }\n    // Optionally, add more robust self-intersection check here\n    return true;\n  }\n  function onSegmentLengthChange(segmentIdx, newLengthFeet, onSuccess) {\n    if (!selectedFeature) return;\n    const poly = selectedFeature.getGeometry();\n    let coords = poly.getCoordinates()[0].map(c => [...c]); // deep copy\n    const N = coords.length - 1;\n    const meters = newLengthFeet / 3.28084;\n    if (segmentIdx < 0 || segmentIdx >= N) return;\n\n    // Calculate direction vector for the segment\n    const a = coords[segmentIdx];\n    const b = coords[(segmentIdx + 1) % N];\n    const dx = b[0] - a[0];\n    const dy = b[1] - a[1];\n    const currentLen = Math.sqrt(dx * dx + dy * dy);\n    if (currentLen === 0) {\n      alert('Cannot resize a zero-length segment.');\n      return;\n    }\n    let newCoords = coords.map(c => [...c]);\n    if (segmentIdx !== N - 1) {\n      // Move the second point of the segment\n      const ratio = meters / currentLen;\n      const newBx = a[0] + dx * ratio;\n      const newBy = a[1] + dy * ratio;\n      newCoords[segmentIdx + 1] = [newBx, newBy];\n      newCoords[N] = newCoords[0];\n    } else {\n      // Last segment: move the LAST point (N-1), keep first point fixed\n      const dirX = a[0] - b[0];\n      const dirY = a[1] - b[1];\n      const dirLen = Math.sqrt(dirX * dirX + dirY * dirY);\n      if (dirLen === 0) {\n        alert('Cannot resize a zero-length segment.');\n        return;\n      }\n      const scale = meters / dirLen;\n      const newLastX = b[0] + dirX * scale;\n      const newLastY = b[1] + dirY * scale;\n      newCoords[N - 1] = [newLastX, newLastY];\n      newCoords[N] = newCoords[0];\n    }\n\n    // Validate polygon\n    if (!isPolygonValid(newCoords)) {\n      alert('This change would make the polygon invalid.');\n      return;\n    }\n\n    // Save to history for undo/redo\n    addHistoryAction({\n      type: 'edit-segment-length',\n      featureId: selectedFeature.getId(),\n      prevCoords: coords,\n      newCoords: newCoords,\n      segmentIdx,\n      newLengthFeet\n    });\n\n    // Update geometry\n    poly.setCoordinates([newCoords]);\n    updateClosingSegmentOverlay();\n    createSegmentOverlays(selectedFeature, mapRef);\n    handleEditHover(segmentIdx);\n\n    //force refresh to <Edit />\n    setShowEdit(false);\n    setTimeout(() => {\n      setShowEdit(true);\n    }, 10);\n    if (onSuccess) onSuccess();\n  }\n\n  //Polygon closing line shown with new style in highlight layer\n  function updateClosingSegmentOverlay() {\n    const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    // Remove previous closing segment overlays\n    highlightSource.getFeatures().forEach(f => {\n      if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n    if (drawingRef.current && polygonFeatureRef.current && polygonFeatureRef.current.getGeometry().getType() === 'Polygon') {\n      const coords = polygonFeatureRef.current.getGeometry().getCoordinates()[0];\n      if (coords.length > 1) {\n        const closingLine = new Feature(new LineString([coords[coords.length - 2], coords[0]]));\n        closingLine.setStyle(closingSegmentStyle);\n        closingLine.set('isClosingSegment', true);\n        highlightSource.addFeature(closingLine);\n      }\n    }\n  }\n  function handleEditHover(segmentIdx) {\n    if (!selectedFeature) return;\n    const map = mapRef.current;\n    if (!map) return;\n    const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n\n    // Remove previous highlights (except closing segments)\n    highlightSource.getFeatures().forEach(f => {\n      if (!f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n    const coords = selectedFeature.getGeometry().getCoordinates()[0];\n    const N = coords.length - 1;\n    if (segmentIdx < 0 || segmentIdx >= N) return;\n    const segment = [coords[segmentIdx], coords[(segmentIdx + 1) % N]];\n    const segFeature = new Feature(new LineString(segment));\n    segFeature.setStyle(highlightSegmentStyle);\n    highlightSource.addFeature(segFeature);\n  }\n  function handleEditUnhover() {\n    const map = mapRef.current;\n    if (!map) return;\n    const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    highlightSource.getFeatures().forEach(f => {\n      if (!f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n  }\n\n  //select features / style\n  useEffect(() => {\n    var _vectorSourceRef$curr, _vectorSourceRef$curr2;\n    const allFeatures = ((_vectorSourceRef$curr = vectorSourceRef.current) === null || _vectorSourceRef$curr === void 0 ? void 0 : (_vectorSourceRef$curr2 = _vectorSourceRef$curr.getFeatures) === null || _vectorSourceRef$curr2 === void 0 ? void 0 : _vectorSourceRef$curr2.call(_vectorSourceRef$curr)) || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  //Read textbox input to be mapped with addSegment\n  useEffect(() => {\n    textRef.current = text;\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  //Select vs Draw mode useEffect\n  useEffect(() => {\n    //sync modeRef with current mode\n    modeRef.current = mode;\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      let translate = new Translate({\n        layers: [vectorLayerRef.current],\n        condition: primaryAction\n      });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', evt => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n\n      // Custom snapping for translate interaction\n      translate.on('translating', evt => {\n        if (!altKeyRef.current) {\n          evt.features.forEach(feature => {\n            customSnapFeature(feature, vectorSourceRef.current, mapRef.current, 10);\n          });\n        }\n      });\n\n      // Listen for translateend to track moves\n      translate.on('translateend', evt => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n        });\n      });\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  /* MAIN USE EFFECT */\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    map.addControl(new Rotate({\n      autoHide: false,\n      duration: 500\n    }));\n    const snapInteraction = new Snap({\n      source: vectorSourceRef.current\n    });\n    map.addInteraction(snapInteraction);\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        let snappedCoord = coord;\n        if (!altKeyRef.current) {\n          snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n        }\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else /* if (modeRef.current === 'select')*/{\n          highlightSource.getFeatures().forEach(f => {\n            if (!f.get('isClosingSegment')) {\n              highlightSource.removeFeature(f);\n            }\n          });\n          let found = false;\n          // Hover logic for highlightLayer lines\n          map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n            if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n              const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n\n              // Check for vertex hover first\n              for (let i = 0; i < coords.length; i++) {\n                const pixel = map.getPixelFromCoordinate(coords[i]);\n                const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n                if (dist < 8) {\n                  // 8 pixels tolerance for vertex\n                  const vertexFeature = new Feature(new Point(coords[i]));\n                  vertexFeature.setStyle(highlightVertexStyle);\n                  highlightSource.addFeature(vertexFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n\n              // If no vertex found, check for segment hover\n              for (let i = 0; i < coords.length - 1; i++) {\n                const seg = [coords[i], coords[i + 1]];\n                const pixel1 = map.getPixelFromCoordinate(seg[0]);\n                const pixel2 = map.getPixelFromCoordinate(seg[1]);\n                const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n                if (dist < 8) {\n                  // 8 pixels tolerance for segment\n                  const segFeature = new Feature(new LineString(seg));\n                  segFeature.setStyle(highlightSegmentStyle);\n                  highlightSource.addFeature(segFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n            }\n            return found;\n          });\n        }\n    });\n    function editExistingPolygon(snappedCoord, vectorSource) {\n      // Find a LineString whose endpoint matches snappedCoord\n      let foundLine = null;\n      let foundIndex = null;\n      vectorSource.getFeatures().forEach(feature => {\n        if (feature.getGeometry().getType() === 'LineString') {\n          const coords = feature.getGeometry().getCoordinates();\n          // Check both ends\n          if (coordsEqual(coords[0], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = 0;\n          } else if (coordsEqual(coords[coords.length - 1], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = coords.length - 1;\n          }\n        }\n      });\n      if (foundLine) {\n        // Remove the LineString from the source\n        clearPolygonOverlays(foundLine, mapRef);\n        vectorSource.removeFeature(foundLine);\n        let coords = foundLine.getGeometry().getCoordinates();\n        // If the user clicked the end, reverse so snappedCoord is first\n        if (foundIndex === coords.length - 1) {\n          coords = coords.slice().reverse();\n        }\n        // Start a new polygon with these coords (not closed yet)\n        return coords;\n      }\n      // No matching linestring found\n      return null;\n    }\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n        const vectorSource = vectorSourceRef.current;\n        let initialCoords = editExistingPolygon(snappedCoord, vectorSource);\n        let poly, feature;\n        if (initialCoords) {\n          // Remove all instances of snappedCoord from the array\n          let coords = [...initialCoords];\n\n          // Only close the polygon if not already closed\n          if (coords.length > 2 && (coords[0][0] !== coords[coords.length - 1][0] || coords[0][1] !== coords[coords.length - 1][1])) {\n            coords.push([...coords[0]]);\n          }\n          console.log({\n            NEWPOLY: coords\n          });\n          // Create the polygon (now closed)\n          poly = new Polygon([coords]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: initialCoords,\n            // original LineString coordinates\n            newCoords: coords,\n            // new Polygon coordinates\n            geomType: 'Polygon',\n            prevGeomType: 'LineString'\n          });\n        } else {\n          // Normal: start polygon with just the clicked point\n          poly = new Polygon([[snappedCoord, snappedCoord]]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords: [],\n            newCoords: [[coord, coord]],\n            point: snappedCoord,\n            pointIndex: 0\n          });\n        }\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n      }\n    }\n    function selectClick(evt) {\n      // maybe\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        setShowEdit(false);\n        return;\n      }\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      console.log({\n        AddSegmentCoords: coords\n      });\n      poly.setCoordinates([coords]);\n      updateClosingSegmentOverlay();\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n        point: newPt,\n        pointIndex: coords.length - 2\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              updateClosingSegmentOverlay();\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-circle') {\n          // Remove the circle feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-square') {\n          // Remove the square feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'delete-geo') {\n          // Restore the deleted feature\n          const format = new GeoJSON();\n          const restoredFeature = format.readFeature(lastAction.geojson);\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the polygon feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the original LineString\n          const restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'edit-segment-length') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            createSegmentOverlays(feature, mapRef);\n            updateClosingSegmentOverlay();\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the LineString feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the Polygon\n          const restoredFeature = new Feature(new Polygon([lastAction.newCoords]));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          restoredFeature.setStyle(activePolygonStyle);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-circle') {\n          // Re-add the circle feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'draw-square') {\n          // Re-add the square feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'delete-geo') {\n          // Remove the feature again\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef); // Clear measurementsa\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'edit-segment-length') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            createSegmentOverlays(feature, mapRef);\n            updateClosingSegmentOverlay();\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n      const [start, end] = coords;\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n        const input = textRef.current.trim().toUpperCase();\n        let dx = 0,\n          dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R':\n                dx += meters;\n                break;\n              case 'L':\n                dx -= meters;\n                break;\n              case 'U':\n                dy += meters;\n                break;\n              case 'D':\n                dy -= meters;\n                break;\n              default:\n                break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords,\n            point: newPt,\n            pointIndex: coords.length - 2\n          });\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = angleDeg * Math.PI / 180 + rotation;\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateClosingSegmentOverlay();\n        createSegmentOverlays(feature, mapRef);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n          point: newPt,\n          pointIndex: coords.length - 2\n        });\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n          setMode('');\n        }\n        const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (highlightLayer) {\n          const highlightSource = highlightLayer.getSource();\n          highlightSource.getFeatures().forEach(f => {\n            if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n          });\n        }\n      }\n      // ctrl + z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.key === 'R')) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n      //alt press\n      if (e.altKey) {\n        e.preventDefault();\n        altKeyRef.current = true;\n      }\n    }\n    function handleKeyUp(e) {\n      if (!e.altKey) {\n        altKeyRef.current = false;\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dimension-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"dimension-input\",\n        ref: inputRef,\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Dimension (ft.)\",\n        autoFocus: true,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1213,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        title: \"Draw\",\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        disabled: mode === 'draw' && drawing,\n        children: /*#__PURE__*/_jsxDEV(DrawIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1230,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        title: \"Select / Move\",\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        disabled: mode === 'draw' && drawing,\n        children: /*#__PURE__*/_jsxDEV(HandIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 1237,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1232,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CurvatureTool, {\n        enabled: mode === 'draw' && drawingRef.current && polygonFeatureRef.current,\n        onAddCurve: handleAddCurve\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(QuickShape, {\n        mapRef: mapRef,\n        vectorSourceRef: vectorSourceRef,\n        setDrawing: setDrawing,\n        setMode: setMode,\n        addHistoryAction: addHistoryAction,\n        mode: mode,\n        drawing: drawing\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DeleteGeo, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        clearPolygonOverlays: clearPolygonOverlays,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Clone, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        title: \"Show/Hide History\",\n        id: \"history-toggle\",\n        className: `map-button${showHistory ? ' active' : ''}`,\n        onClick: () => setShowHistory(v => !v),\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        title: \"Edit Segments\",\n        id: \"edit-toggle\",\n        className: `map-button${showEdit ? ' active' : ''}`,\n        onClick: () => setShowEdit(v => !v),\n        style: {\n          marginLeft: 8,\n          opacity: selectedFeature ? 1 : 0.5,\n          pointerEvents: selectedFeature ? 'auto' : 'none'\n        },\n        children: \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1260,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1272,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction,\n      drawing: drawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1273,\n      columnNumber: 7\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1283,\n      columnNumber: 9\n    }, this), showEdit && selectedFeature && /*#__PURE__*/_jsxDEV(Edit, {\n      feature: selectedFeature,\n      onSegmentHover: handleEditHover,\n      onSegmentUnhover: handleEditUnhover,\n      onSegmentLengthChange: onSegmentLengthChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1289,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 1211,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"2CJqxB58QN7XENaoKd9BV55ENrw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","fromLonLat","ScaleLine","Rotate","Translate","Snap","primaryAction","GeoJSON","DeleteGeo","History","Edit","FlipHorizButton","FlipVertButton","RightClick","Clone","QuickShape","CurvatureTool","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","closingSegmentStyle","DrawIcon","HandIcon","coordsEqual","getSnappedCoordinate","customSnapFeature","clearPolygonOverlays","createSegmentOverlays","pointToSegmentDistance","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","textRef","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","polygonFeatureRef","drawingRef","drawing","setDrawing","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","showHistory","setShowHistory","showEdit","setShowEdit","altKeyRef","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","highlightSource","getSource","getFeatures","forEach","f","removeFeature","handleAddCurve","rise","run","bulge","poly","getGeometry","coords","getCoordinates","start","length","end","mid","curvePoints","segments","t","push","slice","setCoordinates","featureId","getId","prevCoords","newCoords","curveParams","isPolygonValid","i","onSegmentLengthChange","segmentIdx","newLengthFeet","onSuccess","map","c","N","meters","a","b","dx","dy","currentLen","Math","sqrt","alert","ratio","newBx","newBy","dirX","dirY","dirLen","scale","newLastX","newLastY","updateClosingSegmentOverlay","handleEditHover","setTimeout","getType","closingLine","setStyle","set","addFeature","segment","segFeature","handleEditUnhover","_vectorSourceRef$curr","_vectorSourceRef$curr2","allFeatures","call","val","parseFloat","isNaN","removeInteraction","translate","layers","condition","addInteraction","on","evt","features","vectorSource","vectorLayer","source","style","target","view","center","zoom","addControl","units","autoHide","duration","snapInteraction","name","addLayer","coord","coordinate","pixel","snappedCoord","ghost","found","forEachFeatureAtPixel","getPixelFromCoordinate","dist","pow","vertexFeature","seg","pixel1","pixel2","editExistingPolygon","foundLine","foundIndex","reverse","drawClick","initialCoords","console","log","NEWPOLY","setId","Date","now","toString","geomType","prevGeomType","point","pointIndex","selectClick","getFeaturesAtPixel","filter","includes","allPolygons","currentIdx","nextIdx","nextFeature","addSegment","direction","last","OFFSET","rotation","getView","getRotation","cos","sin","rotatedDx","rotatedDy","newPt","AddSegmentCoords","handleUndo","lastActionForRedo","lastAction","featureToRemove","restoredFeature","format","readFeature","geojson","redoPrev","handleRedo","require","default","lineFeature","remarkLineSegments","histPrev","rotateMapToHighlightedSegment","currentRotation","startPixel","endPixel","unrotatedDx","unrotatedDy","angle","atan2","PI","animate","handleKeyDown","e","key","preventDefault","input","trim","toUpperCase","dirPattern","test","parts","split","s","part","dir","distance","angleDeg","distStr","angleStr","angleRad","dx2","dy2","ctrlKey","metaKey","altKey","handleKeyUp","document","addEventListener","setTarget","removeEventListener","children","id","ref","value","onChange","placeholder","autoFocus","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","title","className","onClick","disabled","enabled","onAddCurve","v","marginLeft","opacity","pointerEvents","onSegmentHover","onSegmentUnhover","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport Snap from 'ol/interaction/Snap';\nimport { /*always,*/  primaryAction } from 'ol/events/condition';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport DeleteGeo from './map-actions/DeleteGeo';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport Edit from './map-helpers/Edit';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\nimport QuickShape from './map-actions/QuickShape';\nimport CurvatureTool from './map-actions/CurvatureTool';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle,\n  closingSegmentStyle\n} from './ol-styles';\n\n/* svgs */\nimport {\n  DrawIcon,\n  HandIcon\n} from './svg';\n\n/*custom snapping imports*/\nimport {\n  coordsEqual,\n  getSnappedCoordinate,\n  customSnapFeature,\n} from './map-helpers/Snapping';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\n\nconst OFFSET_REF_DEFAULT = 1.524;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n  const [showEdit, setShowEdit] = useState(false);\n  const altKeyRef = useRef(false);\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        const highlightSource = highlightLayer.getSource();\n        highlightSource.getFeatures().forEach(f => {\n          if (!f.get('isClosingSegment')) {\n            highlightSource.removeFeature(f);\n          }\n        });\n      }\n    }\n  }\n\n  function handleAddCurve(rise, run, bulge) {\n    // Get the last point of the current drawing\n    const feature = polygonFeatureRef.current;\n    if (!feature) return;\n    const poly = feature.getGeometry();\n    let coords = poly.getCoordinates()[0];\n\n    const start = coords[coords.length - 2];\n    const end = [start[0] + run, start[1] + rise];\n\n    // Calculate curve points (quadratic Bezier for simplicity)\n    const mid = [\n      (start[0] + end[0]) / 2 + (bulge || 0),\n      (start[1] + end[1]) / 2\n    ];\n\n    // Generate points along the curve\n    const curvePoints = [];\n    const segments = 32;\n    for (let t = 0; t <= 1; t += 1 / segments) {\n      const x = (1 - t) * (1 - t) * start[0] + 2 * (1 - t) * t * mid[0] + t * t * end[0];\n      const y = (1 - t) * (1 - t) * start[1] + 2 * (1 - t) * t * mid[1] + t * t * end[1];\n      curvePoints.push([x, y]);\n    }\n\n    // Insert curve points into coords (replace last point with curve)\n    coords = [...coords.slice(0, -1), ...curvePoints, curvePoints[curvePoints.length - 1]];\n    poly.setCoordinates([coords]);\n    createSegmentOverlays(feature, mapRef);\n\n    // Track in history for undo/redo\n    addHistoryAction({\n      type: 'add-curve',\n      featureId: feature.getId(),\n      prevCoords: poly.getCoordinates()[0],\n      newCoords: coords,\n      curveParams: { rise, run, bulge }\n    });\n  }\n\n  function isPolygonValid(coords) {\n    // Simple check: at least 4 points (3 unique + closing), and no duplicate consecutive points\n    if (!coords || coords.length < 4) return false;\n    for (let i = 1; i < coords.length; i++) {\n      if (coords[i][0] === coords[i - 1][0] && coords[i][1] === coords[i - 1][1]) return false;\n    }\n    // Optionally, add more robust self-intersection check here\n    return true;\n  }\n\n  function onSegmentLengthChange(segmentIdx, newLengthFeet, onSuccess) {\n    if (!selectedFeature) return;\n    const poly = selectedFeature.getGeometry();\n    let coords = poly.getCoordinates()[0].map(c => [...c]); // deep copy\n    const N = coords.length - 1;\n    const meters = newLengthFeet / 3.28084;\n\n    if (segmentIdx < 0 || segmentIdx >= N) return;\n\n    // Calculate direction vector for the segment\n    const a = coords[segmentIdx];\n    const b = coords[(segmentIdx + 1) % N];\n    const dx = b[0] - a[0];\n    const dy = b[1] - a[1];\n    const currentLen = Math.sqrt(dx * dx + dy * dy);\n\n    if (currentLen === 0) {\n      alert('Cannot resize a zero-length segment.');\n      return;\n    }\n\n    let newCoords = coords.map(c => [...c]);\n    if (segmentIdx !== N - 1) {\n      // Move the second point of the segment\n      const ratio = meters / currentLen;\n      const newBx = a[0] + dx * ratio;\n      const newBy = a[1] + dy * ratio;\n      newCoords[segmentIdx + 1] = [newBx, newBy];\n      newCoords[N] = newCoords[0];\n    } else {\n      // Last segment: move the LAST point (N-1), keep first point fixed\n      const dirX = a[0] - b[0];\n      const dirY = a[1] - b[1];\n      const dirLen = Math.sqrt(dirX * dirX + dirY * dirY);\n      if (dirLen === 0) {\n        alert('Cannot resize a zero-length segment.');\n        return;\n      }\n      const scale = meters / dirLen;\n      const newLastX = b[0] + dirX * scale;\n      const newLastY = b[1] + dirY * scale;\n      newCoords[N - 1] = [newLastX, newLastY];\n      newCoords[N] = newCoords[0];\n    }\n\n    // Validate polygon\n    if (!isPolygonValid(newCoords)) {\n      alert('This change would make the polygon invalid.');\n      return;\n    }\n\n    // Save to history for undo/redo\n    addHistoryAction({\n      type: 'edit-segment-length',\n      featureId: selectedFeature.getId(),\n      prevCoords: coords,\n      newCoords: newCoords,\n      segmentIdx,\n      newLengthFeet\n    });\n\n    // Update geometry\n    poly.setCoordinates([newCoords]);\n    updateClosingSegmentOverlay();\n    createSegmentOverlays(selectedFeature, mapRef);\n    handleEditHover(segmentIdx);\n\n    //force refresh to <Edit />\n    setShowEdit(false);\n    setTimeout(() => {\n      setShowEdit(true);\n    }, 10)\n\n    if (onSuccess) onSuccess();\n  }\n\n  //Polygon closing line shown with new style in highlight layer\n  function updateClosingSegmentOverlay() {\n    const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    // Remove previous closing segment overlays\n    highlightSource.getFeatures().forEach(f => {\n      if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n\n    if (\n      drawingRef.current &&\n      polygonFeatureRef.current &&\n      polygonFeatureRef.current.getGeometry().getType() === 'Polygon'\n    ) {\n      const coords = polygonFeatureRef.current.getGeometry().getCoordinates()[0];\n\n      if (coords.length > 1) {\n        const closingLine = new Feature(new LineString([coords[coords.length - 2], coords[0]]));\n        closingLine.setStyle(closingSegmentStyle);\n        closingLine.set('isClosingSegment', true);\n        highlightSource.addFeature(closingLine);\n      }\n    }\n  }\n\n  function handleEditHover(segmentIdx) {\n    if (!selectedFeature) return;\n    const map = mapRef.current;\n    if (!map) return;\n    const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n\n    // Remove previous highlights (except closing segments)\n    highlightSource.getFeatures().forEach(f => {\n      if (!f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n\n    const coords = selectedFeature.getGeometry().getCoordinates()[0];\n    const N = coords.length - 1;\n    if (segmentIdx < 0 || segmentIdx >= N) return;\n\n    const segment = [\n      coords[segmentIdx],\n      coords[(segmentIdx + 1) % N]\n    ];\n\n    const segFeature = new Feature(new LineString(segment));\n    segFeature.setStyle(highlightSegmentStyle);\n    highlightSource.addFeature(segFeature);\n  }\n  function handleEditUnhover() {\n    const map = mapRef.current;\n    if (!map) return;\n    const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n    if (!highlightLayer) return;\n    const highlightSource = highlightLayer.getSource();\n    highlightSource.getFeatures().forEach(f => {\n      if (!f.get('isClosingSegment')) highlightSource.removeFeature(f);\n    });\n  }\n\n  //select features / style\n  useEffect(() => {\n    const allFeatures = vectorSourceRef.current?.getFeatures?.() || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  //Read textbox input to be mapped with addSegment\n  useEffect(() => {\n    textRef.current = text;\n\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  //Select vs Draw mode useEffect\n  useEffect(() => {\n    //sync modeRef with current mode\n    modeRef.current = mode;\n\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      let translate = new Translate({ layers: [vectorLayerRef.current], condition: primaryAction });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', (evt) => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n\n      // Custom snapping for translate interaction\n      translate.on('translating', (evt) => {\n        if (!altKeyRef.current) {\n          evt.features.forEach(feature => {\n            customSnapFeature(feature, vectorSourceRef.current, mapRef.current, 10);\n          });\n        }\n      });\n\n      // Listen for translateend to track moves\n      translate.on('translateend', (evt) => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords,\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n        });\n      });\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  /* MAIN USE EFFECT */\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    map.addControl(new Rotate({ autoHide: false, duration: 500 }));\n\n    const snapInteraction = new Snap({ source: vectorSourceRef.current });\n    map.addInteraction(snapInteraction)\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        let snappedCoord = coord;\n        if (!altKeyRef.current) {\n          snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n        }\n\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else/* if (modeRef.current === 'select')*/ {\n        highlightSource.getFeatures().forEach(f => {\n          if (!f.get('isClosingSegment')) {\n            highlightSource.removeFeature(f);\n          }\n        });\n\n        let found = false;\n        // Hover logic for highlightLayer lines\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n\n    function editExistingPolygon(snappedCoord, vectorSource) {\n      // Find a LineString whose endpoint matches snappedCoord\n      let foundLine = null;\n      let foundIndex = null;\n      vectorSource.getFeatures().forEach(feature => {\n        if (feature.getGeometry().getType() === 'LineString') {\n          const coords = feature.getGeometry().getCoordinates();\n          // Check both ends\n          if (coordsEqual(coords[0], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = 0;\n          } else if (coordsEqual(coords[coords.length - 1], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = coords.length - 1;\n          }\n        }\n      });\n\n      if (foundLine) {\n        // Remove the LineString from the source\n        clearPolygonOverlays(foundLine, mapRef);\n        vectorSource.removeFeature(foundLine);\n        let coords = foundLine.getGeometry().getCoordinates();\n        // If the user clicked the end, reverse so snappedCoord is first\n        if (foundIndex === coords.length - 1) {\n          coords = coords.slice().reverse();\n        }\n        // Start a new polygon with these coords (not closed yet)\n        return coords;\n      }\n      // No matching linestring found\n      return null;\n    }\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n\n        const vectorSource = vectorSourceRef.current;\n        let initialCoords = editExistingPolygon(snappedCoord, vectorSource);\n\n        let poly, feature;\n\n        if (initialCoords) {\n          // Remove all instances of snappedCoord from the array\n          let coords = [...initialCoords];\n\n          // Only close the polygon if not already closed\n          if (\n            coords.length > 2 &&\n            (coords[0][0] !== coords[coords.length - 1][0] ||\n              coords[0][1] !== coords[coords.length - 1][1])\n          ) {\n            coords.push([...coords[0]]);\n          }\n\n          console.log({ NEWPOLY: coords });\n          // Create the polygon (now closed)\n          poly = new Polygon([coords]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: initialCoords, // original LineString coordinates\n            newCoords: coords,         // new Polygon coordinates\n            geomType: 'Polygon',\n            prevGeomType: 'LineString'\n          });\n        } else {\n          // Normal: start polygon with just the clicked point\n          poly = new Polygon([[snappedCoord, snappedCoord]]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords: [],\n            newCoords: [[coord, coord]],\n            point: snappedCoord,\n            pointIndex: 0\n          });\n        }\n\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n      }\n    }\n\n    function selectClick(evt) { // maybe\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        setShowEdit(false);\n        return;\n      }\n\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      console.log({ AddSegmentCoords: coords });\n      poly.setCoordinates([coords]);\n      updateClosingSegmentOverlay();\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n        point: newPt,\n        pointIndex: coords.length - 2\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              updateClosingSegmentOverlay();\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-circle') {\n          // Remove the circle feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-square') {\n          // Remove the square feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'delete-geo') {\n          // Restore the deleted feature\n          const format = new GeoJSON();\n          const restoredFeature = format.readFeature(lastAction.geojson);\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the polygon feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the original LineString\n          const restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'edit-segment-length') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            createSegmentOverlays(feature, mapRef);\n            updateClosingSegmentOverlay();\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the LineString feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the Polygon\n          const restoredFeature = new Feature(new Polygon([lastAction.newCoords]));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          restoredFeature.setStyle(activePolygonStyle);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          updateClosingSegmentOverlay();\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-circle') {\n          // Re-add the circle feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'draw-square') {\n          // Re-add the square feature\n          const restoredFeature = new Feature(new Polygon(lastAction.coords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'delete-geo') {\n          // Remove the feature again\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef); // Clear measurementsa\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'edit-segment-length') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            createSegmentOverlays(feature, mapRef);\n            updateClosingSegmentOverlay();\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [\n        (start[0] + end[0]) / 2,\n        (start[1] + end[1]) / 2\n      ];\n\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n        const input = textRef.current.trim().toUpperCase();\n\n        let dx = 0, dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R': dx += meters; break;\n              case 'L': dx -= meters; break;\n              case 'U': dy += meters; break;\n              case 'D': dy -= meters; break;\n              default: break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateClosingSegmentOverlay();\n          createSegmentOverlays(feature, mapRef);\n\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords,\n            point: newPt,\n            pointIndex: coords.length - 2\n          });\n\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = (angleDeg * Math.PI) / 180 + rotation;\n\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateClosingSegmentOverlay();\n        createSegmentOverlays(feature, mapRef);\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n          point: newPt,\n          pointIndex: coords.length - 2\n        });\n\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n          setMode('');\n        }\n        const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (highlightLayer) {\n          const highlightSource = highlightLayer.getSource();\n          highlightSource.getFeatures().forEach(f => {\n            if (f.get('isClosingSegment')) highlightSource.removeFeature(f);\n          });\n        }\n\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n      //alt press\n      if (e.altKey) {\n        e.preventDefault();\n        altKeyRef.current = true;\n      }\n    }\n\n    function handleKeyUp(e) {\n      if (!e.altKey) {\n        altKeyRef.current = false;\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    document.addEventListener('keyup', handleKeyUp);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      document.removeEventListener('keyup', handleKeyUp);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"dimension-input-container\">\n        <input\n          id=\"dimension-input\"\n          ref={inputRef}\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n          placeholder=\"Dimension (ft.)\"\n          autoFocus\n          autoComplete='off'\n        />\n      </div>\n      <div id=\"map-menu-vert\">\n        <button\n          title=\"Draw\"\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n          disabled={mode === 'draw' && drawing}>\n          <DrawIcon />\n        </button>\n        <button\n          title=\"Select / Move\"\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n          disabled={mode === 'draw' && drawing}>\n          <HandIcon />\n        </button>\n        <CurvatureTool\n          enabled={mode === 'draw' && drawingRef.current && polygonFeatureRef.current}\n          onAddCurve={handleAddCurve}\n        />\n        <QuickShape mapRef={mapRef} vectorSourceRef={vectorSourceRef} setDrawing={setDrawing} setMode={setMode} addHistoryAction={addHistoryAction} mode={mode} drawing={drawing} />\n        <DeleteGeo\n          selectedFeature={selectedFeature}\n          vectorSourceRef={vectorSourceRef}\n          setSelectedFeature={setSelectedFeature}\n          addHistoryAction={addHistoryAction}\n          clearPolygonOverlays={clearPolygonOverlays}\n          mapRef={mapRef}\n        />\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <Clone selectedFeature={selectedFeature} vectorSourceRef={vectorSourceRef} setSelectedFeature={setSelectedFeature} addHistoryAction={addHistoryAction} mapRef={mapRef} />\n        <div title=\"Show/Hide History\" id=\"history-toggle\" className={`map-button${showHistory ? ' active' : ''}`} onClick={() => setShowHistory(v => !v)}>\n          History\n        </div>\n        <div\n          title=\"Edit Segments\"\n          id=\"edit-toggle\"\n          className={`map-button${showEdit ? ' active' : ''}`}\n          onClick={() => setShowEdit(v => !v)}\n          style={{ marginLeft: 8, opacity: selectedFeature ? 1 : 0.5, pointerEvents: selectedFeature ? 'auto' : 'none' }}\n        >\n          Edit\n        </div>\n        {/* <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div> */}\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n        drawing={drawing}\n      />\n      {showHistory && (\n        <History\n          history={history}\n          redoStack={redoStack}\n        />\n      )}\n      {showEdit && selectedFeature && (\n        <Edit\n          feature={selectedFeature}\n          onSegmentHover={handleEditHover}\n          onSegmentUnhover={handleEditUnhover}\n          onSegmentLengthChange={onSegmentLengthChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}