{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport { /*always,*/primaryAction } from 'ol/events/condition';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle, closingSegmentStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, pointToSegmentDistance } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 1.524;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(true);\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n  function coordsEqual(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n  }\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n    return closestCoord;\n  }\n  useEffect(() => {\n    var _vectorSourceRef$curr, _vectorSourceRef$curr2;\n    const allFeatures = ((_vectorSourceRef$curr = vectorSourceRef.current) === null || _vectorSourceRef$curr === void 0 ? void 0 : (_vectorSourceRef$curr2 = _vectorSourceRef$curr.getFeatures) === null || _vectorSourceRef$curr2 === void 0 ? void 0 : _vectorSourceRef$curr2.call(_vectorSourceRef$curr)) || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    //set value to be used in 'Enter' calculations\n    textRef.current = text;\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      let translate = new Translate({\n        layers: [vectorLayerRef.current],\n        condition: primaryAction\n      });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Listen for translateend to track moves\n      translate.on('translateend', evt => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n        });\n      });\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', evt => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  /* MAIN USE EFFECT */\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    map.addControl(new Rotate({\n      autoHide: false,\n      duration: 500\n    }));\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else /* if (modeRef.current === 'select')*/{\n          highlightSource.clear();\n          let found = false;\n          map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n            if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n              const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n\n              // Check for vertex hover first\n              for (let i = 0; i < coords.length; i++) {\n                const pixel = map.getPixelFromCoordinate(coords[i]);\n                const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n                if (dist < 8) {\n                  // 8 pixels tolerance for vertex\n                  const vertexFeature = new Feature(new Point(coords[i]));\n                  vertexFeature.setStyle(highlightVertexStyle);\n                  highlightSource.addFeature(vertexFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n\n              // If no vertex found, check for segment hover\n              for (let i = 0; i < coords.length - 1; i++) {\n                const seg = [coords[i], coords[i + 1]];\n                const pixel1 = map.getPixelFromCoordinate(seg[0]);\n                const pixel2 = map.getPixelFromCoordinate(seg[1]);\n                const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n                if (dist < 8) {\n                  // 8 pixels tolerance for segment\n                  const segFeature = new Feature(new LineString(seg));\n                  segFeature.setStyle(highlightSegmentStyle);\n                  highlightSource.addFeature(segFeature);\n                  found = true;\n                  return true; // Stop after first found\n                }\n              }\n            }\n            return found;\n          });\n        }\n    });\n    function editExistingPolygon(snappedCoord, vectorSource) {\n      // Find a LineString whose endpoint matches snappedCoord\n      let foundLine = null;\n      let foundIndex = null;\n      vectorSource.getFeatures().forEach(feature => {\n        if (feature.getGeometry().getType() === 'LineString') {\n          const coords = feature.getGeometry().getCoordinates();\n          // Check both ends\n          if (coordsEqual(coords[0], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = 0;\n          } else if (coordsEqual(coords[coords.length - 1], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = coords.length - 1;\n          }\n        }\n      });\n      if (foundLine) {\n        // Remove the LineString from the source\n        clearPolygonOverlays(foundLine, mapRef);\n        vectorSource.removeFeature(foundLine);\n        let coords = foundLine.getGeometry().getCoordinates();\n        // If the user clicked the end, reverse so snappedCoord is first\n        if (foundIndex === coords.length - 1) {\n          coords = coords.slice().reverse();\n        }\n        // Start a new polygon with these coords (not closed yet)\n        return coords;\n      }\n      // No matching linestring found\n      return null;\n    }\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n        const vectorSource = vectorSourceRef.current;\n        let initialCoords = editExistingPolygon(snappedCoord, vectorSource);\n        let poly, feature;\n        if (initialCoords) {\n          // Remove all instances of snappedCoord from the array\n          let coords = initialCoords.filter(c => !coordsEqual(c, snappedCoord));\n          // Push snappedCoord to the end\n          coords.push(snappedCoord);\n\n          // Ensure the polygon is closed visually\n          if (coords.length > 2 && (coords[0][0] !== coords[coords.length - 1][0] || coords[0][1] !== coords[coords.length - 1][1])) {\n            coords.push([...coords[0]]);\n          }\n          console.log({\n            NEWPOLY: coords\n          });\n          // Create the polygon (now closed)\n          poly = new Polygon([coords]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: initialCoords,\n            // original LineString coordinates\n            newCoords: coords,\n            // new Polygon coordinates\n            geomType: 'Polygon',\n            prevGeomType: 'LineString'\n          });\n        } else {\n          // Normal: start polygon with just the clicked point\n          poly = new Polygon([[snappedCoord, snappedCoord]]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords: [],\n            newCoords: [[coord, coord]]\n          });\n        }\n\n        // if (initialCoords) {\n        //   // Found a linestring endpoint: start polygon with those coords (not closed)\n        //   poly = new Polygon([initialCoords]);\n        //   feature = new Feature(poly);\n        // } else {\n        //   // Normal: start polygon with just the clicked point\n        //   poly = new Polygon([[snappedCoord, snappedCoord]]);\n        //   feature = new Feature(poly);\n        // }\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n        // Optionally: update overlays, call updateClosingSegment(), etc.\n\n        //   const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        //   const feature = new Feature(poly);\n\n        //   feature.setId(Date.now().toString());\n        //   feature.setStyle(activePolygonStyle);\n        //   vectorSource.addFeature(feature);\n        //   polygonFeatureRef.current = feature;\n        //   drawingRef.current = true;\n        //   setDrawing(true);\n\n        //   // Track action in history\n        //   addHistoryAction({\n        //     type: 'add-point',\n        //     featureId: feature.getId(),\n        //     prevCoords: [],\n        //     newCoords: [[coord, coord]],\n        //   });\n        // } else {\n        //   console.log('non first point - drawing clicked');\n        //unused point click\n        // const feature = polygonFeatureRef.current;\n        // const poly = feature.getGeometry();\n        // let coords = poly.getCoordinates()[0];\n        // const prevCoords = [...coords];\n        // coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        // poly.setCoordinates([coords]);\n        // console.log(coords.length);\n        // if (coords.length > 1) {\n        //   createSegmentOverlays(feature, mapRef);\n        // }\n\n        // addHistoryAction({\n        //   type: 'add-pointzzzzz',\n        //   featureId: feature.getId(),\n        //   prevCoords,\n        //   newCoords: coords\n        // });\n      }\n    }\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      console.log({\n        AddSegmentCoords: coords\n      });\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        // if (lastAction.type === 'delete-segment') {\n        //   let lineFeature = vectorSourceRef.current.getFeatures().find(\n        //     f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n        //   );\n        //   if (lineFeature) {\n        //     clearPolygonOverlays(lineFeature, mapRef);\n        //     vectorSourceRef.current.removeFeature(lineFeature);\n        //   }\n        //   const newPoly = new Feature(new Polygon([prevCoords]));\n        //   if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n        //   vectorSourceRef.current.addFeature(newPoly);\n        //   polygonFeatureRef.current = newPoly;\n        //   if (prevCoords && prevCoords.length > 1) {\n        //     createSegmentOverlays(newPoly, mapRef);\n        //   }\n        //   return prev.slice(0, -1);\n        // }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the polygon feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the original LineString\n          const restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        // feature.getGeometry().setCoordinates([prevCoords]);\n        // if (prevCoords.length > 1) {\n        //   createSegmentOverlays(feature, mapRef);\n        // }\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the LineString feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId);\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the Polygon\n          const restoredFeature = new Feature(new Polygon([lastAction.newCoords]));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n      const [start, end] = coords;\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n        const input = textRef.current.trim().toUpperCase();\n        let dx = 0,\n          dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R':\n                dx += meters;\n                break;\n              case 'L':\n                dx -= meters;\n                break;\n              case 'U':\n                dy += meters;\n                break;\n              case 'D':\n                dy -= meters;\n                break;\n              default:\n                break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords\n          });\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = angleDeg * Math.PI / 180 + rotation;\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n      }\n      // ctrl + z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.key === 'R')) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dimension-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"dimension-input\",\n        ref: inputRef,\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Dimension (ft.)\",\n        autoFocus: true,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 957,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 956,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 975,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 968,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 983,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 984,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Clone, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 985,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"history-toggle\",\n        className: `map-button${showHistory ? ' active' : ''}`,\n        onClick: () => setShowHistory(v => !v),\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 986,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 982,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 992,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 993,\n      columnNumber: 7\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1002,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 955,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"9gS/fAPTY7/W1kDIn+RH9d541vU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","fromLonLat","ScaleLine","Rotate","Translate","primaryAction","History","FlipHorizButton","FlipVertButton","RightClick","Clone","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","closingSegmentStyle","clearPolygonOverlays","createSegmentOverlays","pointToSegmentDistance","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","textRef","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","polygonFeatureRef","drawingRef","drawing","setDrawing","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","showHistory","setShowHistory","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","getSource","clear","coordsEqual","a","b","getSnappedCoordinate","map","vectorSource","pointerPixel","tolerance","closestCoord","minDist","Infinity","getFeatures","forEach","geom","getGeometry","coords","getType","getCoordinates","coord","pixel","getPixelFromCoordinate","dist","Math","hypot","_vectorSourceRef$curr","_vectorSourceRef$curr2","allFeatures","call","f","setStyle","val","parseFloat","isNaN","removeFeature","removeInteraction","translate","layers","condition","addInteraction","on","evt","features","prevCoords","newCoords","featureId","getId","set","vectorLayer","source","style","target","view","center","zoom","addControl","units","autoHide","duration","highlightSource","name","addLayer","coordinate","snappedCoord","ghost","addFeature","found","forEachFeatureAtPixel","i","length","sqrt","pow","vertexFeature","seg","pixel1","pixel2","segFeature","editExistingPolygon","foundLine","foundIndex","slice","reverse","drawClick","initialCoords","poly","filter","c","push","console","log","NEWPOLY","setId","Date","now","toString","geomType","prevGeomType","selectClick","getFeaturesAtPixel","includes","allPolygons","currentIdx","nextIdx","nextFeature","addSegment","direction","last","dx","dy","OFFSET","rotation","getView","getRotation","cos","sin","rotatedDx","rotatedDy","newPt","AddSegmentCoords","setCoordinates","handleUndo","lastActionForRedo","lastAction","featureToRemove","restoredFeature","redoPrev","handleRedo","require","default","lineFeature","remarkLineSegments","histPrev","rotateMapToHighlightedSegment","start","end","currentRotation","startPixel","endPixel","unrotatedDx","unrotatedDy","angle","atan2","PI","animate","handleKeyDown","e","key","preventDefault","input","trim","toUpperCase","dirPattern","test","parts","split","s","part","dir","meters","distance","angleDeg","distStr","angleStr","angleRad","dx2","dy2","ctrlKey","metaKey","document","addEventListener","setTarget","removeEventListener","children","id","ref","value","onChange","placeholder","autoFocus","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","v","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\nimport { /*always,*/  primaryAction } from 'ol/events/condition';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle,\n  closingSegmentStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 1.524;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const textRef = useRef(text);\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(true);\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n\n  function coordsEqual(a, b) {\n    return a[0] === b[0] && a[1] === b[1];\n  }\n\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n\n    return closestCoord;\n  }\n\n  useEffect(() => {\n    const allFeatures = vectorSourceRef.current?.getFeatures?.() || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    //set value to be used in 'Enter' calculations\n    textRef.current = text;\n\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      let translate = new Translate({ layers: [vectorLayerRef.current], condition: primaryAction });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Listen for translateend to track moves\n      translate.on('translateend', (evt) => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords,\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n\n        });\n      });\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', (evt) => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  /* MAIN USE EFFECT */\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    map.addControl(new Rotate({ autoHide: false, duration: 500 }));\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else/* if (modeRef.current === 'select')*/ {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n\n    function editExistingPolygon(snappedCoord, vectorSource) {\n      // Find a LineString whose endpoint matches snappedCoord\n      let foundLine = null;\n      let foundIndex = null;\n      vectorSource.getFeatures().forEach(feature => {\n        if (feature.getGeometry().getType() === 'LineString') {\n          const coords = feature.getGeometry().getCoordinates();\n          // Check both ends\n          if (coordsEqual(coords[0], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = 0;\n          } else if (coordsEqual(coords[coords.length - 1], snappedCoord)) {\n            foundLine = feature;\n            foundIndex = coords.length - 1;\n          }\n        }\n      });\n\n      if (foundLine) {\n        // Remove the LineString from the source\n        clearPolygonOverlays(foundLine, mapRef);\n        vectorSource.removeFeature(foundLine);\n        let coords = foundLine.getGeometry().getCoordinates();\n        // If the user clicked the end, reverse so snappedCoord is first\n        if (foundIndex === coords.length - 1) {\n          coords = coords.slice().reverse();\n        }\n        // Start a new polygon with these coords (not closed yet)\n        return coords;\n      }\n      // No matching linestring found\n      return null;\n    }\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n\n        const vectorSource = vectorSourceRef.current;\n        let initialCoords = editExistingPolygon(snappedCoord, vectorSource);\n\n        let poly, feature;\n\n        if (initialCoords) {\n          // Remove all instances of snappedCoord from the array\n          let coords = initialCoords.filter(c => !coordsEqual(c, snappedCoord));\n          // Push snappedCoord to the end\n          coords.push(snappedCoord);\n\n          // Ensure the polygon is closed visually\n          if (\n            coords.length > 2 &&\n            (coords[0][0] !== coords[coords.length - 1][0] ||\n              coords[0][1] !== coords[coords.length - 1][1])\n          ) {\n            coords.push([...coords[0]]);\n          }\n\n          console.log({ NEWPOLY: coords });\n          // Create the polygon (now closed)\n          poly = new Polygon([coords]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          createSegmentOverlays(feature, mapRef);\n          addHistoryAction({\n            type: 'convert-linestring-to-polygon',\n            featureId: feature.getId(),\n            prevCoords: initialCoords, // original LineString coordinates\n            newCoords: coords,         // new Polygon coordinates\n            geomType: 'Polygon',\n            prevGeomType: 'LineString'\n          });\n        } else {\n          // Normal: start polygon with just the clicked point\n          poly = new Polygon([[snappedCoord, snappedCoord]]);\n          feature = new Feature(poly);\n          feature.setId(Date.now().toString());\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords: [],\n            newCoords: [[coord, coord]],\n          });\n        }\n\n        // if (initialCoords) {\n        //   // Found a linestring endpoint: start polygon with those coords (not closed)\n        //   poly = new Polygon([initialCoords]);\n        //   feature = new Feature(poly);\n        // } else {\n        //   // Normal: start polygon with just the clicked point\n        //   poly = new Polygon([[snappedCoord, snappedCoord]]);\n        //   feature = new Feature(poly);\n        // }\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n        // Optionally: update overlays, call updateClosingSegment(), etc.\n\n\n\n\n\n\n        //   const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        //   const feature = new Feature(poly);\n\n        //   feature.setId(Date.now().toString());\n        //   feature.setStyle(activePolygonStyle);\n        //   vectorSource.addFeature(feature);\n        //   polygonFeatureRef.current = feature;\n        //   drawingRef.current = true;\n        //   setDrawing(true);\n\n        //   // Track action in history\n        //   addHistoryAction({\n        //     type: 'add-point',\n        //     featureId: feature.getId(),\n        //     prevCoords: [],\n        //     newCoords: [[coord, coord]],\n        //   });\n        // } else {\n        //   console.log('non first point - drawing clicked');\n        //unused point click\n        // const feature = polygonFeatureRef.current;\n        // const poly = feature.getGeometry();\n        // let coords = poly.getCoordinates()[0];\n        // const prevCoords = [...coords];\n        // coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        // poly.setCoordinates([coords]);\n        // console.log(coords.length);\n        // if (coords.length > 1) {\n        //   createSegmentOverlays(feature, mapRef);\n        // }\n\n        // addHistoryAction({\n        //   type: 'add-pointzzzzz',\n        //   featureId: feature.getId(),\n        //   prevCoords,\n        //   newCoords: coords\n        // });\n      }\n    }\n\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel).filter(f => vectorSourceRef.current.getFeatures().includes(f));\n      // const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      let currentIdx = -1;\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      //DISABLED CLICK TO DRAW\n      if (modeRef.current === 'draw' && ghostMarkerRef.current) {\n        console.log('draw clicked');\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      console.log({ AddSegmentCoords: coords });\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the current feature (could be a LineString or Polygon)\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n\n          let restoredFeature;\n          if (lastAction.geomType === 'Polygon') {\n            restoredFeature = new Feature(new Polygon([lastAction.prevCoords]));\n          } else if (lastAction.geomType === 'LineString') {\n            restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          }\n          if (restoredFeature && lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          if (restoredFeature) {\n            vectorSourceRef.current.addFeature(restoredFeature);\n            polygonFeatureRef.current = restoredFeature;\n            if (lastAction.prevCoords && lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(restoredFeature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        // if (lastAction.type === 'delete-segment') {\n        //   let lineFeature = vectorSourceRef.current.getFeatures().find(\n        //     f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n        //   );\n        //   if (lineFeature) {\n        //     clearPolygonOverlays(lineFeature, mapRef);\n        //     vectorSourceRef.current.removeFeature(lineFeature);\n        //   }\n        //   const newPoly = new Feature(new Polygon([prevCoords]));\n        //   if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n        //   vectorSourceRef.current.addFeature(newPoly);\n        //   polygonFeatureRef.current = newPoly;\n        //   if (prevCoords && prevCoords.length > 1) {\n        //     createSegmentOverlays(newPoly, mapRef);\n        //   }\n        //   return prev.slice(0, -1);\n        // }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the polygon feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the original LineString\n          const restoredFeature = new Feature(new LineString(lastAction.prevCoords));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        // feature.getGeometry().setCoordinates([prevCoords]);\n        // if (prevCoords.length > 1) {\n        //   createSegmentOverlays(feature, mapRef);\n        // }\n        const geomType = feature.getGeometry().getType();\n        if (geomType === 'Polygon') {\n          feature.getGeometry().setCoordinates([prevCoords]);\n        } else if (geomType === 'LineString') {\n          feature.getGeometry().setCoordinates(prevCoords);\n        }\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'convert-linestring-to-polygon') {\n          // Remove the LineString feature\n          let featureToRemove = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId\n          );\n          if (featureToRemove) {\n            clearPolygonOverlays(featureToRemove, mapRef);\n            vectorSourceRef.current.removeFeature(featureToRemove);\n          }\n          // Restore the Polygon\n          const restoredFeature = new Feature(new Polygon([lastAction.newCoords]));\n          if (lastAction.featureId) restoredFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(restoredFeature);\n          polygonFeatureRef.current = restoredFeature;\n          createSegmentOverlays(restoredFeature, mapRef);\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [\n        (start[0] + end[0]) / 2,\n        (start[1] + end[1]) / 2\n      ];\n\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // 'Enter' to calculate next line from the textbox input\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n        const input = textRef.current.trim().toUpperCase();\n\n        let dx = 0, dy = 0;\n\n        // 1. Handle direction notation (e.g. R10+U5)\n        const dirPattern = /^([RLUD]\\d+(\\+\\s*[RLUD]\\d+)*)$/;\n        if (dirPattern.test(input)) {\n          // Split by '+'\n          const parts = input.split('+').map(s => s.trim());\n          for (const part of parts) {\n            const dir = part[0];\n            const val = parseFloat(part.slice(1));\n            if (isNaN(val)) continue;\n            const meters = val * 0.3048;\n            switch (dir) {\n              case 'R': dx += meters; break;\n              case 'L': dx -= meters; break;\n              case 'U': dy += meters; break;\n              case 'D': dy -= meters; break;\n              default: break;\n            }\n          }\n          // Rotate the direction vector by the map's rotation\n          const map = mapRef.current;\n          const rotation = map ? map.getView().getRotation() : 0;\n          const cos = Math.cos(rotation);\n          const sin = Math.sin(rotation);\n          const rotatedDx = dx * cos - dy * sin;\n          const rotatedDy = dx * sin + dy * cos;\n          const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, mapRef);\n\n          addHistoryAction({\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords,\n          });\n\n          setText('');\n          return;\n        }\n\n        // 2. Handle length/angle notation (e.g. 10/180)\n        let distance = 0;\n        let angleDeg = 0;\n        if (input.includes('/')) {\n          const [distStr, angleStr] = input.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(input);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        distance = distance * 0.3048;\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = (angleDeg * Math.PI) / 180 + rotation;\n\n        const dx2 = distance * Math.cos(angleRad);\n        const dy2 = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx2, last[1] + dy2];\n\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n\n        setText('');\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"dimension-input-container\">\n        <input\n          id=\"dimension-input\"\n          ref={inputRef}\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n          placeholder=\"Dimension (ft.)\"\n          autoFocus\n          autoComplete='off'\n        />\n      </div>\n      <div id=\"map-menu-vert\">\n        <button\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n          disabled={mode === 'draw' && drawing}>\n          Draw\n        </button>\n        <button\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n          disabled={mode === 'draw' && drawing}>\n          Select\n        </button>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <Clone selectedFeature={selectedFeature} vectorSourceRef={vectorSourceRef} setSelectedFeature={setSelectedFeature} addHistoryAction={addHistoryAction} mapRef={mapRef} />\n        <div id=\"history-toggle\" className={`map-button${showHistory ? ' active' : ''}`} onClick={() => setShowHistory(v => !v)}>\n          History\n        </div>\n        {/* <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div> */}\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n      />\n      {showHistory && (\n        <History history={history} redoStack={redoStack} />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}