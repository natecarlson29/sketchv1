{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Draw from 'ol/interaction/Draw';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport LineString from 'ol/geom/LineString';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({\n      color: 'blue'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const inputRef = useRef();\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    const vertexSource = new VectorSource();\n    const vectorLayer = new VectorLayer({\n      source: vectorSource\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    const draw = new Draw({\n      source: vectorSource,\n      type: 'Polygon'\n    });\n    map.addInteraction(draw);\n    let allSegmentOverlays = [];\n    let currentSegmentOverlays = [];\n    let drawing = false;\n    let currentGeom = null;\n    let currentFeature = null;\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + ' ft';\n    }\n    function createSegmentOverlays(coords) {\n      const overlays = [];\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n        const midpoint = [(c1[0] + c2[0]) / 2, (c1[1] + c2[1]) / 2];\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.style.background = 'white';\n        tooltip.style.border = '1px solid black';\n        tooltip.style.padding = '2px 4px';\n        tooltip.style.position = 'relative';\n        tooltip.style.whiteSpace = 'nowrap';\n        tooltip.innerHTML = length;\n        const overlay = new Overlay({\n          element: tooltip,\n          position: midpoint,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        map.addOverlay(overlay);\n        overlays.push(overlay);\n      }\n      return overlays;\n    }\n    function updateVertexMarkers(coords) {\n      vertexSource.clear();\n      // Don't add marker for the closing coordinate (last point == first point)\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n    draw.on('drawstart', function (evt) {\n      drawing = true;\n      currentFeature = evt.feature;\n      currentGeom = evt.feature.getGeometry();\n      currentSegmentOverlays.forEach(overlay => map.removeOverlay(overlay));\n      currentSegmentOverlays = [];\n      currentGeom.on('change', function () {\n        currentSegmentOverlays.forEach(overlay => map.removeOverlay(overlay));\n        currentSegmentOverlays = [];\n        const coords = currentGeom.getCoordinates()[0];\n        currentSegmentOverlays = createSegmentOverlays(coords);\n        updateVertexMarkers(coords);\n      });\n    });\n    draw.on('drawend', function (evt) {\n      drawing = false;\n      currentGeom = null;\n      currentFeature = null;\n      const coords = evt.feature.getGeometry().getCoordinates()[0];\n      const overlays = createSegmentOverlays(coords);\n      allSegmentOverlays.push(...overlays);\n      currentSegmentOverlays = [];\n      updateVertexMarkers(coords);\n    });\n    function addSegment(direction) {\n      if (!drawing || !currentGeom) return;\n      const coords = currentGeom.getCoordinates()[0];\n      // The last placed vertex is just before the closing coordinate\n      const last = coords[coords.length - 2] || coords[coords.length - 1];\n      let dx = 0,\n        dy = 0;\n      const offset = 2; // map units\n\n      switch (direction) {\n        case 'ArrowUp':\n          dy = offset;\n          break;\n        case 'ArrowDown':\n          dy = -offset;\n          break;\n        case 'ArrowLeft':\n          dx = -offset;\n          break;\n        case 'ArrowRight':\n          dx = offset;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      const newCoords = [...coords.slice(0, coords.length - 1), newPt, coords[coords.length - 1]];\n      currentGeom.setCoordinates([newCoords]);\n      updateVertexMarkers(newCoords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        e.preventDefault();\n        addSegment(e.key);\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension\",\n      autoFocus: true,\n      style: {\n        position: 'absolute',\n        top: 20,\n        right: 20,\n        zIndex: 1000,\n        width: 300,\n        padding: 8,\n        fontSize: 16,\n        pointerEvents: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .segment-tooltip {\n            font-size: 12px;\n            pointer-events: none;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 202,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"s70B5kv/tbxlrsW53Gd8okJu5Ac=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Draw","Overlay","fromLonLat","getLength","LineString","Feature","Point","Style","CircleStyle","Fill","Stroke","jsxDEV","_jsxDEV","vertexStyle","image","radius","fill","color","stroke","width","App","_s","text","setText","inputRef","vectorSource","vertexSource","vectorLayer","source","vertexLayer","style","map","target","layers","view","center","zoom","draw","type","addInteraction","allSegmentOverlays","currentSegmentOverlays","drawing","currentGeom","currentFeature","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","overlays","i","length","c1","c2","midpoint","tooltip","document","createElement","className","background","border","padding","position","whiteSpace","innerHTML","overlay","element","positioning","stopEvent","addOverlay","push","updateVertexMarkers","clear","addFeature","on","evt","feature","getGeometry","forEach","removeOverlay","getCoordinates","addSegment","direction","last","dx","dy","offset","newPt","newCoords","slice","setCoordinates","handleKeyDown","e","key","preventDefault","addEventListener","setTarget","removeEventListener","children","ref","value","onChange","placeholder","autoFocus","top","right","zIndex","fontSize","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","id","height","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Draw from 'ol/interaction/Draw';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport LineString from 'ol/geom/LineString';\nimport Feature from 'ol/Feature';\nimport Point from 'ol/geom/Point';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\n\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'white', width: 2 }),\n  }),\n});\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const inputRef = useRef();\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    const vertexSource = new VectorSource();\n\n    const vectorLayer = new VectorLayer({ source: vectorSource });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    const draw = new Draw({\n      source: vectorSource,\n      type: 'Polygon',\n    });\n    map.addInteraction(draw);\n\n    let allSegmentOverlays = [];\n    let currentSegmentOverlays = [];\n    let drawing = false;\n    let currentGeom = null;\n    let currentFeature = null;\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + ' ft';\n    }\n\n    function createSegmentOverlays(coords) {\n      const overlays = [];\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        const midpoint = [\n          (c1[0] + c2[0]) / 2,\n          (c1[1] + c2[1]) / 2,\n        ];\n\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.style.background = 'white';\n        tooltip.style.border = '1px solid black';\n        tooltip.style.padding = '2px 4px';\n        tooltip.style.position = 'relative';\n        tooltip.style.whiteSpace = 'nowrap';\n        tooltip.innerHTML = length;\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: midpoint,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        map.addOverlay(overlay);\n        overlays.push(overlay);\n      }\n      return overlays;\n    }\n\n    function updateVertexMarkers(coords) {\n      vertexSource.clear();\n      // Don't add marker for the closing coordinate (last point == first point)\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n\n    draw.on('drawstart', function (evt) {\n      drawing = true;\n      currentFeature = evt.feature;\n      currentGeom = evt.feature.getGeometry();\n      currentSegmentOverlays.forEach((overlay) => map.removeOverlay(overlay));\n      currentSegmentOverlays = [];\n\n      currentGeom.on('change', function () {\n        currentSegmentOverlays.forEach((overlay) => map.removeOverlay(overlay));\n        currentSegmentOverlays = [];\n        const coords = currentGeom.getCoordinates()[0];\n        currentSegmentOverlays = createSegmentOverlays(coords);\n        updateVertexMarkers(coords);\n      });\n    });\n\n    draw.on('drawend', function (evt) {\n      drawing = false;\n      currentGeom = null;\n      currentFeature = null;\n      const coords = evt.feature.getGeometry().getCoordinates()[0];\n      const overlays = createSegmentOverlays(coords);\n      allSegmentOverlays.push(...overlays);\n      currentSegmentOverlays = [];\n      updateVertexMarkers(coords);\n    });\n\n    function addSegment(direction) {\n      if (!drawing || !currentGeom) return;\n      const coords = currentGeom.getCoordinates()[0];\n      // The last placed vertex is just before the closing coordinate\n      const last = coords[coords.length - 2] || coords[coords.length - 1];\n      let dx = 0,\n        dy = 0;\n      const offset = 2; // map units\n\n      switch (direction) {\n        case 'ArrowUp':\n          dy = offset;\n          break;\n        case 'ArrowDown':\n          dy = -offset;\n          break;\n        case 'ArrowLeft':\n          dx = -offset;\n          break;\n        case 'ArrowRight':\n          dx = offset;\n          break;\n        default:\n          return;\n      }\n\n      const newPt = [last[0] + dx, last[1] + dy];\n      const newCoords = [\n        ...coords.slice(0, coords.length - 1),\n        newPt,\n        coords[coords.length - 1],\n      ];\n      currentGeom.setCoordinates([newCoords]);\n      updateVertexMarkers(newCoords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        e.preventDefault();\n        addSegment(e.key);\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <div>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension\"\n        autoFocus\n        style={{\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          zIndex: 1000,\n          width: 300,\n          padding: 8,\n          fontSize: 16,\n          pointerEvents: 'auto',\n        }}\n      />\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\n      <style>\n        {`\n          .segment-tooltip {\n            font-size: 12px;\n            pointer-events: none;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAO,WAAW;AAClB,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,GAAG,MAAM,eAAe;AAC/B,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,OAAO,MAAM,YAAY;AAChC,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,SAAS,QAAQ,WAAW;AACrC,OAAOC,UAAU,MAAM,oBAAoB;AAC3C,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,KAAK,MAAM,eAAe;AACjC,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,IAAI,MAAM,eAAe;AAChC,OAAOC,MAAM,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,MAAMC,WAAW,GAAG,IAAIN,KAAK,CAAC;EAC5BO,KAAK,EAAE,IAAIN,WAAW,CAAC;IACrBO,MAAM,EAAE,CAAC;IACTC,IAAI,EAAE,IAAIP,IAAI,CAAC;MAAEQ,KAAK,EAAE;IAAO,CAAC,CAAC;IACjCC,MAAM,EAAE,IAAIR,MAAM,CAAC;MAAEO,KAAK,EAAE,OAAO;MAAEE,KAAK,EAAE;IAAE,CAAC;EACjD,CAAC;AACH,CAAC,CAAC;AAEF,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAG9B,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM+B,QAAQ,GAAGhC,MAAM,CAAC,CAAC;EAEzBD,SAAS,CAAC,MAAM;IACd,MAAMkC,YAAY,GAAG,IAAI1B,YAAY,CAAC,CAAC;IACvC,MAAM2B,YAAY,GAAG,IAAI3B,YAAY,CAAC,CAAC;IAEvC,MAAM4B,WAAW,GAAG,IAAI7B,WAAW,CAAC;MAAE8B,MAAM,EAAEH;IAAa,CAAC,CAAC;IAC7D,MAAMI,WAAW,GAAG,IAAI/B,WAAW,CAAC;MAClC8B,MAAM,EAAEF,YAAY;MACpBI,KAAK,EAAEjB;IACT,CAAC,CAAC;IAEF,MAAMkB,GAAG,GAAG,IAAIrC,GAAG,CAAC;MAClBsC,MAAM,EAAE,KAAK;MACbC,MAAM,EAAE,CACN,IAAIrC,SAAS,CAAC;QAAEgC,MAAM,EAAE,IAAI/B,GAAG,CAAC;MAAE,CAAC,CAAC,EACpC8B,WAAW,EACXE,WAAW,CACZ;MACDK,IAAI,EAAE,IAAIvC,IAAI,CAAC;QACbwC,MAAM,EAAEjC,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACnCkC,IAAI,EAAE;MACR,CAAC;IACH,CAAC,CAAC;IAEF,MAAMC,IAAI,GAAG,IAAIrC,IAAI,CAAC;MACpB4B,MAAM,EAAEH,YAAY;MACpBa,IAAI,EAAE;IACR,CAAC,CAAC;IACFP,GAAG,CAACQ,cAAc,CAACF,IAAI,CAAC;IAExB,IAAIG,kBAAkB,GAAG,EAAE;IAC3B,IAAIC,sBAAsB,GAAG,EAAE;IAC/B,IAAIC,OAAO,GAAG,KAAK;IACnB,IAAIC,WAAW,GAAG,IAAI;IACtB,IAAIC,cAAc,GAAG,IAAI;IAEzB,SAASC,YAAYA,CAACC,IAAI,EAAE;MAC1B,MAAMC,YAAY,GAAG5C,SAAS,CAAC2C,IAAI,CAAC;MACpC,MAAME,UAAU,GAAGD,YAAY,GAAG,OAAO;MACzC,OAAOC,UAAU,GAAG,IAAI,GACpB,CAACA,UAAU,GAAG,IAAI,EAAEC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,GACtCD,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK;IACnC;IAEA,SAASC,qBAAqBA,CAACC,MAAM,EAAE;MACrC,MAAMC,QAAQ,GAAG,EAAE;MACnB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,EAAED,CAAC,EAAE,EAAE;QACtC,MAAME,EAAE,GAAGJ,MAAM,CAACE,CAAC,GAAG,CAAC,CAAC;QACxB,MAAMG,EAAE,GAAGL,MAAM,CAACE,CAAC,CAAC;QACpB,MAAMP,IAAI,GAAG,IAAI1C,UAAU,CAAC,CAACmD,EAAE,EAAEC,EAAE,CAAC,CAAC;QACrC,MAAMF,MAAM,GAAGT,YAAY,CAACC,IAAI,CAAC;QAEjC,MAAMW,QAAQ,GAAG,CACf,CAACF,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EACnB,CAACD,EAAE,CAAC,CAAC,CAAC,GAAGC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CACpB;QAED,MAAME,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;QAC7CF,OAAO,CAACG,SAAS,GAAG,iBAAiB;QACrCH,OAAO,CAAC5B,KAAK,CAACgC,UAAU,GAAG,OAAO;QAClCJ,OAAO,CAAC5B,KAAK,CAACiC,MAAM,GAAG,iBAAiB;QACxCL,OAAO,CAAC5B,KAAK,CAACkC,OAAO,GAAG,SAAS;QACjCN,OAAO,CAAC5B,KAAK,CAACmC,QAAQ,GAAG,UAAU;QACnCP,OAAO,CAAC5B,KAAK,CAACoC,UAAU,GAAG,QAAQ;QACnCR,OAAO,CAACS,SAAS,GAAGb,MAAM;QAE1B,MAAMc,OAAO,GAAG,IAAInE,OAAO,CAAC;UAC1BoE,OAAO,EAAEX,OAAO;UAChBO,QAAQ,EAAER,QAAQ;UAClBa,WAAW,EAAE,eAAe;UAC5BC,SAAS,EAAE;QACb,CAAC,CAAC;QACFxC,GAAG,CAACyC,UAAU,CAACJ,OAAO,CAAC;QACvBhB,QAAQ,CAACqB,IAAI,CAACL,OAAO,CAAC;MACxB;MACA,OAAOhB,QAAQ;IACjB;IAEA,SAASsB,mBAAmBA,CAACvB,MAAM,EAAE;MACnCzB,YAAY,CAACiD,KAAK,CAAC,CAAC;MACpB;MACA,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,MAAM,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,EAAE,EAAE;QAC1C3B,YAAY,CAACkD,UAAU,CAAC,IAAIvE,OAAO,CAAC,IAAIC,KAAK,CAAC6C,MAAM,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5D;IACF;IAEAhB,IAAI,CAACwC,EAAE,CAAC,WAAW,EAAE,UAAUC,GAAG,EAAE;MAClCpC,OAAO,GAAG,IAAI;MACdE,cAAc,GAAGkC,GAAG,CAACC,OAAO;MAC5BpC,WAAW,GAAGmC,GAAG,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC;MACvCvC,sBAAsB,CAACwC,OAAO,CAAEb,OAAO,IAAKrC,GAAG,CAACmD,aAAa,CAACd,OAAO,CAAC,CAAC;MACvE3B,sBAAsB,GAAG,EAAE;MAE3BE,WAAW,CAACkC,EAAE,CAAC,QAAQ,EAAE,YAAY;QACnCpC,sBAAsB,CAACwC,OAAO,CAAEb,OAAO,IAAKrC,GAAG,CAACmD,aAAa,CAACd,OAAO,CAAC,CAAC;QACvE3B,sBAAsB,GAAG,EAAE;QAC3B,MAAMU,MAAM,GAAGR,WAAW,CAACwC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9C1C,sBAAsB,GAAGS,qBAAqB,CAACC,MAAM,CAAC;QACtDuB,mBAAmB,CAACvB,MAAM,CAAC;MAC7B,CAAC,CAAC;IACJ,CAAC,CAAC;IAEFd,IAAI,CAACwC,EAAE,CAAC,SAAS,EAAE,UAAUC,GAAG,EAAE;MAChCpC,OAAO,GAAG,KAAK;MACfC,WAAW,GAAG,IAAI;MAClBC,cAAc,GAAG,IAAI;MACrB,MAAMO,MAAM,GAAG2B,GAAG,CAACC,OAAO,CAACC,WAAW,CAAC,CAAC,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;MAC5D,MAAM/B,QAAQ,GAAGF,qBAAqB,CAACC,MAAM,CAAC;MAC9CX,kBAAkB,CAACiC,IAAI,CAAC,GAAGrB,QAAQ,CAAC;MACpCX,sBAAsB,GAAG,EAAE;MAC3BiC,mBAAmB,CAACvB,MAAM,CAAC;IAC7B,CAAC,CAAC;IAEF,SAASiC,UAAUA,CAACC,SAAS,EAAE;MAC7B,IAAI,CAAC3C,OAAO,IAAI,CAACC,WAAW,EAAE;MAC9B,MAAMQ,MAAM,GAAGR,WAAW,CAACwC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;MAC9C;MACA,MAAMG,IAAI,GAAGnC,MAAM,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC,IAAIH,MAAM,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC;MACnE,IAAIiC,EAAE,GAAG,CAAC;QACRC,EAAE,GAAG,CAAC;MACR,MAAMC,MAAM,GAAG,CAAC,CAAC,CAAC;;MAElB,QAAQJ,SAAS;QACf,KAAK,SAAS;UACZG,EAAE,GAAGC,MAAM;UACX;QACF,KAAK,WAAW;UACdD,EAAE,GAAG,CAACC,MAAM;UACZ;QACF,KAAK,WAAW;UACdF,EAAE,GAAG,CAACE,MAAM;UACZ;QACF,KAAK,YAAY;UACfF,EAAE,GAAGE,MAAM;UACX;QACF;UACE;MACJ;MAEA,MAAMC,KAAK,GAAG,CAACJ,IAAI,CAAC,CAAC,CAAC,GAAGC,EAAE,EAAED,IAAI,CAAC,CAAC,CAAC,GAAGE,EAAE,CAAC;MAC1C,MAAMG,SAAS,GAAG,CAChB,GAAGxC,MAAM,CAACyC,KAAK,CAAC,CAAC,EAAEzC,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC,EACrCoC,KAAK,EACLvC,MAAM,CAACA,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC,CAC1B;MACDX,WAAW,CAACkD,cAAc,CAAC,CAACF,SAAS,CAAC,CAAC;MACvCjB,mBAAmB,CAACiB,SAAS,CAAC;IAChC;IAEA,SAASG,aAAaA,CAACC,CAAC,EAAE;MACxB,IACEA,CAAC,CAACC,GAAG,KAAK,SAAS,IACnBD,CAAC,CAACC,GAAG,KAAK,WAAW,IACrBD,CAAC,CAACC,GAAG,KAAK,WAAW,IACrBD,CAAC,CAACC,GAAG,KAAK,YAAY,EACtB;QACAD,CAAC,CAACE,cAAc,CAAC,CAAC;QAClBb,UAAU,CAACW,CAAC,CAACC,GAAG,CAAC;MACnB;IACF;IAEArC,QAAQ,CAACuC,gBAAgB,CAAC,SAAS,EAAEJ,aAAa,CAAC;IAEnD,OAAO,MAAM;MACX/D,GAAG,CAACoE,SAAS,CAAC,IAAI,CAAC;MACnBxC,QAAQ,CAACyC,mBAAmB,CAAC,SAAS,EAAEN,aAAa,CAAC;IACxD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACElF,OAAA;IAAAyF,QAAA,gBACEzF,OAAA;MACE0F,GAAG,EAAE9E,QAAS;MACdc,IAAI,EAAC,MAAM;MACXiE,KAAK,EAAEjF,IAAK;MACZkF,QAAQ,EAAET,CAAC,IAAIxE,OAAO,CAACwE,CAAC,CAAC/D,MAAM,CAACuE,KAAK,CAAE;MACvCE,WAAW,EAAC,WAAW;MACvBC,SAAS;MACT5E,KAAK,EAAE;QACLmC,QAAQ,EAAE,UAAU;QACpB0C,GAAG,EAAE,EAAE;QACPC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,IAAI;QACZ1F,KAAK,EAAE,GAAG;QACV6C,OAAO,EAAE,CAAC;QACV8C,QAAQ,EAAE,EAAE;QACZC,aAAa,EAAE;MACjB;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACFvG,OAAA;MAAKwG,EAAE,EAAC,KAAK;MAACtF,KAAK,EAAE;QAAEX,KAAK,EAAE,OAAO;QAAEkG,MAAM,EAAE;MAAQ;IAAE;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAChEvG,OAAA;MAAAyF,QAAA,EACG;AACT;AACA;AACA;AACA;AACA;IAAS;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAC9F,EAAA,CA3MID,GAAG;AAAAkG,EAAA,GAAHlG,GAAG;AA6MT,eAAeA,GAAG;AAAC,IAAAkG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}