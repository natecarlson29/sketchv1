{"ast":null,"code":"/**\n * @module ol/render/canvas/Executor\n */\nimport CanvasInstruction from './Instruction.js';\nimport { TEXT_ALIGN } from './TextBuilder.js';\nimport { WORKER_OFFSCREEN_CANVAS } from '../../has.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform, setFromArray as transformSetFromArray } from '../../transform.js';\nimport { createEmpty, createOrUpdate, intersects } from '../../extent.js';\nimport { defaultPadding, defaultTextAlign, defaultTextBaseline, drawImageOrLabel, getTextDimensions, measureAndCacheTextWidth } from '../canvas.js';\nimport { drawTextOnPath } from '../../geom/flat/textpath.js';\nimport { equals } from '../../array.js';\nimport { lineStringLength } from '../../geom/flat/length.js';\nimport { transform2D } from '../../geom/flat/transform.js';\n/**\n * @typedef {Object} BBox\n * @property {number} minX Minimal x.\n * @property {number} minY Minimal y.\n * @property {number} maxX Maximal x.\n * @property {number} maxY Maximal y\n * @property {*} value Value.\n */\n/**\n * @typedef {Object} ImageOrLabelDimensions\n * @property {number} drawImageX DrawImageX.\n * @property {number} drawImageY DrawImageY.\n * @property {number} drawImageW DrawImageW.\n * @property {number} drawImageH DrawImageH.\n * @property {number} originX OriginX.\n * @property {number} originY OriginY.\n * @property {Array<number>} scale Scale.\n * @property {BBox} declutterBox DeclutterBox.\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\n */\n/**\n * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\n */\n/**\n * @template T\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n/**\n * @type {import(\"../../extent.js\").Extent}\n */\nvar tmpExtent = createEmpty();\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nvar p1 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nvar p2 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nvar p3 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nvar p4 = [];\n/**\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\n * @return {BBox} Declutter bbox.\n */\nfunction getDeclutterBox(replayImageOrLabelArgs) {\n  return replayImageOrLabelArgs[3].declutterBox;\n}\nvar rtlRegEx = new RegExp(/* eslint-disable prettier/prettier */\n'[' + String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) + String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) + String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) + String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) + String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) + ']'\n/* eslint-enable prettier/prettier */);\n/**\n * @param {string} text Text.\n * @param {string} align Alignment.\n * @return {number} Text alignment.\n */\nfunction horizontalTextAlign(text, align) {\n  if ((align === 'start' || align === 'end') && !rtlRegEx.test(text)) {\n    align = align === 'start' ? 'left' : 'right';\n  }\n  return TEXT_ALIGN[align];\n}\n/**\n * @param {Array<string>} acc Accumulator.\n * @param {string} line Line of text.\n * @param {number} i Index\n * @return {Array<string>} Accumulator.\n */\nfunction createTextChunks(acc, line, i) {\n  if (i > 0) {\n    acc.push('\\n', '');\n  }\n  acc.push(line, '');\n  return acc;\n}\nvar Executor = /** @class */function () {\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions\n   */\n  function Executor(resolution, pixelRatio, overlaps, instructions) {\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.alignFill_;\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = instructions.instructions;\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = instructions.coordinates;\n    /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n    /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */\n    this.renderedTransform_ = createTransform();\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = instructions.fillStates || {};\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = instructions.strokeStates || {};\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = instructions.textStates || {};\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.widths_ = {};\n    /**\n     * @private\n     * @type {Object<string, import(\"../canvas.js\").Label>}\n     */\n    this.labels_ = {};\n  }\n  /**\n   * @param {string|Array<string>} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {import(\"../canvas.js\").Label} Label.\n   */\n  Executor.prototype.createLabel = function (text, textKey, fillKey, strokeKey) {\n    var key = text + textKey + fillKey + strokeKey;\n    if (this.labels_[key]) {\n      return this.labels_[key];\n    }\n    var strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n    var fillState = fillKey ? this.fillStates[fillKey] : null;\n    var textState = this.textStates[textKey];\n    var pixelRatio = this.pixelRatio;\n    var scale = [textState.scale[0] * pixelRatio, textState.scale[1] * pixelRatio];\n    var textIsArray = Array.isArray(text);\n    var align = textState.justify ? TEXT_ALIGN[textState.justify] : horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || defaultTextAlign);\n    var strokeWidth = strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n    var chunks = textIsArray ? text : text.split('\\n').reduce(createTextChunks, []);\n    var _a = getTextDimensions(textState, chunks),\n      width = _a.width,\n      height = _a.height,\n      widths = _a.widths,\n      heights = _a.heights,\n      lineWidths = _a.lineWidths;\n    var renderWidth = width + strokeWidth;\n    var contextInstructions = [];\n    // make canvas 2 pixels wider to account for italic text width measurement errors\n    var w = (renderWidth + 2) * scale[0];\n    var h = (height + strokeWidth) * scale[1];\n    /** @type {import(\"../canvas.js\").Label} */\n    var label = {\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\n      contextInstructions: contextInstructions\n    };\n    if (scale[0] != 1 || scale[1] != 1) {\n      contextInstructions.push('scale', scale);\n    }\n    if (strokeKey) {\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\n      contextInstructions.push('lineWidth', strokeWidth);\n      contextInstructions.push('lineCap', strokeState.lineCap);\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\n      // eslint-disable-next-line\n      var Context = WORKER_OFFSCREEN_CANVAS ? OffscreenCanvasRenderingContext2D : CanvasRenderingContext2D;\n      if (Context.prototype.setLineDash) {\n        contextInstructions.push('setLineDash', [strokeState.lineDash]);\n        contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\n      }\n    }\n    if (fillKey) {\n      contextInstructions.push('fillStyle', fillState.fillStyle);\n    }\n    contextInstructions.push('textBaseline', 'middle');\n    contextInstructions.push('textAlign', 'center');\n    var leftRight = 0.5 - align;\n    var x = align * renderWidth + leftRight * strokeWidth;\n    var strokeInstructions = [];\n    var fillInstructions = [];\n    var lineHeight = 0;\n    var lineOffset = 0;\n    var widthHeightIndex = 0;\n    var lineWidthIndex = 0;\n    var previousFont;\n    for (var i = 0, ii = chunks.length; i < ii; i += 2) {\n      var text_1 = chunks[i];\n      if (text_1 === '\\n') {\n        lineOffset += lineHeight;\n        lineHeight = 0;\n        x = align * renderWidth + leftRight * strokeWidth;\n        ++lineWidthIndex;\n        continue;\n      }\n      var font = chunks[i + 1] || textState.font;\n      if (font !== previousFont) {\n        if (strokeKey) {\n          strokeInstructions.push('font', font);\n        }\n        if (fillKey) {\n          fillInstructions.push('font', font);\n        }\n        previousFont = font;\n      }\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\n      var fillStrokeArgs = [text_1, x + leftRight * widths[widthHeightIndex] + align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]), 0.5 * (strokeWidth + lineHeight) + lineOffset];\n      x += widths[widthHeightIndex];\n      if (strokeKey) {\n        strokeInstructions.push('strokeText', fillStrokeArgs);\n      }\n      if (fillKey) {\n        fillInstructions.push('fillText', fillStrokeArgs);\n      }\n      ++widthHeightIndex;\n    }\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\n    this.labels_[key] = label;\n    return label;\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  Executor.prototype.replayTextBackground_ = function (context, p1, p2, p3, p4, fillInstruction, strokeInstruction) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignFill_ = /** @type {boolean} */fillInstruction[2];\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(context, /** @type {Array<*>} */strokeInstruction);\n      context.stroke();\n    }\n  };\n  /**\n   * @private\n   * @param {number} sheetWidth Width of the sprite sheet.\n   * @param {number} sheetHeight Height of the sprite sheet.\n   * @param {number} centerX X.\n   * @param {number} centerY Y.\n   * @param {number} width Width.\n   * @param {number} height Height.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {import(\"../../size.js\").Size} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {Array<number>} padding Padding.\n   * @param {boolean} fillStroke Background fill or stroke.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\n   */\n  Executor.prototype.calculateImageOrLabelDimensions_ = function (sheetWidth, sheetHeight, centerX, centerY, width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, fillStroke, feature) {\n    anchorX *= scale[0];\n    anchorY *= scale[1];\n    var x = centerX - anchorX;\n    var y = centerY - anchorY;\n    var w = width + originX > sheetWidth ? sheetWidth - originX : width;\n    var h = height + originY > sheetHeight ? sheetHeight - originY : height;\n    var boxW = padding[3] + w * scale[0] + padding[1];\n    var boxH = padding[0] + h * scale[1] + padding[2];\n    var boxX = x - padding[3];\n    var boxY = y - padding[0];\n    if (fillStroke || rotation !== 0) {\n      p1[0] = boxX;\n      p4[0] = boxX;\n      p1[1] = boxY;\n      p2[1] = boxY;\n      p2[0] = boxX + boxW;\n      p3[0] = p2[0];\n      p3[1] = boxY + boxH;\n      p4[1] = p3[1];\n    }\n    var transform;\n    if (rotation !== 0) {\n      transform = composeTransform(createTransform(), centerX, centerY, 1, 1, rotation, -centerX, -centerY);\n      applyTransform(transform, p1);\n      applyTransform(transform, p2);\n      applyTransform(transform, p3);\n      applyTransform(transform, p4);\n      createOrUpdate(Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1]), tmpExtent);\n    } else {\n      createOrUpdate(Math.min(boxX, boxX + boxW), Math.min(boxY, boxY + boxH), Math.max(boxX, boxX + boxW), Math.max(boxY, boxY + boxH), tmpExtent);\n    }\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n    return {\n      drawImageX: x,\n      drawImageY: y,\n      drawImageW: w,\n      drawImageH: h,\n      originX: originX,\n      originY: originY,\n      declutterBox: {\n        minX: tmpExtent[0],\n        minY: tmpExtent[1],\n        maxX: tmpExtent[2],\n        maxY: tmpExtent[3],\n        value: feature\n      },\n      canvasTransform: transform,\n      scale: scale\n    };\n  };\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\n   * @param {number} opacity Opacity.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   * @return {boolean} The image or label was rendered.\n   */\n  Executor.prototype.replayImageOrLabel_ = function (context, contextScale, imageOrLabel, dimensions, opacity, fillInstruction, strokeInstruction) {\n    var fillStroke = !!(fillInstruction || strokeInstruction);\n    var box = dimensions.declutterBox;\n    var canvas = context.canvas;\n    var strokePadding = strokeInstruction ? strokeInstruction[2] * dimensions.scale[0] / 2 : 0;\n    var intersects = box.minX - strokePadding <= canvas.width / contextScale && box.maxX + strokePadding >= 0 && box.minY - strokePadding <= canvas.height / contextScale && box.maxY + strokePadding >= 0;\n    if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(context, p1, p2, p3, p4, /** @type {Array<*>} */fillInstruction, /** @type {Array<*>} */strokeInstruction);\n      }\n      drawImageOrLabel(context, dimensions.canvasTransform, opacity, imageOrLabel, dimensions.originX, dimensions.originY, dimensions.drawImageW, dimensions.drawImageH, dimensions.drawImageX, dimensions.drawImageY, dimensions.scale);\n    }\n    return true;\n  };\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  Executor.prototype.fill_ = function (context) {\n    if (this.alignFill_) {\n      var origin_1 = applyTransform(this.renderedTransform_, [0, 0]);\n      var repeatSize = 512 * this.pixelRatio;\n      context.save();\n      context.translate(origin_1[0] % repeatSize, origin_1[1] % repeatSize);\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (this.alignFill_) {\n      context.restore();\n    }\n  };\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  Executor.prototype.setStrokeStyle_ = function (context, instruction) {\n    context['strokeStyle'] = /** @type {import(\"../../colorlike.js\").ColorLike} */instruction[1];\n    context.lineWidth = /** @type {number} */instruction[2];\n    context.lineCap = /** @type {CanvasLineCap} */instruction[3];\n    context.lineJoin = /** @type {CanvasLineJoin} */instruction[4];\n    context.miterLimit = /** @type {number} */instruction[5];\n    if (context.setLineDash) {\n      context.lineDashOffset = /** @type {number} */instruction[7];\n      context.setLineDash(/** @type {Array<number>} */instruction[6]);\n    }\n  };\n  /**\n   * @private\n   * @param {string|Array<string>} text The text to draw.\n   * @param {string} textKey The key of the text state.\n   * @param {string} strokeKey The key for the stroke state.\n   * @param {string} fillKey The key for the fill state.\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\n   */\n  Executor.prototype.drawLabelWithPointPlacement_ = function (text, textKey, strokeKey, fillKey) {\n    var textState = this.textStates[textKey];\n    var label = this.createLabel(text, textKey, fillKey, strokeKey);\n    var strokeState = this.strokeStates[strokeKey];\n    var pixelRatio = this.pixelRatio;\n    var align = horizontalTextAlign(Array.isArray(text) ? text[0] : text, textState.textAlign || defaultTextAlign);\n    var baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\n    var strokeWidth = strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n    // Remove the 2 pixels we added in createLabel() for the anchor\n    var width = label.width / pixelRatio - 2 * textState.scale[0];\n    var anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n    var anchorY = baseline * label.height / pixelRatio + 2 * (0.5 - baseline) * strokeWidth;\n    return {\n      label: label,\n      anchorX: anchorX,\n      anchorY: anchorY\n    };\n  };\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [opt_hitExtent] Only check\n   *     features that intersect this extent.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  Executor.prototype.execute_ = function (context, contextScale, transform, instructions, snapToPixel, opt_featureCallback, opt_hitExtent, opt_declutterTree) {\n    /** @type {Array<number>} */\n    var pixelCoordinates;\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = transform2D(this.coordinates, 0, this.coordinates.length, 2, transform, this.pixelCoordinates_);\n      transformSetFromArray(this.renderedTransform_, transform);\n    }\n    var i = 0; // instruction index\n    var ii = instructions.length; // end of instructions\n    var d = 0; // data index\n    var dd; // end of per-instruction data\n    var anchorX, anchorY, prevX, prevY, roundX, roundY, image, text, textKey, strokeKey, fillKey;\n    var pendingFill = 0;\n    var pendingStroke = 0;\n    var lastFillInstruction = null;\n    var lastStrokeInstruction = null;\n    var coordinateCache = this.coordinateCache_;\n    var viewRotation = this.viewRotation_;\n    var viewRotationFromTransform = Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n    var state = /** @type {import(\"../../render.js\").State} */{\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation\n    };\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    var batchSize = this.instructions != instructions || this.overlaps ? 0 : 200;\n    var /** @type {import(\"../../Feature.js\").FeatureLike} */feature;\n    var x, y, currentGeometry;\n    while (i < ii) {\n      var instruction = instructions[i];\n      var type = /** @type {import(\"./Instruction.js\").default} */instruction[0];\n      switch (type) {\n        case CanvasInstruction.BEGIN_GEOMETRY:\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */instruction[1];\n          currentGeometry = instruction[3];\n          if (!feature.getGeometry()) {\n            i = /** @type {number} */instruction[2];\n          } else if (opt_hitExtent !== undefined && !intersects(opt_hitExtent, currentGeometry.getExtent())) {\n            i = /** @type {number} */instruction[2] + 1;\n          } else {\n            ++i;\n          }\n          break;\n        case CanvasInstruction.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = NaN;\n            prevY = NaN;\n          }\n          ++i;\n          break;\n        case CanvasInstruction.CIRCLE:\n          d = /** @type {number} */instruction[1];\n          var x1 = pixelCoordinates[d];\n          var y1 = pixelCoordinates[d + 1];\n          var x2 = pixelCoordinates[d + 2];\n          var y2 = pixelCoordinates[d + 3];\n          var dx = x2 - x1;\n          var dy = y2 - y1;\n          var r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case CanvasInstruction.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case CanvasInstruction.CUSTOM:\n          d = /** @type {number} */instruction[1];\n          dd = instruction[2];\n          var geometry = /** @type {import(\"../../geom/SimpleGeometry.js\").default} */instruction[3];\n          var renderer = instruction[4];\n          var fn = instruction.length == 6 ? instruction[5] : undefined;\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          var coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_IMAGE:\n          d = /** @type {number} */instruction[1];\n          dd = /** @type {number} */instruction[2];\n          image = /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */instruction[3];\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */instruction[4];\n          anchorY = /** @type {number} */instruction[5];\n          var height = /** @type {number} */instruction[6];\n          var opacity = /** @type {number} */instruction[7];\n          var originX = /** @type {number} */instruction[8];\n          var originY = /** @type {number} */instruction[9];\n          var rotateWithView = /** @type {boolean} */instruction[10];\n          var rotation = /** @type {number} */instruction[11];\n          var scale = /** @type {import(\"../../size.js\").Size} */instruction[12];\n          var width = /** @type {number} */instruction[13];\n          var declutterMode = /** @type {\"declutter\"|\"obstacle\"|\"none\"|undefined} */instruction[14];\n          var declutterImageWithText = /** @type {import(\"../canvas.js\").DeclutterImageWithText} */instruction[15];\n          if (!image && instruction.length >= 20) {\n            // create label images\n            text = /** @type {string} */instruction[19];\n            textKey = /** @type {string} */instruction[20];\n            strokeKey = /** @type {string} */instruction[21];\n            fillKey = /** @type {string} */instruction[22];\n            var labelWithAnchor = this.drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey);\n            image = labelWithAnchor.label;\n            instruction[3] = image;\n            var textOffsetX = /** @type {number} */instruction[23];\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n            instruction[4] = anchorX;\n            var textOffsetY = /** @type {number} */instruction[24];\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n            instruction[5] = anchorY;\n            height = image.height;\n            instruction[6] = height;\n            width = image.width;\n            instruction[13] = width;\n          }\n          var geometryWidths = void 0;\n          if (instruction.length > 25) {\n            geometryWidths = /** @type {number} */instruction[25];\n          }\n          var padding = void 0,\n            backgroundFill = void 0,\n            backgroundStroke = void 0;\n          if (instruction.length > 17) {\n            padding = /** @type {Array<number>} */instruction[16];\n            backgroundFill = /** @type {boolean} */instruction[17];\n            backgroundStroke = /** @type {boolean} */instruction[18];\n          } else {\n            padding = defaultPadding;\n            backgroundFill = false;\n            backgroundStroke = false;\n          }\n          if (rotateWithView && viewRotationFromTransform) {\n            // Canvas is expected to be rotated to reverse view rotation.\n            rotation += viewRotation;\n          } else if (!rotateWithView && !viewRotationFromTransform) {\n            // Canvas is not rotated, images need to be rotated back to be north-up.\n            rotation -= viewRotation;\n          }\n          var widthIndex = 0;\n          for (; d < dd; d += 2) {\n            if (geometryWidths && geometryWidths[widthIndex++] < width / this.pixelRatio) {\n              continue;\n            }\n            var dimensions = this.calculateImageOrLabelDimensions_(image.width, image.height, pixelCoordinates[d], pixelCoordinates[d + 1], width, height, anchorX, anchorY, originX, originY, rotation, scale, snapToPixel, padding, backgroundFill || backgroundStroke, feature);\n            /** @type {ReplayImageOrLabelArgs} */\n            var args = [context, contextScale, image, dimensions, opacity, backgroundFill ? (/** @type {Array<*>} */lastFillInstruction) : null, backgroundStroke ? (/** @type {Array<*>} */lastStrokeInstruction) : null];\n            if (opt_declutterTree) {\n              if (declutterMode === 'none') {\n                // not rendered in declutter group\n                continue;\n              } else if (declutterMode === 'obstacle') {\n                // will always be drawn, thus no collision detection, but insert as obstacle\n                opt_declutterTree.insert(dimensions.declutterBox);\n                continue;\n              } else {\n                var imageArgs = void 0;\n                var imageDeclutterBox = void 0;\n                if (declutterImageWithText) {\n                  var index = dd - d;\n                  if (!declutterImageWithText[index]) {\n                    // We now have the image for an image+text combination.\n                    declutterImageWithText[index] = args;\n                    // Don't render anything for now, wait for the text.\n                    continue;\n                  }\n                  imageArgs = declutterImageWithText[index];\n                  delete declutterImageWithText[index];\n                  imageDeclutterBox = getDeclutterBox(imageArgs);\n                  if (opt_declutterTree.collides(imageDeclutterBox)) {\n                    continue;\n                  }\n                }\n                if (opt_declutterTree.collides(dimensions.declutterBox)) {\n                  continue;\n                }\n                if (imageArgs) {\n                  // We now have image and text for an image+text combination.\n                  opt_declutterTree.insert(imageDeclutterBox);\n                  // Render the image before we render the text.\n                  this.replayImageOrLabel_.apply(this, imageArgs);\n                }\n                opt_declutterTree.insert(dimensions.declutterBox);\n              }\n            }\n            this.replayImageOrLabel_.apply(this, args);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_CHARS:\n          var begin = /** @type {number} */instruction[1];\n          var end = /** @type {number} */instruction[2];\n          var baseline = /** @type {number} */instruction[3];\n          var overflow = /** @type {number} */instruction[4];\n          fillKey = /** @type {string} */instruction[5];\n          var maxAngle = /** @type {number} */instruction[6];\n          var measurePixelRatio = /** @type {number} */instruction[7];\n          var offsetY = /** @type {number} */instruction[8];\n          strokeKey = /** @type {string} */instruction[9];\n          var strokeWidth = /** @type {number} */instruction[10];\n          text = /** @type {string} */instruction[11];\n          textKey = /** @type {string} */instruction[12];\n          var pixelRatioScale = [(/** @type {number} */instruction[13]), (/** @type {number} */instruction[13])];\n          var textState = this.textStates[textKey];\n          var font = textState.font;\n          var textScale = [textState.scale[0] * measurePixelRatio, textState.scale[1] * measurePixelRatio];\n          var cachedWidths = void 0;\n          if (font in this.widths_) {\n            cachedWidths = this.widths_[font];\n          } else {\n            cachedWidths = {};\n            this.widths_[font] = cachedWidths;\n          }\n          var pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n          var textLength = Math.abs(textScale[0]) * measureAndCacheTextWidth(font, text, cachedWidths);\n          if (overflow || textLength <= pathLength) {\n            var textAlign = this.textStates[textKey].textAlign;\n            var startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];\n            var parts = drawTextOnPath(pixelCoordinates, begin, end, 2, text, startM, maxAngle, Math.abs(textScale[0]), measureAndCacheTextWidth, font, cachedWidths, viewRotationFromTransform ? 0 : this.viewRotation_);\n            drawChars: if (parts) {\n              /** @type {Array<ReplayImageOrLabelArgs>} */\n              var replayImageOrLabelArgs = [];\n              var c = void 0,\n                cc = void 0,\n                chars = void 0,\n                label = void 0,\n                part = void 0;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */part[4];\n                  label = this.createLabel(chars, textKey, '', strokeKey);\n                  anchorX = /** @type {number} */part[2] + (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                  anchorY = baseline * label.height + (0.5 - baseline) * 2 * strokeWidth * textScale[1] / textScale[0] - offsetY;\n                  var dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, defaultPadding, false, feature);\n                  if (opt_declutterTree && opt_declutterTree.collides(dimensions.declutterBox)) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([context, contextScale, label, dimensions, 1, null, null]);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */part[4];\n                  label = this.createLabel(chars, textKey, fillKey, '');\n                  anchorX = /** @type {number} */part[2];\n                  anchorY = baseline * label.height - offsetY;\n                  var dimensions = this.calculateImageOrLabelDimensions_(label.width, label.height, part[0], part[1], label.width, label.height, anchorX, anchorY, 0, 0, part[3], pixelRatioScale, false, defaultPadding, false, feature);\n                  if (opt_declutterTree && opt_declutterTree.collides(dimensions.declutterBox)) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([context, contextScale, label, dimensions, 1, null, null]);\n                }\n              }\n              if (opt_declutterTree) {\n                opt_declutterTree.load(replayImageOrLabelArgs.map(getDeclutterBox));\n              }\n              for (var i_1 = 0, ii_1 = replayImageOrLabelArgs.length; i_1 < ii_1; ++i_1) {\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i_1]);\n              }\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.END_GEOMETRY:\n          if (opt_featureCallback !== undefined) {\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */instruction[1];\n            var result = opt_featureCallback(feature, currentGeometry);\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.MOVE_TO_LINE_TO:\n          d = /** @type {number} */instruction[1];\n          dd = /** @type {number} */instruction[2];\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          roundX = x + 0.5 | 0;\n          roundY = y + 0.5 | 0;\n          if (roundX !== prevX || roundY !== prevY) {\n            context.moveTo(x, y);\n            prevX = roundX;\n            prevY = roundY;\n          }\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = x + 0.5 | 0;\n            roundY = y + 0.5 | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.SET_FILL_STYLE:\n          lastFillInstruction = instruction;\n          this.alignFill_ = instruction[2];\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n          context.fillStyle = /** @type {import(\"../../colorlike.js\").ColorLike} */instruction[1];\n          ++i;\n          break;\n        case CanvasInstruction.SET_STROKE_STYLE:\n          lastStrokeInstruction = instruction;\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */instruction);\n          ++i;\n          break;\n        case CanvasInstruction.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default:\n          // consume the instruction anyway, to avoid an infinite loop\n          ++i;\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  Executor.prototype.execute = function (context, contextScale, transform, viewRotation, snapToPixel, opt_declutterTree) {\n    this.viewRotation_ = viewRotation;\n    this.execute_(context, contextScale, transform, this.instructions, snapToPixel, undefined, undefined, opt_declutterTree);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [opt_hitExtent] Only check\n   *     features that intersect this extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  Executor.prototype.executeHitDetection = function (context, transform, viewRotation, opt_featureCallback, opt_hitExtent) {\n    this.viewRotation_ = viewRotation;\n    return this.execute_(context, 1, transform, this.hitDetectionInstructions, true, opt_featureCallback, opt_hitExtent);\n  };\n  return Executor;\n}();\nexport default Executor;","map":{"version":3,"names":["CanvasInstruction","TEXT_ALIGN","WORKER_OFFSCREEN_CANVAS","apply","applyTransform","compose","composeTransform","create","createTransform","setFromArray","transformSetFromArray","createEmpty","createOrUpdate","intersects","defaultPadding","defaultTextAlign","defaultTextBaseline","drawImageOrLabel","getTextDimensions","measureAndCacheTextWidth","drawTextOnPath","equals","lineStringLength","transform2D","tmpExtent","p1","p2","p3","p4","getDeclutterBox","replayImageOrLabelArgs","declutterBox","rtlRegEx","RegExp","String","fromCharCode","horizontalTextAlign","text","align","test","createTextChunks","acc","line","i","push","Executor","resolution","pixelRatio","overlaps","instructions","alignFill_","coordinates","coordinateCache_","renderedTransform_","hitDetectionInstructions","pixelCoordinates_","viewRotation_","fillStates","strokeStates","textStates","widths_","labels_","prototype","createLabel","textKey","fillKey","strokeKey","key","strokeState","fillState","textState","scale","textIsArray","Array","isArray","justify","textAlign","strokeWidth","lineWidth","chunks","split","reduce","_a","width","height","widths","heights","lineWidths","renderWidth","contextInstructions","w","h","label","Math","floor","ceil","strokeStyle","lineCap","lineJoin","miterLimit","Context","OffscreenCanvasRenderingContext2D","CanvasRenderingContext2D","setLineDash","lineDash","lineDashOffset","fillStyle","leftRight","x","strokeInstructions","fillInstructions","lineHeight","lineOffset","widthHeightIndex","lineWidthIndex","previousFont","ii","length","text_1","font","max","fillStrokeArgs","replayTextBackground_","context","fillInstruction","strokeInstruction","beginPath","moveTo","lineTo","fill_","setStrokeStyle_","stroke","calculateImageOrLabelDimensions_","sheetWidth","sheetHeight","centerX","centerY","anchorX","anchorY","originX","originY","rotation","snapToPixel","padding","fillStroke","feature","y","boxW","boxH","boxX","boxY","transform","min","round","drawImageX","drawImageY","drawImageW","drawImageH","minX","minY","maxX","maxY","value","canvasTransform","replayImageOrLabel_","contextScale","imageOrLabel","dimensions","opacity","box","canvas","strokePadding","origin_1","repeatSize","save","translate","rotate","fill","restore","instruction","drawLabelWithPointPlacement_","baseline","textBaseline","execute_","opt_featureCallback","opt_hitExtent","opt_declutterTree","pixelCoordinates","d","dd","prevX","prevY","roundX","roundY","image","pendingFill","pendingStroke","lastFillInstruction","lastStrokeInstruction","coordinateCache","viewRotation","viewRotationFromTransform","atan2","state","batchSize","currentGeometry","type","BEGIN_GEOMETRY","getGeometry","undefined","getExtent","BEGIN_PATH","NaN","CIRCLE","x1","y1","x2","y2","dx","dy","r","sqrt","arc","PI","CLOSE_PATH","closePath","CUSTOM","geometry","renderer","fn","coords","DRAW_IMAGE","rotateWithView","declutterMode","declutterImageWithText","labelWithAnchor","textOffsetX","textOffsetY","geometryWidths","backgroundFill","backgroundStroke","widthIndex","args","insert","imageArgs","imageDeclutterBox","index","collides","DRAW_CHARS","begin","end","overflow","maxAngle","measurePixelRatio","offsetY","pixelRatioScale","textScale","cachedWidths","pathLength","textLength","abs","startM","parts","drawChars","c","cc","chars","part","load","map","i_1","ii_1","END_GEOMETRY","result","FILL","MOVE_TO_LINE_TO","SET_FILL_STYLE","SET_STROKE_STYLE","STROKE","execute","executeHitDetection"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\render\\canvas\\Executor.js"],"sourcesContent":["/**\n * @module ol/render/canvas/Executor\n */\nimport CanvasInstruction from './Instruction.js';\nimport {TEXT_ALIGN} from './TextBuilder.js';\nimport {WORKER_OFFSCREEN_CANVAS} from '../../has.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n  setFromArray as transformSetFromArray,\n} from '../../transform.js';\nimport {createEmpty, createOrUpdate, intersects} from '../../extent.js';\nimport {\n  defaultPadding,\n  defaultTextAlign,\n  defaultTextBaseline,\n  drawImageOrLabel,\n  getTextDimensions,\n  measureAndCacheTextWidth,\n} from '../canvas.js';\nimport {drawTextOnPath} from '../../geom/flat/textpath.js';\nimport {equals} from '../../array.js';\nimport {lineStringLength} from '../../geom/flat/length.js';\nimport {transform2D} from '../../geom/flat/transform.js';\n\n/**\n * @typedef {Object} BBox\n * @property {number} minX Minimal x.\n * @property {number} minY Minimal y.\n * @property {number} maxX Maximal x.\n * @property {number} maxY Maximal y\n * @property {*} value Value.\n */\n\n/**\n * @typedef {Object} ImageOrLabelDimensions\n * @property {number} drawImageX DrawImageX.\n * @property {number} drawImageY DrawImageY.\n * @property {number} drawImageW DrawImageW.\n * @property {number} drawImageH DrawImageH.\n * @property {number} originX OriginX.\n * @property {number} originY OriginY.\n * @property {Array<number>} scale Scale.\n * @property {BBox} declutterBox DeclutterBox.\n * @property {import(\"../../transform.js\").Transform} canvasTransform CanvasTransform.\n */\n\n/**\n * @typedef {{0: CanvasRenderingContext2D, 1: number, 2: import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement, 3: ImageOrLabelDimensions, 4: number, 5: Array<*>, 6: Array<*>}} ReplayImageOrLabelArgs\n */\n\n/**\n * @template T\n * @typedef {function(import(\"../../Feature.js\").FeatureLike, import(\"../../geom/SimpleGeometry.js\").default): T} FeatureCallback\n */\n\n/**\n * @type {import(\"../../extent.js\").Extent}\n */\nconst tmpExtent = createEmpty();\n\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p1 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p2 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p3 = [];\n/** @type {import(\"../../coordinate.js\").Coordinate} */\nconst p4 = [];\n\n/**\n * @param {ReplayImageOrLabelArgs} replayImageOrLabelArgs Arguments to replayImageOrLabel\n * @return {BBox} Declutter bbox.\n */\nfunction getDeclutterBox(replayImageOrLabelArgs) {\n  return replayImageOrLabelArgs[3].declutterBox;\n}\n\nconst rtlRegEx = new RegExp(\n  /* eslint-disable prettier/prettier */\n  '[' +\n    String.fromCharCode(0x00591) + '-' + String.fromCharCode(0x008ff) +\n    String.fromCharCode(0x0fb1d) + '-' + String.fromCharCode(0x0fdff) +\n    String.fromCharCode(0x0fe70) + '-' + String.fromCharCode(0x0fefc) +\n    String.fromCharCode(0x10800) + '-' + String.fromCharCode(0x10fff) +\n    String.fromCharCode(0x1e800) + '-' + String.fromCharCode(0x1efff) +\n  ']'\n  /* eslint-enable prettier/prettier */\n);\n\n/**\n * @param {string} text Text.\n * @param {string} align Alignment.\n * @return {number} Text alignment.\n */\nfunction horizontalTextAlign(text, align) {\n  if ((align === 'start' || align === 'end') && !rtlRegEx.test(text)) {\n    align = align === 'start' ? 'left' : 'right';\n  }\n  return TEXT_ALIGN[align];\n}\n\n/**\n * @param {Array<string>} acc Accumulator.\n * @param {string} line Line of text.\n * @param {number} i Index\n * @return {Array<string>} Accumulator.\n */\nfunction createTextChunks(acc, line, i) {\n  if (i > 0) {\n    acc.push('\\n', '');\n  }\n  acc.push(line, '');\n  return acc;\n}\n\nclass Executor {\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {boolean} overlaps The replay can have overlapping geometries.\n   * @param {import(\"../canvas.js\").SerializableInstructions} instructions The serializable instructions\n   */\n  constructor(resolution, pixelRatio, overlaps, instructions) {\n    /**\n     * @protected\n     * @type {boolean}\n     */\n    this.overlaps = overlaps;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.pixelRatio = pixelRatio;\n\n    /**\n     * @protected\n     * @const\n     * @type {number}\n     */\n    this.resolution = resolution;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.alignFill_;\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.instructions = instructions.instructions;\n\n    /**\n     * @protected\n     * @type {Array<number>}\n     */\n    this.coordinates = instructions.coordinates;\n\n    /**\n     * @private\n     * @type {!Object<number,import(\"../../coordinate.js\").Coordinate|Array<import(\"../../coordinate.js\").Coordinate>|Array<Array<import(\"../../coordinate.js\").Coordinate>>>}\n     */\n    this.coordinateCache_ = {};\n\n    /**\n     * @private\n     * @type {!import(\"../../transform.js\").Transform}\n     */\n    this.renderedTransform_ = createTransform();\n\n    /**\n     * @protected\n     * @type {Array<*>}\n     */\n    this.hitDetectionInstructions = instructions.hitDetectionInstructions;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.pixelCoordinates_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.viewRotation_ = 0;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = instructions.fillStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = instructions.strokeStates || {};\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = instructions.textStates || {};\n\n    /**\n     * @private\n     * @type {Object<string, Object<string, number>>}\n     */\n    this.widths_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, import(\"../canvas.js\").Label>}\n     */\n    this.labels_ = {};\n  }\n\n  /**\n   * @param {string|Array<string>} text Text.\n   * @param {string} textKey Text style key.\n   * @param {string} fillKey Fill style key.\n   * @param {string} strokeKey Stroke style key.\n   * @return {import(\"../canvas.js\").Label} Label.\n   */\n  createLabel(text, textKey, fillKey, strokeKey) {\n    const key = text + textKey + fillKey + strokeKey;\n    if (this.labels_[key]) {\n      return this.labels_[key];\n    }\n    const strokeState = strokeKey ? this.strokeStates[strokeKey] : null;\n    const fillState = fillKey ? this.fillStates[fillKey] : null;\n    const textState = this.textStates[textKey];\n    const pixelRatio = this.pixelRatio;\n    const scale = [\n      textState.scale[0] * pixelRatio,\n      textState.scale[1] * pixelRatio,\n    ];\n    const textIsArray = Array.isArray(text);\n    const align = textState.justify\n      ? TEXT_ALIGN[textState.justify]\n      : horizontalTextAlign(\n          Array.isArray(text) ? text[0] : text,\n          textState.textAlign || defaultTextAlign\n        );\n    const strokeWidth =\n      strokeKey && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    const chunks = textIsArray\n      ? text\n      : text.split('\\n').reduce(createTextChunks, []);\n\n    const {width, height, widths, heights, lineWidths} = getTextDimensions(\n      textState,\n      chunks\n    );\n    const renderWidth = width + strokeWidth;\n    const contextInstructions = [];\n    // make canvas 2 pixels wider to account for italic text width measurement errors\n    const w = (renderWidth + 2) * scale[0];\n    const h = (height + strokeWidth) * scale[1];\n    /** @type {import(\"../canvas.js\").Label} */\n    const label = {\n      width: w < 0 ? Math.floor(w) : Math.ceil(w),\n      height: h < 0 ? Math.floor(h) : Math.ceil(h),\n      contextInstructions: contextInstructions,\n    };\n    if (scale[0] != 1 || scale[1] != 1) {\n      contextInstructions.push('scale', scale);\n    }\n    if (strokeKey) {\n      contextInstructions.push('strokeStyle', strokeState.strokeStyle);\n      contextInstructions.push('lineWidth', strokeWidth);\n      contextInstructions.push('lineCap', strokeState.lineCap);\n      contextInstructions.push('lineJoin', strokeState.lineJoin);\n      contextInstructions.push('miterLimit', strokeState.miterLimit);\n      // eslint-disable-next-line\n      const Context = WORKER_OFFSCREEN_CANVAS ? OffscreenCanvasRenderingContext2D : CanvasRenderingContext2D;\n      if (Context.prototype.setLineDash) {\n        contextInstructions.push('setLineDash', [strokeState.lineDash]);\n        contextInstructions.push('lineDashOffset', strokeState.lineDashOffset);\n      }\n    }\n    if (fillKey) {\n      contextInstructions.push('fillStyle', fillState.fillStyle);\n    }\n    contextInstructions.push('textBaseline', 'middle');\n    contextInstructions.push('textAlign', 'center');\n    const leftRight = 0.5 - align;\n    let x = align * renderWidth + leftRight * strokeWidth;\n    const strokeInstructions = [];\n    const fillInstructions = [];\n    let lineHeight = 0;\n    let lineOffset = 0;\n    let widthHeightIndex = 0;\n    let lineWidthIndex = 0;\n    let previousFont;\n    for (let i = 0, ii = chunks.length; i < ii; i += 2) {\n      const text = chunks[i];\n      if (text === '\\n') {\n        lineOffset += lineHeight;\n        lineHeight = 0;\n        x = align * renderWidth + leftRight * strokeWidth;\n        ++lineWidthIndex;\n        continue;\n      }\n      const font = chunks[i + 1] || textState.font;\n      if (font !== previousFont) {\n        if (strokeKey) {\n          strokeInstructions.push('font', font);\n        }\n        if (fillKey) {\n          fillInstructions.push('font', font);\n        }\n        previousFont = font;\n      }\n      lineHeight = Math.max(lineHeight, heights[widthHeightIndex]);\n      const fillStrokeArgs = [\n        text,\n        x +\n          leftRight * widths[widthHeightIndex] +\n          align * (widths[widthHeightIndex] - lineWidths[lineWidthIndex]),\n        0.5 * (strokeWidth + lineHeight) + lineOffset,\n      ];\n      x += widths[widthHeightIndex];\n      if (strokeKey) {\n        strokeInstructions.push('strokeText', fillStrokeArgs);\n      }\n      if (fillKey) {\n        fillInstructions.push('fillText', fillStrokeArgs);\n      }\n      ++widthHeightIndex;\n    }\n    Array.prototype.push.apply(contextInstructions, strokeInstructions);\n    Array.prototype.push.apply(contextInstructions, fillInstructions);\n    this.labels_[key] = label;\n    return label;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../coordinate.js\").Coordinate} p1 1st point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p2 2nd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p3 3rd point of the background box.\n   * @param {import(\"../../coordinate.js\").Coordinate} p4 4th point of the background box.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   */\n  replayTextBackground_(\n    context,\n    p1,\n    p2,\n    p3,\n    p4,\n    fillInstruction,\n    strokeInstruction\n  ) {\n    context.beginPath();\n    context.moveTo.apply(context, p1);\n    context.lineTo.apply(context, p2);\n    context.lineTo.apply(context, p3);\n    context.lineTo.apply(context, p4);\n    context.lineTo.apply(context, p1);\n    if (fillInstruction) {\n      this.alignFill_ = /** @type {boolean} */ (fillInstruction[2]);\n      this.fill_(context);\n    }\n    if (strokeInstruction) {\n      this.setStrokeStyle_(\n        context,\n        /** @type {Array<*>} */ (strokeInstruction)\n      );\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} sheetWidth Width of the sprite sheet.\n   * @param {number} sheetHeight Height of the sprite sheet.\n   * @param {number} centerX X.\n   * @param {number} centerY Y.\n   * @param {number} width Width.\n   * @param {number} height Height.\n   * @param {number} anchorX Anchor X.\n   * @param {number} anchorY Anchor Y.\n   * @param {number} originX Origin X.\n   * @param {number} originY Origin Y.\n   * @param {number} rotation Rotation.\n   * @param {import(\"../../size.js\").Size} scale Scale.\n   * @param {boolean} snapToPixel Snap to pixel.\n   * @param {Array<number>} padding Padding.\n   * @param {boolean} fillStroke Background fill or stroke.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   * @return {ImageOrLabelDimensions} Dimensions for positioning and decluttering the image or label.\n   */\n  calculateImageOrLabelDimensions_(\n    sheetWidth,\n    sheetHeight,\n    centerX,\n    centerY,\n    width,\n    height,\n    anchorX,\n    anchorY,\n    originX,\n    originY,\n    rotation,\n    scale,\n    snapToPixel,\n    padding,\n    fillStroke,\n    feature\n  ) {\n    anchorX *= scale[0];\n    anchorY *= scale[1];\n    let x = centerX - anchorX;\n    let y = centerY - anchorY;\n\n    const w = width + originX > sheetWidth ? sheetWidth - originX : width;\n    const h = height + originY > sheetHeight ? sheetHeight - originY : height;\n    const boxW = padding[3] + w * scale[0] + padding[1];\n    const boxH = padding[0] + h * scale[1] + padding[2];\n    const boxX = x - padding[3];\n    const boxY = y - padding[0];\n\n    if (fillStroke || rotation !== 0) {\n      p1[0] = boxX;\n      p4[0] = boxX;\n      p1[1] = boxY;\n      p2[1] = boxY;\n      p2[0] = boxX + boxW;\n      p3[0] = p2[0];\n      p3[1] = boxY + boxH;\n      p4[1] = p3[1];\n    }\n\n    let transform;\n    if (rotation !== 0) {\n      transform = composeTransform(\n        createTransform(),\n        centerX,\n        centerY,\n        1,\n        1,\n        rotation,\n        -centerX,\n        -centerY\n      );\n\n      applyTransform(transform, p1);\n      applyTransform(transform, p2);\n      applyTransform(transform, p3);\n      applyTransform(transform, p4);\n      createOrUpdate(\n        Math.min(p1[0], p2[0], p3[0], p4[0]),\n        Math.min(p1[1], p2[1], p3[1], p4[1]),\n        Math.max(p1[0], p2[0], p3[0], p4[0]),\n        Math.max(p1[1], p2[1], p3[1], p4[1]),\n        tmpExtent\n      );\n    } else {\n      createOrUpdate(\n        Math.min(boxX, boxX + boxW),\n        Math.min(boxY, boxY + boxH),\n        Math.max(boxX, boxX + boxW),\n        Math.max(boxY, boxY + boxH),\n        tmpExtent\n      );\n    }\n    if (snapToPixel) {\n      x = Math.round(x);\n      y = Math.round(y);\n    }\n    return {\n      drawImageX: x,\n      drawImageY: y,\n      drawImageW: w,\n      drawImageH: h,\n      originX: originX,\n      originY: originY,\n      declutterBox: {\n        minX: tmpExtent[0],\n        minY: tmpExtent[1],\n        maxX: tmpExtent[2],\n        maxY: tmpExtent[3],\n        value: feature,\n      },\n      canvasTransform: transform,\n      scale: scale,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../canvas.js\").Label|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} imageOrLabel Image.\n   * @param {ImageOrLabelDimensions} dimensions Dimensions.\n   * @param {number} opacity Opacity.\n   * @param {Array<*>} fillInstruction Fill instruction.\n   * @param {Array<*>} strokeInstruction Stroke instruction.\n   * @return {boolean} The image or label was rendered.\n   */\n  replayImageOrLabel_(\n    context,\n    contextScale,\n    imageOrLabel,\n    dimensions,\n    opacity,\n    fillInstruction,\n    strokeInstruction\n  ) {\n    const fillStroke = !!(fillInstruction || strokeInstruction);\n\n    const box = dimensions.declutterBox;\n    const canvas = context.canvas;\n    const strokePadding = strokeInstruction\n      ? (strokeInstruction[2] * dimensions.scale[0]) / 2\n      : 0;\n    const intersects =\n      box.minX - strokePadding <= canvas.width / contextScale &&\n      box.maxX + strokePadding >= 0 &&\n      box.minY - strokePadding <= canvas.height / contextScale &&\n      box.maxY + strokePadding >= 0;\n\n    if (intersects) {\n      if (fillStroke) {\n        this.replayTextBackground_(\n          context,\n          p1,\n          p2,\n          p3,\n          p4,\n          /** @type {Array<*>} */ (fillInstruction),\n          /** @type {Array<*>} */ (strokeInstruction)\n        );\n      }\n      drawImageOrLabel(\n        context,\n        dimensions.canvasTransform,\n        opacity,\n        imageOrLabel,\n        dimensions.originX,\n        dimensions.originY,\n        dimensions.drawImageW,\n        dimensions.drawImageH,\n        dimensions.drawImageX,\n        dimensions.drawImageY,\n        dimensions.scale\n      );\n    }\n    return true;\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   */\n  fill_(context) {\n    if (this.alignFill_) {\n      const origin = applyTransform(this.renderedTransform_, [0, 0]);\n      const repeatSize = 512 * this.pixelRatio;\n      context.save();\n      context.translate(origin[0] % repeatSize, origin[1] % repeatSize);\n      context.rotate(this.viewRotation_);\n    }\n    context.fill();\n    if (this.alignFill_) {\n      context.restore();\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {Array<*>} instruction Instruction.\n   */\n  setStrokeStyle_(context, instruction) {\n    context['strokeStyle'] =\n      /** @type {import(\"../../colorlike.js\").ColorLike} */ (instruction[1]);\n    context.lineWidth = /** @type {number} */ (instruction[2]);\n    context.lineCap = /** @type {CanvasLineCap} */ (instruction[3]);\n    context.lineJoin = /** @type {CanvasLineJoin} */ (instruction[4]);\n    context.miterLimit = /** @type {number} */ (instruction[5]);\n    if (context.setLineDash) {\n      context.lineDashOffset = /** @type {number} */ (instruction[7]);\n      context.setLineDash(/** @type {Array<number>} */ (instruction[6]));\n    }\n  }\n\n  /**\n   * @private\n   * @param {string|Array<string>} text The text to draw.\n   * @param {string} textKey The key of the text state.\n   * @param {string} strokeKey The key for the stroke state.\n   * @param {string} fillKey The key for the fill state.\n   * @return {{label: import(\"../canvas.js\").Label, anchorX: number, anchorY: number}} The text image and its anchor.\n   */\n  drawLabelWithPointPlacement_(text, textKey, strokeKey, fillKey) {\n    const textState = this.textStates[textKey];\n\n    const label = this.createLabel(text, textKey, fillKey, strokeKey);\n\n    const strokeState = this.strokeStates[strokeKey];\n    const pixelRatio = this.pixelRatio;\n    const align = horizontalTextAlign(\n      Array.isArray(text) ? text[0] : text,\n      textState.textAlign || defaultTextAlign\n    );\n    const baseline = TEXT_ALIGN[textState.textBaseline || defaultTextBaseline];\n    const strokeWidth =\n      strokeState && strokeState.lineWidth ? strokeState.lineWidth : 0;\n\n    // Remove the 2 pixels we added in createLabel() for the anchor\n    const width = label.width / pixelRatio - 2 * textState.scale[0];\n    const anchorX = align * width + 2 * (0.5 - align) * strokeWidth;\n    const anchorY =\n      (baseline * label.height) / pixelRatio +\n      2 * (0.5 - baseline) * strokeWidth;\n\n    return {\n      label: label,\n      anchorX: anchorX,\n      anchorY: anchorY,\n    };\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {Array<*>} instructions Instructions array.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [opt_hitExtent] Only check\n   *     features that intersect this extent.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  execute_(\n    context,\n    contextScale,\n    transform,\n    instructions,\n    snapToPixel,\n    opt_featureCallback,\n    opt_hitExtent,\n    opt_declutterTree\n  ) {\n    /** @type {Array<number>} */\n    let pixelCoordinates;\n    if (this.pixelCoordinates_ && equals(transform, this.renderedTransform_)) {\n      pixelCoordinates = this.pixelCoordinates_;\n    } else {\n      if (!this.pixelCoordinates_) {\n        this.pixelCoordinates_ = [];\n      }\n      pixelCoordinates = transform2D(\n        this.coordinates,\n        0,\n        this.coordinates.length,\n        2,\n        transform,\n        this.pixelCoordinates_\n      );\n      transformSetFromArray(this.renderedTransform_, transform);\n    }\n    let i = 0; // instruction index\n    const ii = instructions.length; // end of instructions\n    let d = 0; // data index\n    let dd; // end of per-instruction data\n    let anchorX,\n      anchorY,\n      prevX,\n      prevY,\n      roundX,\n      roundY,\n      image,\n      text,\n      textKey,\n      strokeKey,\n      fillKey;\n    let pendingFill = 0;\n    let pendingStroke = 0;\n    let lastFillInstruction = null;\n    let lastStrokeInstruction = null;\n    const coordinateCache = this.coordinateCache_;\n    const viewRotation = this.viewRotation_;\n    const viewRotationFromTransform =\n      Math.round(Math.atan2(-transform[1], transform[0]) * 1e12) / 1e12;\n\n    const state = /** @type {import(\"../../render.js\").State} */ ({\n      context: context,\n      pixelRatio: this.pixelRatio,\n      resolution: this.resolution,\n      rotation: viewRotation,\n    });\n\n    // When the batch size gets too big, performance decreases. 200 is a good\n    // balance between batch size and number of fill/stroke instructions.\n    const batchSize =\n      this.instructions != instructions || this.overlaps ? 0 : 200;\n    let /** @type {import(\"../../Feature.js\").FeatureLike} */ feature;\n    let x, y, currentGeometry;\n    while (i < ii) {\n      const instruction = instructions[i];\n      const type = /** @type {import(\"./Instruction.js\").default} */ (\n        instruction[0]\n      );\n      switch (type) {\n        case CanvasInstruction.BEGIN_GEOMETRY:\n          feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n            instruction[1]\n          );\n          currentGeometry = instruction[3];\n          if (!feature.getGeometry()) {\n            i = /** @type {number} */ (instruction[2]);\n          } else if (\n            opt_hitExtent !== undefined &&\n            !intersects(opt_hitExtent, currentGeometry.getExtent())\n          ) {\n            i = /** @type {number} */ (instruction[2]) + 1;\n          } else {\n            ++i;\n          }\n          break;\n        case CanvasInstruction.BEGIN_PATH:\n          if (pendingFill > batchSize) {\n            this.fill_(context);\n            pendingFill = 0;\n          }\n          if (pendingStroke > batchSize) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          if (!pendingFill && !pendingStroke) {\n            context.beginPath();\n            prevX = NaN;\n            prevY = NaN;\n          }\n          ++i;\n          break;\n        case CanvasInstruction.CIRCLE:\n          d = /** @type {number} */ (instruction[1]);\n          const x1 = pixelCoordinates[d];\n          const y1 = pixelCoordinates[d + 1];\n          const x2 = pixelCoordinates[d + 2];\n          const y2 = pixelCoordinates[d + 3];\n          const dx = x2 - x1;\n          const dy = y2 - y1;\n          const r = Math.sqrt(dx * dx + dy * dy);\n          context.moveTo(x1 + r, y1);\n          context.arc(x1, y1, r, 0, 2 * Math.PI, true);\n          ++i;\n          break;\n        case CanvasInstruction.CLOSE_PATH:\n          context.closePath();\n          ++i;\n          break;\n        case CanvasInstruction.CUSTOM:\n          d = /** @type {number} */ (instruction[1]);\n          dd = instruction[2];\n          const geometry =\n            /** @type {import(\"../../geom/SimpleGeometry.js\").default} */ (\n              instruction[3]\n            );\n          const renderer = instruction[4];\n          const fn = instruction.length == 6 ? instruction[5] : undefined;\n          state.geometry = geometry;\n          state.feature = feature;\n          if (!(i in coordinateCache)) {\n            coordinateCache[i] = [];\n          }\n          const coords = coordinateCache[i];\n          if (fn) {\n            fn(pixelCoordinates, d, dd, 2, coords);\n          } else {\n            coords[0] = pixelCoordinates[d];\n            coords[1] = pixelCoordinates[d + 1];\n            coords.length = 2;\n          }\n          renderer(coords, state);\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_IMAGE:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          image =\n            /** @type {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} */ (\n              instruction[3]\n            );\n\n          // Remaining arguments in DRAW_IMAGE are in alphabetical order\n          anchorX = /** @type {number} */ (instruction[4]);\n          anchorY = /** @type {number} */ (instruction[5]);\n          let height = /** @type {number} */ (instruction[6]);\n          const opacity = /** @type {number} */ (instruction[7]);\n          const originX = /** @type {number} */ (instruction[8]);\n          const originY = /** @type {number} */ (instruction[9]);\n          const rotateWithView = /** @type {boolean} */ (instruction[10]);\n          let rotation = /** @type {number} */ (instruction[11]);\n          const scale = /** @type {import(\"../../size.js\").Size} */ (\n            instruction[12]\n          );\n          let width = /** @type {number} */ (instruction[13]);\n          const declutterMode =\n            /** @type {\"declutter\"|\"obstacle\"|\"none\"|undefined} */ (\n              instruction[14]\n            );\n          const declutterImageWithText =\n            /** @type {import(\"../canvas.js\").DeclutterImageWithText} */ (\n              instruction[15]\n            );\n\n          if (!image && instruction.length >= 20) {\n            // create label images\n            text = /** @type {string} */ (instruction[19]);\n            textKey = /** @type {string} */ (instruction[20]);\n            strokeKey = /** @type {string} */ (instruction[21]);\n            fillKey = /** @type {string} */ (instruction[22]);\n            const labelWithAnchor = this.drawLabelWithPointPlacement_(\n              text,\n              textKey,\n              strokeKey,\n              fillKey\n            );\n            image = labelWithAnchor.label;\n            instruction[3] = image;\n            const textOffsetX = /** @type {number} */ (instruction[23]);\n            anchorX = (labelWithAnchor.anchorX - textOffsetX) * this.pixelRatio;\n            instruction[4] = anchorX;\n            const textOffsetY = /** @type {number} */ (instruction[24]);\n            anchorY = (labelWithAnchor.anchorY - textOffsetY) * this.pixelRatio;\n            instruction[5] = anchorY;\n            height = image.height;\n            instruction[6] = height;\n            width = image.width;\n            instruction[13] = width;\n          }\n\n          let geometryWidths;\n          if (instruction.length > 25) {\n            geometryWidths = /** @type {number} */ (instruction[25]);\n          }\n\n          let padding, backgroundFill, backgroundStroke;\n          if (instruction.length > 17) {\n            padding = /** @type {Array<number>} */ (instruction[16]);\n            backgroundFill = /** @type {boolean} */ (instruction[17]);\n            backgroundStroke = /** @type {boolean} */ (instruction[18]);\n          } else {\n            padding = defaultPadding;\n            backgroundFill = false;\n            backgroundStroke = false;\n          }\n\n          if (rotateWithView && viewRotationFromTransform) {\n            // Canvas is expected to be rotated to reverse view rotation.\n            rotation += viewRotation;\n          } else if (!rotateWithView && !viewRotationFromTransform) {\n            // Canvas is not rotated, images need to be rotated back to be north-up.\n            rotation -= viewRotation;\n          }\n          let widthIndex = 0;\n          for (; d < dd; d += 2) {\n            if (\n              geometryWidths &&\n              geometryWidths[widthIndex++] < width / this.pixelRatio\n            ) {\n              continue;\n            }\n            const dimensions = this.calculateImageOrLabelDimensions_(\n              image.width,\n              image.height,\n              pixelCoordinates[d],\n              pixelCoordinates[d + 1],\n              width,\n              height,\n              anchorX,\n              anchorY,\n              originX,\n              originY,\n              rotation,\n              scale,\n              snapToPixel,\n              padding,\n              backgroundFill || backgroundStroke,\n              feature\n            );\n            /** @type {ReplayImageOrLabelArgs} */\n            const args = [\n              context,\n              contextScale,\n              image,\n              dimensions,\n              opacity,\n              backgroundFill\n                ? /** @type {Array<*>} */ (lastFillInstruction)\n                : null,\n              backgroundStroke\n                ? /** @type {Array<*>} */ (lastStrokeInstruction)\n                : null,\n            ];\n            if (opt_declutterTree) {\n              if (declutterMode === 'none') {\n                // not rendered in declutter group\n                continue;\n              } else if (declutterMode === 'obstacle') {\n                // will always be drawn, thus no collision detection, but insert as obstacle\n                opt_declutterTree.insert(dimensions.declutterBox);\n                continue;\n              } else {\n                let imageArgs;\n                let imageDeclutterBox;\n                if (declutterImageWithText) {\n                  const index = dd - d;\n                  if (!declutterImageWithText[index]) {\n                    // We now have the image for an image+text combination.\n                    declutterImageWithText[index] = args;\n                    // Don't render anything for now, wait for the text.\n                    continue;\n                  }\n                  imageArgs = declutterImageWithText[index];\n                  delete declutterImageWithText[index];\n                  imageDeclutterBox = getDeclutterBox(imageArgs);\n                  if (opt_declutterTree.collides(imageDeclutterBox)) {\n                    continue;\n                  }\n                }\n                if (opt_declutterTree.collides(dimensions.declutterBox)) {\n                  continue;\n                }\n                if (imageArgs) {\n                  // We now have image and text for an image+text combination.\n                  opt_declutterTree.insert(imageDeclutterBox);\n                  // Render the image before we render the text.\n                  this.replayImageOrLabel_.apply(this, imageArgs);\n                }\n                opt_declutterTree.insert(dimensions.declutterBox);\n              }\n            }\n            this.replayImageOrLabel_.apply(this, args);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.DRAW_CHARS:\n          const begin = /** @type {number} */ (instruction[1]);\n          const end = /** @type {number} */ (instruction[2]);\n          const baseline = /** @type {number} */ (instruction[3]);\n          const overflow = /** @type {number} */ (instruction[4]);\n          fillKey = /** @type {string} */ (instruction[5]);\n          const maxAngle = /** @type {number} */ (instruction[6]);\n          const measurePixelRatio = /** @type {number} */ (instruction[7]);\n          const offsetY = /** @type {number} */ (instruction[8]);\n          strokeKey = /** @type {string} */ (instruction[9]);\n          const strokeWidth = /** @type {number} */ (instruction[10]);\n          text = /** @type {string} */ (instruction[11]);\n          textKey = /** @type {string} */ (instruction[12]);\n          const pixelRatioScale = [\n            /** @type {number} */ (instruction[13]),\n            /** @type {number} */ (instruction[13]),\n          ];\n\n          const textState = this.textStates[textKey];\n          const font = textState.font;\n          const textScale = [\n            textState.scale[0] * measurePixelRatio,\n            textState.scale[1] * measurePixelRatio,\n          ];\n\n          let cachedWidths;\n          if (font in this.widths_) {\n            cachedWidths = this.widths_[font];\n          } else {\n            cachedWidths = {};\n            this.widths_[font] = cachedWidths;\n          }\n\n          const pathLength = lineStringLength(pixelCoordinates, begin, end, 2);\n          const textLength =\n            Math.abs(textScale[0]) *\n            measureAndCacheTextWidth(font, text, cachedWidths);\n          if (overflow || textLength <= pathLength) {\n            const textAlign = this.textStates[textKey].textAlign;\n            const startM = (pathLength - textLength) * TEXT_ALIGN[textAlign];\n            const parts = drawTextOnPath(\n              pixelCoordinates,\n              begin,\n              end,\n              2,\n              text,\n              startM,\n              maxAngle,\n              Math.abs(textScale[0]),\n              measureAndCacheTextWidth,\n              font,\n              cachedWidths,\n              viewRotationFromTransform ? 0 : this.viewRotation_\n            );\n            drawChars: if (parts) {\n              /** @type {Array<ReplayImageOrLabelArgs>} */\n              const replayImageOrLabelArgs = [];\n              let c, cc, chars, label, part;\n              if (strokeKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, '', strokeKey);\n                  anchorX =\n                    /** @type {number} */ (part[2]) +\n                    (textScale[0] < 0 ? -strokeWidth : strokeWidth);\n                  anchorY =\n                    baseline * label.height +\n                    ((0.5 - baseline) * 2 * strokeWidth * textScale[1]) /\n                      textScale[0] -\n                    offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature\n                  );\n                  if (\n                    opt_declutterTree &&\n                    opt_declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    contextScale,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (fillKey) {\n                for (c = 0, cc = parts.length; c < cc; ++c) {\n                  part = parts[c]; // x, y, anchorX, rotation, chunk\n                  chars = /** @type {string} */ (part[4]);\n                  label = this.createLabel(chars, textKey, fillKey, '');\n                  anchorX = /** @type {number} */ (part[2]);\n                  anchorY = baseline * label.height - offsetY;\n                  const dimensions = this.calculateImageOrLabelDimensions_(\n                    label.width,\n                    label.height,\n                    part[0],\n                    part[1],\n                    label.width,\n                    label.height,\n                    anchorX,\n                    anchorY,\n                    0,\n                    0,\n                    part[3],\n                    pixelRatioScale,\n                    false,\n                    defaultPadding,\n                    false,\n                    feature\n                  );\n                  if (\n                    opt_declutterTree &&\n                    opt_declutterTree.collides(dimensions.declutterBox)\n                  ) {\n                    break drawChars;\n                  }\n                  replayImageOrLabelArgs.push([\n                    context,\n                    contextScale,\n                    label,\n                    dimensions,\n                    1,\n                    null,\n                    null,\n                  ]);\n                }\n              }\n              if (opt_declutterTree) {\n                opt_declutterTree.load(\n                  replayImageOrLabelArgs.map(getDeclutterBox)\n                );\n              }\n              for (let i = 0, ii = replayImageOrLabelArgs.length; i < ii; ++i) {\n                this.replayImageOrLabel_.apply(this, replayImageOrLabelArgs[i]);\n              }\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.END_GEOMETRY:\n          if (opt_featureCallback !== undefined) {\n            feature = /** @type {import(\"../../Feature.js\").FeatureLike} */ (\n              instruction[1]\n            );\n            const result = opt_featureCallback(feature, currentGeometry);\n            if (result) {\n              return result;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.FILL:\n          if (batchSize) {\n            pendingFill++;\n          } else {\n            this.fill_(context);\n          }\n          ++i;\n          break;\n        case CanvasInstruction.MOVE_TO_LINE_TO:\n          d = /** @type {number} */ (instruction[1]);\n          dd = /** @type {number} */ (instruction[2]);\n          x = pixelCoordinates[d];\n          y = pixelCoordinates[d + 1];\n          roundX = (x + 0.5) | 0;\n          roundY = (y + 0.5) | 0;\n          if (roundX !== prevX || roundY !== prevY) {\n            context.moveTo(x, y);\n            prevX = roundX;\n            prevY = roundY;\n          }\n          for (d += 2; d < dd; d += 2) {\n            x = pixelCoordinates[d];\n            y = pixelCoordinates[d + 1];\n            roundX = (x + 0.5) | 0;\n            roundY = (y + 0.5) | 0;\n            if (d == dd - 2 || roundX !== prevX || roundY !== prevY) {\n              context.lineTo(x, y);\n              prevX = roundX;\n              prevY = roundY;\n            }\n          }\n          ++i;\n          break;\n        case CanvasInstruction.SET_FILL_STYLE:\n          lastFillInstruction = instruction;\n          this.alignFill_ = instruction[2];\n\n          if (pendingFill) {\n            this.fill_(context);\n            pendingFill = 0;\n            if (pendingStroke) {\n              context.stroke();\n              pendingStroke = 0;\n            }\n          }\n\n          context.fillStyle =\n            /** @type {import(\"../../colorlike.js\").ColorLike} */ (\n              instruction[1]\n            );\n          ++i;\n          break;\n        case CanvasInstruction.SET_STROKE_STYLE:\n          lastStrokeInstruction = instruction;\n          if (pendingStroke) {\n            context.stroke();\n            pendingStroke = 0;\n          }\n          this.setStrokeStyle_(context, /** @type {Array<*>} */ (instruction));\n          ++i;\n          break;\n        case CanvasInstruction.STROKE:\n          if (batchSize) {\n            pendingStroke++;\n          } else {\n            context.stroke();\n          }\n          ++i;\n          break;\n        default: // consume the instruction anyway, to avoid an infinite loop\n          ++i;\n          break;\n      }\n    }\n    if (pendingFill) {\n      this.fill_(context);\n    }\n    if (pendingStroke) {\n      context.stroke();\n    }\n    return undefined;\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {number} contextScale Scale of the context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {boolean} snapToPixel Snap point symbols and text to integer pixels.\n   * @param {import(\"rbush\").default} [opt_declutterTree] Declutter tree.\n   */\n  execute(\n    context,\n    contextScale,\n    transform,\n    viewRotation,\n    snapToPixel,\n    opt_declutterTree\n  ) {\n    this.viewRotation_ = viewRotation;\n    this.execute_(\n      context,\n      contextScale,\n      transform,\n      this.instructions,\n      snapToPixel,\n      undefined,\n      undefined,\n      opt_declutterTree\n    );\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../transform.js\").Transform} transform Transform.\n   * @param {number} viewRotation View rotation.\n   * @param {FeatureCallback<T>} [opt_featureCallback] Feature callback.\n   * @param {import(\"../../extent.js\").Extent} [opt_hitExtent] Only check\n   *     features that intersect this extent.\n   * @return {T|undefined} Callback result.\n   * @template T\n   */\n  executeHitDetection(\n    context,\n    transform,\n    viewRotation,\n    opt_featureCallback,\n    opt_hitExtent\n  ) {\n    this.viewRotation_ = viewRotation;\n    return this.execute_(\n      context,\n      1,\n      transform,\n      this.hitDetectionInstructions,\n      true,\n      opt_featureCallback,\n      opt_hitExtent\n    );\n  }\n}\n\nexport default Executor;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}