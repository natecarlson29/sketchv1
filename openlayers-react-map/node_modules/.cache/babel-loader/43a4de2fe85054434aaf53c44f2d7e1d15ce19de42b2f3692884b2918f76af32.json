{"ast":null,"code":"/**\n * @module ol/render/canvas/hitdetect\n */\nimport CanvasImmediateRenderer from './Immediate.js';\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\nimport { Icon } from '../../style.js';\nimport { clamp } from '../../math.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { intersects } from '../../extent.js';\nimport { numberSafeCompareFunction } from '../../array.js';\nexport var HIT_DETECT_RESOLUTION = 0.5;\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(size, transforms, features, styleFunction, extent, resolution, rotation) {\n  var width = size[0] * HIT_DETECT_RESOLUTION;\n  var height = size[1] * HIT_DETECT_RESOLUTION;\n  var context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  var canvas = context.canvas;\n  var renderer = new CanvasImmediateRenderer(context, HIT_DETECT_RESOLUTION, extent, null, rotation);\n  var featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  var indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  var featuresByZIndex = {};\n  for (var i = 1; i <= featureCount; ++i) {\n    var feature = features[i - 1];\n    var featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    var styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    var index = i * indexFactor;\n    var color = '#' + ('000000' + index.toString(16)).slice(-6);\n    for (var j = 0, jj = styles.length; j < jj; ++j) {\n      var originalStyle = styles[j];\n      var geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n      var style = originalStyle.clone();\n      var fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      var stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      var image = originalStyle.getImage();\n      if (image && image.getOpacity() !== 0) {\n        var imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n        var imgContext = createCanvasContext2D(imgSize[0], imgSize[1], undefined, {\n          alpha: false\n        });\n        var img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(new Icon({\n          img: img,\n          imgSize: imgSize,\n          anchor: image.getAnchor(),\n          anchorXUnits: IconAnchorUnits.PIXELS,\n          anchorYUnits: IconAnchorUnits.PIXELS,\n          offset: image.getOrigin(),\n          opacity: 1,\n          size: image.getSize(),\n          scale: image.getScale(),\n          rotation: image.getRotation(),\n          rotateWithView: image.getRotateWithView()\n        }));\n      }\n      var zIndex = style.getZIndex() || 0;\n      var byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      byGeometryType[geometry.getType().replace('Multi', '')].push(geometry, style);\n    }\n  }\n  var zIndexKeys = Object.keys(featuresByZIndex).map(Number).sort(numberSafeCompareFunction);\n  for (var i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    var byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (var type in byGeometryType) {\n      var geomAndStyle = byGeometryType[type];\n      for (var j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (var k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\nexport function hitDetect(pixel, features, imageData) {\n  var resultFeatures = [];\n  if (imageData) {\n    var x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    var y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    var index = (clamp(x, 0, imageData.width - 1) + clamp(y, 0, imageData.height - 1) * imageData.width) * 4;\n    var r = imageData.data[index];\n    var g = imageData.data[index + 1];\n    var b = imageData.data[index + 2];\n    var i = b + 256 * (g + 256 * r);\n    var indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  return resultFeatures;\n}","map":{"version":3,"names":["CanvasImmediateRenderer","IconAnchorUnits","Icon","clamp","createCanvasContext2D","intersects","numberSafeCompareFunction","HIT_DETECT_RESOLUTION","createHitDetectionImageData","size","transforms","features","styleFunction","extent","resolution","rotation","width","height","context","imageSmoothingEnabled","canvas","renderer","featureCount","length","indexFactor","Math","floor","featuresByZIndex","i","feature","featureStyleFunction","getStyleFunction","styles","Array","isArray","index","color","toString","slice","j","jj","originalStyle","geometry","getGeometryFunction","getExtent","style","clone","fill","getFill","setColor","stroke","getStroke","setLineDash","setText","undefined","image","getImage","getOpacity","imgSize","getImageSize","imgContext","alpha","img","fillStyle","fillRect","setImage","anchor","getAnchor","anchorXUnits","PIXELS","anchorYUnits","offset","getOrigin","opacity","getSize","scale","getScale","getRotation","rotateWithView","getRotateWithView","zIndex","getZIndex","byGeometryType","getType","replace","push","zIndexKeys","Object","keys","map","Number","sort","ii","type","geomAndStyle","setStyle","k","kk","setTransform","drawGeometry","getImageData","hitDetect","pixel","imageData","resultFeatures","x","round","y","r","data","g","b"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\render\\canvas\\hitdetect.js"],"sourcesContent":["/**\n * @module ol/render/canvas/hitdetect\n */\n\nimport CanvasImmediateRenderer from './Immediate.js';\nimport IconAnchorUnits from '../../style/IconAnchorUnits.js';\nimport {Icon} from '../../style.js';\nimport {clamp} from '../../math.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {intersects} from '../../extent.js';\nimport {numberSafeCompareFunction} from '../../array.js';\n\nexport const HIT_DETECT_RESOLUTION = 0.5;\n\n/**\n * @param {import(\"../../size.js\").Size} size Canvas size in css pixels.\n * @param {Array<import(\"../../transform.js\").Transform>} transforms Transforms\n * for rendering features to all worlds of the viewport, from coordinates to css\n * pixels.\n * @param {Array<import(\"../../Feature.js\").FeatureLike>} features\n * Features to consider for hit detection.\n * @param {import(\"../../style/Style.js\").StyleFunction|undefined} styleFunction\n * Layer style function.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @param {number} rotation Rotation.\n * @return {ImageData} Hit detection image data.\n */\nexport function createHitDetectionImageData(\n  size,\n  transforms,\n  features,\n  styleFunction,\n  extent,\n  resolution,\n  rotation\n) {\n  const width = size[0] * HIT_DETECT_RESOLUTION;\n  const height = size[1] * HIT_DETECT_RESOLUTION;\n  const context = createCanvasContext2D(width, height);\n  context.imageSmoothingEnabled = false;\n  const canvas = context.canvas;\n  const renderer = new CanvasImmediateRenderer(\n    context,\n    HIT_DETECT_RESOLUTION,\n    extent,\n    null,\n    rotation\n  );\n  const featureCount = features.length;\n  // Stretch hit detection index to use the whole available color range\n  const indexFactor = Math.floor((256 * 256 * 256 - 1) / featureCount);\n  const featuresByZIndex = {};\n  for (let i = 1; i <= featureCount; ++i) {\n    const feature = features[i - 1];\n    const featureStyleFunction = feature.getStyleFunction() || styleFunction;\n    if (!styleFunction) {\n      continue;\n    }\n    let styles = featureStyleFunction(feature, resolution);\n    if (!styles) {\n      continue;\n    }\n    if (!Array.isArray(styles)) {\n      styles = [styles];\n    }\n    const index = i * indexFactor;\n    const color = '#' + ('000000' + index.toString(16)).slice(-6);\n    for (let j = 0, jj = styles.length; j < jj; ++j) {\n      const originalStyle = styles[j];\n      const geometry = originalStyle.getGeometryFunction()(feature);\n      if (!geometry || !intersects(extent, geometry.getExtent())) {\n        continue;\n      }\n      const style = originalStyle.clone();\n      const fill = style.getFill();\n      if (fill) {\n        fill.setColor(color);\n      }\n      const stroke = style.getStroke();\n      if (stroke) {\n        stroke.setColor(color);\n        stroke.setLineDash(null);\n      }\n      style.setText(undefined);\n      const image = originalStyle.getImage();\n      if (image && image.getOpacity() !== 0) {\n        const imgSize = image.getImageSize();\n        if (!imgSize) {\n          continue;\n        }\n\n        const imgContext = createCanvasContext2D(\n          imgSize[0],\n          imgSize[1],\n          undefined,\n          {alpha: false}\n        );\n        const img = imgContext.canvas;\n        imgContext.fillStyle = color;\n        imgContext.fillRect(0, 0, img.width, img.height);\n        style.setImage(\n          new Icon({\n            img: img,\n            imgSize: imgSize,\n            anchor: image.getAnchor(),\n            anchorXUnits: IconAnchorUnits.PIXELS,\n            anchorYUnits: IconAnchorUnits.PIXELS,\n            offset: image.getOrigin(),\n            opacity: 1,\n            size: image.getSize(),\n            scale: image.getScale(),\n            rotation: image.getRotation(),\n            rotateWithView: image.getRotateWithView(),\n          })\n        );\n      }\n      const zIndex = style.getZIndex() || 0;\n      let byGeometryType = featuresByZIndex[zIndex];\n      if (!byGeometryType) {\n        byGeometryType = {};\n        featuresByZIndex[zIndex] = byGeometryType;\n        byGeometryType['Polygon'] = [];\n        byGeometryType['Circle'] = [];\n        byGeometryType['LineString'] = [];\n        byGeometryType['Point'] = [];\n      }\n      byGeometryType[geometry.getType().replace('Multi', '')].push(\n        geometry,\n        style\n      );\n    }\n  }\n\n  const zIndexKeys = Object.keys(featuresByZIndex)\n    .map(Number)\n    .sort(numberSafeCompareFunction);\n  for (let i = 0, ii = zIndexKeys.length; i < ii; ++i) {\n    const byGeometryType = featuresByZIndex[zIndexKeys[i]];\n    for (const type in byGeometryType) {\n      const geomAndStyle = byGeometryType[type];\n      for (let j = 0, jj = geomAndStyle.length; j < jj; j += 2) {\n        renderer.setStyle(geomAndStyle[j + 1]);\n        for (let k = 0, kk = transforms.length; k < kk; ++k) {\n          renderer.setTransform(transforms[k]);\n          renderer.drawGeometry(geomAndStyle[j]);\n        }\n      }\n    }\n  }\n  return context.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * @param {import(\"../../pixel\").Pixel} pixel Pixel coordinate on the hit\n * detection canvas in css pixels.\n * @param {Array<import(\"../../Feature\").FeatureLike>} features Features. Has to\n * match the `features` array that was passed to `createHitDetectionImageData()`.\n * @param {ImageData} imageData Hit detection image data generated by\n * `createHitDetectionImageData()`.\n * @return {Array<import(\"../../Feature\").FeatureLike>} features Features.\n */\nexport function hitDetect(pixel, features, imageData) {\n  const resultFeatures = [];\n  if (imageData) {\n    const x = Math.floor(Math.round(pixel[0]) * HIT_DETECT_RESOLUTION);\n    const y = Math.floor(Math.round(pixel[1]) * HIT_DETECT_RESOLUTION);\n    // The pixel coordinate is clamped down to the hit-detect canvas' size to account\n    // for browsers returning coordinates slightly larger than the actual canvas size\n    // due to a non-integer pixel ratio.\n    const index =\n      (clamp(x, 0, imageData.width - 1) +\n        clamp(y, 0, imageData.height - 1) * imageData.width) *\n      4;\n    const r = imageData.data[index];\n    const g = imageData.data[index + 1];\n    const b = imageData.data[index + 2];\n    const i = b + 256 * (g + 256 * r);\n    const indexFactor = Math.floor((256 * 256 * 256 - 1) / features.length);\n    if (i && i % indexFactor === 0) {\n      resultFeatures.push(features[i / indexFactor - 1]);\n    }\n  }\n  return resultFeatures;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}