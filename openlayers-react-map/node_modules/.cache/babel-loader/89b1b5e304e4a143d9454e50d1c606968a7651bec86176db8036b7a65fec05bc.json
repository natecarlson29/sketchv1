{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport { closestSquaredDistanceXY, createOrUpdateEmpty, extend, getCenter } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nvar GeometryCollection = /** @class */function (_super) {\n  __extends(GeometryCollection, _super);\n  /**\n   * @param {Array<Geometry>} [opt_geometries] Geometries.\n   */\n  function GeometryCollection(opt_geometries) {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    _this.geometries_ = opt_geometries ? opt_geometries : null;\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    _this.changeEventsKeys_ = [];\n    _this.listenGeometriesChange_();\n    return _this;\n  }\n  /**\n   * @private\n   */\n  GeometryCollection.prototype.unlistenGeometriesChange_ = function () {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  };\n  /**\n   * @private\n   */\n  GeometryCollection.prototype.listenGeometriesChange_ = function () {\n    if (!this.geometries_) {\n      return;\n    }\n    for (var i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(listen(this.geometries_[i], EventType.CHANGE, this.changed, this));\n    }\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  GeometryCollection.prototype.clone = function () {\n    var geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  GeometryCollection.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(x, y, closestPoint, minSquaredDistance);\n    }\n    return minSquaredDistance;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  GeometryCollection.prototype.containsXY = function (x, y) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  GeometryCollection.prototype.computeExtent = function (extent) {\n    createOrUpdateEmpty(extent);\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  };\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  GeometryCollection.prototype.getGeometries = function () {\n    return cloneGeometries(this.geometries_);\n  };\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  GeometryCollection.prototype.getGeometriesArray = function () {\n    return this.geometries_;\n  };\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  GeometryCollection.prototype.getGeometriesArrayRecursive = function () {\n    /** @type {Array<Geometry>} */\n    var geometriesArray = [];\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(/** @type {GeometryCollection} */geometries[i].getGeometriesArrayRecursive());\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  };\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  GeometryCollection.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (squaredTolerance < 0 || this.simplifiedGeometryMaxMinSquaredTolerance !== 0 && squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance) {\n      return this;\n    }\n    var simplifiedGeometries = [];\n    var geometries = this.geometries_;\n    var simplified = false;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      var geometry = geometries[i];\n      var simplifiedGeometry = geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      var simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  GeometryCollection.prototype.getType = function () {\n    return 'GeometryCollection';\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  GeometryCollection.prototype.intersectsExtent = function (extent) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n  GeometryCollection.prototype.isEmpty = function () {\n    return this.geometries_.length === 0;\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  GeometryCollection.prototype.rotate = function (angle, anchor) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  };\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  GeometryCollection.prototype.scale = function (sx, opt_sy, opt_anchor) {\n    var anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, opt_sy, anchor);\n    }\n    this.changed();\n  };\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  GeometryCollection.prototype.setGeometries = function (geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  };\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  GeometryCollection.prototype.setGeometriesArray = function (geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  };\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  GeometryCollection.prototype.applyTransform = function (transformFn) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  GeometryCollection.prototype.translate = function (deltaX, deltaY) {\n    var geometries = this.geometries_;\n    for (var i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  };\n  /**\n   * Clean up.\n   */\n  GeometryCollection.prototype.disposeInternal = function () {\n    this.unlistenGeometriesChange_();\n    _super.prototype.disposeInternal.call(this);\n  };\n  return GeometryCollection;\n}(Geometry);\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  var clonedGeometries = [];\n  for (var i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\nexport default GeometryCollection;","map":{"version":3,"names":["EventType","Geometry","closestSquaredDistanceXY","createOrUpdateEmpty","extend","getCenter","listen","unlistenByKey","GeometryCollection","_super","__extends","opt_geometries","_this","call","geometries_","changeEventsKeys_","listenGeometriesChange_","prototype","unlistenGeometriesChange_","forEach","length","i","ii","push","CHANGE","changed","clone","geometryCollection","setGeometries","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","geometries","containsXY","computeExtent","extent","getGeometries","cloneGeometries","getGeometriesArray","getGeometriesArrayRecursive","geometriesArray","getType","concat","getSimplifiedGeometry","squaredTolerance","simplifiedGeometryRevision","getRevision","simplifiedGeometryMaxMinSquaredTolerance","simplifiedGeometries","simplified","geometry","simplifiedGeometry","simplifiedGeometryCollection","setGeometriesArray","intersectsExtent","isEmpty","rotate","angle","anchor","scale","sx","opt_sy","opt_anchor","applyTransform","transformFn","translate","deltaX","deltaY","disposeInternal","clonedGeometries"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\GeometryCollection.js"],"sourcesContent":["/**\n * @module ol/geom/GeometryCollection\n */\nimport EventType from '../events/EventType.js';\nimport Geometry from './Geometry.js';\nimport {\n  closestSquaredDistanceXY,\n  createOrUpdateEmpty,\n  extend,\n  getCenter,\n} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @classdesc\n * An array of {@link module:ol/geom/Geometry~Geometry} objects.\n *\n * @api\n */\nclass GeometryCollection extends Geometry {\n  /**\n   * @param {Array<Geometry>} [opt_geometries] Geometries.\n   */\n  constructor(opt_geometries) {\n    super();\n\n    /**\n     * @private\n     * @type {Array<Geometry>}\n     */\n    this.geometries_ = opt_geometries ? opt_geometries : null;\n\n    /**\n     * @type {Array<import(\"../events.js\").EventsKey>}\n     */\n    this.changeEventsKeys_ = [];\n\n    this.listenGeometriesChange_();\n  }\n\n  /**\n   * @private\n   */\n  unlistenGeometriesChange_() {\n    this.changeEventsKeys_.forEach(unlistenByKey);\n    this.changeEventsKeys_.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  listenGeometriesChange_() {\n    if (!this.geometries_) {\n      return;\n    }\n    for (let i = 0, ii = this.geometries_.length; i < ii; ++i) {\n      this.changeEventsKeys_.push(\n        listen(this.geometries_[i], EventType.CHANGE, this.changed, this)\n      );\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!GeometryCollection} Clone.\n   * @api\n   */\n  clone() {\n    const geometryCollection = new GeometryCollection(null);\n    geometryCollection.setGeometries(this.geometries_);\n    geometryCollection.applyProperties(this);\n    return geometryCollection;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      minSquaredDistance = geometries[i].closestPointXY(\n        x,\n        y,\n        closestPoint,\n        minSquaredDistance\n      );\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].containsXY(x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    createOrUpdateEmpty(extent);\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      extend(extent, geometries[i].getExtent());\n    }\n    return extent;\n  }\n\n  /**\n   * Return the geometries that make up this geometry collection.\n   * @return {Array<Geometry>} Geometries.\n   * @api\n   */\n  getGeometries() {\n    return cloneGeometries(this.geometries_);\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArray() {\n    return this.geometries_;\n  }\n\n  /**\n   * @return {Array<Geometry>} Geometries.\n   */\n  getGeometriesArrayRecursive() {\n    /** @type {Array<Geometry>} */\n    let geometriesArray = [];\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].getType() === this.getType()) {\n        geometriesArray = geometriesArray.concat(\n          /** @type {GeometryCollection} */ (\n            geometries[i]\n          ).getGeometriesArrayRecursive()\n        );\n      } else {\n        geometriesArray.push(geometries[i]);\n      }\n    }\n    return geometriesArray;\n  }\n\n  /**\n   * Create a simplified version of this geometry using the Douglas Peucker algorithm.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {GeometryCollection} Simplified GeometryCollection.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    if (this.simplifiedGeometryRevision !== this.getRevision()) {\n      this.simplifiedGeometryMaxMinSquaredTolerance = 0;\n      this.simplifiedGeometryRevision = this.getRevision();\n    }\n    if (\n      squaredTolerance < 0 ||\n      (this.simplifiedGeometryMaxMinSquaredTolerance !== 0 &&\n        squaredTolerance < this.simplifiedGeometryMaxMinSquaredTolerance)\n    ) {\n      return this;\n    }\n\n    const simplifiedGeometries = [];\n    const geometries = this.geometries_;\n    let simplified = false;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      const geometry = geometries[i];\n      const simplifiedGeometry =\n        geometry.getSimplifiedGeometry(squaredTolerance);\n      simplifiedGeometries.push(simplifiedGeometry);\n      if (simplifiedGeometry !== geometry) {\n        simplified = true;\n      }\n    }\n    if (simplified) {\n      const simplifiedGeometryCollection = new GeometryCollection(null);\n      simplifiedGeometryCollection.setGeometriesArray(simplifiedGeometries);\n      return simplifiedGeometryCollection;\n    } else {\n      this.simplifiedGeometryMaxMinSquaredTolerance = squaredTolerance;\n      return this;\n    }\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'GeometryCollection';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      if (geometries[i].intersectsExtent(extent)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.geometries_.length === 0;\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].rotate(angle, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Scale the geometry (with an optional origin).  This modifies the geometry\n   * coordinates in place.\n   * @abstract\n   * @param {number} sx The scaling factor in the x-direction.\n   * @param {number} [opt_sy] The scaling factor in the y-direction (defaults to sx).\n   * @param {import(\"../coordinate.js\").Coordinate} [opt_anchor] The scale origin (defaults to the center\n   *     of the geometry extent).\n   * @api\n   */\n  scale(sx, opt_sy, opt_anchor) {\n    let anchor = opt_anchor;\n    if (!anchor) {\n      anchor = getCenter(this.getExtent());\n    }\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].scale(sx, opt_sy, anchor);\n    }\n    this.changed();\n  }\n\n  /**\n   * Set the geometries that make up this geometry collection.\n   * @param {Array<Geometry>} geometries Geometries.\n   * @api\n   */\n  setGeometries(geometries) {\n    this.setGeometriesArray(cloneGeometries(geometries));\n  }\n\n  /**\n   * @param {Array<Geometry>} geometries Geometries.\n   */\n  setGeometriesArray(geometries) {\n    this.unlistenGeometriesChange_();\n    this.geometries_ = geometries;\n    this.listenGeometriesChange_();\n    this.changed();\n  }\n\n  /**\n   * Apply a transform function to the coordinates of the geometry.\n   * The geometry is modified in place.\n   * If you do not want the geometry modified in place, first `clone()` it and\n   * then use this function on the clone.\n   * @param {import(\"../proj.js\").TransformFunction} transformFn Transform function.\n   * Called with a flat array of geometry coordinates.\n   * @api\n   */\n  applyTransform(transformFn) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].applyTransform(transformFn);\n    }\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const geometries = this.geometries_;\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\n      geometries[i].translate(deltaX, deltaY);\n    }\n    this.changed();\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.unlistenGeometriesChange_();\n    super.disposeInternal();\n  }\n}\n\n/**\n * @param {Array<Geometry>} geometries Geometries.\n * @return {Array<Geometry>} Cloned geometries.\n */\nfunction cloneGeometries(geometries) {\n  const clonedGeometries = [];\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\n    clonedGeometries.push(geometries[i].clone());\n  }\n  return clonedGeometries;\n}\n\nexport default GeometryCollection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}