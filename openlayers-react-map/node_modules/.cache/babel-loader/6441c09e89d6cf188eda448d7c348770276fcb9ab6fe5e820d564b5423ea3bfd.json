{"ast":null,"code":"/**\n * @module ol/style/RegularShape\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nvar RegularShape = /** @class */function (_super) {\n  __extends(RegularShape, _super);\n  /**\n   * @param {Options} options Options.\n   */\n  function RegularShape(options) {\n    var _this = this;\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode\n    }) || this;\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    _this.canvas_ = undefined;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.hitDetectionCanvas_ = null;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    _this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.origin_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.points_ = options.points;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.radius2_ = options.radius2;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.angle_ = options.angle !== undefined ? options.angle : 0;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = null;\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    _this.renderOptions_ = null;\n    _this.render();\n    return _this;\n  }\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  RegularShape.prototype.clone = function () {\n    var scale = this.getScale();\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode()\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  RegularShape.prototype.getAnchor = function () {\n    var size = this.size_;\n    if (!size) {\n      return null;\n    }\n    var displacement = this.getDisplacement();\n    return [size[0] / 2 - displacement[0], size[1] / 2 + displacement[1]];\n  };\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  RegularShape.prototype.getAngle = function () {\n    return this.angle_;\n  };\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  RegularShape.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  RegularShape.prototype.setFill = function (fill) {\n    this.fill_ = fill;\n    this.render();\n  };\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  RegularShape.prototype.getHitDetectionImage = function () {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n    return this.hitDetectionCanvas_;\n  };\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  RegularShape.prototype.getImage = function (pixelRatio) {\n    var image = this.canvas_[pixelRatio];\n    if (!image) {\n      var renderOptions = this.renderOptions_;\n      var context = createCanvasContext2D(renderOptions.size * pixelRatio, renderOptions.size * pixelRatio);\n      this.draw_(renderOptions, context, pixelRatio);\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n    return image;\n  };\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  RegularShape.prototype.getPixelRatio = function (pixelRatio) {\n    return pixelRatio;\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  RegularShape.prototype.getImageSize = function () {\n    return this.size_;\n  };\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  RegularShape.prototype.getImageState = function () {\n    return ImageState.LOADED;\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  RegularShape.prototype.getOrigin = function () {\n    return this.origin_;\n  };\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  RegularShape.prototype.getPoints = function () {\n    return this.points_;\n  };\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  RegularShape.prototype.getRadius = function () {\n    return this.radius_;\n  };\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  RegularShape.prototype.getRadius2 = function () {\n    return this.radius2_;\n  };\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  RegularShape.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  RegularShape.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  RegularShape.prototype.setStroke = function (stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  RegularShape.prototype.listenImageChange = function (listener) {};\n  /**\n   * Load not yet loaded URI.\n   */\n  RegularShape.prototype.load = function () {};\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  RegularShape.prototype.unlistenImageChange = function (listener) {};\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  RegularShape.prototype.calculateLineJoinSize_ = function (lineJoin, strokeWidth, miterLimit) {\n    if (strokeWidth === 0 || this.points_ === Infinity || lineJoin !== 'bevel' && lineJoin !== 'miter') {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    var r1 = this.radius_;\n    var r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      var tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    var points = this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    var alpha = 2 * Math.PI / points;\n    var a = r2 * Math.sin(alpha);\n    var b = Math.sqrt(r2 * r2 - a * a);\n    var d = r1 - b;\n    var e = Math.sqrt(a * a + d * d);\n    var miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    var k = strokeWidth / 2 / miterRatio;\n    var l = strokeWidth / 2 * (d / e);\n    var maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    var bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    var aa = r1 * Math.sin(alpha);\n    var bb = Math.sqrt(r1 * r1 - aa * aa);\n    var dd = r2 - bb;\n    var ee = Math.sqrt(aa * aa + dd * dd);\n    var innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      var innerLength = innerMiterRatio * strokeWidth / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  };\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  RegularShape.prototype.createRenderOptions = function () {\n    var lineJoin = defaultLineJoin;\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n    var add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    var maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    var size = Math.ceil(2 * maxRadius + add);\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n  };\n  /**\n   * @protected\n   */\n  RegularShape.prototype.render = function () {\n    this.renderOptions_ = this.createRenderOptions();\n    var size = this.renderOptions_.size;\n    this.canvas_ = {};\n    this.size_ = [size, size];\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  RegularShape.prototype.draw_ = function (renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n      // determine if fill is transparent (or pattern or gradient)\n      var opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.hitDetectionCanvas_ = context.canvas;\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  };\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  RegularShape.prototype.createPath_ = function (context) {\n    var points = this.points_;\n    var radius = this.radius_;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      var radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      var startAngle = this.angle_ - Math.PI / 2;\n      var step = 2 * Math.PI / points;\n      for (var i = 0; i < points; i++) {\n        var angle0 = startAngle + i * step;\n        var radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n    this.createPath_(context);\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  };\n  return RegularShape;\n}(ImageStyle);\nexport default RegularShape;","map":{"version":3,"names":["ImageState","ImageStyle","asArray","asColorLike","createCanvasContext2D","defaultFillStyle","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","RegularShape","_super","__extends","options","_this","rotateWithView","undefined","call","opacity","rotation","scale","displacement","declutterMode","canvas_","hitDetectionCanvas_","fill_","fill","origin_","points_","points","radius_","radius","radius1","radius2_","radius2","angle_","angle","stroke_","stroke","size_","renderOptions_","render","prototype","clone","getScale","style","getFill","getPoints","getRadius","getRadius2","getAngle","getStroke","getRotation","getRotateWithView","Array","isArray","slice","getDisplacement","getDeclutterMode","setOpacity","getOpacity","getAnchor","size","setFill","getHitDetectionImage","createHitDetectionCanvas_","getImage","pixelRatio","image","renderOptions","context","draw_","canvas","getPixelRatio","getImageSize","getImageState","LOADED","getOrigin","getSize","setStroke","listenImageChange","listener","load","unlistenImageChange","calculateLineJoinSize_","lineJoin","strokeWidth","miterLimit","Infinity","r1","r2","tmp","alpha","Math","PI","a","sin","b","sqrt","d","e","miterRatio","k","l","maxr","bevelAdd","aa","bb","dd","ee","innerMiterRatio","innerLength","max","createRenderOptions","lineDash","lineDashOffset","strokeStyle","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getMiterLimit","add","maxRadius","ceil","translate","createPath_","color","fillStyle","lineWidth","setLineDash","length","drawHitDetectionCanvas_","arc","startAngle","step","i","angle0","radiusC","lineTo","cos","closePath"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\style\\RegularShape.js"],"sourcesContent":["/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {\n  defaultFillStyle,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] First radius of a star. Ignored if radius is set.\n * @property {number} [radius2] Second radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale. Unless two dimensional scaling is required a better\n * result may be obtained with appropriate settings for `radius`, `radius1` and `radius2`.\n * @property {\"declutter\"|\"obstacle\"|\"none\"|undefined} [declutterMode] Declutter mode\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle] StrokeStyle.\n * @property {number} strokeWidth StrokeWidth.\n * @property {number} size Size.\n * @property {Array<number>} lineDash LineDash.\n * @property {number} lineDashOffset LineDashOffset.\n * @property {CanvasLineJoin} lineJoin LineJoin.\n * @property {number} miterLimit MiterLimit.\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: options.scale !== undefined ? options.scale : 1,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      declutterMode: options.declutterMode,\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = undefined;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ =\n      options.radius !== undefined ? options.radius : options.radius1;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {RenderOptions}\n     */\n    this.renderOptions_ = null;\n\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      displacement: this.getDisplacement().slice(),\n      declutterMode: this.getDeclutterMode(),\n    });\n    style.setOpacity(this.getOpacity());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    const size = this.size_;\n    if (!size) {\n      return null;\n    }\n    const displacement = this.getDisplacement();\n    return [size[0] / 2 - displacement[0], size[1] / 2 + displacement[1]];\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * Set the fill style.\n   * @param {import(\"./Fill.js\").default} fill Fill style.\n   * @api\n   */\n  setFill(fill) {\n    this.fill_ = fill;\n    this.render();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      this.createHitDetectionCanvas_(this.renderOptions_);\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    let image = this.canvas_[pixelRatio];\n    if (!image) {\n      const renderOptions = this.renderOptions_;\n      const context = createCanvasContext2D(\n        renderOptions.size * pixelRatio,\n        renderOptions.size * pixelRatio\n      );\n      this.draw_(renderOptions, context, pixelRatio);\n\n      image = context.canvas;\n      this.canvas_[pixelRatio] = image;\n    }\n    return image;\n  }\n\n  /**\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Pixel ratio.\n   */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return ImageState.LOADED;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * Set the stroke style.\n   * @param {import(\"./Stroke.js\").default} stroke Stroke style.\n   * @api\n   */\n  setStroke(stroke) {\n    this.stroke_ = stroke;\n    this.render();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * Calculate additional canvas size needed for the miter.\n   * @param {string} lineJoin Line join\n   * @param {number} strokeWidth Stroke width\n   * @param {number} miterLimit Miter limit\n   * @return {number} Additional canvas size needed\n   * @private\n   */\n  calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit) {\n    if (\n      strokeWidth === 0 ||\n      this.points_ === Infinity ||\n      (lineJoin !== 'bevel' && lineJoin !== 'miter')\n    ) {\n      return strokeWidth;\n    }\n    // m  | ^\n    // i  | |\\                  .\n    // t >|  #\\\n    // e  | |\\ \\              .\n    // r      \\s\\\n    //      |  \\t\\          .                 .\n    //          \\r\\                      .   .\n    //      |    \\o\\      .          .  . . .\n    //          e \\k\\            .  .    . .\n    //      |      \\e\\  .    .  .       . .\n    //       d      \\ \\  .  .          . .\n    //      | _ _a_ _\\#  .            . .\n    //   r1          / `             . .\n    //      |                       . .\n    //       b     /               . .\n    //      |                     . .\n    //           / r2            . .\n    //      |                        .   .\n    //         /                           .   .\n    //      |α                                   .   .\n    //       /                                         .   .\n    //      ° center\n    let r1 = this.radius_;\n    let r2 = this.radius2_ === undefined ? r1 : this.radius2_;\n    if (r1 < r2) {\n      const tmp = r1;\n      r1 = r2;\n      r2 = tmp;\n    }\n    const points =\n      this.radius2_ === undefined ? this.points_ : this.points_ * 2;\n    const alpha = (2 * Math.PI) / points;\n    const a = r2 * Math.sin(alpha);\n    const b = Math.sqrt(r2 * r2 - a * a);\n    const d = r1 - b;\n    const e = Math.sqrt(a * a + d * d);\n    const miterRatio = e / a;\n    if (lineJoin === 'miter' && miterRatio <= miterLimit) {\n      return miterRatio * strokeWidth;\n    }\n    // Calculate the distnce from center to the stroke corner where\n    // it was cut short because of the miter limit.\n    //              l\n    //        ----+---- <= distance from center to here is maxr\n    //       /####|k ##\\\n    //      /#####^#####\\\n    //     /#### /+\\# s #\\\n    //    /### h/+++\\# t #\\\n    //   /### t/+++++\\# r #\\\n    //  /### a/+++++++\\# o #\\\n    // /### p/++ fill +\\# k #\\\n    ///#### /+++++^+++++\\# e #\\\n    //#####/+++++/+\\+++++\\#####\\\n    const k = strokeWidth / 2 / miterRatio;\n    const l = (strokeWidth / 2) * (d / e);\n    const maxr = Math.sqrt((r1 + k) * (r1 + k) + l * l);\n    const bevelAdd = maxr - r1;\n    if (this.radius2_ === undefined || lineJoin === 'bevel') {\n      return bevelAdd * 2;\n    }\n    // If outer miter is over the miter limit the inner miter may reach through the\n    // center and be longer than the bevel, same calculation as above but swap r1 / r2.\n    const aa = r1 * Math.sin(alpha);\n    const bb = Math.sqrt(r1 * r1 - aa * aa);\n    const dd = r2 - bb;\n    const ee = Math.sqrt(aa * aa + dd * dd);\n    const innerMiterRatio = ee / aa;\n    if (innerMiterRatio <= miterLimit) {\n      const innerLength = (innerMiterRatio * strokeWidth) / 2 - r2 - r1;\n      return 2 * Math.max(bevelAdd, innerLength);\n    }\n    return bevelAdd * 2;\n  }\n\n  /**\n   * @return {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    const add = this.calculateLineJoinSize_(lineJoin, strokeWidth, miterLimit);\n    const maxRadius = Math.max(this.radius_, this.radius2_ || 0);\n    const size = Math.ceil(2 * maxRadius + add);\n\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit,\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    this.renderOptions_ = this.createRenderOptions();\n    const size = this.renderOptions_.size;\n    this.canvas_ = {};\n    this.size_ = [size, size];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, pixelRatio) {\n    context.scale(pixelRatio, pixelRatio);\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        const context = createCanvasContext2D(\n          renderOptions.size,\n          renderOptions.size\n        );\n        this.hitDetectionCanvas_ = context.canvas;\n\n        this.drawHitDetectionCanvas_(renderOptions, context);\n      }\n    }\n    if (!this.hitDetectionCanvas_) {\n      this.hitDetectionCanvas_ = this.getImage(1);\n    }\n  }\n\n  /**\n   * @private\n   * @param {CanvasRenderingContext2D} context The context to draw in.\n   */\n  createPath_(context) {\n    let points = this.points_;\n    const radius = this.radius_;\n    if (points === Infinity) {\n      context.arc(0, 0, radius, 0, 2 * Math.PI);\n    } else {\n      const radius2 = this.radius2_ === undefined ? radius : this.radius2_;\n      if (this.radius2_ !== undefined) {\n        points *= 2;\n      }\n      const startAngle = this.angle_ - Math.PI / 2;\n      const step = (2 * Math.PI) / points;\n      for (let i = 0; i < points; i++) {\n        const angle0 = startAngle + i * step;\n        const radiusC = i % 2 === 0 ? radius : radius2;\n        context.lineTo(radiusC * Math.cos(angle0), radiusC * Math.sin(angle0));\n      }\n      context.closePath();\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   */\n  drawHitDetectionCanvas_(renderOptions, context) {\n    // set origin to canvas center\n    context.translate(renderOptions.size / 2, renderOptions.size / 2);\n\n    this.createPath_(context);\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n  }\n}\n\nexport default RegularShape;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}