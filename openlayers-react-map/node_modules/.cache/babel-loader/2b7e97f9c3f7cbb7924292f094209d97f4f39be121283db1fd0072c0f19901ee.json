{"ast":null,"code":"/**\n * @module ol/array\n */\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [opt_comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, opt_comparator) {\n  var mid, cmp;\n  var comparator = opt_comparator || numberSafeCompareFunction;\n  var low = 0;\n  var high = haystack.length;\n  var found = false;\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + (high - low >> 1);\n    cmp = +comparator(haystack[mid], needle);\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n  /* Key not found. */\n  return found ? low : ~low;\n}\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function numberSafeCompareFunction(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n/**\n * Whether the array contains the given object.\n * @param {Array<*>} arr The array to test for the presence of the element.\n * @param {*} obj The object for which to test.\n * @return {boolean} The object is in the array.\n */\nexport function includes(arr, obj) {\n  return arr.indexOf(obj) >= 0;\n}\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  var n = arr.length;\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  } else {\n    var i = void 0;\n    if (direction > 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] < target) {\n          return i - 1;\n        }\n      }\n    } else if (direction < 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] <= target) {\n          return i;\n        }\n      }\n    } else {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] == target) {\n          return i;\n        } else if (arr[i] < target) {\n          if (typeof direction === 'function') {\n            if (direction(target, arr[i - 1], arr[i]) > 0) {\n              return i - 1;\n            } else {\n              return i;\n            }\n          } else if (arr[i - 1] - target < target - arr[i]) {\n            return i - 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n    return n - 1;\n  }\n}\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    var tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  var extension = Array.isArray(data) ? data : [data];\n  var length = extension.length;\n  for (var i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  var i = arr.indexOf(obj);\n  var found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n/**\n * @param {Array<VALUE>} arr The array to search in.\n * @param {function(VALUE, number, ?) : boolean} func The function to compare.\n * @template VALUE\n * @return {VALUE|null} The element found or null.\n */\nexport function find(arr, func) {\n  var length = arr.length >>> 0;\n  var value;\n  for (var i = 0; i < length; i++) {\n    value = arr[i];\n    if (func(value, i, arr)) {\n      return value;\n    }\n  }\n  return null;\n}\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  var len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (var i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  var length = arr.length;\n  var tmp = Array(arr.length);\n  var i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {\n      index: i,\n      value: arr[i]\n    };\n  }\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n/**\n * @param {Array<*>} arr The array to search in.\n * @param {Function} func Comparison function.\n * @return {number} Return index.\n */\nexport function findIndex(arr, func) {\n  var index;\n  var found = !arr.every(function (el, idx) {\n    index = idx;\n    return !func(el, idx, arr);\n  });\n  return found ? index : -1;\n}\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [opt_func] Comparison function.\n * @param {boolean} [opt_strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, opt_func, opt_strict) {\n  var compare = opt_func || numberSafeCompareFunction;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    var res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || opt_strict && res === 0);\n  });\n}","map":{"version":3,"names":["binarySearch","haystack","needle","opt_comparator","mid","cmp","comparator","numberSafeCompareFunction","low","high","length","found","a","b","includes","arr","obj","indexOf","linearFindNearest","target","direction","n","i","reverseSubArray","begin","end","tmp","extend","data","extension","Array","isArray","remove","splice","find","func","value","equals","arr1","arr2","len1","stableSort","compareFnc","index","sort","findIndex","every","el","idx","isSorted","opt_func","opt_strict","compare","currentVal","res"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\array.js"],"sourcesContent":["/**\n * @module ol/array\n */\n\n/**\n * Performs a binary search on the provided sorted list and returns the index of the item if found. If it can't be found it'll return -1.\n * https://github.com/darkskyapp/binary-search\n *\n * @param {Array<*>} haystack Items to search through.\n * @param {*} needle The item to look for.\n * @param {Function} [opt_comparator] Comparator function.\n * @return {number} The index of the item if found, -1 if not.\n */\nexport function binarySearch(haystack, needle, opt_comparator) {\n  let mid, cmp;\n  const comparator = opt_comparator || numberSafeCompareFunction;\n  let low = 0;\n  let high = haystack.length;\n  let found = false;\n\n  while (low < high) {\n    /* Note that \"(low + high) >>> 1\" may overflow, and results in a typecast\n     * to double (which gives the wrong results). */\n    mid = low + ((high - low) >> 1);\n    cmp = +comparator(haystack[mid], needle);\n\n    if (cmp < 0.0) {\n      /* Too low. */\n      low = mid + 1;\n    } else {\n      /* Key found or too high */\n      high = mid;\n      found = !cmp;\n    }\n  }\n\n  /* Key not found. */\n  return found ? low : ~low;\n}\n\n/**\n * Compare function for array sort that is safe for numbers.\n * @param {*} a The first object to be compared.\n * @param {*} b The second object to be compared.\n * @return {number} A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nexport function numberSafeCompareFunction(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\n/**\n * Whether the array contains the given object.\n * @param {Array<*>} arr The array to test for the presence of the element.\n * @param {*} obj The object for which to test.\n * @return {boolean} The object is in the array.\n */\nexport function includes(arr, obj) {\n  return arr.indexOf(obj) >= 0;\n}\n\n/**\n * {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution} can use a function\n * of this type to determine which nearest resolution to use.\n *\n * This function takes a `{number}` representing a value between two array entries,\n * a `{number}` representing the value of the nearest higher entry and\n * a `{number}` representing the value of the nearest lower entry\n * as arguments and returns a `{number}`. If a negative number or zero is returned\n * the lower value will be used, if a positive number is returned the higher value\n * will be used.\n * @typedef {function(number, number, number): number} NearestDirectionFunction\n * @api\n */\n\n/**\n * @param {Array<number>} arr Array in descending order.\n * @param {number} target Target.\n * @param {number|NearestDirectionFunction} direction\n *    0 means return the nearest,\n *    > 0 means return the largest nearest,\n *    < 0 means return the smallest nearest.\n * @return {number} Index.\n */\nexport function linearFindNearest(arr, target, direction) {\n  const n = arr.length;\n  if (arr[0] <= target) {\n    return 0;\n  } else if (target <= arr[n - 1]) {\n    return n - 1;\n  } else {\n    let i;\n    if (direction > 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] < target) {\n          return i - 1;\n        }\n      }\n    } else if (direction < 0) {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] <= target) {\n          return i;\n        }\n      }\n    } else {\n      for (i = 1; i < n; ++i) {\n        if (arr[i] == target) {\n          return i;\n        } else if (arr[i] < target) {\n          if (typeof direction === 'function') {\n            if (direction(target, arr[i - 1], arr[i]) > 0) {\n              return i - 1;\n            } else {\n              return i;\n            }\n          } else if (arr[i - 1] - target < target - arr[i]) {\n            return i - 1;\n          } else {\n            return i;\n          }\n        }\n      }\n    }\n    return n - 1;\n  }\n}\n\n/**\n * @param {Array<*>} arr Array.\n * @param {number} begin Begin index.\n * @param {number} end End index.\n */\nexport function reverseSubArray(arr, begin, end) {\n  while (begin < end) {\n    const tmp = arr[begin];\n    arr[begin] = arr[end];\n    arr[end] = tmp;\n    ++begin;\n    --end;\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {!Array<VALUE>|VALUE} data The elements or arrays of elements to add to arr.\n * @template VALUE\n */\nexport function extend(arr, data) {\n  const extension = Array.isArray(data) ? data : [data];\n  const length = extension.length;\n  for (let i = 0; i < length; i++) {\n    arr[arr.length] = extension[i];\n  }\n}\n\n/**\n * @param {Array<VALUE>} arr The array to modify.\n * @param {VALUE} obj The element to remove.\n * @template VALUE\n * @return {boolean} If the element was removed.\n */\nexport function remove(arr, obj) {\n  const i = arr.indexOf(obj);\n  const found = i > -1;\n  if (found) {\n    arr.splice(i, 1);\n  }\n  return found;\n}\n\n/**\n * @param {Array<VALUE>} arr The array to search in.\n * @param {function(VALUE, number, ?) : boolean} func The function to compare.\n * @template VALUE\n * @return {VALUE|null} The element found or null.\n */\nexport function find(arr, func) {\n  const length = arr.length >>> 0;\n  let value;\n\n  for (let i = 0; i < length; i++) {\n    value = arr[i];\n    if (func(value, i, arr)) {\n      return value;\n    }\n  }\n  return null;\n}\n\n/**\n * @param {Array|Uint8ClampedArray} arr1 The first array to compare.\n * @param {Array|Uint8ClampedArray} arr2 The second array to compare.\n * @return {boolean} Whether the two arrays are equal.\n */\nexport function equals(arr1, arr2) {\n  const len1 = arr1.length;\n  if (len1 !== arr2.length) {\n    return false;\n  }\n  for (let i = 0; i < len1; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Sort the passed array such that the relative order of equal elements is preserved.\n * See https://en.wikipedia.org/wiki/Sorting_algorithm#Stability for details.\n * @param {Array<*>} arr The array to sort (modifies original).\n * @param {!function(*, *): number} compareFnc Comparison function.\n * @api\n */\nexport function stableSort(arr, compareFnc) {\n  const length = arr.length;\n  const tmp = Array(arr.length);\n  let i;\n  for (i = 0; i < length; i++) {\n    tmp[i] = {index: i, value: arr[i]};\n  }\n  tmp.sort(function (a, b) {\n    return compareFnc(a.value, b.value) || a.index - b.index;\n  });\n  for (i = 0; i < arr.length; i++) {\n    arr[i] = tmp[i].value;\n  }\n}\n\n/**\n * @param {Array<*>} arr The array to search in.\n * @param {Function} func Comparison function.\n * @return {number} Return index.\n */\nexport function findIndex(arr, func) {\n  let index;\n  const found = !arr.every(function (el, idx) {\n    index = idx;\n    return !func(el, idx, arr);\n  });\n  return found ? index : -1;\n}\n\n/**\n * @param {Array<*>} arr The array to test.\n * @param {Function} [opt_func] Comparison function.\n * @param {boolean} [opt_strict] Strictly sorted (default false).\n * @return {boolean} Return index.\n */\nexport function isSorted(arr, opt_func, opt_strict) {\n  const compare = opt_func || numberSafeCompareFunction;\n  return arr.every(function (currentVal, index) {\n    if (index === 0) {\n      return true;\n    }\n    const res = compare(arr[index - 1], currentVal);\n    return !(res > 0 || (opt_strict && res === 0));\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}