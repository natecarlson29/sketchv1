{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\map-actions\\\\FlipHorizontal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({\n      color: 'blue'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst polygonStyle = function (feature) {\n  const styles = [new Style({\n    stroke: new Stroke({\n      color: 'blue',\n      width: 3\n    }),\n    fill: new Fill({\n      color: 'rgba(30, 144, 255, 0.1)'\n    })\n  })];\n  const coords = feature.getGeometry().getCoordinates()[0];\n  coords.forEach(coord => {\n    styles.push(new Style({\n      geometry: new Point(coord),\n      image: new CircleStyle({\n        radius: 6,\n        fill: new Fill({\n          color: 'blue'\n        }),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    }));\n  });\n  return styles;\n};\nconst activePolygonStyle = function (feature) {\n  const styles = [new Style({\n    stroke: new Stroke({\n      color: 'orange',\n      width: 3\n    }),\n    fill: new Fill({\n      color: 'rgba(255, 165, 0, 0.1)'\n    })\n  })];\n  const coords = feature.getGeometry().getCoordinates()[0];\n  coords.forEach(coord => {\n    styles.push(new Style({\n      geometry: new Point(coord),\n      image: new CircleStyle({\n        radius: 6,\n        fill: new Fill({\n          color: 'orange'\n        }),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    }));\n  });\n  return styles;\n};\nconst selectedPolygonStyle = function (feature) {\n  const styles = [new Style({\n    stroke: new Stroke({\n      color: 'limegreen',\n      width: 3,\n      lineDash: [8, 4]\n    }),\n    fill: new Fill({\n      color: 'rgba(50, 205, 50, 0.15)'\n    })\n  })];\n  const coords = feature.getGeometry().getCoordinates()[0];\n  coords.forEach(coord => {\n    styles.push(new Style({\n      geometry: new Point(coord),\n      image: new CircleStyle({\n        radius: 6,\n        fill: new Fill({\n          color: 'limegreen'\n        }),\n        stroke: new Stroke({\n          color: 'white',\n          width: 2\n        })\n      })\n    }));\n  });\n  return styles;\n};\nconst ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'rgba(0,0,255,0.2)'\n    }),\n    stroke: new Stroke({\n      color: 'blue',\n      width: 2\n    })\n  })\n});\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]); // overlays for current drawing\n  const allOverlaysRef = useRef([]); // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  // --- Overlay clearing helper (now available everywhere in App) ---\n  // Only clears overlays for a specific feature\n  function clearPolygonOverlays(feature) {\n    if (feature && feature._segmentOverlays) {\n      feature._segmentOverlays.forEach(overlay => {\n        if (mapRef.current) mapRef.current.removeOverlay(overlay);\n      });\n      feature._segmentOverlays = [];\n    }\n  }\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    mapRef.current = map;\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + \"'\";\n    }\n    function createSegmentOverlays(feature, coords) {\n      clearPolygonOverlays(feature);\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n      feature._segmentOverlays = [];\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        feature._segmentOverlays.push(overlay);\n      }\n    }\n\n    // --- Remark segments for a given feature ---\n    function remarkPolygonSegments(feature) {\n      if (!feature) return;\n      const poly = feature.getGeometry();\n      const coords = poly.getCoordinates()[0];\n      createSegmentOverlays(feature, coords);\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays(feature, [coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n      // No manual selection logic here anymore!\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          createSegmentOverlays(feature, coords);\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, coords);\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = remarkPolygonSegments;\n\n    // Clean up on unmount\n    return () => {\n      // Remove all overlays for all polygons\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      // Remove select interaction if present\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n    // eslint-disable-next-line\n  }, []); // Only run once on mount\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select interaction if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      // Add OpenLayers Select interaction\n      const select = new Select({\n        layers: [map.getLayers().item(1)],\n        // Only vectorLayer\n        style: selectedPolygonStyle\n        // filter: feature => feature.getGeometry() instanceof Polygon,\n      });\n      select.on('select', e => {\n        // Only allow single selection\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      // Remove selection style if switching out of select mode\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n  }, [mode]);\n\n  // --- No more flipPolygonHorizontally or flipPolygonVertically here ---\n  // --- Those are now handled in FlipHorizontal.jsx and FlipVertical.jsx ---\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 473,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 481,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 480,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 487,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 454,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"pLUtvi54iaAbiKCD4BsBR0g9xeQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","Select","fromLonLat","getLength","Style","CircleStyle","Fill","Stroke","LineString","FlipHorizButton","FlipVertButton","jsxDEV","_jsxDEV","vertexStyle","image","radius","fill","color","stroke","width","polygonStyle","feature","styles","coords","getGeometry","getCoordinates","forEach","coord","push","geometry","activePolygonStyle","selectedPolygonStyle","lineDash","ghostMarkerStyle","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","clearPolygonOverlays","_segmentOverlays","overlay","current","removeOverlay","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","DIM_OFFSET","i","length","c1","c2","pixel1","getPixelFromCoordinate","pixel2","dx","dy","len","Math","sqrt","perp","offsetMidPixel","offsetMidCoord","getCoordinateFromPixel","tooltip","document","createElement","className","innerHTML","isVertical","abs","transform","element","position","positioning","stopEvent","addOverlay","remarkPolygonSegments","poly","on","evt","coordinate","removeFeature","ghost","setStyle","addFeature","slice","setCoordinates","addSegment","direction","last","OFFSET","newPt","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","splice","addEventListener","getFeatures","f","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","select","getLayers","item","selected","addInteraction","children","id","ref","type","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","height","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/map-actions/FlipHorizontal.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport './style.css';\r\nimport 'ol/ol.css';\r\nimport Map from 'ol/Map';\r\nimport View from 'ol/View';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport OSM from 'ol/source/OSM';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport Feature from 'ol/Feature';\r\nimport Polygon from 'ol/geom/Polygon';\r\nimport Point from 'ol/geom/Point';\r\nimport Overlay from 'ol/Overlay';\r\nimport Select from 'ol/interaction/Select';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport { getLength } from 'ol/sphere';\r\nimport Style from 'ol/style/Style';\r\nimport CircleStyle from 'ol/style/Circle';\r\nimport Fill from 'ol/style/Fill';\r\nimport Stroke from 'ol/style/Stroke';\r\nimport LineString from 'ol/geom/LineString';\r\n\r\n/* map actions */\r\nimport FlipHorizButton from './map-actions/FlipHorizontal';\r\nimport FlipVertButton from './map-actions/FlipVertical';\r\n\r\nconst vertexStyle = new Style({\r\n  image: new CircleStyle({\r\n    radius: 6,\r\n    fill: new Fill({ color: 'blue' }),\r\n    stroke: new Stroke({ color: 'white', width: 2 }),\r\n  }),\r\n});\r\n\r\nconst polygonStyle = function (feature) {\r\n  const styles = [\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: 'blue',\r\n        width: 3,\r\n      }),\r\n      fill: new Fill({\r\n        color: 'rgba(30, 144, 255, 0.1)',\r\n      }),\r\n    }),\r\n  ];\r\n  const coords = feature.getGeometry().getCoordinates()[0];\r\n  coords.forEach(coord => {\r\n    styles.push(\r\n      new Style({\r\n        geometry: new Point(coord),\r\n        image: new CircleStyle({\r\n          radius: 6,\r\n          fill: new Fill({ color: 'blue' }),\r\n          stroke: new Stroke({ color: 'white', width: 2 }),\r\n        }),\r\n      })\r\n    );\r\n  });\r\n  return styles;\r\n};\r\n\r\nconst activePolygonStyle = function (feature) {\r\n  const styles = [\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: 'orange',\r\n        width: 3,\r\n      }),\r\n      fill: new Fill({\r\n        color: 'rgba(255, 165, 0, 0.1)',\r\n      }),\r\n    }),\r\n  ];\r\n  const coords = feature.getGeometry().getCoordinates()[0];\r\n  coords.forEach(coord => {\r\n    styles.push(\r\n      new Style({\r\n        geometry: new Point(coord),\r\n        image: new CircleStyle({\r\n          radius: 6,\r\n          fill: new Fill({ color: 'orange' }),\r\n          stroke: new Stroke({ color: 'white', width: 2 }),\r\n        }),\r\n      })\r\n    );\r\n  });\r\n  return styles;\r\n};\r\n\r\nconst selectedPolygonStyle = function (feature) {\r\n  const styles = [\r\n    new Style({\r\n      stroke: new Stroke({\r\n        color: 'limegreen',\r\n        width: 3,\r\n        lineDash: [8, 4],\r\n      }),\r\n      fill: new Fill({\r\n        color: 'rgba(50, 205, 50, 0.15)',\r\n      }),\r\n    }),\r\n  ];\r\n  const coords = feature.getGeometry().getCoordinates()[0];\r\n  coords.forEach(coord => {\r\n    styles.push(\r\n      new Style({\r\n        geometry: new Point(coord),\r\n        image: new CircleStyle({\r\n          radius: 6,\r\n          fill: new Fill({ color: 'limegreen' }),\r\n          stroke: new Stroke({ color: 'white', width: 2 }),\r\n        }),\r\n      })\r\n    );\r\n  });\r\n  return styles;\r\n};\r\n\r\nconst ghostMarkerStyle = new Style({\r\n  image: new CircleStyle({\r\n    radius: 7,\r\n    fill: new Fill({ color: 'rgba(0,0,255,0.2)' }),\r\n    stroke: new Stroke({ color: 'blue', width: 2 }),\r\n  }),\r\n});\r\n\r\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\r\n\r\nconst App = () => {\r\n  const [text, setText] = useState('');\r\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\r\n  const [selectedFeature, setSelectedFeature] = useState(null);\r\n  const inputRef = useRef();\r\n  const mapRef = useRef();\r\n  const vectorSourceRef = useRef();\r\n  const vertexSourceRef = useRef();\r\n  const polygonFeatureRef = useRef();\r\n  const overlaysRef = useRef([]);      // overlays for current drawing\r\n  const allOverlaysRef = useRef([]);   // overlays for finished polygons\r\n  const drawingRef = useRef(false);\r\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\r\n  const ghostMarkerRef = useRef(null);\r\n  const modeRef = useRef(mode);\r\n  const selectInteractionRef = useRef(null);\r\n\r\n  // --- Overlay clearing helper (now available everywhere in App) ---\r\n  // Only clears overlays for a specific feature\r\n  function clearPolygonOverlays(feature) {\r\n    if (feature && feature._segmentOverlays) {\r\n      feature._segmentOverlays.forEach(overlay => {\r\n        if (mapRef.current) mapRef.current.removeOverlay(overlay);\r\n      });\r\n      feature._segmentOverlays = [];\r\n    }\r\n  }\r\n\r\n  // Keep modeRef in sync with mode for event handlers\r\n  useEffect(() => {\r\n    modeRef.current = mode;\r\n  }, [mode]);\r\n\r\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\r\n  useEffect(() => {\r\n    const vectorSource = new VectorSource();\r\n    vectorSourceRef.current = vectorSource;\r\n    const vertexSource = new VectorSource();\r\n    vertexSourceRef.current = vertexSource;\r\n\r\n    const vectorLayer = new VectorLayer({\r\n      source: vectorSource,\r\n      style: polygonStyle,\r\n    });\r\n    const vertexLayer = new VectorLayer({\r\n      source: vertexSource,\r\n      style: vertexStyle,\r\n    });\r\n\r\n    const map = new Map({\r\n      target: 'map',\r\n      layers: [\r\n        new TileLayer({ source: new OSM() }),\r\n        vectorLayer,\r\n        vertexLayer,\r\n      ],\r\n      view: new View({\r\n        center: fromLonLat([-95.87, 40.84]),\r\n        zoom: 24,\r\n      }),\r\n    });\r\n    mapRef.current = map;\r\n\r\n    function formatLength(line) {\r\n      const lengthMeters = getLength(line);\r\n      const lengthFeet = lengthMeters * 3.28084;\r\n      return lengthFeet > 5280\r\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\r\n        : lengthFeet.toFixed(2) + \"'\";\r\n    }\r\n\r\n    function createSegmentOverlays(feature, coords) {\r\n      clearPolygonOverlays(feature);\r\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\r\n      feature._segmentOverlays = [];\r\n      for (let i = 1; i < coords.length; i++) {\r\n        const c1 = coords[i - 1];\r\n        const c2 = coords[i];\r\n        const line = new LineString([c1, c2]);\r\n        const length = formatLength(line);\r\n\r\n        // Calculate perpendicular offset direction (in screen pixels)\r\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\r\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\r\n        const dx = pixel2[0] - pixel1[0];\r\n        const dy = pixel2[1] - pixel1[1];\r\n        const len = Math.sqrt(dx * dx + dy * dy);\r\n        // Perpendicular vector (normalized)\r\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\r\n\r\n        // Offset midpoint in screen pixels\r\n        const offsetMidPixel = [\r\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\r\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\r\n        ];\r\n        // Convert back to map coordinates\r\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\r\n\r\n        // Place the tooltip at the offset position\r\n        const tooltip = document.createElement('div');\r\n        tooltip.className = 'segment-tooltip';\r\n        tooltip.innerHTML = length;\r\n\r\n        // Rotate the tooltip if the segment is more vertical than horizontal\r\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\r\n        if (isVertical) {\r\n          tooltip.style.transform = 'rotate(270deg)';\r\n        }\r\n\r\n        const overlay = new Overlay({\r\n          element: tooltip,\r\n          position: offsetMidCoord,\r\n          positioning: 'center-center',\r\n          stopEvent: false,\r\n        });\r\n        mapRef.current.addOverlay(overlay);\r\n        feature._segmentOverlays.push(overlay);\r\n      }\r\n    }\r\n\r\n    // --- Remark segments for a given feature ---\r\n    function remarkPolygonSegments(feature) {\r\n      if (!feature) return;\r\n      const poly = feature.getGeometry();\r\n      const coords = poly.getCoordinates()[0];\r\n      createSegmentOverlays(feature, coords);\r\n    }\r\n\r\n    // --- GHOST MARKER LOGIC ---\r\n    map.on('pointermove', evt => {\r\n      if (modeRef.current === 'draw' && !drawingRef.current) {\r\n        const coord = evt.coordinate;\r\n        // Remove previous ghost marker\r\n        if (ghostMarkerRef.current) {\r\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\r\n        }\r\n        // Add new ghost marker\r\n        const ghost = new Feature(new Point(coord));\r\n        ghost.setStyle(ghostMarkerStyle);\r\n        vertexSourceRef.current.addFeature(ghost);\r\n        ghostMarkerRef.current = ghost;\r\n      } else if (ghostMarkerRef.current) {\r\n        // Remove ghost marker if not in draw mode or drawing started\r\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\r\n        ghostMarkerRef.current = null;\r\n      }\r\n    });\r\n\r\n    // --- MAP CLICK HANDLER ---\r\n    map.on('singleclick', evt => {\r\n      if (modeRef.current === 'draw') {\r\n        const coord = evt.coordinate;\r\n        if (!drawingRef.current) {\r\n          // Remove ghost marker\r\n          if (ghostMarkerRef.current) {\r\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\r\n            ghostMarkerRef.current = null;\r\n          }\r\n          // Start new polygon\r\n          const poly = new Polygon([[coord, coord]]);\r\n          const feature = new Feature(poly);\r\n          feature.setStyle(activePolygonStyle); // Active style\r\n          vectorSource.addFeature(feature);\r\n          polygonFeatureRef.current = feature;\r\n          drawingRef.current = true;\r\n          createSegmentOverlays(feature, [coord, coord]);\r\n        } else {\r\n          // Add vertex\r\n          const feature = polygonFeatureRef.current;\r\n          const poly = feature.getGeometry();\r\n          let coords = poly.getCoordinates()[0];\r\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\r\n          poly.setCoordinates([coords]);\r\n          createSegmentOverlays(feature, coords);\r\n        }\r\n      }\r\n      // No manual selection logic here anymore!\r\n    });\r\n\r\n    function addSegment(direction) {\r\n      if (!drawingRef.current) return;\r\n      const feature = polygonFeatureRef.current;\r\n      const poly = feature.getGeometry();\r\n      let coords = poly.getCoordinates()[0];\r\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\r\n      let dx = 0, dy = 0;\r\n      // Use offsetRef.current instead of OFFSET\r\n      const OFFSET = offsetRef.current;\r\n      switch (direction) {\r\n        case 'ArrowUp': dy = OFFSET; break;\r\n        case 'ArrowDown': dy = -OFFSET; break;\r\n        case 'ArrowLeft': dx = -OFFSET; break;\r\n        case 'ArrowRight': dx = OFFSET; break;\r\n        default: return;\r\n      }\r\n      const newPt = [last[0] + dx, last[1] + dy];\r\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\r\n      poly.setCoordinates([coords]);\r\n      createSegmentOverlays(feature, coords);\r\n    }\r\n\r\n    function handleKeyDown(e) {\r\n      if (\r\n        e.key === 'ArrowUp' ||\r\n        e.key === 'ArrowDown' ||\r\n        e.key === 'ArrowLeft' ||\r\n        e.key === 'ArrowRight'\r\n      ) {\r\n        if (modeRef.current === 'draw') {\r\n          e.preventDefault();\r\n          addSegment(e.key);\r\n        }\r\n      }\r\n      // Finish polygon with Enter\r\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\r\n        const feature = polygonFeatureRef.current;\r\n        const poly = feature.getGeometry();\r\n        let coords = poly.getCoordinates()[0];\r\n        if (coords.length > 2) {\r\n          coords[coords.length - 1] = coords[0];\r\n          poly.setCoordinates([coords]);\r\n          feature.setStyle(polygonStyle); // Set finished style\r\n          createSegmentOverlays(feature, coords);\r\n          drawingRef.current = false;\r\n        }\r\n      }\r\n      // Undo last vertex with Ctrl+Z\r\n      if (\r\n        (e.ctrlKey || e.metaKey) &&\r\n        (e.key === 'z' || e.key === 'Z') &&\r\n        drawingRef.current &&\r\n        modeRef.current === 'draw'\r\n      ) {\r\n        const feature = polygonFeatureRef.current;\r\n        const poly = feature.getGeometry();\r\n        let coords = poly.getCoordinates()[0];\r\n        if (coords.length > 2) {\r\n          // Remove the second-to-last coordinate (last is closing point)\r\n          coords.splice(coords.length - 2, 1);\r\n          poly.setCoordinates([coords]);\r\n          createSegmentOverlays(feature, coords);\r\n        }\r\n      }\r\n    }\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n\r\n    // Expose remarkPolygonSegments for use in handlers\r\n    mapRef.current.remarkPolygonSegments = remarkPolygonSegments;\r\n\r\n    // Clean up on unmount\r\n    return () => {\r\n      // Remove all overlays for all polygons\r\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f));\r\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\r\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\r\n      map.setTarget(null);\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n      // Remove select interaction if present\r\n      if (selectInteractionRef.current) {\r\n        map.removeInteraction(selectInteractionRef.current);\r\n        selectInteractionRef.current = null;\r\n      }\r\n    };\r\n    // eslint-disable-next-line\r\n  }, []); // Only run once on mount\r\n\r\n  // --- Update offsetRef when [text] changes ---\r\n  useEffect(() => {\r\n    const val = parseFloat(text);\r\n    if (!isNaN(val) && val > 0) {\r\n      offsetRef.current = val;\r\n    } else {\r\n      offsetRef.current = OFFSET_REF_DEFAULT;\r\n    }\r\n  }, [text]);\r\n\r\n  // --- Mode and selection logic (add/remove select interaction) ---\r\n  useEffect(() => {\r\n    const map = mapRef.current;\r\n    if (!map) return;\r\n\r\n    // Remove ghost marker if switching out of draw mode\r\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\r\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\r\n      ghostMarkerRef.current = null;\r\n    }\r\n\r\n    // Remove previous select interaction if present\r\n    if (selectInteractionRef.current) {\r\n      map.removeInteraction(selectInteractionRef.current);\r\n      selectInteractionRef.current = null;\r\n    }\r\n\r\n    if (mode === 'select') {\r\n      // Add OpenLayers Select interaction\r\n      const select = new Select({\r\n        layers: [map.getLayers().item(1)], // Only vectorLayer\r\n        style: selectedPolygonStyle\r\n        // filter: feature => feature.getGeometry() instanceof Polygon,\r\n      });\r\n      select.on('select', e => {\r\n        // Only allow single selection\r\n        if (e.selected.length > 0) {\r\n          setSelectedFeature(e.selected[0]);\r\n        } else {\r\n          setSelectedFeature(null);\r\n        }\r\n      });\r\n      map.addInteraction(select);\r\n      selectInteractionRef.current = select;\r\n    } else {\r\n      // Remove selection style if switching out of select mode\r\n      if (selectedFeature) {\r\n        selectedFeature.setStyle(polygonStyle);\r\n        setSelectedFeature(null);\r\n      }\r\n    }\r\n  }, [mode]);\r\n\r\n  // --- No more flipPolygonHorizontally or flipPolygonVertically here ---\r\n  // --- Those are now handled in FlipHorizontal.jsx and FlipVertical.jsx ---\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        id=\"dimension-input\"\r\n        ref={inputRef}\r\n        type=\"number\"\r\n        min=\"0.1\"\r\n        step=\"0.1\"\r\n        value={text}\r\n        onChange={e => setText(e.target.value)}\r\n        placeholder=\"Dimension (ft.)\"\r\n        autoFocus\r\n      />\r\n      <div id=\"map-menu-vert\">\r\n        <div\r\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\r\n          onClick={() => setMode('draw')}\r\n        >\r\n          Draw\r\n        </div>\r\n        <div\r\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\r\n          onClick={() => setMode('select')}\r\n        >\r\n          Select\r\n        </div>\r\n      </div>\r\n      <div id=\"map-menu-horiz\">\r\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} />\r\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} />\r\n        <div className=\"map-button\">Clone</div>\r\n        <div className=\"map-button\">Curve</div>\r\n        <div className=\"map-button\">QuickShape</div>\r\n      </div>\r\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}