{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import'./style.css';import'ol/ol.css';import Map from'ol/Map';import View from'ol/View';import TileLayer from'ol/layer/Tile';import OSM from'ol/source/OSM';import VectorLayer from'ol/layer/Vector';import VectorSource from'ol/source/Vector';import Feature from'ol/Feature';import Polygon from'ol/geom/Polygon';import LineString from'ol/geom/LineString';import Point from'ol/geom/Point';// import Select from 'ol/interaction/Select';\nimport{fromLonLat}from'ol/proj';import{ScaleLine,Rotate}from'ol/control';/* map actions */import FlipHorizButton from'./map-actions/FlipHorizontal';import FlipVertButton from'./map-actions/FlipVertical';import RightClick from'./map-actions/RightClick';import History from'./map-helpers/History';/* map stylings */import{polygonStyle,activePolygonStyle,selectedPolygonStyle,ghostMarkerStyle,highlightSegmentStyle,highlightVertexStyle}from'./ol-styles';/* measurement helpers */import{clearPolygonOverlays,createSegmentOverlays,remarkPolygonSegments,remarkLineSegments,pointToSegmentDistance}from'./map-helpers/Measurements';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const OFFSET_REF_DEFAULT=1.524;const App=()=>{const[text,setText]=useState('');const[mode,setMode]=useState('draw');const[selectedFeature,setSelectedFeature]=useState(null);const[contextMenu,setContextMenu]=useState({visible:false,x:0,y:0,type:null,feature:null,index:null});const[history,setHistory]=useState([]);const[redoStack,setRedoStack]=useState([]);const inputRef=useRef();const mapRef=useRef();const vectorSourceRef=useRef();const polygonFeatureRef=useRef();// const overlaysRef = useRef([]);\n// const allOverlaysRef = useRef([]);\nconst drawingRef=useRef(false);const[drawing,setDrawing]=useState(false);const offsetRef=useRef(OFFSET_REF_DEFAULT);const ghostMarkerRef=useRef(null);const modeRef=useRef(mode);const selectInteractionRef=useRef(null);const vectorLayerRef=useRef();function addHistoryAction(action){setHistory(prev=>[...prev,action]);setRedoStack([]);//clear highlight layer\nif(action.type==='delete-vertex'||action.type==='delete-segment'){const highlightLayer=mapRef.current.getLayers().getArray().find(layer=>layer.get('name')==='highlight');if(highlightLayer){highlightLayer.getSource().clear();}}}function getSnappedCoordinate(map,vectorSource,pointerPixel){let tolerance=arguments.length>3&&arguments[3]!==undefined?arguments[3]:25;let closestCoord=null;let minDist=Infinity;vectorSource.getFeatures().forEach(feature=>{const geom=feature.getGeometry();let coords=[];if(geom.getType()==='Polygon'){coords=geom.getCoordinates()[0];}else if(geom.getType()==='LineString'){coords=geom.getCoordinates();}coords.forEach(coord=>{const pixel=map.getPixelFromCoordinate(coord);const dist=Math.hypot(pointerPixel[0]-pixel[0],pointerPixel[1]-pixel[1]);if(dist<minDist&&dist<tolerance){minDist=dist;closestCoord=coord;}});});return closestCoord;}useEffect(()=>{modeRef.current=mode;},[mode]);useEffect(()=>{const vectorSource=new VectorSource();vectorSourceRef.current=vectorSource;const vectorLayer=new VectorLayer({source:vectorSource,style:polygonStyle});vectorLayerRef.current=vectorLayer;const map=new Map({target:'map',layers:[new TileLayer({source:new OSM()}),vectorLayer],view:new View({center:fromLonLat([-95.87,40.84]),zoom:24})});map.addControl(new ScaleLine({units:'imperial'}));map.addControl(new Rotate({autoHide:false,duration:500}));const highlightSource=new VectorSource();const highlightLayer=new VectorLayer({name:'highlight',source:highlightSource,style:highlightSegmentStyle});map.addLayer(highlightLayer);mapRef.current=map;// Expose remarkPolygonSegments/lineSegments for use in handlers\nmapRef.current.remarkPolygonSegments=feature=>remarkPolygonSegments(feature,mapRef);mapRef.current.remarkLineSegments=feature=>remarkLineSegments(feature,mapRef);map.on('pointermove',evt=>{//GHOST MARKER LOGIC\nif(modeRef.current==='draw'&&!drawingRef.current){const coord=evt.coordinate;const pixel=evt.pixel;const map=mapRef.current;const vectorSource=vectorSourceRef.current;// Try to snap to existing vertices\nconst snappedCoord=getSnappedCoordinate(map,vectorSource,pixel,25)||coord;if(ghostMarkerRef.current){vectorSourceRef.current.removeFeature(ghostMarkerRef.current);}const ghost=new Feature(new Point(snappedCoord));ghost.setStyle(ghostMarkerStyle);vectorSourceRef.current.addFeature(ghost);ghostMarkerRef.current=ghost;}else if(ghostMarkerRef.current){vectorSourceRef.current.removeFeature(ghostMarkerRef.current);ghostMarkerRef.current=null;}else if(modeRef.current==='select'){highlightSource.clear();let found=false;map.forEachFeatureAtPixel(evt.pixel,(feature,layer)=>{if(feature.getGeometry().getType()==='Polygon'||feature.getGeometry().getType()==='LineString'){const coords=feature.getGeometry().getType()==='Polygon'?feature.getGeometry().getCoordinates()[0]:feature.getGeometry().getCoordinates();// Check for vertex hover first\nfor(let i=0;i<coords.length;i++){const pixel=map.getPixelFromCoordinate(coords[i]);const dist=Math.sqrt(Math.pow(evt.pixel[0]-pixel[0],2)+Math.pow(evt.pixel[1]-pixel[1],2));if(dist<8){// 8 pixels tolerance for vertex\nconst vertexFeature=new Feature(new Point(coords[i]));vertexFeature.setStyle(highlightVertexStyle);highlightSource.addFeature(vertexFeature);found=true;return true;// Stop after first found\n}}// If no vertex found, check for segment hover\nfor(let i=0;i<coords.length-1;i++){const seg=[coords[i],coords[i+1]];const pixel1=map.getPixelFromCoordinate(seg[0]);const pixel2=map.getPixelFromCoordinate(seg[1]);const dist=pointToSegmentDistance(evt.pixel,pixel1,pixel2);if(dist<8){// 8 pixels tolerance for segment\nconst segFeature=new Feature(new LineString(seg));segFeature.setStyle(highlightSegmentStyle);highlightSource.addFeature(segFeature);found=true;return true;// Stop after first found\n}}}return found;});}});function drawClick(evt){const coord=evt.coordinate;if(!drawingRef.current){if(ghostMarkerRef.current){vectorSourceRef.current.removeFeature(ghostMarkerRef.current);ghostMarkerRef.current=null;}const pixel=mapRef.current.getPixelFromCoordinate(coord);//custom snapping\nconst snappedCoord=getSnappedCoordinate(mapRef.current,vectorSourceRef.current,pixel,25)||coord;const poly=new Polygon([[snappedCoord,snappedCoord]]);const feature=new Feature(poly);feature.setId(Date.now().toString());feature.setStyle(activePolygonStyle);vectorSource.addFeature(feature);polygonFeatureRef.current=feature;drawingRef.current=true;setDrawing(true);// Track action in history\naddHistoryAction({type:'add-point',featureId:feature.getId(),prevCoords:[],newCoords:[[coord,coord]]});}else{const feature=polygonFeatureRef.current;const poly=feature.getGeometry();let coords=poly.getCoordinates()[0];const prevCoords=[...coords];coords=[...coords.slice(0,-1),coord,coords[coords.length-1]];poly.setCoordinates([coords]);console.log(coords.length);if(coords.length>1){createSegmentOverlays(feature,[coords],mapRef);}addHistoryAction({type:'add-point',featureId:feature.getId(),prevCoords,newCoords:coords});}}function selectClick(evt){const features=map.getFeaturesAtPixel(evt.pixel);const allPolygons=vectorSourceRef.current.getFeatures();if(!features||features.length===0){// Deselect all: reset style for all polygons\nallPolygons.forEach(f=>f.setStyle(polygonStyle));setSelectedFeature(null);return;}// Find the index of the currently selected feature in the features array\nlet currentIdx=-1;// if (selectedFeature) {\n//   currentIdx = features.findIndex(f => f === selectedFeature);\n// }\n// Cycle to the next feature\nconst nextIdx=(currentIdx+1)%features.length;const nextFeature=features[nextIdx];setSelectedFeature(nextFeature);// Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\nallPolygons.forEach(f=>{f.setStyle(f===nextFeature?selectedPolygonStyle:polygonStyle);});}// --- MAP CLICK HANDLER ---\nmap.on('singleclick',evt=>{if(modeRef.current==='draw'){drawClick(evt);}if(modeRef.current==='select'){selectClick(evt);}});function addSegment(direction){if(!drawingRef.current)return;const feature=polygonFeatureRef.current;const poly=feature.getGeometry();let coords=poly.getCoordinates()[0];const last=coords.length===1?coords[0]:coords[coords.length-2];let dx=0,dy=0;const OFFSET=offsetRef.current;switch(direction){case'ArrowUp':dy=OFFSET;break;case'ArrowDown':dy=-OFFSET;break;case'ArrowLeft':dx=-OFFSET;break;case'ArrowRight':dx=OFFSET;break;default:return;}// Rotate the direction vector by the negative of the map's rotation\nconst map=mapRef.current;const rotation=map?map.getView().getRotation():0;const cos=Math.cos(rotation);const sin=Math.sin(rotation);const rotatedDx=dx*cos-dy*sin;const rotatedDy=dx*sin+dy*cos;const newPt=[last[0]+rotatedDx,last[1]+rotatedDy];const prevCoords=[...coords];coords=[...coords.slice(0,-1),newPt,coords[coords.length-1]];poly.setCoordinates([coords]);createSegmentOverlays(feature,[coords],mapRef);// Track action in history\naddHistoryAction({type:'add-point',featureId:feature.getId(),prevCoords,newCoords:coords});}function handleUndo(){let lastActionForRedo=null;setHistory(prev=>{if(prev.length===0)return prev;const lastAction=prev[prev.length-1];lastActionForRedo=lastAction;// Find the feature by ID\nlet feature=null;if(lastAction.featureId){feature=vectorSourceRef.current.getFeatures().find(f=>f.getId()===lastAction.featureId);if(!feature&&polygonFeatureRef.current)feature=polygonFeatureRef.current;}else if(polygonFeatureRef.current){feature=polygonFeatureRef.current;}if(!feature)return prev.slice(0,-1);const prevCoords=lastAction.prevCoords;if(lastAction.type==='delete-segment'){let lineFeature=vectorSourceRef.current.getFeatures().find(f=>f.getId&&f.getId()===lastAction.featureId&&f.getGeometry().getType()==='LineString');if(lineFeature){clearPolygonOverlays(lineFeature,mapRef);vectorSourceRef.current.removeFeature(lineFeature);}const newPoly=new Feature(new Polygon([prevCoords]));if(lastAction.featureId)newPoly.setId(lastAction.featureId);vectorSourceRef.current.addFeature(newPoly);polygonFeatureRef.current=newPoly;if(prevCoords&&prevCoords.length>1){createSegmentOverlays(newPoly,[prevCoords],mapRef);}return prev.slice(0,-1);}if(lastAction.type==='flip-horizontal'||lastAction.type==='flip-vertical'){if(feature){feature.getGeometry().setCoordinates([lastAction.prevCoords]);if(lastAction.prevCoords.length>1){createSegmentOverlays(feature,[lastAction.prevCoords],mapRef);}}return prev.slice(0,-1);}// If undoing would result in no points or just one, remove the feature and reset drawing state\nif(!prevCoords||prevCoords.length<=1){clearPolygonOverlays(feature,mapRef);vectorSourceRef.current.removeFeature(feature);polygonFeatureRef.current=null;drawingRef.current=false;setDrawing(false);return prev.slice(0,-1);}// Otherwise, restore previous geometry\nfeature.getGeometry().setCoordinates([prevCoords]);if(prevCoords.length>1){createSegmentOverlays(feature,[prevCoords],mapRef);}return prev.slice(0,-1);});// Only push to redoStack ONCE per undo, after setHistory runs\nif(lastActionForRedo){setRedoStack(redoPrev=>[...redoPrev,lastActionForRedo]);}}function handleRedo(){setRedoStack(prev=>{if(prev.length===0)return prev;const lastAction=prev[prev.length-1];// Find the feature by ID\nlet feature=null;if(lastAction.featureId){feature=vectorSourceRef.current.getFeatures().find(f=>f.getId()===lastAction.featureId);if(!feature&&polygonFeatureRef.current)feature=polygonFeatureRef.current;}else if(polygonFeatureRef.current){feature=polygonFeatureRef.current;}const newCoords=lastAction.newCoords;if(lastAction.type==='delete-segment'){// Remove the polygon feature\nif(feature){clearPolygonOverlays(feature,mapRef);vectorSourceRef.current.removeFeature(feature);}// Create a new LineString feature with the newCoords\nconst LineString=require('ol/geom/LineString').default;const lineFeature=new Feature(new LineString(newCoords));if(lastAction.featureId)lineFeature.setId(lastAction.featureId);vectorSourceRef.current.addFeature(lineFeature);if(mapRef.current&&mapRef.current.remarkLineSegments){mapRef.current.remarkLineSegments(lineFeature);}setHistory(histPrev=>[...histPrev,lastAction]);return prev.slice(0,-1);}if(lastAction.type==='add-point'||lastAction.type==='delete-vertex'){if(feature){feature.getGeometry().setCoordinates([newCoords]);if(newCoords.length>1){createSegmentOverlays(feature,[newCoords],mapRef);}}setHistory(histPrev=>[...histPrev,lastAction]);return prev.slice(0,-1);}if(lastAction.type==='flip-horizontal'||lastAction.type==='flip-vertical'){if(feature){feature.getGeometry().setCoordinates([lastAction.newCoords]);if(lastAction.newCoords.length>1){createSegmentOverlays(feature,[lastAction.newCoords],mapRef);}}setHistory(histPrev=>[...histPrev,lastAction]);return prev.slice(0,-1);}// Add more redo logic for other action types as needed...\nreturn prev;});}function rotateMapToHighlightedSegment(map,highlightSource){const features=highlightSource.getFeatures();const segFeature=features.find(f=>f.getGeometry().getType()==='LineString');if(!segFeature)return;const coords=segFeature.getGeometry().getCoordinates();if(coords.length<2)return;const[start,end]=coords;const view=map.getView();const currentRotation=view.getRotation();const startPixel=map.getPixelFromCoordinate(start);const endPixel=map.getPixelFromCoordinate(end);// Undo current rotation to get true screen-space angle\nconst cos=Math.cos(-currentRotation);const sin=Math.sin(-currentRotation);const dx=endPixel[0]-startPixel[0];const dy=endPixel[1]-startPixel[1];const unrotatedDx=dx*cos-dy*sin;const unrotatedDy=dx*sin+dy*cos;const angle=Math.atan2(unrotatedDy,unrotatedDx);const rotation=Math.PI/2-angle;// Center on the midpoint of the segment\nconst center=[(start[0]+end[0])/2,(start[1]+end[1])/2];view.animate({center,rotation,duration:600});}function handleKeyDown(e){if(e.key==='ArrowUp'||e.key==='ArrowDown'||e.key==='ArrowLeft'||e.key==='ArrowRight'){if(modeRef.current==='draw'){e.preventDefault();addSegment(e.key);}}if(e.key==='Enter'&&drawingRef.current&&modeRef.current==='draw'){const feature=polygonFeatureRef.current;const poly=feature.getGeometry();let coords=poly.getCoordinates()[0];if(coords.length>2){coords[coords.length-1]=coords[0];poly.setCoordinates([coords]);feature.setStyle(polygonStyle);createSegmentOverlays(feature,[coords],mapRef);drawingRef.current=false;setDrawing(false);}}// ctrl + z\nif((e.ctrlKey||e.metaKey)&&(e.key==='z'||e.key==='Z')){e.preventDefault();handleUndo();}// ctrl + y\nif((e.ctrlKey||e.metaKey)&&(e.key==='y'||e.key==='Y')){e.preventDefault();handleRedo();}//ctrl + r\nif((e.ctrlKey||e.metaKey)&&(e.key==='r'||e.key==='R')){e.preventDefault();const map=mapRef.current;const highlightLayer=map.getLayers().getArray().find(layer=>layer.get('name')==='highlight');if(map&&highlightLayer){rotateMapToHighlightedSegment(map,highlightLayer.getSource());}}}document.addEventListener('keydown',handleKeyDown);// Clean up on unmount\nreturn()=>{vectorSource.getFeatures().forEach(f=>clearPolygonOverlays(f,mapRef));// overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n// allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\nmap.setTarget(null);document.removeEventListener('keydown',handleKeyDown);if(selectInteractionRef.current){map.removeInteraction(selectInteractionRef.current);selectInteractionRef.current=null;}};},[]);useEffect(()=>{const val=parseFloat(text);if(!isNaN(val)&&val>0){offsetRef.current=val*0.3048;}else{offsetRef.current=OFFSET_REF_DEFAULT;}},[text]);useEffect(()=>{const map=mapRef.current;if(!map)return;if(mode!=='draw'&&ghostMarkerRef.current){vectorSourceRef.current.removeFeature(ghostMarkerRef.current);ghostMarkerRef.current=null;}if(selectInteractionRef.current){map.removeInteraction(selectInteractionRef.current);selectInteractionRef.current=null;}return()=>{if(selectInteractionRef.current){map.removeInteraction(selectInteractionRef.current);selectInteractionRef.current=null;}};},[mode]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{id:\"dimension-input-container\",children:/*#__PURE__*/_jsx(\"input\",{id:\"dimension-input\",ref:inputRef,type:\"text\",value:text,onChange:e=>setText(e.target.value),placeholder:\"Dimension (ft.)\",autoFocus:true,autoComplete:\"off\"})}),/*#__PURE__*/_jsxs(\"div\",{id:\"map-menu-vert\",children:[/*#__PURE__*/_jsx(\"button\",{className:\"map-button\".concat(mode==='draw'?' active':''),onClick:()=>setMode('draw'),disabled:mode==='draw'&&drawing,children:\"Draw\"}),/*#__PURE__*/_jsx(\"button\",{className:\"map-button\".concat(mode==='select'?' active':''),onClick:()=>setMode('select'),disabled:mode==='draw'&&drawing,children:\"Select\"})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"map-menu-horiz\",children:[/*#__PURE__*/_jsx(FlipHorizButton,{selectedFeature:selectedFeature,mapRef:mapRef,addHistoryAction:addHistoryAction}),/*#__PURE__*/_jsx(FlipVertButton,{selectedFeature:selectedFeature,mapRef:mapRef,addHistoryAction:addHistoryAction}),/*#__PURE__*/_jsx(\"div\",{className:\"map-button\",children:\"Clone\"}),/*#__PURE__*/_jsx(\"div\",{className:\"map-button\",children:\"Curve\"}),/*#__PURE__*/_jsx(\"div\",{className:\"map-button\",children:\"QuickShape\"})]}),/*#__PURE__*/_jsx(\"div\",{id:\"map\"}),/*#__PURE__*/_jsx(RightClick,{mapRef:mapRef,vectorSourceRef:vectorSourceRef,contextMenu:contextMenu,setContextMenu:setContextMenu,clearPolygonOverlays:feature=>clearPolygonOverlays(feature,mapRef),addHistoryAction:addHistoryAction}),/*#__PURE__*/_jsx(History,{history:history,redoStack:redoStack})]});};export default App;","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","fromLonLat","ScaleLine","Rotate","FlipHorizButton","FlipVertButton","RightClick","History","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","clearPolygonOverlays","createSegmentOverlays","remarkPolygonSegments","remarkLineSegments","pointToSegmentDistance","jsx","_jsx","jsxs","_jsxs","OFFSET_REF_DEFAULT","App","text","setText","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","polygonFeatureRef","drawingRef","drawing","setDrawing","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","getSource","clear","getSnappedCoordinate","map","vectorSource","pointerPixel","tolerance","arguments","length","undefined","closestCoord","minDist","Infinity","getFeatures","forEach","geom","getGeometry","coords","getType","getCoordinates","coord","pixel","getPixelFromCoordinate","dist","Math","hypot","vectorLayer","source","style","target","layers","view","center","zoom","addControl","units","autoHide","duration","highlightSource","name","addLayer","on","evt","coordinate","snappedCoord","removeFeature","ghost","setStyle","addFeature","found","forEachFeatureAtPixel","i","sqrt","pow","vertexFeature","seg","pixel1","pixel2","segFeature","drawClick","poly","setId","Date","now","toString","featureId","getId","prevCoords","newCoords","slice","setCoordinates","console","log","selectClick","features","getFeaturesAtPixel","allPolygons","f","currentIdx","nextIdx","nextFeature","addSegment","direction","last","dx","dy","OFFSET","rotation","getView","getRotation","cos","sin","rotatedDx","rotatedDy","newPt","handleUndo","lastActionForRedo","lastAction","lineFeature","newPoly","redoPrev","handleRedo","require","default","histPrev","rotateMapToHighlightedSegment","start","end","currentRotation","startPixel","endPixel","unrotatedDx","unrotatedDy","angle","atan2","PI","animate","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","document","addEventListener","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","children","id","ref","value","onChange","placeholder","autoFocus","autoComplete","className","concat","onClick","disabled"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport History from './map-helpers/History';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  remarkPolygonSegments,\n  remarkLineSegments,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 1.524;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  // const overlaysRef = useRef([]);\n  // const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n\n    return closestCoord;\n  }\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    map.addControl(new Rotate({ autoHide: false, duration: 500 }));\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments/lineSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = (feature) => remarkPolygonSegments(feature, mapRef);\n    mapRef.current.remarkLineSegments = (feature) => remarkLineSegments(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else if (modeRef.current === 'select') {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n        const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        const feature = new Feature(poly);\n\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n\n        // Track action in history\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]],\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n      }\n    }\n\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Find the index of the currently selected feature in the features array\n      let currentIdx = -1;\n      // if (selectedFeature) {\n      //   currentIdx = features.findIndex(f => f === selectedFeature);\n      // }\n\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n\n      // Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\n      allPolygons.forEach(f => {\n        f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      });\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n          );\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            createSegmentOverlays(newPoly, [prevCoords], mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.prevCoords], mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, [prevCoords], mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, [newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [\n        (start[0] + end[0]) / 2,\n        (start[1] + end[1]) / 2\n      ];\n\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      // overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      // allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  return (\n    <div>\n      <div id=\"dimension-input-container\">\n        <input\n          id=\"dimension-input\"\n          ref={inputRef}\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n          placeholder=\"Dimension (ft.)\"\n          autoFocus\n          autoComplete='off'\n        />\n      </div>\n      <div id=\"map-menu-vert\">\n        <button\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n          disabled={mode === 'draw' && drawing}>\n          Draw\n        </button>\n        <button\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n          disabled={mode === 'draw' && drawing}>\n          Select\n        </button>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n      />\n      <History history={history} redoStack={redoStack} />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}