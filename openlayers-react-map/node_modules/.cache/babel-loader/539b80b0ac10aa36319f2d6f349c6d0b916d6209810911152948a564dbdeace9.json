{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { always, noModifierKeys, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromUserCoordinate, getUserProjection } from '../proj.js';\nimport { getStrideForLayout } from '../geom/SimpleGeometry.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/Geometry.js\").Type} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the draw interaction.\n */\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n/**\n * @enum {string}\n */\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nvar DrawEvent = /** @class */function (_super) {\n  __extends(DrawEvent, _super);\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  function DrawEvent(type, feature) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    _this.feature = feature;\n    return _this;\n  }\n  return DrawEvent;\n}(Event);\nexport { DrawEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nvar Draw = /** @class */function (_super) {\n  __extends(Draw, _super);\n  /**\n   * @param {Options} options Options.\n   */\n  function Draw(options) {\n    var _this = this;\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    _this = _super.call(this, pointerOptions) || this;\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n    _this.un;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.shouldHandle_ = false;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    _this.downPx_ = null;\n    /**\n     * @type {?}\n     * @private\n     */\n    _this.downTimeout_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    _this.lastDragTime_;\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n    _this.pointerType_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.freehand_ = false;\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource|null}\n     * @private\n     */\n    _this.source_ = options.source ? options.source : null;\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>|null}\n     * @private\n     */\n    _this.features_ = options.features ? options.features : null;\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    _this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/Geometry.js\").Type}\n     * @private\n     */\n    _this.type_ = /** @type {import(\"../geom/Geometry.js\").Type} */options.type;\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    _this.mode_ = getMode(_this.type_);\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    _this.stopClick_ = !!options.stopClick;\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    _this.minPoints_ = options.minPoints ? options.minPoints : _this.mode_ === Mode.POLYGON ? 3 : 2;\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    _this.maxPoints_ = _this.mode_ === Mode.CIRCLE ? 2 : options.maxPoints ? options.maxPoints : Infinity;\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n    /**\n     * @private\n     * @type {import(\"../geom/GeometryLayout\").default}\n     */\n    _this.geometryLayout_ = options.geometryLayout ? options.geometryLayout : GeometryLayout.XY;\n    var geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      var mode_1 = _this.mode_;\n      if (mode_1 === Mode.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          var circle = geometry ? (/** @type {Circle} */geometry) : new Circle([NaN, NaN]);\n          var center = fromUserCoordinate(coordinates[0], projection);\n          var squaredLength = squaredCoordinateDistance(center, fromUserCoordinate(coordinates[coordinates.length - 1], projection));\n          circle.setCenterAndRadius(center, Math.sqrt(squaredLength), this.geometryLayout_);\n          var userProjection = getUserProjection();\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n          return circle;\n        };\n      } else {\n        var Constructor_1;\n        if (mode_1 === Mode.POINT) {\n          Constructor_1 = Point;\n        } else if (mode_1 === Mode.LINE_STRING) {\n          Constructor_1 = LineString;\n        } else if (mode_1 === Mode.POLYGON) {\n          Constructor_1 = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          if (geometry) {\n            if (mode_1 === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])], this.geometryLayout_);\n              } else {\n                geometry.setCoordinates([], this.geometryLayout_);\n              }\n            } else {\n              geometry.setCoordinates(coordinates, this.geometryLayout_);\n            }\n          } else {\n            geometry = new Constructor_1(coordinates, this.geometryLayout_);\n          }\n          return geometry;\n        };\n      }\n    }\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    _this.geometryFunction_ = geometryFunction;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    _this.finishCoordinate_ = null;\n    /**\n     * Sketch feature.\n     * @type {Feature<import('../geom/SimpleGeometry.js').default>}\n     * @private\n     */\n    _this.sketchFeature_ = null;\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n    _this.sketchPoint_ = null;\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    _this.sketchCoords_ = null;\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n    _this.sketchLine_ = null;\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    _this.sketchLineCoords_ = null;\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    _this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    _this.geometryName_ = options.geometryName;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : noModifierKeys;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.freehandCondition_;\n    if (options.freehand) {\n      _this.freehandCondition_ = always;\n    } else {\n      _this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n    _this.addChangeListener(InteractionProperty.ACTIVE, _this.updateState_);\n    return _this;\n  }\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  Draw.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n    this.updateState_();\n  };\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Draw.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  Draw.prototype.handleEvent = function (event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    var move = event.type === MapBrowserEventType.POINTERMOVE;\n    var pass = true;\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      var now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (event.originalEvent.pointerType === 'mouse' || event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n    return _super.prototype.handleEvent.call(this, event) && pass;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Draw.prototype.handleDownEvent = function (event) {\n    this.shouldHandle_ = !this.freehand_;\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function () {\n        this.handlePointerMove_(new MapBrowserEvent(MapBrowserEventType.POINTERMOVE, event.map, event.originalEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Draw.prototype.handleUpEvent = function (event) {\n    var pass = true;\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n      this.handlePointerMove_(event);\n      if (this.shouldHandle_) {\n        var startingToDraw = !this.finishCoordinate_;\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (!this.freehand_ && (!startingToDraw || this.mode_ === Mode.POINT)) {\n          if (this.atFinish_(event.pixel)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n    return pass;\n  };\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n  Draw.prototype.handlePointerMove_ = function (event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event.coordinate);\n    } else {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n    }\n  };\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  Draw.prototype.atFinish_ = function (pixel) {\n    var at = false;\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n      var mode = this.mode_;\n      if (mode === Mode.POINT) {\n        at = true;\n      } else if (mode === Mode.CIRCLE) {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === Mode.POLYGON) {\n        var sketchCoords = /** @type {PolyCoordType} */this.sketchCoords_;\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n      if (potentiallyDone) {\n        var map = this.getMap();\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  };\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n  Draw.prototype.createOrUpdateSketchPoint_ = function (coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n  Draw.prototype.createOrUpdateCustomSketchLine_ = function (geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n    var ring = geometry.getLinearRing(0);\n    var sketchLineGeom = this.sketchLine_.getGeometry();\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n      sketchLineGeom.changed();\n    }\n  };\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n  Draw.prototype.startDrawing_ = function (start) {\n    var projection = this.getMap().getView().getProjection();\n    var stride = getStrideForLayout(this.geometryLayout_);\n    while (start.length < stride) {\n      start.push(0);\n    }\n    this.finishCoordinate_ = start;\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    var geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n  Draw.prototype.modifyDrawing_ = function (coordinate) {\n    var map = this.getMap();\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = map.getView().getProjection();\n    var stride = getStrideForLayout(this.geometryLayout_);\n    var coordinates, last;\n    while (coordinate.length < stride) {\n      coordinate.push(0);\n    }\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(/** @type {!LineCoordType} */this.sketchCoords_, geometry, projection);\n    if (this.sketchPoint_) {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    if (geometry.getType() === 'Polygon' && this.mode_ !== Mode.POLYGON) {\n      this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */geometry);\n    } else if (this.sketchLineCoords_) {\n      var sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n  Draw.prototype.addToDrawing_ = function (coordinate) {\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var done;\n    var coordinates;\n    var mode = this.mode_;\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */this.sketchCoords_;\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n  Draw.prototype.removeLastPoint = function () {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var coordinates;\n    var mode = this.mode_;\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      coordinates = /** @type {LineCoordType} */this.sketchCoords_;\n      coordinates.splice(-2, 1);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n        var finishCoordinate = this.finishCoordinate_.slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n      this.geometryFunction_(coordinates, geometry, projection);\n      if (geometry.getType() === 'Polygon' && this.sketchLine_) {\n        this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */geometry);\n      }\n    } else if (mode === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      var sketchLineGeom = this.sketchLine_.getGeometry();\n      if (coordinates.length >= 2) {\n        var finishCoordinate = coordinates[coordinates.length - 2].slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    if (coordinates.length === 1) {\n      this.abortDrawing();\n    }\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  Draw.prototype.finishDrawing = function () {\n    var sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    var coordinates = this.sketchCoords_;\n    var geometry = sketchFeature.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    }\n    // cast multi-part geometries\n    if (this.type_ === 'MultiPoint') {\n      sketchFeature.setGeometry(new MultiPoint([(/** @type {PointCoordType} */coordinates)]));\n    } else if (this.type_ === 'MultiLineString') {\n      sketchFeature.setGeometry(new MultiLineString([(/** @type {LineCoordType} */coordinates)]));\n    } else if (this.type_ === 'MultiPolygon') {\n      sketchFeature.setGeometry(new MultiPolygon([(/** @type {PolyCoordType} */coordinates)]));\n    }\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The sketch feature (or null if none).\n   * @private\n   */\n  Draw.prototype.abortDrawing_ = function () {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n  Draw.prototype.abortDrawing = function () {\n    var sketchFeature = this.abortDrawing_();\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  };\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n  Draw.prototype.appendCoordinates = function (coordinates) {\n    var mode = this.mode_;\n    var newDrawing = !this.sketchFeature_;\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n    var sketchCoords;\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      sketchCoords = /** @type {LineCoordType} */this.sketchCoords_;\n    } else if (mode === Mode.POLYGON) {\n      sketchCoords = this.sketchCoords_ && this.sketchCoords_.length ? /** @type {PolyCoordType} */this.sketchCoords_[0] : [];\n    } else {\n      return;\n    }\n    if (newDrawing) {\n      sketchCoords.shift();\n    }\n    // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n    sketchCoords.pop();\n    // Append coordinate list\n    for (var i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n    var ending = coordinates[coordinates.length - 1];\n    // Duplicate last coordinate for sketch drawing (cursor position)\n    this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  };\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n  Draw.prototype.extend = function (feature) {\n    var geometry = feature.getGeometry();\n    var lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  Draw.prototype.updateSketchFeatures_ = function () {\n    var sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    var overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n  /**\n   * @private\n   */\n  Draw.prototype.updateState_ = function () {\n    var map = this.getMap();\n    var active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n    this.overlay_.setMap(active ? map : null);\n  };\n  return Draw;\n}(PointerInteraction);\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * {@link import(\"../geom/Circle.js\").Circle} geometry.\n * @param {number} [opt_sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [opt_angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry, projection) {\n    var center = fromUserCoordinate(/** @type {LineCoordType} */coordinates[0], projection);\n    var end = fromUserCoordinate(/** @type {LineCoordType} */coordinates[coordinates.length - 1], projection);\n    var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ? (/** @type {Polygon} */opt_geometry) : fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle;\n    if (!opt_angle && opt_angle !== 0) {\n      var x = end[0] - center[0];\n      var y = end[1] - center[1];\n      angle = Math.atan2(y, x);\n    }\n    makeRegular(geometry, center, radius, angle);\n    var userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, opt_geometry, projection) {\n    var extent = boundingExtent(/** @type {LineCoordType} */[coordinates[0], coordinates[coordinates.length - 1]].map(function (coordinate) {\n      return fromUserCoordinate(coordinate, projection);\n    }));\n    var boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n    var geometry = opt_geometry;\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    var userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n/**\n * Get the drawing mode.  The mode for multi-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/Geometry.js\").Type} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      return Mode.POINT;\n    case 'LineString':\n    case 'MultiLineString':\n      return Mode.LINE_STRING;\n    case 'Polygon':\n    case 'MultiPolygon':\n      return Mode.POLYGON;\n    case 'Circle':\n      return Mode.CIRCLE;\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\nexport default Draw;","map":{"version":3,"names":["Circle","Event","EventType","Feature","GeometryLayout","InteractionProperty","LineString","MapBrowserEvent","MapBrowserEventType","MultiLineString","MultiPoint","MultiPolygon","Point","PointerInteraction","Polygon","fromCircle","makeRegular","VectorLayer","VectorSource","FALSE","TRUE","always","noModifierKeys","shiftKeyOnly","boundingExtent","getBottomLeft","getBottomRight","getTopLeft","getTopRight","createEditingStyle","fromUserCoordinate","getUserProjection","getStrideForLayout","squaredDistance","squaredCoordinateDistance","Mode","POINT","LINE_STRING","POLYGON","CIRCLE","DrawEventType","DRAWSTART","DRAWEND","DRAWABORT","DrawEvent","_super","__extends","type","feature","_this","call","Draw","options","pointerOptions","stopDown","on","once","un","shouldHandle_","downPx_","downTimeout_","lastDragTime_","pointerType_","freehand_","source_","source","features_","features","snapTolerance_","snapTolerance","type_","mode_","getMode","stopClick_","stopClick","minPoints_","minPoints","maxPoints_","maxPoints","Infinity","finishCondition_","finishCondition","geometryLayout_","geometryLayout","XY","geometryFunction","mode_1","coordinates","geometry","projection","circle","NaN","center","squaredLength","length","setCenterAndRadius","Math","sqrt","userProjection","transform","Constructor_1","setCoordinates","concat","geometryFunction_","dragVertexDelay_","dragVertexDelay","undefined","finishCoordinate_","sketchFeature_","sketchPoint_","sketchCoords_","sketchLine_","sketchLineCoords_","squaredClickTolerance_","clickTolerance","overlay_","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileInteracting","geometryName_","geometryName","condition_","condition","freehandCondition_","freehand","freehandCondition","addChangeListener","ACTIVE","updateState_","prototype","setMap","map","getOverlay","handleEvent","event","originalEvent","CONTEXTMENU","preventDefault","move","POINTERMOVE","pass","POINTERDRAG","now","Date","pixel","clearTimeout","addToDrawing_","coordinate","POINTERDOWN","getPointerCount","handlePointerMove_","pointerType","DBLCLICK","handleDownEvent","startDrawing_","setTimeout","frameState","bind","handleUpEvent","startingToDraw","finishDrawing","atFinish_","abortDrawing","downPx","clickPx","dx","dy","modifyDrawing_","createOrUpdateSketchPoint_","slice","at","potentiallyDone","potentiallyFinishCoordinates","mode","sketchCoords","getMap","i","ii","finishCoordinate","finishPixel","getPixelFromCoordinate","updateSketchFeatures_","sketchPointGeom","getGeometry","createOrUpdateCustomSketchLine_","ring","getLinearRing","sketchLineGeom","getFlatCoordinates","getLayout","setGeometry","setFlatCoordinates","changed","start","getView","getProjection","stride","push","setGeometryName","dispatchEvent","last","getType","done","pop","removeLastPoint","splice","sketchFeature","abortDrawing_","getCoordinates","addFeature","getSource","clear","appendCoordinates","newDrawing","shift","ending","extend","lineString","sketchFeatures","overlaySource","addFeatures","active","getActive","styles","resolution","createRegularPolygon","opt_sides","opt_angle","opt_geometry","end","radius","angle","x","y","atan2","createBox","extent","boxCoordinates","Error"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\interaction\\Draw.js"],"sourcesContent":["/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport {always, noModifierKeys, shiftKeyOnly} from '../events/condition.js';\nimport {\n  boundingExtent,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../extent.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {fromUserCoordinate, getUserProjection} from '../proj.js';\nimport {getStrideForLayout} from '../geom/SimpleGeometry.js';\nimport {squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/Geometry.js\").Type} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish. Must be greater than `0`.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished. Not used when drawing\n * POINT or MULTI_POINT geometries.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition.noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition.shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n * @property {GeometryLayout} [geometryLayout='XY'] Layout of the\n * feature geometries created by the draw interaction.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default,\n *     import(\"../proj/Projection.js\").default):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nconst Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle',\n};\n\n/**\n * @enum {string}\n */\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nexport class DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n    super(type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'drawabort'|'drawend'|'drawstart', DrawEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'drawabort'|'drawend'|'drawstart', Return>} DrawOnSignature\n */\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DrawOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DrawOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {?}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * Pointer type of the last pointermove event\n     * @type {string}\n     * @private\n     */\n    this.pointerType_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource|null}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>|null}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/Geometry.js\").Type}\n     * @private\n     */\n    this.type_ = /** @type {import(\"../geom/Geometry.js\").Type} */ (\n      options.type\n    );\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints\n      ? options.minPoints\n      : this.mode_ === Mode.POLYGON\n      ? 3\n      : 2;\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ =\n      this.mode_ === Mode.CIRCLE\n        ? 2\n        : options.maxPoints\n        ? options.maxPoints\n        : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition\n      ? options.finishCondition\n      : TRUE;\n\n    /**\n     * @private\n     * @type {import(\"../geom/GeometryLayout\").default}\n     */\n    this.geometryLayout_ = options.geometryLayout\n      ? options.geometryLayout\n      : GeometryLayout.XY;\n\n    let geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      const mode = this.mode_;\n      if (mode === Mode.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          const circle = geometry\n            ? /** @type {Circle} */ (geometry)\n            : new Circle([NaN, NaN]);\n          const center = fromUserCoordinate(coordinates[0], projection);\n          const squaredLength = squaredCoordinateDistance(\n            center,\n            fromUserCoordinate(coordinates[coordinates.length - 1], projection)\n          );\n          circle.setCenterAndRadius(\n            center,\n            Math.sqrt(squaredLength),\n            this.geometryLayout_\n          );\n          const userProjection = getUserProjection();\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n          return circle;\n        };\n      } else {\n        let Constructor;\n        if (mode === Mode.POINT) {\n          Constructor = Point;\n        } else if (mode === Mode.LINE_STRING) {\n          Constructor = LineString;\n        } else if (mode === Mode.POLYGON) {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default|undefined} geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, geometry, projection) {\n          if (geometry) {\n            if (mode === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates(\n                  [coordinates[0].concat([coordinates[0][0]])],\n                  this.geometryLayout_\n                );\n              } else {\n                geometry.setCoordinates([], this.geometryLayout_);\n              }\n            } else {\n              geometry.setCoordinates(coordinates, this.geometryLayout_);\n            }\n          } else {\n            geometry = new Constructor(coordinates, this.geometryLayout_);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ =\n      options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature<import('../geom/SimpleGeometry.js').default>}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance\n      ? options.clickTolerance * options.clickTolerance\n      : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition\n        ? options.freehandCondition\n        : shiftKeyOnly;\n    }\n\n    this.addChangeListener(InteractionProperty.ACTIVE, this.updateState_);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.originalEvent.preventDefault();\n    }\n    this.freehand_ =\n      this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n    if (\n      !this.freehand_ &&\n      this.lastDragTime_ &&\n      event.type === MapBrowserEventType.POINTERDRAG\n    ) {\n      const now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDRAG &&\n      this.sketchFeature_ !== null\n    ) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDOWN\n    ) {\n      pass = false;\n    } else if (move && this.getPointerCount() < 2) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.originalEvent.preventDefault();\n        }\n      } else if (\n        event.originalEvent.pointerType === 'mouse' ||\n        (event.type === MapBrowserEventType.POINTERDRAG &&\n          this.downTimeout_ === undefined)\n      ) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return super.handleEvent(event) && pass;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event.coordinate);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(\n        function () {\n          this.handlePointerMove_(\n            new MapBrowserEvent(\n              MapBrowserEventType.POINTERMOVE,\n              event.map,\n              event.originalEvent,\n              false,\n              event.frameState\n            )\n          );\n        }.bind(this),\n        this.dragVertexDelay_\n      );\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(event) {\n    let pass = true;\n\n    if (this.getPointerCount() === 0) {\n      if (this.downTimeout_) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n\n      this.handlePointerMove_(event);\n\n      if (this.shouldHandle_) {\n        const startingToDraw = !this.finishCoordinate_;\n        if (startingToDraw) {\n          this.startDrawing_(event.coordinate);\n        }\n        if (!startingToDraw && this.freehand_) {\n          this.finishDrawing();\n        } else if (\n          !this.freehand_ &&\n          (!startingToDraw || this.mode_ === Mode.POINT)\n        ) {\n          if (this.atFinish_(event.pixel)) {\n            if (this.finishCondition_(event)) {\n              this.finishDrawing();\n            }\n          } else {\n            this.addToDrawing_(event.coordinate);\n          }\n        }\n        pass = false;\n      } else if (this.freehand_) {\n        this.abortDrawing();\n      }\n    }\n\n    if (!pass && this.stopClick_) {\n      event.preventDefault();\n    }\n    return pass;\n  }\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n  handlePointerMove_(event) {\n    this.pointerType_ = event.originalEvent.pointerType;\n    if (\n      this.downPx_ &&\n      ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))\n    ) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_\n        ? squaredDistance > this.squaredClickTolerance_\n        : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event.coordinate);\n    } else {\n      this.createOrUpdateSketchPoint_(event.coordinate.slice());\n    }\n  }\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  atFinish_(pixel) {\n    let at = false;\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      const mode = this.mode_;\n      if (mode === Mode.POINT) {\n        at = true;\n      } else if (mode === Mode.CIRCLE) {\n        at = this.sketchCoords_.length === 2;\n      } else if (mode === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (mode === Mode.POLYGON) {\n        const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [\n          sketchCoords[0][0],\n          sketchCoords[0][sketchCoords[0].length - 2],\n        ];\n      }\n      if (potentiallyDone) {\n        const map = this.getMap();\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  }\n\n  /**\n   * @param {import(\"../coordinate\").Coordinate} coordinates Coordinate.\n   * @private\n   */\n  createOrUpdateSketchPoint_(coordinates) {\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * @param {import(\"../geom/Polygon.js\").default} geometry Polygon geometry.\n   * @private\n   */\n  createOrUpdateCustomSketchLine_(geometry) {\n    if (!this.sketchLine_) {\n      this.sketchLine_ = new Feature();\n    }\n    const ring = geometry.getLinearRing(0);\n    let sketchLineGeom = this.sketchLine_.getGeometry();\n    if (!sketchLineGeom) {\n      sketchLineGeom = new LineString(\n        ring.getFlatCoordinates(),\n        ring.getLayout()\n      );\n      this.sketchLine_.setGeometry(sketchLineGeom);\n    } else {\n      sketchLineGeom.setFlatCoordinates(\n        ring.getLayout(),\n        ring.getFlatCoordinates()\n      );\n      sketchLineGeom.changed();\n    }\n  }\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} start Start coordinate.\n   * @private\n   */\n  startDrawing_(start) {\n    const projection = this.getMap().getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    while (start.length < stride) {\n      start.push(0);\n    }\n    this.finishCoordinate_ = start;\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    const geometry = this.geometryFunction_(\n      this.sketchCoords_,\n      undefined,\n      projection\n    );\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @private\n   */\n  modifyDrawing_(coordinate) {\n    const map = this.getMap();\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = map.getView().getProjection();\n    const stride = getStrideForLayout(this.geometryLayout_);\n    let coordinates, last;\n    while (coordinate.length < stride) {\n      coordinate.push(0);\n    }\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(map.getPixelFromCoordinate(coordinate))) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n      /** @type {!LineCoordType} */ (this.sketchCoords_),\n      geometry,\n      projection\n    );\n    if (this.sketchPoint_) {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    if (geometry.getType() === 'Polygon' && this.mode_ !== Mode.POLYGON) {\n      this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n    } else if (this.sketchLineCoords_) {\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n  addToDrawing_(coordinate) {\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let done;\n    let coordinates;\n    const mode = this.mode_;\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (mode === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    this.createOrUpdateSketchPoint_(coordinate.slice());\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  }\n\n  /**\n   * Remove last point of the feature currently being drawn. Does not do anything when\n   * drawing POINT or MULTI_POINT geometries.\n   * @api\n   */\n  removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let coordinates;\n    const mode = this.mode_;\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      coordinates.splice(-2, 1);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n        const finishCoordinate = this.finishCoordinate_.slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n      this.geometryFunction_(coordinates, geometry, projection);\n      if (geometry.getType() === 'Polygon' && this.sketchLine_) {\n        this.createOrUpdateCustomSketchLine_(/** @type {Polygon} */ (geometry));\n      }\n    } else if (mode === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      coordinates.splice(-2, 1);\n      const sketchLineGeom = this.sketchLine_.getGeometry();\n      if (coordinates.length >= 2) {\n        const finishCoordinate = coordinates[coordinates.length - 2].slice();\n        coordinates[coordinates.length - 1] = finishCoordinate;\n        this.createOrUpdateSketchPoint_(finishCoordinate);\n      }\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    if (coordinates.length === 1) {\n      this.abortDrawing();\n    }\n\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    let coordinates = this.sketchCoords_;\n    const geometry = sketchFeature.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */ (coordinates)[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === 'MultiPoint') {\n      sketchFeature.setGeometry(\n        new MultiPoint([/** @type {PointCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === 'MultiLineString') {\n      sketchFeature.setGeometry(\n        new MultiLineString([/** @type {LineCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === 'MultiPolygon') {\n      sketchFeature.setGeometry(\n        new MultiPolygon([/** @type {PolyCoordType} */ (coordinates)])\n      );\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature<import(\"../geom/SimpleGeometry.js\").default>|null} The sketch feature (or null if none).\n   * @private\n   */\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n  abortDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  }\n\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon. If no geometry is being drawn, a new one will be created.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended to\n   * the coordinate array.\n   * @api\n   */\n  appendCoordinates(coordinates) {\n    const mode = this.mode_;\n    const newDrawing = !this.sketchFeature_;\n    if (newDrawing) {\n      this.startDrawing_(coordinates[0]);\n    }\n    /** @type {LineCoordType} */\n    let sketchCoords;\n    if (mode === Mode.LINE_STRING || mode === Mode.CIRCLE) {\n      sketchCoords = /** @type {LineCoordType} */ (this.sketchCoords_);\n    } else if (mode === Mode.POLYGON) {\n      sketchCoords =\n        this.sketchCoords_ && this.sketchCoords_.length\n          ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]\n          : [];\n    } else {\n      return;\n    }\n\n    if (newDrawing) {\n      sketchCoords.shift();\n    }\n\n    // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n    sketchCoords.pop();\n\n    // Append coordinate list\n    for (let i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n\n    const ending = coordinates[coordinates.length - 1];\n    // Duplicate last coordinate for sketch drawing (cursor position)\n    this.addToDrawing_(ending);\n    this.modifyDrawing_(ending);\n  }\n\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.sketchPoint_ = new Feature(new Point(last));\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    const overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n\n  /**\n   * @private\n   */\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n    this.overlay_.setMap(active ? map : null);\n  }\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of a\n * {@link import(\"../geom/Circle.js\").Circle} geometry.\n * @param {number} [opt_sides] Number of sides of the regular polygon.\n *     Default is 32.\n * @param {number} [opt_angle] Angle of the first point in counter-clockwise\n *     radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry, projection) {\n    const center = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[0],\n      projection\n    );\n    const end = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[coordinates.length - 1],\n      projection\n    );\n    const radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    const geometry = opt_geometry\n      ? /** @type {Polygon} */ (opt_geometry)\n      : fromCircle(new Circle(center), opt_sides);\n\n    let angle = opt_angle;\n    if (!opt_angle && opt_angle !== 0) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      angle = Math.atan2(y, x);\n    }\n    makeRegular(geometry, center, radius, angle);\n\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, opt_geometry, projection) {\n    const extent = boundingExtent(\n      /** @type {LineCoordType} */ ([\n        coordinates[0],\n        coordinates[coordinates.length - 1],\n      ]).map(function (coordinate) {\n        return fromUserCoordinate(coordinate, projection);\n      })\n    );\n    const boxCoordinates = [\n      [\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent),\n      ],\n    ];\n    let geometry = opt_geometry;\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Get the drawing mode.  The mode for multi-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/Geometry.js\").Type} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  switch (type) {\n    case 'Point':\n    case 'MultiPoint':\n      return Mode.POINT;\n    case 'LineString':\n    case 'MultiLineString':\n      return Mode.LINE_STRING;\n    case 'Polygon':\n    case 'MultiPolygon':\n      return Mode.POLYGON;\n    case 'Circle':\n      return Mode.CIRCLE;\n    default:\n      throw new Error('Invalid type: ' + type);\n  }\n}\n\nexport default Draw;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}