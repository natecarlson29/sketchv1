{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { closestSquaredDistanceXY, containsXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { squaredDistance as squaredDx } from '../math.js';\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nvar MultiPoint = /** @class */function (_super) {\n  __extends(MultiPoint, _super);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  function MultiPoint(coordinates, opt_layout) {\n    var _this = _super.call(this) || this;\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n    } else {\n      _this.setCoordinates(/** @type {Array<import(\"../coordinate.js\").Coordinate>} */coordinates, opt_layout);\n    }\n    return _this;\n  }\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  MultiPoint.prototype.appendPoint = function (point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  MultiPoint.prototype.clone = function () {\n    var multiPoint = new MultiPoint(this.flatCoordinates.slice(), this.layout);\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  MultiPoint.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var squaredDistance = squaredDx(x, y, flatCoordinates[i], flatCoordinates[i + 1]);\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (var j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  };\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  MultiPoint.prototype.getCoordinates = function () {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  MultiPoint.prototype.getPoint = function (index) {\n    var n = !this.flatCoordinates ? 0 : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(this.flatCoordinates.slice(index * this.stride, (index + 1) * this.stride), this.layout);\n  };\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  MultiPoint.prototype.getPoints = function () {\n    var flatCoordinates = this.flatCoordinates;\n    var layout = this.layout;\n    var stride = this.stride;\n    /** @type {Array<Point>} */\n    var points = [];\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  MultiPoint.prototype.getType = function () {\n    return 'MultiPoint';\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  MultiPoint.prototype.intersectsExtent = function (extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var stride = this.stride;\n    for (var i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  MultiPoint.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n  return MultiPoint;\n}(SimpleGeometry);\nexport default MultiPoint;","map":{"version":3,"names":["Point","SimpleGeometry","closestSquaredDistanceXY","containsXY","deflateCoordinates","extend","inflateCoordinates","squaredDistance","squaredDx","MultiPoint","_super","__extends","coordinates","opt_layout","_this","call","Array","isArray","setFlatCoordinates","setCoordinates","prototype","appendPoint","point","flatCoordinates","getFlatCoordinates","slice","changed","clone","multiPoint","layout","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","stride","i","ii","length","j","getCoordinates","getPoint","index","n","getPoints","points","push","getType","intersectsExtent","extent","setLayout"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\MultiPoint.js"],"sourcesContent":["/**\n * @module ol/geom/MultiPoint\n */\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {closestSquaredDistanceXY, containsXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {squaredDistance as squaredDx} from '../math.js';\n\n/**\n * @classdesc\n * Multi-point geometry.\n *\n * @api\n */\nclass MultiPoint extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n    if (opt_layout && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (\n          coordinates\n        ),\n        opt_layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed point to this multipoint.\n   * @param {Point} point Point.\n   * @api\n   */\n  appendPoint(point) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = point.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, point.getFlatCoordinates());\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiPoint} Clone.\n   * @api\n   */\n  clone() {\n    const multiPoint = new MultiPoint(\n      this.flatCoordinates.slice(),\n      this.layout\n    );\n    multiPoint.applyProperties(this);\n    return multiPoint;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const squaredDistance = squaredDx(\n        x,\n        y,\n        flatCoordinates[i],\n        flatCoordinates[i + 1]\n      );\n      if (squaredDistance < minSquaredDistance) {\n        minSquaredDistance = squaredDistance;\n        for (let j = 0; j < stride; ++j) {\n          closestPoint[j] = flatCoordinates[i + j];\n        }\n        closestPoint.length = stride;\n      }\n    }\n    return minSquaredDistance;\n  }\n\n  /**\n   * Return the coordinates of the multipoint.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the point at the specified index.\n   * @param {number} index Index.\n   * @return {Point} Point.\n   * @api\n   */\n  getPoint(index) {\n    const n = !this.flatCoordinates\n      ? 0\n      : this.flatCoordinates.length / this.stride;\n    if (index < 0 || n <= index) {\n      return null;\n    }\n    return new Point(\n      this.flatCoordinates.slice(\n        index * this.stride,\n        (index + 1) * this.stride\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the points of this multipoint.\n   * @return {Array<Point>} Points.\n   * @api\n   */\n  getPoints() {\n    const flatCoordinates = this.flatCoordinates;\n    const layout = this.layout;\n    const stride = this.stride;\n    /** @type {Array<Point>} */\n    const points = [];\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const point = new Point(flatCoordinates.slice(i, i + stride), layout);\n      points.push(point);\n    }\n    return points;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiPoint';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const stride = this.stride;\n    for (let i = 0, ii = flatCoordinates.length; i < ii; i += stride) {\n      const x = flatCoordinates[i];\n      const y = flatCoordinates[i + 1];\n      if (containsXY(extent, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Set the coordinates of the multipoint.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default MultiPoint;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}