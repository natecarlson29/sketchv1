{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/MultiLineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { douglasPeuckerArray } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { interpolatePoint, lineStringsCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineStringArray } from './flat/intersectsextent.js';\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nvar MultiLineString = /** @class */function (_super) {\n  __extends(MultiLineString, _super);\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `opt_layout` and `opt_ends` are also accepted.)\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @param {Array<number>} [opt_ends] Flat coordinate ends for internal use.\n   */\n  function MultiLineString(coordinates, opt_layout, opt_ends) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    _this.ends_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDeltaRevision_ = -1;\n    if (Array.isArray(coordinates[0])) {\n      _this.setCoordinates(/** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */coordinates, opt_layout);\n    } else if (opt_layout !== undefined && opt_ends) {\n      _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n      _this.ends_ = opt_ends;\n    } else {\n      var layout = _this.getLayout();\n      var lineStrings = /** @type {Array<LineString>} */coordinates;\n      var flatCoordinates = [];\n      var ends = [];\n      for (var i = 0, ii = lineStrings.length; i < ii; ++i) {\n        var lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      _this.setFlatCoordinates(layout, flatCoordinates);\n      _this.ends_ = ends;\n    }\n    return _this;\n  }\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  MultiLineString.prototype.appendLineString = function (lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */\n  MultiLineString.prototype.clone = function () {\n    var multiLineString = new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  MultiLineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [opt_interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  MultiLineString.prototype.getCoordinateAtM = function (m, opt_extrapolate, opt_interpolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM || this.flatCoordinates.length === 0) {\n      return null;\n    }\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    var interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n    return lineStringsCoordinateAtM(this.flatCoordinates, 0, this.ends_, this.stride, m, extrapolate, interpolate);\n  };\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  MultiLineString.prototype.getCoordinates = function () {\n    return inflateCoordinatesArray(this.flatCoordinates, 0, this.ends_, this.stride);\n  };\n  /**\n   * @return {Array<number>} Ends.\n   */\n  MultiLineString.prototype.getEnds = function () {\n    return this.ends_;\n  };\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  MultiLineString.prototype.getLineString = function (index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  };\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  MultiLineString.prototype.getLineStrings = function () {\n    var flatCoordinates = this.flatCoordinates;\n    var ends = this.ends_;\n    var layout = this.layout;\n    /** @type {Array<LineString>} */\n    var lineStrings = [];\n    var offset = 0;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var lineString = new LineString(flatCoordinates.slice(offset, end), layout);\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  };\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  MultiLineString.prototype.getFlatMidpoints = function () {\n    var midpoints = [];\n    var flatCoordinates = this.flatCoordinates;\n    var offset = 0;\n    var ends = this.ends_;\n    var stride = this.stride;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var midpoint = interpolatePoint(flatCoordinates, offset, end, stride, 0.5);\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */\n  MultiLineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  MultiLineString.prototype.getType = function () {\n    return 'MultiLineString';\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  MultiLineString.prototype.intersectsExtent = function (extent) {\n    return intersectsLineStringArray(this.flatCoordinates, 0, this.ends_, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout} [opt_layout] Layout.\n   * @api\n   */\n  MultiLineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  };\n  return MultiLineString;\n}(SimpleGeometry);\nexport default MultiLineString;","map":{"version":3,"names":["GeometryLayout","LineString","SimpleGeometry","arrayMaxSquaredDelta","assignClosestArrayPoint","closestSquaredDistanceXY","deflateCoordinatesArray","douglasPeuckerArray","extend","inflateCoordinatesArray","interpolatePoint","lineStringsCoordinateAtM","intersectsLineStringArray","MultiLineString","_super","__extends","coordinates","opt_layout","opt_ends","_this","call","ends_","maxDelta_","maxDeltaRevision_","Array","isArray","setCoordinates","undefined","setFlatCoordinates","layout","getLayout","lineStrings","flatCoordinates","ends","i","ii","length","lineString","getFlatCoordinates","push","prototype","appendLineString","slice","changed","clone","multiLineString","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","getCoordinateAtM","m","opt_extrapolate","opt_interpolate","XYM","XYZM","extrapolate","interpolate","getCoordinates","getEnds","getLineString","index","getLineStrings","offset","end","getFlatMidpoints","midpoints","midpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","XY","getType","intersectsExtent","extent","setLayout"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\MultiLineString.js"],"sourcesContent":["/**\n * @module ol/geom/MultiLineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport LineString from './LineString.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {douglasPeuckerArray} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {\n  interpolatePoint,\n  lineStringsCoordinateAtM,\n} from './flat/interpolate.js';\nimport {intersectsLineStringArray} from './flat/intersectsextent.js';\n\n/**\n * @classdesc\n * Multi-linestring geometry.\n *\n * @api\n */\nclass MultiLineString extends SimpleGeometry {\n  /**\n   * @param {Array<Array<import(\"../coordinate.js\").Coordinate>|LineString>|Array<number>} coordinates\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\n   *     combination with `opt_layout` and `opt_ends` are also accepted.)\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @param {Array<number>} [opt_ends] Flat coordinate ends for internal use.\n   */\n  constructor(coordinates, opt_layout, opt_ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (Array.isArray(coordinates[0])) {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (\n          coordinates\n        ),\n        opt_layout\n      );\n    } else if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = opt_ends;\n    } else {\n      let layout = this.getLayout();\n      const lineStrings = /** @type {Array<LineString>} */ (coordinates);\n      const flatCoordinates = [];\n      const ends = [];\n      for (let i = 0, ii = lineStrings.length; i < ii; ++i) {\n        const lineString = lineStrings[i];\n        if (i === 0) {\n          layout = lineString.getLayout();\n        }\n        extend(flatCoordinates, lineString.getFlatCoordinates());\n        ends.push(flatCoordinates.length);\n      }\n      this.setFlatCoordinates(layout, flatCoordinates);\n      this.ends_ = ends;\n    }\n  }\n\n  /**\n   * Append the passed linestring to the multilinestring.\n   * @param {LineString} lineString LineString.\n   * @api\n   */\n  appendLineString(lineString) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!MultiLineString} Clone.\n   * @api\n   */\n  clone() {\n    const multiLineString = new MultiLineString(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n    multiLineString.applyProperties(this);\n    return multiLineString;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\n   * will be linearly interpolated between the last coordinate of one LineString\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\n   * `false` then the function will return `null` for Ms falling between\n   * LineStrings.\n   *\n   * @param {number} m M.\n   * @param {boolean} [opt_extrapolate] Extrapolate. Default is `false`.\n   * @param {boolean} [opt_interpolate] Interpolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate|null} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, opt_extrapolate, opt_interpolate) {\n    if (\n      (this.layout != GeometryLayout.XYM &&\n        this.layout != GeometryLayout.XYZM) ||\n      this.flatCoordinates.length === 0\n    ) {\n      return null;\n    }\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\n    return lineStringsCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      m,\n      extrapolate,\n      interpolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the multilinestring.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * Return the linestring at the specified index.\n   * @param {number} index Index.\n   * @return {LineString} LineString.\n   * @api\n   */\n  getLineString(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LineString(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linestrings of this multilinestring.\n   * @return {Array<LineString>} LineStrings.\n   * @api\n   */\n  getLineStrings() {\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const layout = this.layout;\n    /** @type {Array<LineString>} */\n    const lineStrings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const lineString = new LineString(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      lineStrings.push(lineString);\n      offset = end;\n    }\n    return lineStrings;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    const midpoints = [];\n    const flatCoordinates = this.flatCoordinates;\n    let offset = 0;\n    const ends = this.ends_;\n    const stride = this.stride;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const midpoint = interpolatePoint(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        0.5\n      );\n      extend(midpoints, midpoint);\n      offset = end;\n    }\n    return midpoints;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {MultiLineString} Simplified MultiLineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new MultiLineString(\n      simplifiedFlatCoordinates,\n      GeometryLayout.XY,\n      simplifiedEnds\n    );\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'MultiLineString';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineStringArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the multilinestring.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {GeometryLayout} [opt_layout] Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default MultiLineString;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,cAAc,MAAM,qBAAqB;AAChD,OAAOC,UAAU,MAAM,iBAAiB;AACxC,OAAOC,cAAc,MAAM,qBAAqB;AAChD,SAAQC,oBAAoB,EAAEC,uBAAuB,QAAO,mBAAmB;AAC/E,SAAQC,wBAAwB,QAAO,cAAc;AACrD,SAAQC,uBAAuB,QAAO,mBAAmB;AACzD,SAAQC,mBAAmB,QAAO,oBAAoB;AACtD,SAAQC,MAAM,QAAO,aAAa;AAClC,SAAQC,uBAAuB,QAAO,mBAAmB;AACzD,SACEC,gBAAgB,EAChBC,wBAAwB,QACnB,uBAAuB;AAC9B,SAAQC,yBAAyB,QAAO,4BAA4B;AAEpE;;;;;;AAMA,IAAAC,eAAA,0BAAAC,MAAA;EAA8BC,SAAA,CAAAF,eAAA,EAAAC,MAAA;EAC5B;;;;;;;EAOA,SAAAD,gBAAYG,WAAW,EAAEC,UAAU,EAAEC,QAAQ;IAA7C,IAAAC,KAAA,GACEL,MAAA,CAAAM,IAAA,MAAO;IAEP;;;;IAIAD,KAAI,CAACE,KAAK,GAAG,EAAE;IAEf;;;;IAIAF,KAAI,CAACG,SAAS,GAAG,CAAC,CAAC;IAEnB;;;;IAIAH,KAAI,CAACI,iBAAiB,GAAG,CAAC,CAAC;IAE3B,IAAIC,KAAK,CAACC,OAAO,CAACT,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE;MACjCG,KAAI,CAACO,cAAc,CACjB,kEACEV,WAAW,EAEbC,UAAU,CACX;KACF,MAAM,IAAIA,UAAU,KAAKU,SAAS,IAAIT,QAAQ,EAAE;MAC/CC,KAAI,CAACS,kBAAkB,CACrBX,UAAU,EACV,4BAA8BD,WAAY,CAC3C;MACDG,KAAI,CAACE,KAAK,GAAGH,QAAQ;KACtB,MAAM;MACL,IAAIW,MAAM,GAAGV,KAAI,CAACW,SAAS,EAAE;MAC7B,IAAMC,WAAW,GAAG,gCAAkCf,WAAY;MAClE,IAAMgB,eAAe,GAAG,EAAE;MAC1B,IAAMC,IAAI,GAAG,EAAE;MACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGJ,WAAW,CAACK,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;QACpD,IAAMG,UAAU,GAAGN,WAAW,CAACG,CAAC,CAAC;QACjC,IAAIA,CAAC,KAAK,CAAC,EAAE;UACXL,MAAM,GAAGQ,UAAU,CAACP,SAAS,EAAE;;QAEjCtB,MAAM,CAACwB,eAAe,EAAEK,UAAU,CAACC,kBAAkB,EAAE,CAAC;QACxDL,IAAI,CAACM,IAAI,CAACP,eAAe,CAACI,MAAM,CAAC;;MAEnCjB,KAAI,CAACS,kBAAkB,CAACC,MAAM,EAAEG,eAAe,CAAC;MAChDb,KAAI,CAACE,KAAK,GAAGY,IAAI;;;EAErB;EAEA;;;;;EAKApB,eAAA,CAAA2B,SAAA,CAAAC,gBAAgB,GAAhB,UAAiBJ,UAAU;IACzB,IAAI,CAAC,IAAI,CAACL,eAAe,EAAE;MACzB,IAAI,CAACA,eAAe,GAAGK,UAAU,CAACC,kBAAkB,EAAE,CAACI,KAAK,EAAE;KAC/D,MAAM;MACLlC,MAAM,CAAC,IAAI,CAACwB,eAAe,EAAEK,UAAU,CAACC,kBAAkB,EAAE,CAACI,KAAK,EAAE,CAAC;;IAEvE,IAAI,CAACrB,KAAK,CAACkB,IAAI,CAAC,IAAI,CAACP,eAAe,CAACI,MAAM,CAAC;IAC5C,IAAI,CAACO,OAAO,EAAE;EAChB,CAAC;EAED;;;;;EAKA9B,eAAA,CAAA2B,SAAA,CAAAI,KAAK,GAAL;IACE,IAAMC,eAAe,GAAG,IAAIhC,eAAe,CACzC,IAAI,CAACmB,eAAe,CAACU,KAAK,EAAE,EAC5B,IAAI,CAACb,MAAM,EACX,IAAI,CAACR,KAAK,CAACqB,KAAK,EAAE,CACnB;IACDG,eAAe,CAACC,eAAe,CAAC,IAAI,CAAC;IACrC,OAAOD,eAAe;EACxB,CAAC;EAED;;;;;;;EAOAhC,eAAA,CAAA2B,SAAA,CAAAO,cAAc,GAAd,UAAeC,CAAC,EAAEC,CAAC,EAAEC,YAAY,EAAEC,kBAAkB;IACnD,IAAIA,kBAAkB,GAAG9C,wBAAwB,CAAC,IAAI,CAAC+C,SAAS,EAAE,EAAEJ,CAAC,EAAEC,CAAC,CAAC,EAAE;MACzE,OAAOE,kBAAkB;;IAE3B,IAAI,IAAI,CAAC5B,iBAAiB,IAAI,IAAI,CAAC8B,WAAW,EAAE,EAAE;MAChD,IAAI,CAAC/B,SAAS,GAAGgC,IAAI,CAACC,IAAI,CACxBpD,oBAAoB,CAClB,IAAI,CAAC6B,eAAe,EACpB,CAAC,EACD,IAAI,CAACX,KAAK,EACV,IAAI,CAACmC,MAAM,EACX,CAAC,CACF,CACF;MACD,IAAI,CAACjC,iBAAiB,GAAG,IAAI,CAAC8B,WAAW,EAAE;;IAE7C,OAAOjD,uBAAuB,CAC5B,IAAI,CAAC4B,eAAe,EACpB,CAAC,EACD,IAAI,CAACX,KAAK,EACV,IAAI,CAACmC,MAAM,EACX,IAAI,CAAClC,SAAS,EACd,KAAK,EACL0B,CAAC,EACDC,CAAC,EACDC,YAAY,EACZC,kBAAkB,CACnB;EACH,CAAC;EAED;;;;;;;;;;;;;;;;;;;;;;EAsBAtC,eAAA,CAAA2B,SAAA,CAAAiB,gBAAgB,GAAhB,UAAiBC,CAAC,EAAEC,eAAe,EAAEC,eAAe;IAClD,IACG,IAAI,CAAC/B,MAAM,IAAI7B,cAAc,CAAC6D,GAAG,IAChC,IAAI,CAAChC,MAAM,IAAI7B,cAAc,CAAC8D,IAAI,IACpC,IAAI,CAAC9B,eAAe,CAACI,MAAM,KAAK,CAAC,EACjC;MACA,OAAO,IAAI;;IAEb,IAAM2B,WAAW,GAAGJ,eAAe,KAAKhC,SAAS,GAAGgC,eAAe,GAAG,KAAK;IAC3E,IAAMK,WAAW,GAAGJ,eAAe,KAAKjC,SAAS,GAAGiC,eAAe,GAAG,KAAK;IAC3E,OAAOjD,wBAAwB,CAC7B,IAAI,CAACqB,eAAe,EACpB,CAAC,EACD,IAAI,CAACX,KAAK,EACV,IAAI,CAACmC,MAAM,EACXE,CAAC,EACDK,WAAW,EACXC,WAAW,CACZ;EACH,CAAC;EAED;;;;;EAKAnD,eAAA,CAAA2B,SAAA,CAAAyB,cAAc,GAAd;IACE,OAAOxD,uBAAuB,CAC5B,IAAI,CAACuB,eAAe,EACpB,CAAC,EACD,IAAI,CAACX,KAAK,EACV,IAAI,CAACmC,MAAM,CACZ;EACH,CAAC;EAED;;;EAGA3C,eAAA,CAAA2B,SAAA,CAAA0B,OAAO,GAAP;IACE,OAAO,IAAI,CAAC7C,KAAK;EACnB,CAAC;EAED;;;;;;EAMAR,eAAA,CAAA2B,SAAA,CAAA2B,aAAa,GAAb,UAAcC,KAAK;IACjB,IAAIA,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC/C,KAAK,CAACe,MAAM,IAAIgC,KAAK,EAAE;MAC3C,OAAO,IAAI;;IAEb,OAAO,IAAInE,UAAU,CACnB,IAAI,CAAC+B,eAAe,CAACU,KAAK,CACxB0B,KAAK,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC/C,KAAK,CAAC+C,KAAK,GAAG,CAAC,CAAC,EACvC,IAAI,CAAC/C,KAAK,CAAC+C,KAAK,CAAC,CAClB,EACD,IAAI,CAACvC,MAAM,CACZ;EACH,CAAC;EAED;;;;;EAKAhB,eAAA,CAAA2B,SAAA,CAAA6B,cAAc,GAAd;IACE,IAAMrC,eAAe,GAAG,IAAI,CAACA,eAAe;IAC5C,IAAMC,IAAI,GAAG,IAAI,CAACZ,KAAK;IACvB,IAAMQ,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B;IACA,IAAME,WAAW,GAAG,EAAE;IACtB,IAAIuC,MAAM,GAAG,CAAC;IACd,KAAK,IAAIpC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGF,IAAI,CAACG,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAC7C,IAAMqC,GAAG,GAAGtC,IAAI,CAACC,CAAC,CAAC;MACnB,IAAMG,UAAU,GAAG,IAAIpC,UAAU,CAC/B+B,eAAe,CAACU,KAAK,CAAC4B,MAAM,EAAEC,GAAG,CAAC,EAClC1C,MAAM,CACP;MACDE,WAAW,CAACQ,IAAI,CAACF,UAAU,CAAC;MAC5BiC,MAAM,GAAGC,GAAG;;IAEd,OAAOxC,WAAW;EACpB,CAAC;EAED;;;EAGAlB,eAAA,CAAA2B,SAAA,CAAAgC,gBAAgB,GAAhB;IACE,IAAMC,SAAS,GAAG,EAAE;IACpB,IAAMzC,eAAe,GAAG,IAAI,CAACA,eAAe;IAC5C,IAAIsC,MAAM,GAAG,CAAC;IACd,IAAMrC,IAAI,GAAG,IAAI,CAACZ,KAAK;IACvB,IAAMmC,MAAM,GAAG,IAAI,CAACA,MAAM;IAC1B,KAAK,IAAItB,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGF,IAAI,CAACG,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;MAC7C,IAAMqC,GAAG,GAAGtC,IAAI,CAACC,CAAC,CAAC;MACnB,IAAMwC,QAAQ,GAAGhE,gBAAgB,CAC/BsB,eAAe,EACfsC,MAAM,EACNC,GAAG,EACHf,MAAM,EACN,GAAG,CACJ;MACDhD,MAAM,CAACiE,SAAS,EAAEC,QAAQ,CAAC;MAC3BJ,MAAM,GAAGC,GAAG;;IAEd,OAAOE,SAAS;EAClB,CAAC;EAED;;;;;EAKA5D,eAAA,CAAA2B,SAAA,CAAAmC,6BAA6B,GAA7B,UAA8BC,gBAAgB;IAC5C,IAAMC,yBAAyB,GAAG,EAAE;IACpC,IAAMC,cAAc,GAAG,EAAE;IACzBD,yBAAyB,CAACzC,MAAM,GAAG7B,mBAAmB,CACpD,IAAI,CAACyB,eAAe,EACpB,CAAC,EACD,IAAI,CAACX,KAAK,EACV,IAAI,CAACmC,MAAM,EACXoB,gBAAgB,EAChBC,yBAAyB,EACzB,CAAC,EACDC,cAAc,CACf;IACD,OAAO,IAAIjE,eAAe,CACxBgE,yBAAyB,EACzB7E,cAAc,CAAC+E,EAAE,EACjBD,cAAc,CACf;EACH,CAAC;EAED;;;;;EAKAjE,eAAA,CAAA2B,SAAA,CAAAwC,OAAO,GAAP;IACE,OAAO,iBAAiB;EAC1B,CAAC;EAED;;;;;;EAMAnE,eAAA,CAAA2B,SAAA,CAAAyC,gBAAgB,GAAhB,UAAiBC,MAAM;IACrB,OAAOtE,yBAAyB,CAC9B,IAAI,CAACoB,eAAe,EACpB,CAAC,EACD,IAAI,CAACX,KAAK,EACV,IAAI,CAACmC,MAAM,EACX0B,MAAM,CACP;EACH,CAAC;EAED;;;;;;EAMArE,eAAA,CAAA2B,SAAA,CAAAd,cAAc,GAAd,UAAeV,WAAW,EAAEC,UAAU;IACpC,IAAI,CAACkE,SAAS,CAAClE,UAAU,EAAED,WAAW,EAAE,CAAC,CAAC;IAC1C,IAAI,CAAC,IAAI,CAACgB,eAAe,EAAE;MACzB,IAAI,CAACA,eAAe,GAAG,EAAE;;IAE3B,IAAMC,IAAI,GAAG3B,uBAAuB,CAClC,IAAI,CAAC0B,eAAe,EACpB,CAAC,EACDhB,WAAW,EACX,IAAI,CAACwC,MAAM,EACX,IAAI,CAACnC,KAAK,CACX;IACD,IAAI,CAACW,eAAe,CAACI,MAAM,GAAGH,IAAI,CAACG,MAAM,KAAK,CAAC,GAAG,CAAC,GAAGH,IAAI,CAACA,IAAI,CAACG,MAAM,GAAG,CAAC,CAAC;IAC3E,IAAI,CAACO,OAAO,EAAE;EAChB,CAAC;EACH,OAAA9B,eAAC;AAAD,CAAC,CAzU6BX,cAAc;AA2U5C,eAAeW,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}