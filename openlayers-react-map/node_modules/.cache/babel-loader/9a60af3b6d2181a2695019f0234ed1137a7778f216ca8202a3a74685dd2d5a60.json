{"ast":null,"code":"/**\n * @module ol/style/IconImageCache\n */\nimport { asString } from '../color.js';\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\n */\nvar IconImageCache = /** @class */function () {\n  function IconImageCache() {\n    /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */\n    this.cache_ = {};\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = 0;\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxCacheSize_ = 32;\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n  IconImageCache.prototype.clear = function () {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  };\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  IconImageCache.prototype.canExpireCache = function () {\n    return this.cacheSize_ > this.maxCacheSize_;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n  IconImageCache.prototype.expire = function () {\n    if (this.canExpireCache()) {\n      var i = 0;\n      for (var key in this.cache_) {\n        var iconImage = this.cache_[key];\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @return {import(\"./IconImage.js\").default} Icon image.\n   */\n  IconImageCache.prototype.get = function (src, crossOrigin, color) {\n    var key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  };\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n   */\n  IconImageCache.prototype.set = function (src, crossOrigin, color, iconImage) {\n    var key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  };\n  /**\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\n   * your map uses more than 32 different icon images and you are not caching icon\n   * styles on the application level.\n   * @param {number} maxCacheSize Cache max size.\n   * @api\n   */\n  IconImageCache.prototype.setSize = function (maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  };\n  return IconImageCache;\n}();\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n  var colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\nexport default IconImageCache;\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport var shared = new IconImageCache();","map":{"version":3,"names":["asString","IconImageCache","cache_","cacheSize_","maxCacheSize_","prototype","clear","canExpireCache","expire","i","key","iconImage","hasListener","get","src","crossOrigin","color","getKey","set","setSize","maxCacheSize","colorString","shared"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\style\\IconImageCache.js"],"sourcesContent":["/**\n * @module ol/style/IconImageCache\n */\nimport {asString} from '../color.js';\n\n/**\n * @classdesc\n * Singleton class. Available through {@link module:ol/style/IconImageCache.shared}.\n */\nclass IconImageCache {\n  constructor() {\n    /**\n     * @type {!Object<string, import(\"./IconImage.js\").default>}\n     * @private\n     */\n    this.cache_ = {};\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.cacheSize_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxCacheSize_ = 32;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.cache_ = {};\n    this.cacheSize_ = 0;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.cacheSize_ > this.maxCacheSize_;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  expire() {\n    if (this.canExpireCache()) {\n      let i = 0;\n      for (const key in this.cache_) {\n        const iconImage = this.cache_[key];\n        if ((i++ & 3) === 0 && !iconImage.hasListener()) {\n          delete this.cache_[key];\n          --this.cacheSize_;\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @return {import(\"./IconImage.js\").default} Icon image.\n   */\n  get(src, crossOrigin, color) {\n    const key = getKey(src, crossOrigin, color);\n    return key in this.cache_ ? this.cache_[key] : null;\n  }\n\n  /**\n   * @param {string} src Src.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../color.js\").Color} color Color.\n   * @param {import(\"./IconImage.js\").default} iconImage Icon image.\n   */\n  set(src, crossOrigin, color, iconImage) {\n    const key = getKey(src, crossOrigin, color);\n    this.cache_[key] = iconImage;\n    ++this.cacheSize_;\n  }\n\n  /**\n   * Set the cache size of the icon cache. Default is `32`. Change this value when\n   * your map uses more than 32 different icon images and you are not caching icon\n   * styles on the application level.\n   * @param {number} maxCacheSize Cache max size.\n   * @api\n   */\n  setSize(maxCacheSize) {\n    this.maxCacheSize_ = maxCacheSize;\n    this.expire();\n  }\n}\n\n/**\n * @param {string} src Src.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {string} Cache key.\n */\nfunction getKey(src, crossOrigin, color) {\n  const colorString = color ? asString(color) : 'null';\n  return crossOrigin + ':' + src + ':' + colorString;\n}\n\nexport default IconImageCache;\n\n/**\n * The {@link module:ol/style/IconImageCache~IconImageCache} for\n * {@link module:ol/style/Icon~Icon} images.\n * @api\n */\nexport const shared = new IconImageCache();\n"],"mappings":"AAAA;;;AAGA,SAAQA,QAAQ,QAAO,aAAa;AAEpC;;;;AAIA,IAAAC,cAAA;EACE,SAAAA,eAAA;IACE;;;;IAIA,IAAI,CAACC,MAAM,GAAG,EAAE;IAEhB;;;;IAIA,IAAI,CAACC,UAAU,GAAG,CAAC;IAEnB;;;;IAIA,IAAI,CAACC,aAAa,GAAG,EAAE;EACzB;EAEA;;;EAGAH,cAAA,CAAAI,SAAA,CAAAC,KAAK,GAAL;IACE,IAAI,CAACJ,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,UAAU,GAAG,CAAC;EACrB,CAAC;EAED;;;EAGAF,cAAA,CAAAI,SAAA,CAAAE,cAAc,GAAd;IACE,OAAO,IAAI,CAACJ,UAAU,GAAG,IAAI,CAACC,aAAa;EAC7C,CAAC;EAED;;;EAGAH,cAAA,CAAAI,SAAA,CAAAG,MAAM,GAAN;IACE,IAAI,IAAI,CAACD,cAAc,EAAE,EAAE;MACzB,IAAIE,CAAC,GAAG,CAAC;MACT,KAAK,IAAMC,GAAG,IAAI,IAAI,CAACR,MAAM,EAAE;QAC7B,IAAMS,SAAS,GAAG,IAAI,CAACT,MAAM,CAACQ,GAAG,CAAC;QAClC,IAAI,CAACD,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,IAAI,CAACE,SAAS,CAACC,WAAW,EAAE,EAAE;UAC/C,OAAO,IAAI,CAACV,MAAM,CAACQ,GAAG,CAAC;UACvB,EAAE,IAAI,CAACP,UAAU;;;;EAIzB,CAAC;EAED;;;;;;EAMAF,cAAA,CAAAI,SAAA,CAAAQ,GAAG,GAAH,UAAIC,GAAG,EAAEC,WAAW,EAAEC,KAAK;IACzB,IAAMN,GAAG,GAAGO,MAAM,CAACH,GAAG,EAAEC,WAAW,EAAEC,KAAK,CAAC;IAC3C,OAAON,GAAG,IAAI,IAAI,CAACR,MAAM,GAAG,IAAI,CAACA,MAAM,CAACQ,GAAG,CAAC,GAAG,IAAI;EACrD,CAAC;EAED;;;;;;EAMAT,cAAA,CAAAI,SAAA,CAAAa,GAAG,GAAH,UAAIJ,GAAG,EAAEC,WAAW,EAAEC,KAAK,EAAEL,SAAS;IACpC,IAAMD,GAAG,GAAGO,MAAM,CAACH,GAAG,EAAEC,WAAW,EAAEC,KAAK,CAAC;IAC3C,IAAI,CAACd,MAAM,CAACQ,GAAG,CAAC,GAAGC,SAAS;IAC5B,EAAE,IAAI,CAACR,UAAU;EACnB,CAAC;EAED;;;;;;;EAOAF,cAAA,CAAAI,SAAA,CAAAc,OAAO,GAAP,UAAQC,YAAY;IAClB,IAAI,CAAChB,aAAa,GAAGgB,YAAY;IACjC,IAAI,CAACZ,MAAM,EAAE;EACf,CAAC;EACH,OAAAP,cAAC;AAAD,CAAC,CAtFD;AAwFA;;;;;;AAMA,SAASgB,MAAMA,CAACH,GAAG,EAAEC,WAAW,EAAEC,KAAK;EACrC,IAAMK,WAAW,GAAGL,KAAK,GAAGhB,QAAQ,CAACgB,KAAK,CAAC,GAAG,MAAM;EACpD,OAAOD,WAAW,GAAG,GAAG,GAAGD,GAAG,GAAG,GAAG,GAAGO,WAAW;AACpD;AAEA,eAAepB,cAAc;AAE7B;;;;;AAKA,OAAO,IAAMqB,MAAM,GAAG,IAAIrB,cAAc,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}