{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport { circular as circularPolygon } from './geom/Polygon.js';\nimport { get as getProjection, getTransformFromProjections, identityTransform } from './proj.js';\nimport { toRadians } from './math.js';\n/**\n * @enum {string}\n */\nvar Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions'\n};\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\nvar GeolocationError = /** @class */function (_super) {\n  __extends(GeolocationError, _super);\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n  function GeolocationError(error) {\n    var _this = _super.call(this, EventType.ERROR) || this;\n    /**\n     * @type {number}\n     */\n    _this.code = error.code;\n    /**\n     * @type {string}\n     */\n    _this.message = error.message;\n    return _this;\n  }\n  return GeolocationError;\n}(BaseEvent);\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\n *     'error', Return>} GeolocationOnSignature\n */\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     var geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\nvar Geolocation = /** @class */function (_super) {\n  __extends(Geolocation, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function Geolocation(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n    _this.un;\n    var options = opt_options || {};\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    _this.position_ = null;\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n    _this.transform_ = identityTransform;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.watchId_ = undefined;\n    _this.addChangeListener(Property.PROJECTION, _this.handleProjectionChanged_);\n    _this.addChangeListener(Property.TRACKING, _this.handleTrackingChanged_);\n    if (options.projection !== undefined) {\n      _this.setProjection(options.projection);\n    }\n    if (options.trackingOptions !== undefined) {\n      _this.setTrackingOptions(options.trackingOptions);\n    }\n    _this.setTracking(options.tracking !== undefined ? options.tracking : false);\n    return _this;\n  }\n  /**\n   * Clean up.\n   */\n  Geolocation.prototype.disposeInternal = function () {\n    this.setTracking(false);\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @private\n   */\n  Geolocation.prototype.handleProjectionChanged_ = function () {\n    var projection = this.getProjection();\n    if (projection) {\n      this.transform_ = getTransformFromProjections(getProjection('EPSG:4326'), projection);\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  };\n  /**\n   * @private\n   */\n  Geolocation.prototype.handleTrackingChanged_ = function () {\n    if ('geolocation' in navigator) {\n      var tracking = this.getTracking();\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(this.positionChange_.bind(this), this.positionError_.bind(this), this.getTrackingOptions());\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n  Geolocation.prototype.positionChange_ = function (position) {\n    var coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(Property.ALTITUDE, coords.altitude === null ? undefined : coords.altitude);\n    this.set(Property.ALTITUDE_ACCURACY, coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy);\n    this.set(Property.HEADING, coords.heading === null ? undefined : toRadians(coords.heading));\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n    var projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    var geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  };\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n  Geolocation.prototype.positionError_ = function (error) {\n    this.dispatchEvent(new GeolocationError(error));\n  };\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getAccuracy = function () {\n    return /** @type {number|undefined} */this.get(Property.ACCURACY);\n  };\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getAccuracyGeometry = function () {\n    return /** @type {?import(\"./geom/Polygon.js\").default} */this.get(Property.ACCURACY_GEOMETRY) || null;\n  };\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getAltitude = function () {\n    return /** @type {number|undefined} */this.get(Property.ALTITUDE);\n  };\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getAltitudeAccuracy = function () {\n    return /** @type {number|undefined} */this.get(Property.ALTITUDE_ACCURACY);\n  };\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getHeading = function () {\n    return /** @type {number|undefined} */this.get(Property.HEADING);\n  };\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getPosition = function () {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */this.get(Property.POSITION);\n  };\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getProjection = function () {\n    return /** @type {import(\"./proj/Projection.js\").default|undefined} */this.get(Property.PROJECTION);\n  };\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getSpeed = function () {\n    return /** @type {number|undefined} */this.get(Property.SPEED);\n  };\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getTracking = function () {\n    return /** @type {boolean} */this.get(Property.TRACKING);\n  };\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.getTrackingOptions = function () {\n    return /** @type {PositionOptions|undefined} */this.get(Property.TRACKING_OPTIONS);\n  };\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.setProjection = function (projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  };\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.setTracking = function (tracking) {\n    this.set(Property.TRACKING, tracking);\n  };\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  Geolocation.prototype.setTrackingOptions = function (options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  };\n  return Geolocation;\n}(BaseObject);\nexport default Geolocation;","map":{"version":3,"names":["BaseEvent","BaseObject","EventType","circular","circularPolygon","get","getProjection","getTransformFromProjections","identityTransform","toRadians","Property","ACCURACY","ACCURACY_GEOMETRY","ALTITUDE","ALTITUDE_ACCURACY","HEADING","POSITION","PROJECTION","SPEED","TRACKING","TRACKING_OPTIONS","GeolocationError","_super","__extends","error","_this","call","ERROR","code","message","Geolocation","opt_options","on","once","un","options","position_","transform_","watchId_","undefined","addChangeListener","handleProjectionChanged_","handleTrackingChanged_","projection","setProjection","trackingOptions","setTrackingOptions","setTracking","tracking","prototype","disposeInternal","set","navigator","getTracking","geolocation","watchPosition","positionChange_","bind","positionError_","getTrackingOptions","clearWatch","position","coords","accuracy","altitude","altitudeAccuracy","heading","longitude","latitude","projectedPosition","speed","geometry","applyTransform","changed","dispatchEvent","getAccuracy","getAccuracyGeometry","getAltitude","getAltitudeAccuracy","getHeading","getPosition","getSpeed"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\Geolocation.js"],"sourcesContent":["/**\n * @module ol/Geolocation\n */\nimport BaseEvent from './events/Event.js';\nimport BaseObject from './Object.js';\nimport EventType from './events/EventType.js';\nimport {circular as circularPolygon} from './geom/Polygon.js';\nimport {\n  get as getProjection,\n  getTransformFromProjections,\n  identityTransform,\n} from './proj.js';\nimport {toRadians} from './math.js';\n\n/**\n * @enum {string}\n */\nconst Property = {\n  ACCURACY: 'accuracy',\n  ACCURACY_GEOMETRY: 'accuracyGeometry',\n  ALTITUDE: 'altitude',\n  ALTITUDE_ACCURACY: 'altitudeAccuracy',\n  HEADING: 'heading',\n  POSITION: 'position',\n  PROJECTION: 'projection',\n  SPEED: 'speed',\n  TRACKING: 'tracking',\n  TRACKING_OPTIONS: 'trackingOptions',\n};\n\n/**\n * @classdesc\n * Events emitted on Geolocation error.\n */\nclass GeolocationError extends BaseEvent {\n  /**\n   * @param {GeolocationPositionError} error error object.\n   */\n  constructor(error) {\n    super(EventType.ERROR);\n\n    /**\n     * @type {number}\n     */\n    this.code = error.code;\n\n    /**\n     * @type {string}\n     */\n    this.message = error.message;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [tracking=false] Start Tracking right after\n * instantiation.\n * @property {PositionOptions} [trackingOptions] Tracking options.\n * See https://www.w3.org/TR/geolocation-API/#position_options_interface.\n * @property {import(\"./proj.js\").ProjectionLike} [projection] The projection the position\n * is reported in.\n */\n\n/**\n * @typedef {import(\"./ObjectEventType\").Types|'change:accuracy'|'change:accuracyGeometry'|'change:altitude'|\n *    'change:altitudeAccuracy'|'change:heading'|'change:position'|'change:projection'|'change:speed'|'change:tracking'|\n *    'change:trackingOptions'} GeolocationObjectEventTypes\n */\n\n/***\n * @template Return\n * @typedef {import(\"./Observable\").OnSignature<import(\"./Observable\").EventTypes, import(\"./events/Event.js\").default, Return> &\n *   import(\"./Observable\").OnSignature<GeolocationObjectEventTypes, import(\"./Object\").ObjectEvent, Return> &\n *   import(\"./Observable\").OnSignature<'error', GeolocationError, Return> &\n *   import(\"./Observable\").CombinedOnSignature<import(\"./Observable\").EventTypes|GeolocationObjectEventTypes|\n *     'error', Return>} GeolocationOnSignature\n */\n\n/**\n * @classdesc\n * Helper class for providing HTML5 Geolocation capabilities.\n * The [Geolocation API](https://www.w3.org/TR/geolocation-API/)\n * is used to locate a user's position.\n *\n * To get notified of position changes, register a listener for the generic\n * `change` event on your instance of {@link module:ol/Geolocation~Geolocation}.\n *\n * Example:\n *\n *     var geolocation = new Geolocation({\n *       // take the projection to use from the map's view\n *       projection: view.getProjection()\n *     });\n *     // listen to changes in position\n *     geolocation.on('change', function(evt) {\n *       window.console.log(geolocation.getPosition());\n *     });\n *\n * @fires module:ol/events/Event~BaseEvent#event:error\n * @api\n */\nclass Geolocation extends BaseObject {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {GeolocationOnSignature<import(\"./events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {GeolocationOnSignature<void>}\n     */\n    this.un;\n\n    const options = opt_options || {};\n\n    /**\n     * The unprojected (EPSG:4326) device position.\n     * @private\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.position_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./proj.js\").TransformFunction}\n     */\n    this.transform_ = identityTransform;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.watchId_ = undefined;\n\n    this.addChangeListener(Property.PROJECTION, this.handleProjectionChanged_);\n    this.addChangeListener(Property.TRACKING, this.handleTrackingChanged_);\n\n    if (options.projection !== undefined) {\n      this.setProjection(options.projection);\n    }\n    if (options.trackingOptions !== undefined) {\n      this.setTrackingOptions(options.trackingOptions);\n    }\n\n    this.setTracking(options.tracking !== undefined ? options.tracking : false);\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setTracking(false);\n    super.disposeInternal();\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    const projection = this.getProjection();\n    if (projection) {\n      this.transform_ = getTransformFromProjections(\n        getProjection('EPSG:4326'),\n        projection\n      );\n      if (this.position_) {\n        this.set(Property.POSITION, this.transform_(this.position_));\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  handleTrackingChanged_() {\n    if ('geolocation' in navigator) {\n      const tracking = this.getTracking();\n      if (tracking && this.watchId_ === undefined) {\n        this.watchId_ = navigator.geolocation.watchPosition(\n          this.positionChange_.bind(this),\n          this.positionError_.bind(this),\n          this.getTrackingOptions()\n        );\n      } else if (!tracking && this.watchId_ !== undefined) {\n        navigator.geolocation.clearWatch(this.watchId_);\n        this.watchId_ = undefined;\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPosition} position position event.\n   */\n  positionChange_(position) {\n    const coords = position.coords;\n    this.set(Property.ACCURACY, coords.accuracy);\n    this.set(\n      Property.ALTITUDE,\n      coords.altitude === null ? undefined : coords.altitude\n    );\n    this.set(\n      Property.ALTITUDE_ACCURACY,\n      coords.altitudeAccuracy === null ? undefined : coords.altitudeAccuracy\n    );\n    this.set(\n      Property.HEADING,\n      coords.heading === null ? undefined : toRadians(coords.heading)\n    );\n    if (!this.position_) {\n      this.position_ = [coords.longitude, coords.latitude];\n    } else {\n      this.position_[0] = coords.longitude;\n      this.position_[1] = coords.latitude;\n    }\n    const projectedPosition = this.transform_(this.position_);\n    this.set(Property.POSITION, projectedPosition);\n    this.set(Property.SPEED, coords.speed === null ? undefined : coords.speed);\n    const geometry = circularPolygon(this.position_, coords.accuracy);\n    geometry.applyTransform(this.transform_);\n    this.set(Property.ACCURACY_GEOMETRY, geometry);\n    this.changed();\n  }\n\n  /**\n   * @private\n   * @param {GeolocationPositionError} error error object.\n   */\n  positionError_(error) {\n    this.dispatchEvent(new GeolocationError(error));\n  }\n\n  /**\n   * Get the accuracy of the position in meters.\n   * @return {number|undefined} The accuracy of the position measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAccuracy() {\n    return /** @type {number|undefined} */ (this.get(Property.ACCURACY));\n  }\n\n  /**\n   * Get a geometry of the position accuracy.\n   * @return {?import(\"./geom/Polygon.js\").default} A geometry of the position accuracy.\n   * @observable\n   * @api\n   */\n  getAccuracyGeometry() {\n    return /** @type {?import(\"./geom/Polygon.js\").default} */ (\n      this.get(Property.ACCURACY_GEOMETRY) || null\n    );\n  }\n\n  /**\n   * Get the altitude associated with the position.\n   * @return {number|undefined} The altitude of the position in meters above mean\n   *     sea level.\n   * @observable\n   * @api\n   */\n  getAltitude() {\n    return /** @type {number|undefined} */ (this.get(Property.ALTITUDE));\n  }\n\n  /**\n   * Get the altitude accuracy of the position.\n   * @return {number|undefined} The accuracy of the altitude measurement in\n   *     meters.\n   * @observable\n   * @api\n   */\n  getAltitudeAccuracy() {\n    return /** @type {number|undefined} */ (\n      this.get(Property.ALTITUDE_ACCURACY)\n    );\n  }\n\n  /**\n   * Get the heading as radians clockwise from North.\n   * Note: depending on the browser, the heading is only defined if the `enableHighAccuracy`\n   * is set to `true` in the tracking options.\n   * @return {number|undefined} The heading of the device in radians from north.\n   * @observable\n   * @api\n   */\n  getHeading() {\n    return /** @type {number|undefined} */ (this.get(Property.HEADING));\n  }\n\n  /**\n   * Get the position of the device.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The current position of the device reported\n   *     in the current projection.\n   * @observable\n   * @api\n   */\n  getPosition() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (\n      this.get(Property.POSITION)\n    );\n  }\n\n  /**\n   * Get the projection associated with the position.\n   * @return {import(\"./proj/Projection.js\").default|undefined} The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return /** @type {import(\"./proj/Projection.js\").default|undefined} */ (\n      this.get(Property.PROJECTION)\n    );\n  }\n\n  /**\n   * Get the speed in meters per second.\n   * @return {number|undefined} The instantaneous speed of the device in meters\n   *     per second.\n   * @observable\n   * @api\n   */\n  getSpeed() {\n    return /** @type {number|undefined} */ (this.get(Property.SPEED));\n  }\n\n  /**\n   * Determine if the device location is being tracked.\n   * @return {boolean} The device location is being tracked.\n   * @observable\n   * @api\n   */\n  getTracking() {\n    return /** @type {boolean} */ (this.get(Property.TRACKING));\n  }\n\n  /**\n   * Get the tracking options.\n   * See https://www.w3.org/TR/geolocation-API/#position-options.\n   * @return {PositionOptions|undefined} PositionOptions as defined by\n   *     the [HTML5 Geolocation spec\n   *     ](https://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  getTrackingOptions() {\n    return /** @type {PositionOptions|undefined} */ (\n      this.get(Property.TRACKING_OPTIONS)\n    );\n  }\n\n  /**\n   * Set the projection to use for transforming the coordinates.\n   * @param {import(\"./proj.js\").ProjectionLike} projection The projection the position is\n   *     reported in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(Property.PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * Enable or disable tracking.\n   * @param {boolean} tracking Enable tracking.\n   * @observable\n   * @api\n   */\n  setTracking(tracking) {\n    this.set(Property.TRACKING, tracking);\n  }\n\n  /**\n   * Set the tracking options.\n   * See http://www.w3.org/TR/geolocation-API/#position-options.\n   * @param {PositionOptions} options PositionOptions as defined by the\n   *     [HTML5 Geolocation spec\n   *     ](http://www.w3.org/TR/geolocation-API/#position_options_interface).\n   * @observable\n   * @api\n   */\n  setTrackingOptions(options) {\n    this.set(Property.TRACKING_OPTIONS, options);\n  }\n}\n\nexport default Geolocation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}