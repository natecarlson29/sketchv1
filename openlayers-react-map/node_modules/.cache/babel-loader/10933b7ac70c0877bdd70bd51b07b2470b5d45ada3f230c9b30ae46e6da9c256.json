{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport { cosh } from '../math.js';\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport var RADIUS = 6378137;\n/**\n * @const\n * @type {number}\n */\nexport var HALF_SIZE = Math.PI * RADIUS;\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport var WORLD_EXTENT = [-180, -85, 180, 85];\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport var MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nvar EPSG3857Projection = /** @class */function (_super) {\n  __extends(EPSG3857Projection, _super);\n  /**\n   * @param {string} code Code.\n   */\n  function EPSG3857Projection(code) {\n    return _super.call(this, {\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      }\n    }) || this;\n  }\n  return EPSG3857Projection;\n}(Projection);\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport var PROJECTIONS = [new EPSG3857Projection('EPSG:3857'), new EPSG3857Projection('EPSG:102100'), new EPSG3857Projection('EPSG:102113'), new EPSG3857Projection('EPSG:900913'), new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'), new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857')];\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = HALF_SIZE * input[i] / 180;\n    var y = RADIUS * Math.log(Math.tan(Math.PI * (+input[i + 1] + 90) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  var length = input.length;\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (var i = 0; i < length; i += dimension) {\n    output[i] = 180 * input[i] / HALF_SIZE;\n    output[i + 1] = 360 * Math.atan(Math.exp(input[i + 1] / RADIUS)) / Math.PI - 90;\n  }\n  return output;\n}","map":{"version":3,"names":["Projection","Units","cosh","RADIUS","HALF_SIZE","Math","PI","EXTENT","WORLD_EXTENT","MAX_SAFE_Y","log","tan","EPSG3857Projection","_super","__extends","code","call","units","METERS","extent","global","worldExtent","getPointResolution","resolution","point","PROJECTIONS","fromEPSG4326","input","opt_output","opt_dimension","length","dimension","output","undefined","slice","Array","i","y","toEPSG4326","atan","exp"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\proj\\epsg3857.js"],"sourcesContent":["/**\n * @module ol/proj/epsg3857\n */\nimport Projection from './Projection.js';\nimport Units from './Units.js';\nimport {cosh} from '../math.js';\n\n/**\n * Radius of WGS84 sphere\n *\n * @const\n * @type {number}\n */\nexport const RADIUS = 6378137;\n\n/**\n * @const\n * @type {number}\n */\nexport const HALF_SIZE = Math.PI * RADIUS;\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const EXTENT = [-HALF_SIZE, -HALF_SIZE, HALF_SIZE, HALF_SIZE];\n\n/**\n * @const\n * @type {import(\"../extent.js\").Extent}\n */\nexport const WORLD_EXTENT = [-180, -85, 180, 85];\n\n/**\n * Maximum safe value in y direction\n * @const\n * @type {number}\n */\nexport const MAX_SAFE_Y = RADIUS * Math.log(Math.tan(Math.PI / 2));\n\n/**\n * @classdesc\n * Projection object for web/spherical Mercator (EPSG:3857).\n */\nclass EPSG3857Projection extends Projection {\n  /**\n   * @param {string} code Code.\n   */\n  constructor(code) {\n    super({\n      code: code,\n      units: Units.METERS,\n      extent: EXTENT,\n      global: true,\n      worldExtent: WORLD_EXTENT,\n      getPointResolution: function (resolution, point) {\n        return resolution / cosh(point[1] / RADIUS);\n      },\n    });\n  }\n}\n\n/**\n * Projections equal to EPSG:3857.\n *\n * @const\n * @type {Array<import(\"./Projection.js\").default>}\n */\nexport const PROJECTIONS = [\n  new EPSG3857Projection('EPSG:3857'),\n  new EPSG3857Projection('EPSG:102100'),\n  new EPSG3857Projection('EPSG:102113'),\n  new EPSG3857Projection('EPSG:900913'),\n  new EPSG3857Projection('http://www.opengis.net/def/crs/EPSG/0/3857'),\n  new EPSG3857Projection('http://www.opengis.net/gml/srs/epsg.xml#3857'),\n];\n\n/**\n * Transformation from EPSG:4326 to EPSG:3857.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function fromEPSG4326(input, opt_output, opt_dimension) {\n  const length = input.length;\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  let output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (HALF_SIZE * input[i]) / 180;\n    let y = RADIUS * Math.log(Math.tan((Math.PI * (+input[i + 1] + 90)) / 360));\n    if (y > MAX_SAFE_Y) {\n      y = MAX_SAFE_Y;\n    } else if (y < -MAX_SAFE_Y) {\n      y = -MAX_SAFE_Y;\n    }\n    output[i + 1] = y;\n  }\n  return output;\n}\n\n/**\n * Transformation from EPSG:3857 to EPSG:4326.\n *\n * @param {Array<number>} input Input array of coordinate values.\n * @param {Array<number>} [opt_output] Output array of coordinate values.\n * @param {number} [opt_dimension] Dimension (default is `2`).\n * @return {Array<number>} Output array of coordinate values.\n */\nexport function toEPSG4326(input, opt_output, opt_dimension) {\n  const length = input.length;\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  let output = opt_output;\n  if (output === undefined) {\n    if (dimension > 2) {\n      // preserve values beyond second dimension\n      output = input.slice();\n    } else {\n      output = new Array(length);\n    }\n  }\n  for (let i = 0; i < length; i += dimension) {\n    output[i] = (180 * input[i]) / HALF_SIZE;\n    output[i + 1] =\n      (360 * Math.atan(Math.exp(input[i + 1] / RADIUS))) / Math.PI - 90;\n  }\n  return output;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}