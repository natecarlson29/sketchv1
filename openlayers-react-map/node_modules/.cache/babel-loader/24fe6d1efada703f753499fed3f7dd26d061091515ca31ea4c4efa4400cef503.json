{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nvar MapBrowserEvent = /** @class */function (_super) {\n  __extends(MapBrowserEvent, _super);\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [opt_dragging] Is the map currently being dragged?\n   * @param {import(\"./PluggableMap.js\").FrameState} [opt_frameState] Frame state.\n   * @param {Array<PointerEvent>} [opt_activePointers] Active pointers.\n   */\n  function MapBrowserEvent(type, map, originalEvent, opt_dragging, opt_frameState, opt_activePointers) {\n    var _this = _super.call(this, type, map, opt_frameState) || this;\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n    _this.originalEvent = originalEvent;\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n    _this.pixel_ = null;\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    _this.coordinate_ = null;\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    _this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n    /**\n     * @type {Array<PointerEvent>|undefined}\n     */\n    _this.activePointers = opt_activePointers;\n    return _this;\n  }\n  Object.defineProperty(MapBrowserEvent.prototype, \"pixel\", {\n    /**\n     * The map pixel relative to the viewport corresponding to the original event.\n     * @type {import(\"./pixel.js\").Pixel}\n     * @api\n     */\n    get: function () {\n      if (!this.pixel_) {\n        this.pixel_ = this.map.getEventPixel(this.originalEvent);\n      }\n      return this.pixel_;\n    },\n    set: function (pixel) {\n      this.pixel_ = pixel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MapBrowserEvent.prototype, \"coordinate\", {\n    /**\n     * The coordinate corresponding to the original browser event.  This will be in the user\n     * projection if one is set.  Otherwise it will be in the view projection.\n     * @type {import(\"./coordinate.js\").Coordinate}\n     * @api\n     */\n    get: function () {\n      if (!this.coordinate_) {\n        this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n      }\n      return this.coordinate_;\n    },\n    set: function (coordinate) {\n      this.coordinate_ = coordinate;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n  MapBrowserEvent.prototype.preventDefault = function () {\n    _super.prototype.preventDefault.call(this);\n    if ('preventDefault' in this.originalEvent) {\n      /** @type {UIEvent} */this.originalEvent.preventDefault();\n    }\n  };\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n  MapBrowserEvent.prototype.stopPropagation = function () {\n    _super.prototype.stopPropagation.call(this);\n    if ('stopPropagation' in this.originalEvent) {\n      /** @type {UIEvent} */this.originalEvent.stopPropagation();\n    }\n  };\n  return MapBrowserEvent;\n}(MapEvent);\nexport default MapBrowserEvent;","map":{"version":3,"names":["MapEvent","MapBrowserEvent","_super","__extends","type","map","originalEvent","opt_dragging","opt_frameState","opt_activePointers","_this","call","pixel_","coordinate_","dragging","undefined","activePointers","Object","defineProperty","prototype","get","getEventPixel","set","pixel","getCoordinateFromPixel","coordinate","preventDefault","stopPropagation"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\MapBrowserEvent.js"],"sourcesContent":["/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nclass MapBrowserEvent extends MapEvent {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean} [opt_dragging] Is the map currently being dragged?\n   * @param {import(\"./PluggableMap.js\").FrameState} [opt_frameState] Frame state.\n   * @param {Array<PointerEvent>} [opt_activePointers] Active pointers.\n   */\n  constructor(\n    type,\n    map,\n    originalEvent,\n    opt_dragging,\n    opt_frameState,\n    opt_activePointers\n  ) {\n    super(type, map, opt_frameState);\n\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n    this.originalEvent = originalEvent;\n\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n    this.pixel_ = null;\n\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.coordinate_ = null;\n\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n\n    /**\n     * @type {Array<PointerEvent>|undefined}\n     */\n    this.activePointers = opt_activePointers;\n  }\n\n  /**\n   * The map pixel relative to the viewport corresponding to the original event.\n   * @type {import(\"./pixel.js\").Pixel}\n   * @api\n   */\n  get pixel() {\n    if (!this.pixel_) {\n      this.pixel_ = this.map.getEventPixel(this.originalEvent);\n    }\n    return this.pixel_;\n  }\n  set pixel(pixel) {\n    this.pixel_ = pixel;\n  }\n\n  /**\n   * The coordinate corresponding to the original browser event.  This will be in the user\n   * projection if one is set.  Otherwise it will be in the view projection.\n   * @type {import(\"./coordinate.js\").Coordinate}\n   * @api\n   */\n  get coordinate() {\n    if (!this.coordinate_) {\n      this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n    }\n    return this.coordinate_;\n  }\n  set coordinate(coordinate) {\n    this.coordinate_ = coordinate;\n  }\n\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n  preventDefault() {\n    super.preventDefault();\n    if ('preventDefault' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).preventDefault();\n    }\n  }\n\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n  stopPropagation() {\n    super.stopPropagation();\n    if ('stopPropagation' in this.originalEvent) {\n      /** @type {UIEvent} */ (this.originalEvent).stopPropagation();\n    }\n  }\n}\n\nexport default MapBrowserEvent;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,QAAQ,MAAM,eAAe;AAEpC;;;;;;AAMA,IAAAC,eAAA,0BAAAC,MAAA;EAA8BC,SAAA,CAAAF,eAAA,EAAAC,MAAA;EAC5B;;;;;;;;EAQA,SAAAD,gBACEG,IAAI,EACJC,GAAG,EACHC,aAAa,EACbC,YAAY,EACZC,cAAc,EACdC,kBAAkB;IANpB,IAAAC,KAAA,GAQER,MAAA,CAAAS,IAAA,OAAMP,IAAI,EAAEC,GAAG,EAAEG,cAAc,CAAC;IAEhC;;;;;;IAMAE,KAAI,CAACJ,aAAa,GAAGA,aAAa;IAElC;;;;IAIAI,KAAI,CAACE,MAAM,GAAG,IAAI;IAElB;;;;IAIAF,KAAI,CAACG,WAAW,GAAG,IAAI;IAEvB;;;;;;;IAOAH,KAAI,CAACI,QAAQ,GAAGP,YAAY,KAAKQ,SAAS,GAAGR,YAAY,GAAG,KAAK;IAEjE;;;IAGAG,KAAI,CAACM,cAAc,GAAGP,kBAAkB;;EAC1C;EAOAQ,MAAA,CAAAC,cAAA,CAAIjB,eAAA,CAAAkB,SAAA,SAAK;IALT;;;;;SAKA,SAAAC,CAAA;MACE,IAAI,CAAC,IAAI,CAACR,MAAM,EAAE;QAChB,IAAI,CAACA,MAAM,GAAG,IAAI,CAACP,GAAG,CAACgB,aAAa,CAAC,IAAI,CAACf,aAAa,CAAC;;MAE1D,OAAO,IAAI,CAACM,MAAM;IACpB,CAAC;SACD,SAAAU,CAAUC,KAAK;MACb,IAAI,CAACX,MAAM,GAAGW,KAAK;IACrB,CAAC;;;;EAQDN,MAAA,CAAAC,cAAA,CAAIjB,eAAA,CAAAkB,SAAA,cAAU;IANd;;;;;;SAMA,SAAAC,CAAA;MACE,IAAI,CAAC,IAAI,CAACP,WAAW,EAAE;QACrB,IAAI,CAACA,WAAW,GAAG,IAAI,CAACR,GAAG,CAACmB,sBAAsB,CAAC,IAAI,CAACD,KAAK,CAAC;;MAEhE,OAAO,IAAI,CAACV,WAAW;IACzB,CAAC;SACD,SAAAS,CAAeG,UAAU;MACvB,IAAI,CAACZ,WAAW,GAAGY,UAAU;IAC/B,CAAC;;;;EAED;;;;;EAKAxB,eAAA,CAAAkB,SAAA,CAAAO,cAAc,GAAd;IACExB,MAAA,CAAAiB,SAAA,CAAMO,cAAc,CAAAf,IAAA,MAAE;IACtB,IAAI,gBAAgB,IAAI,IAAI,CAACL,aAAa,EAAE;MAC1C,sBAAwB,IAAI,CAACA,aAAa,CAAEoB,cAAc,EAAE;;EAEhE,CAAC;EAED;;;;;EAKAzB,eAAA,CAAAkB,SAAA,CAAAQ,eAAe,GAAf;IACEzB,MAAA,CAAAiB,SAAA,CAAMQ,eAAe,CAAAhB,IAAA,MAAE;IACvB,IAAI,iBAAiB,IAAI,IAAI,CAACL,aAAa,EAAE;MAC3C,sBAAwB,IAAI,CAACA,aAAa,CAAEqB,eAAe,EAAE;;EAEjE,CAAC;EACH,OAAA1B,eAAC;AAAD,CAAC,CA5G6BD,QAAQ;AA8GtC,eAAeC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}