{"ast":null,"code":"/**\n * @module ol/size\n */\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = size[0] * ratio + 0.5 | 0;\n  opt_size[1] = size[1] * ratio + 0.5 | 0;\n  return opt_size;\n}\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = size;\n      opt_size[1] = size;\n    }\n    return opt_size;\n  }\n}","map":{"version":3,"names":["buffer","size","num","opt_size","undefined","hasArea","scale","ratio","toSize","Array","isArray"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\size.js"],"sourcesContent":["/**\n * @module ol/size\n */\n\n/**\n * An array of numbers representing a size: `[width, height]`.\n * @typedef {Array<number>} Size\n * @api\n */\n\n/**\n * Returns a buffered size.\n * @param {Size} size Size.\n * @param {number} num The amount by which to buffer.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The buffered size.\n */\nexport function buffer(size, num, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = size[0] + 2 * num;\n  opt_size[1] = size[1] + 2 * num;\n  return opt_size;\n}\n\n/**\n * Determines if a size has a positive area.\n * @param {Size} size The size to test.\n * @return {boolean} The size has a positive area.\n */\nexport function hasArea(size) {\n  return size[0] > 0 && size[1] > 0;\n}\n\n/**\n * Returns a size scaled by a ratio. The result will be an array of integers.\n * @param {Size} size Size.\n * @param {number} ratio Ratio.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} The scaled size.\n */\nexport function scale(size, ratio, opt_size) {\n  if (opt_size === undefined) {\n    opt_size = [0, 0];\n  }\n  opt_size[0] = (size[0] * ratio + 0.5) | 0;\n  opt_size[1] = (size[1] * ratio + 0.5) | 0;\n  return opt_size;\n}\n\n/**\n * Returns an `Size` array for the passed in number (meaning: square) or\n * `Size` array.\n * (meaning: non-square),\n * @param {number|Size} size Width and height.\n * @param {Size} [opt_size] Optional reusable size array.\n * @return {Size} Size.\n * @api\n */\nexport function toSize(size, opt_size) {\n  if (Array.isArray(size)) {\n    return size;\n  } else {\n    if (opt_size === undefined) {\n      opt_size = [size, size];\n    } else {\n      opt_size[0] = size;\n      opt_size[1] = size;\n    }\n    return opt_size;\n  }\n}\n"],"mappings":"AAAA;;;AAIA;;;;;AAMA;;;;;;;AAOA,OAAM,SAAUA,MAAMA,CAACC,IAAI,EAAEC,GAAG,EAAEC,QAAQ;EACxC,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1BD,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEnBA,QAAQ,CAAC,CAAC,CAAC,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGC,GAAG;EAC/BC,QAAQ,CAAC,CAAC,CAAC,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAGC,GAAG;EAC/B,OAAOC,QAAQ;AACjB;AAEA;;;;;AAKA,OAAM,SAAUE,OAAOA,CAACJ,IAAI;EAC1B,OAAOA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAIA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC;AACnC;AAEA;;;;;;;AAOA,OAAM,SAAUK,KAAKA,CAACL,IAAI,EAAEM,KAAK,EAAEJ,QAAQ;EACzC,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1BD,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;;EAEnBA,QAAQ,CAAC,CAAC,CAAC,GAAIF,IAAI,CAAC,CAAC,CAAC,GAAGM,KAAK,GAAG,GAAG,GAAI,CAAC;EACzCJ,QAAQ,CAAC,CAAC,CAAC,GAAIF,IAAI,CAAC,CAAC,CAAC,GAAGM,KAAK,GAAG,GAAG,GAAI,CAAC;EACzC,OAAOJ,QAAQ;AACjB;AAEA;;;;;;;;;AASA,OAAM,SAAUK,MAAMA,CAACP,IAAI,EAAEE,QAAQ;EACnC,IAAIM,KAAK,CAACC,OAAO,CAACT,IAAI,CAAC,EAAE;IACvB,OAAOA,IAAI;GACZ,MAAM;IACL,IAAIE,QAAQ,KAAKC,SAAS,EAAE;MAC1BD,QAAQ,GAAG,CAACF,IAAI,EAAEA,IAAI,CAAC;KACxB,MAAM;MACLE,QAAQ,CAAC,CAAC,CAAC,GAAGF,IAAI;MAClBE,QAAQ,CAAC,CAAC,CAAC,GAAGF,IAAI;;IAEpB,OAAOE,QAAQ;;AAEnB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}