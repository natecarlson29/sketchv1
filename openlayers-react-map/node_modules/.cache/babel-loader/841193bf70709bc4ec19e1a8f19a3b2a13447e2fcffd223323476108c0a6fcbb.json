{"ast":null,"code":"/**\n * @module ol/geom/flat/intersectsextent\n */\nimport { containsExtent, createEmpty, extendFlatCoordinates, intersects, intersectsSegment } from '../../extent.js';\nimport { forEach as forEachSegment } from './segments.js';\nimport { linearRingContainsExtent, linearRingContainsXY } from './contains.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(flatCoordinates, offset, end, stride, extent) {\n  var coordinatesExtent = extendFlatCoordinates(createEmpty(), flatCoordinates, offset, end, stride);\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(flatCoordinates, offset, end, stride,\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n   * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n   * @return {boolean} `true` if the segment and the extent intersect,\n   *     `false` otherwise.\n   */\n  function (point1, point2) {\n    return intersectsSegment(extent, point1, point2);\n  });\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(flatCoordinates, offset, ends, stride, extent) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    if (intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(flatCoordinates, offset, end, stride, extent) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n    return true;\n  }\n  if (linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n    return true;\n  }\n  return false;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (var i = 1, ii = ends.length; i < ii; ++i) {\n    if (linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n      if (!intersectsLineString(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(flatCoordinates, offset, endss, stride, extent) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    if (intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}","map":{"version":3,"names":["containsExtent","createEmpty","extendFlatCoordinates","intersects","intersectsSegment","forEach","forEachSegment","linearRingContainsExtent","linearRingContainsXY","intersectsLineString","flatCoordinates","offset","end","stride","extent","coordinatesExtent","point1","point2","intersectsLineStringArray","ends","i","ii","length","intersectsLinearRing","intersectsLinearRingArray","intersectsLinearRingMultiArray","endss"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\flat\\intersectsextent.js"],"sourcesContent":["/**\n * @module ol/geom/flat/intersectsextent\n */\nimport {\n  containsExtent,\n  createEmpty,\n  extendFlatCoordinates,\n  intersects,\n  intersectsSegment,\n} from '../../extent.js';\nimport {forEach as forEachSegment} from './segments.js';\nimport {linearRingContainsExtent, linearRingContainsXY} from './contains.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineString(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  const coordinatesExtent = extendFlatCoordinates(\n    createEmpty(),\n    flatCoordinates,\n    offset,\n    end,\n    stride\n  );\n  if (!intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return forEachSegment(\n    flatCoordinates,\n    offset,\n    end,\n    stride,\n    /**\n     * @param {import(\"../../coordinate.js\").Coordinate} point1 Start point.\n     * @param {import(\"../../coordinate.js\").Coordinate} point2 End point.\n     * @return {boolean} `true` if the segment and the extent intersect,\n     *     `false` otherwise.\n     */\n    function (point1, point2) {\n      return intersectsSegment(extent, point1, point2);\n    }\n  );\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLineStringArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    if (\n      intersectsLineString(flatCoordinates, offset, ends[i], stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRing(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  extent\n) {\n  if (intersectsLineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[0],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[1]\n    )\n  ) {\n    return true;\n  }\n  if (\n    linearRingContainsXY(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      extent[2],\n      extent[3]\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingArray(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  extent\n) {\n  if (!intersectsLinearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  for (let i = 1, ii = ends.length; i < ii; ++i) {\n    if (\n      linearRingContainsExtent(\n        flatCoordinates,\n        ends[i - 1],\n        ends[i],\n        stride,\n        extent\n      )\n    ) {\n      if (\n        !intersectsLineString(\n          flatCoordinates,\n          ends[i - 1],\n          ends[i],\n          stride,\n          extent\n        )\n      ) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {import(\"../../extent.js\").Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\nexport function intersectsLinearRingMultiArray(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  extent\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    if (\n      intersectsLinearRingArray(flatCoordinates, offset, ends, stride, extent)\n    ) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}