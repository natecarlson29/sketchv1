{"ast":null,"code":"/**\n * @module ol/rotationconstraint\n */\nimport { toRadians } from './math.js';\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  } else {\n    return undefined;\n  }\n}\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  var theta = 2 * Math.PI / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n      if (opt_isMoving) {\n        return rotation;\n      }\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n/**\n * @param {number} [opt_tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(opt_tolerance) {\n  var tolerance = opt_tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n      if (opt_isMoving) {\n        return rotation;\n      }\n      if (rotation !== undefined) {\n        if (Math.abs(rotation) <= tolerance) {\n          return 0;\n        } else {\n          return rotation;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}","map":{"version":3,"names":["toRadians","disable","rotation","undefined","none","createSnapToN","n","theta","Math","PI","opt_isMoving","floor","createSnapToZero","opt_tolerance","tolerance","abs"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\rotationconstraint.js"],"sourcesContent":["/**\n * @module ol/rotationconstraint\n */\nimport {toRadians} from './math.js';\n\n/**\n * @typedef {function((number|undefined), boolean=): (number|undefined)} Type\n */\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function disable(rotation) {\n  if (rotation !== undefined) {\n    return 0;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number|undefined} rotation Rotation.\n * @return {number|undefined} Rotation.\n */\nexport function none(rotation) {\n  if (rotation !== undefined) {\n    return rotation;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * @param {number} n N.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToN(n) {\n  const theta = (2 * Math.PI) / n;\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n      if (opt_isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        rotation = Math.floor(rotation / theta + 0.5) * theta;\n        return rotation;\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {number} [opt_tolerance] Tolerance.\n * @return {Type} Rotation constraint.\n */\nexport function createSnapToZero(opt_tolerance) {\n  const tolerance = opt_tolerance || toRadians(5);\n  return (\n    /**\n     * @param {number|undefined} rotation Rotation.\n     * @param {boolean} [opt_isMoving] True if an interaction or animation is in progress.\n     * @return {number|undefined} Rotation.\n     */\n    function (rotation, opt_isMoving) {\n      if (opt_isMoving) {\n        return rotation;\n      }\n\n      if (rotation !== undefined) {\n        if (Math.abs(rotation) <= tolerance) {\n          return 0;\n        } else {\n          return rotation;\n        }\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n"],"mappings":"AAAA;;;AAGA,SAAQA,SAAS,QAAO,WAAW;AAEnC;;;AAIA;;;;AAIA,OAAM,SAAUC,OAAOA,CAACC,QAAQ;EAC9B,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1B,OAAO,CAAC;GACT,MAAM;IACL,OAAOA,SAAS;;AAEpB;AAEA;;;;AAIA,OAAM,SAAUC,IAAIA,CAACF,QAAQ;EAC3B,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1B,OAAOD,QAAQ;GAChB,MAAM;IACL,OAAOC,SAAS;;AAEpB;AAEA;;;;AAIA,OAAM,SAAUE,aAAaA,CAACC,CAAC;EAC7B,IAAMC,KAAK,GAAI,CAAC,GAAGC,IAAI,CAACC,EAAE,GAAIH,CAAC;EAC/B;IACE;;;;;IAKA,UAAUJ,QAAQ,EAAEQ,YAAY;MAC9B,IAAIA,YAAY,EAAE;QAChB,OAAOR,QAAQ;;MAGjB,IAAIA,QAAQ,KAAKC,SAAS,EAAE;QAC1BD,QAAQ,GAAGM,IAAI,CAACG,KAAK,CAACT,QAAQ,GAAGK,KAAK,GAAG,GAAG,CAAC,GAAGA,KAAK;QACrD,OAAOL,QAAQ;OAChB,MAAM;QACL,OAAOC,SAAS;;IAEpB;EAAC;AAEL;AAEA;;;;AAIA,OAAM,SAAUS,gBAAgBA,CAACC,aAAa;EAC5C,IAAMC,SAAS,GAAGD,aAAa,IAAIb,SAAS,CAAC,CAAC,CAAC;EAC/C;IACE;;;;;IAKA,UAAUE,QAAQ,EAAEQ,YAAY;MAC9B,IAAIA,YAAY,EAAE;QAChB,OAAOR,QAAQ;;MAGjB,IAAIA,QAAQ,KAAKC,SAAS,EAAE;QAC1B,IAAIK,IAAI,CAACO,GAAG,CAACb,QAAQ,CAAC,IAAIY,SAAS,EAAE;UACnC,OAAO,CAAC;SACT,MAAM;UACL,OAAOZ,QAAQ;;OAElB,MAAM;QACL,OAAOC,SAAS;;IAEpB;EAAC;AAEL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}