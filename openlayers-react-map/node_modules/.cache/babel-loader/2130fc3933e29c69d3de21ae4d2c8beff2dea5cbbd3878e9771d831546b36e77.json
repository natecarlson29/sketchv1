{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({\n      color: 'blue'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)'\n  })\n});\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)'\n  })\n});\nconst selectedPolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'limegreen',\n    width: 3,\n    lineDash: [8, 4]\n  }),\n  fill: new Fill({\n    color: 'rgba(50, 205, 50, 0.15)'\n  })\n});\nconst ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({\n      color: 'rgba(0,0,255,0.2)'\n    }),\n    stroke: new Stroke({\n      color: 'blue',\n      width: 2\n    })\n  })\n});\nconst selectedVertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 8,\n    fill: new Fill({\n      color: 'red'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [selectedVertex, setSelectedVertex] = useState(null); // {feature, index}\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]); // overlays for current drawing\n  const allOverlaysRef = useRef([]); // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const selectedVertexFeatureRef = useRef(null);\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    mapRef.current = map;\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n      });\n      overlaysRef.current = [];\n    }\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + \"'\";\n    }\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          updateVertexMarkers([coord, coord]);\n          createSegmentOverlays([coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      } else if (modeRef.current === 'select' && selectedFeature) {\n        // Vertex selection logic\n        const coords = selectedFeature.getGeometry().getCoordinates()[0];\n        const pixel = map.getPixelFromCoordinate(evt.coordinate);\n        let foundIdx = null;\n        coords.forEach((coord, idx) => {\n          const px = map.getPixelFromCoordinate(coord);\n          const dist = Math.hypot(px[0] - pixel[0], px[1] - pixel[1]);\n          if (dist < 10) {\n            // 10px threshold\n            foundIdx = idx;\n          }\n        });\n        // Remove previous selected vertex marker\n        if (selectedVertexFeatureRef.current) {\n          vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n          selectedVertexFeatureRef.current = null;\n        }\n        if (foundIdx !== null) {\n          setSelectedVertex({\n            feature: selectedFeature,\n            index: foundIdx\n          });\n          // Add marker for selected vertex\n          const marker = new Feature(new Point(coords[foundIdx]));\n          marker.setStyle(selectedVertexStyle);\n          vertexSourceRef.current.addFeature(marker);\n          selectedVertexFeatureRef.current = marker;\n        } else {\n          setSelectedVertex(null);\n        }\n      } else {\n        // Remove previous selected vertex marker if clicking elsewhere\n        if (selectedVertexFeatureRef.current) {\n          vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n          selectedVertexFeatureRef.current = null;\n        }\n        setSelectedVertex(null);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      // Remove select interaction if present\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      // Remove selected vertex marker\n      if (selectedVertexFeatureRef.current && vertexSourceRef.current) {\n        vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n        selectedVertexFeatureRef.current = null;\n      }\n    };\n    // eslint-disable-next-line\n  }, []); // Only run once on mount\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select interaction if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      // Add OpenLayers Select interaction\n      const select = new Select({\n        layers: [map.getLayers().item(1)],\n        // Only vectorLayer\n        style: selectedPolygonStyle\n        // filter: feature => feature.getGeometry() instanceof Polygon,\n      });\n      select.on('select', e => {\n        // Only allow single selection\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n        // Remove selected vertex marker when changing polygon selection\n        if (selectedVertexFeatureRef.current && vertexSourceRef.current) {\n          vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n          selectedVertexFeatureRef.current = null;\n        }\n        setSelectedVertex(null);\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      // Remove selection style if switching out of select mode\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n      // Remove selected vertex marker\n      if (selectedVertexFeatureRef.current && vertexSourceRef.current) {\n        vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n        selectedVertexFeatureRef.current = null;\n      }\n      setSelectedVertex(null);\n    }\n  }, [mode]);\n\n  // --- Handle Delete key for vertex deletion ---\n  useEffect(() => {\n    function handleDelete(e) {\n      if (e.key === 'Delete' && selectedVertex && selectedVertex.feature) {\n        const feature = selectedVertex.feature;\n        let coords = feature.getGeometry().getCoordinates()[0];\n        // Only allow deletion if polygon will still have at least 3 points (closed)\n        if (coords.length > 4) {\n          coords.splice(selectedVertex.index, 1);\n          // Ensure polygon is closed\n          coords[coords.length - 1] = coords[0];\n          feature.getGeometry().setCoordinates([coords]);\n        }\n        // Remove selected vertex marker\n        if (selectedVertexFeatureRef.current && vertexSourceRef.current) {\n          vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n          selectedVertexFeatureRef.current = null;\n        }\n        setSelectedVertex(null);\n      }\n    }\n    document.addEventListener('keydown', handleDelete);\n    return () => document.removeEventListener('keydown', handleDelete);\n  }, [selectedVertex]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"FlipHoriz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"FlipVert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 523,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 497,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"9qqq0yR6iyX1RJ3qzIFkx6yq7I8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","Select","fromLonLat","getLength","Style","CircleStyle","Fill","Stroke","LineString","jsxDEV","_jsxDEV","vertexStyle","image","radius","fill","color","stroke","width","polygonStyle","activePolygonStyle","selectedPolygonStyle","lineDash","ghostMarkerStyle","selectedVertexStyle","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","selectedVertex","setSelectedVertex","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","selectedVertexFeatureRef","current","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","clearCurrentOverlays","forEach","overlay","removeOverlay","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","DIM_OFFSET","i","length","c1","c2","pixel1","getPixelFromCoordinate","pixel2","dx","dy","len","Math","sqrt","perp","offsetMidPixel","offsetMidCoord","getCoordinateFromPixel","tooltip","document","createElement","className","innerHTML","isVertical","abs","transform","element","position","positioning","stopEvent","addOverlay","push","addVertexMarkers","addFeature","updateVertexMarkers","toRemove","getFeatures","f","get","removeFeature","feat","set","on","evt","coord","coordinate","ghost","setStyle","poly","feature","getGeometry","getCoordinates","slice","setCoordinates","pixel","foundIdx","idx","px","dist","hypot","index","marker","addSegment","direction","last","OFFSET","newPt","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","splice","addEventListener","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","select","getLayers","item","selected","addInteraction","handleDelete","children","id","ref","type","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","onClick","height","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\n\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'white', width: 2 }),\n  }),\n});\n\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)',\n  }),\n});\n\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)',\n  }),\n});\n\nconst selectedPolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'limegreen',\n    width: 3,\n    lineDash: [8, 4],\n  }),\n  fill: new Fill({\n    color: 'rgba(50, 205, 50, 0.15)',\n  }),\n});\n\nconst ghostMarkerStyle = new Style({\n  image: new CircleStyle({\n    radius: 7,\n    fill: new Fill({ color: 'rgba(0,0,255,0.2)' }),\n    stroke: new Stroke({ color: 'blue', width: 2 }),\n  }),\n});\n\nconst selectedVertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 8,\n    fill: new Fill({ color: 'red' }),\n    stroke: new Stroke({ color: 'white', width: 2 }),\n  }),\n});\n\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw'); // 'draw' or 'select'\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [selectedVertex, setSelectedVertex] = useState(null); // {feature, index}\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);      // overlays for current drawing\n  const allOverlaysRef = useRef([]);   // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const selectedVertexFeatureRef = useRef(null);\n\n  // Keep modeRef in sync with mode for event handlers\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    mapRef.current = map;\n\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n      });\n      overlaysRef.current = [];\n    }\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + \"'\";\n    }\n\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\n        ];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        // Remove previous ghost marker\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        // Add new ghost marker\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // Remove ghost marker if not in draw mode or drawing started\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          // Remove ghost marker\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          // Start new polygon\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle); // Active style\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          updateVertexMarkers([coord, coord]);\n          createSegmentOverlays([coord, coord]);\n        } else {\n          // Add vertex\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      } else if (modeRef.current === 'select' && selectedFeature) {\n        // Vertex selection logic\n        const coords = selectedFeature.getGeometry().getCoordinates()[0];\n        const pixel = map.getPixelFromCoordinate(evt.coordinate);\n        let foundIdx = null;\n        coords.forEach((coord, idx) => {\n          const px = map.getPixelFromCoordinate(coord);\n          const dist = Math.hypot(px[0] - pixel[0], px[1] - pixel[1]);\n          if (dist < 10) { // 10px threshold\n            foundIdx = idx;\n          }\n        });\n        // Remove previous selected vertex marker\n        if (selectedVertexFeatureRef.current) {\n          vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n          selectedVertexFeatureRef.current = null;\n        }\n        if (foundIdx !== null) {\n          setSelectedVertex({ feature: selectedFeature, index: foundIdx });\n          // Add marker for selected vertex\n          const marker = new Feature(new Point(coords[foundIdx]));\n          marker.setStyle(selectedVertexStyle);\n          vertexSourceRef.current.addFeature(marker);\n          selectedVertexFeatureRef.current = marker;\n        } else {\n          setSelectedVertex(null);\n        }\n      } else {\n        // Remove previous selected vertex marker if clicking elsewhere\n        if (selectedVertexFeatureRef.current) {\n          vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n          selectedVertexFeatureRef.current = null;\n        }\n        setSelectedVertex(null);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z') &&\n        drawingRef.current &&\n        modeRef.current === 'draw'\n      ) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      // Remove select interaction if present\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n      // Remove selected vertex marker\n      if (selectedVertexFeatureRef.current && vertexSourceRef.current) {\n        vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n        selectedVertexFeatureRef.current = null;\n      }\n    };\n    // eslint-disable-next-line\n  }, []); // Only run once on mount\n\n  // --- Update offsetRef when [text] changes ---\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  // --- Mode and selection logic (add/remove select interaction) ---\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // Remove ghost marker if switching out of draw mode\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    // Remove previous select interaction if present\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      // Add OpenLayers Select interaction\n      const select = new Select({\n        layers: [map.getLayers().item(1)], // Only vectorLayer\n        style: selectedPolygonStyle\n        // filter: feature => feature.getGeometry() instanceof Polygon,\n      });\n      select.on('select', e => {\n        // Only allow single selection\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n        // Remove selected vertex marker when changing polygon selection\n        if (selectedVertexFeatureRef.current && vertexSourceRef.current) {\n          vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n          selectedVertexFeatureRef.current = null;\n        }\n        setSelectedVertex(null);\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      // Remove selection style if switching out of select mode\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n      // Remove selected vertex marker\n      if (selectedVertexFeatureRef.current && vertexSourceRef.current) {\n        vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n        selectedVertexFeatureRef.current = null;\n      }\n      setSelectedVertex(null);\n    }\n  }, [mode]);\n\n  // --- Handle Delete key for vertex deletion ---\n  useEffect(() => {\n    function handleDelete(e) {\n      if (e.key === 'Delete' && selectedVertex && selectedVertex.feature) {\n        const feature = selectedVertex.feature;\n        let coords = feature.getGeometry().getCoordinates()[0];\n        // Only allow deletion if polygon will still have at least 3 points (closed)\n        if (coords.length > 4) {\n          coords.splice(selectedVertex.index, 1);\n          // Ensure polygon is closed\n          coords[coords.length - 1] = coords[0];\n          feature.getGeometry().setCoordinates([coords]);\n        }\n        // Remove selected vertex marker\n        if (selectedVertexFeatureRef.current && vertexSourceRef.current) {\n          vertexSourceRef.current.removeFeature(selectedVertexFeatureRef.current);\n          selectedVertexFeatureRef.current = null;\n        }\n        setSelectedVertex(null);\n      }\n    }\n    document.addEventListener('keydown', handleDelete);\n    return () => document.removeEventListener('keydown', handleDelete);\n  }, [selectedVertex]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">FlipHoriz</div>\n        <div className=\"map-button\">FlipVert</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}