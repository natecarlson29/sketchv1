{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, { centroid as centroidFromPointers } from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nvar PinchRotate = /** @class */function (_super) {\n  __extends(PinchRotate, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function PinchRotate(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    _this = _super.call(this, pointerOptions) || this;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    _this.anchor_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.rotating_ = false;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.rotationDelta_ = 0.0;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  PinchRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n    var rotationDelta = 0.0;\n    var touch0 = this.targetPointers[0];\n    var touch1 = this.targetPointers[1];\n    // angle between touches\n    var angle = Math.atan2(touch1.clientY - touch0.clientY, touch1.clientX - touch0.clientX);\n    if (this.lastAngle_ !== undefined) {\n      var delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    var viewportPosition = map.getViewport().getBoundingClientRect();\n    var centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid);\n    // rotate\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  PinchRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      var map = mapBrowserEvent.map;\n      var view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    } else {\n      return true;\n    }\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  PinchRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      var map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return PinchRotate;\n}(PointerInteraction);\nexport default PinchRotate;","map":{"version":3,"names":["PointerInteraction","centroid","centroidFromPointers","FALSE","disable","PinchRotate","_super","__extends","opt_options","_this","options","pointerOptions","stopDown","call","anchor_","lastAngle_","undefined","rotating_","rotationDelta_","threshold_","threshold","duration_","duration","prototype","handleDragEvent","mapBrowserEvent","rotationDelta","touch0","targetPointers","touch1","angle","Math","atan2","clientY","clientX","delta","abs","map","view","getView","getConstraints","rotation","viewportPosition","getViewport","getBoundingClientRect","left","top","getCoordinateFromPixelInternal","render","adjustRotationInternal","handleUpEvent","length","endInteraction","handleDownEvent","handlingDownUpSequence","beginInteraction"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\interaction\\PinchRotate.js"],"sourcesContent":["/**\n * @module ol/interaction/PinchRotate\n */\nimport PointerInteraction, {\n  centroid as centroidFromPointers,\n} from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {disable} from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} [duration=250] The duration of the animation in\n * milliseconds.\n * @property {number} [threshold=0.3] Minimal angle in radians to start a rotation.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by twisting with two fingers\n * on a touch screen.\n * @api\n */\nclass PinchRotate extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (\n      options\n    );\n\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotating_ = false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotationDelta_ = 0.0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.threshold_ = options.threshold !== undefined ? options.threshold : 0.3;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    let rotationDelta = 0.0;\n\n    const touch0 = this.targetPointers[0];\n    const touch1 = this.targetPointers[1];\n\n    // angle between touches\n    const angle = Math.atan2(\n      touch1.clientY - touch0.clientY,\n      touch1.clientX - touch0.clientX\n    );\n\n    if (this.lastAngle_ !== undefined) {\n      const delta = angle - this.lastAngle_;\n      this.rotationDelta_ += delta;\n      if (!this.rotating_ && Math.abs(this.rotationDelta_) > this.threshold_) {\n        this.rotating_ = true;\n      }\n      rotationDelta = delta;\n    }\n    this.lastAngle_ = angle;\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n\n    // rotate anchor point.\n    // FIXME: should be the intersection point between the lines:\n    //     touch0,touch1 and previousTouch0,previousTouch1\n    const viewportPosition = map.getViewport().getBoundingClientRect();\n    const centroid = centroidFromPointers(this.targetPointers);\n    centroid[0] -= viewportPosition.left;\n    centroid[1] -= viewportPosition.top;\n    this.anchor_ = map.getCoordinateFromPixelInternal(centroid);\n\n    // rotate\n    if (this.rotating_) {\n      map.render();\n      view.adjustRotationInternal(rotationDelta, this.anchor_);\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (this.targetPointers.length < 2) {\n      const map = mapBrowserEvent.map;\n      const view = map.getView();\n      view.endInteraction(this.duration_);\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.targetPointers.length >= 2) {\n      const map = mapBrowserEvent.map;\n      this.anchor_ = null;\n      this.lastAngle_ = undefined;\n      this.rotating_ = false;\n      this.rotationDelta_ = 0.0;\n      if (!this.handlingDownUpSequence) {\n        map.getView().beginInteraction();\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default PinchRotate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}