{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport History from './map-helpers/History';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, remarkPolygonSegments, remarkLineSegments, pointToSegmentDistance } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 2.018;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  // const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 10) {\n    let closestCoord = null;\n    let minDist = Infinity;\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n    return closestCoord;\n  }\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    // const vertexSource = new VectorSource();\n    // vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    // const vertexLayer = new VectorLayer({\n    //   source: vertexSource,\n    //   style: ghostMarkerStyle,\n    // });\n\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer\n      // vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n\n    // After vectorSource and map are created\n\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    map.addControl(new Rotate({\n      autoHide: false,\n      duration: 500\n    }));\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = feature => remarkPolygonSegments(feature, mapRef);\n\n    // Expose remarkLineSegments for use in handlers\n    mapRef.current.remarkLineSegments = feature => remarkLineSegments(feature, mapRef);\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 10) || coord;\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n        // if (ghostMarkerRef.current) {\n        //   vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        // }\n        // const ghost = new Feature(new Point(coord));\n        // ghost.setStyle(ghostMarkerStyle);\n        // vertexSourceRef.current.addFeature(ghost);\n        // ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        // ghostMarkerRef.current = null;\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else if (modeRef.current === 'select') {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n              if (dist < 8) {\n                // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) {\n                // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n    // ...existing code...\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          // vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 10) || coord;\n        // Use snappedCoord instead of coord for the new polygon\n        const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n        // Track action in history\n        console.log({\n          FeatureId: feature.getId()\n        });\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]]\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n      }\n    }\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Find the index of the currently selected feature in the features array\n      let currentIdx = -1;\n      if (selectedFeature) {\n        currentIdx = features.findIndex(f => f === selectedFeature);\n      }\n\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n\n      // Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\n      allPolygons.forEach(f => {\n        f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      });\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n\n        // Undo for deleting a segment (LineString -> Polygon)\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString');\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            createSegmentOverlays(newPoly, [prevCoords], mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Undo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.prevCoords], mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, [prevCoords], mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      let lastRedoAction = null;\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastRedoAction = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n\n        // Redo for deleting a segment (Polygon -> LineString)\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for add-point and delete-vertex\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, [newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n      const [start, end] = coords;\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      // Get pixel coordinates\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n      }\n      // ctrl + z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.key === 'R')) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n    //   vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n    //   ghostMarkerRef.current = null;\n    // }\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 672,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 678,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 671,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 686,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 688,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 685,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 701,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 659,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"bImF+JzLZ2tQOAQ6bUNOg3s6Qxk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","Select","fromLonLat","ScaleLine","Rotate","FlipHorizButton","FlipVertButton","RightClick","History","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","clearPolygonOverlays","createSegmentOverlays","remarkPolygonSegments","remarkLineSegments","pointToSegmentDistance","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","drawing","setDrawing","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","getSource","clear","getSnappedCoordinate","map","vectorSource","pointerPixel","tolerance","closestCoord","minDist","Infinity","getFeatures","forEach","geom","getGeometry","coords","getType","getCoordinates","coord","pixel","getPixelFromCoordinate","dist","Math","hypot","vectorLayer","source","style","target","layers","view","center","zoom","addControl","units","autoHide","duration","highlightSource","name","addLayer","on","evt","coordinate","snappedCoord","removeFeature","ghost","setStyle","addFeature","found","forEachFeatureAtPixel","i","length","sqrt","pow","vertexFeature","seg","pixel1","pixel2","segFeature","drawClick","poly","setId","Date","now","toString","console","log","FeatureId","getId","featureId","prevCoords","newCoords","slice","setCoordinates","selectClick","features","getFeaturesAtPixel","allPolygons","f","currentIdx","findIndex","nextIdx","nextFeature","addSegment","direction","last","dx","dy","OFFSET","rotation","getView","getRotation","cos","sin","rotatedDx","rotatedDy","newPt","handleUndo","lastActionForRedo","lastAction","lineFeature","newPoly","redoPrev","handleRedo","lastRedoAction","require","default","histPrev","rotateMapToHighlightedSegment","start","end","currentRotation","startPixel","endPixel","unrotatedDx","unrotatedDy","angle","atan2","PI","animate","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","document","addEventListener","overlay","removeOverlay","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","children","id","ref","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport History from './map-helpers/History';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  remarkPolygonSegments,\n  remarkLineSegments,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 2.018;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  // const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 10) {\n    let closestCoord = null;\n    let minDist = Infinity;\n\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n\n    return closestCoord;\n  }\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    // const vertexSource = new VectorSource();\n    // vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    // const vertexLayer = new VectorLayer({\n    //   source: vertexSource,\n    //   style: ghostMarkerStyle,\n    // });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer\n        // vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    // After vectorSource and map are created\n\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    map.addControl(new Rotate({ autoHide: false, duration: 500 }));\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = (feature) => remarkPolygonSegments(feature, mapRef);\n\n    // Expose remarkLineSegments for use in handlers\n    mapRef.current.remarkLineSegments = (feature) => remarkLineSegments(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 10) || coord;\n\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n        // if (ghostMarkerRef.current) {\n        //   vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        // }\n        // const ghost = new Feature(new Point(coord));\n        // ghost.setStyle(ghostMarkerStyle);\n        // vertexSourceRef.current.addFeature(ghost);\n        // ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        // vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        // ghostMarkerRef.current = null;\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else if (modeRef.current === 'select') {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n    // ...existing code...\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          // vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 10) || coord;\n        // Use snappedCoord instead of coord for the new polygon\n        const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        const feature = new Feature(poly);\n\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n        // Track action in history\n        console.log({ FeatureId: feature.getId() });\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]],\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n      }\n    }\n\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Find the index of the currently selected feature in the features array\n      let currentIdx = -1;\n      if (selectedFeature) {\n        currentIdx = features.findIndex(f => f === selectedFeature);\n      }\n\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n\n      // Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\n      allPolygons.forEach(f => {\n        f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      });\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        // Undo for deleting a segment (LineString -> Polygon)\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n          );\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            createSegmentOverlays(newPoly, [prevCoords], mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Undo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.prevCoords], mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, [prevCoords], mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      let lastRedoAction = null;\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastRedoAction = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        // Redo for deleting a segment (Polygon -> LineString)\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for add-point and delete-vertex\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, [newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, [lastAction.newCoords], mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      // Get pixel coordinates\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [\n        (start[0] + end[0]) / 2,\n        (start[1] + end[1]) / 2\n      ];\n\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n\n\n\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    // if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n    //   vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n    //   ghostMarkerRef.current = null;\n    // }\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <button\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n          disabled={mode === 'draw' && drawing}>\n          Draw\n        </button>\n        <button\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n          disabled={mode === 'draw' && drawing}>\n          Select\n        </button>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n      />\n      <History history={history} redoStack={redoStack} />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}