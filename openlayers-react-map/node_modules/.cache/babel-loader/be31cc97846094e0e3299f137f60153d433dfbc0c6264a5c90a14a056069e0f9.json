{"ast":null,"code":"/**\n * @module ol/TileRange\n */\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nvar TileRange = /** @class */function () {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  function TileRange(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  TileRange.prototype.contains = function (tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  TileRange.prototype.containsTileRange = function (tileRange) {\n    return this.minX <= tileRange.minX && tileRange.maxX <= this.maxX && this.minY <= tileRange.minY && tileRange.maxY <= this.maxY;\n  };\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  TileRange.prototype.containsXY = function (x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  TileRange.prototype.equals = function (tileRange) {\n    return this.minX == tileRange.minX && this.minY == tileRange.minY && this.maxX == tileRange.maxX && this.maxY == tileRange.maxY;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  TileRange.prototype.extend = function (tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  };\n  /**\n   * @return {number} Height.\n   */\n  TileRange.prototype.getHeight = function () {\n    return this.maxY - this.minY + 1;\n  };\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  TileRange.prototype.getSize = function () {\n    return [this.getWidth(), this.getHeight()];\n  };\n  /**\n   * @return {number} Width.\n   */\n  TileRange.prototype.getWidth = function () {\n    return this.maxX - this.minX + 1;\n  };\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  TileRange.prototype.intersects = function (tileRange) {\n    return this.minX <= tileRange.maxX && this.maxX >= tileRange.minX && this.minY <= tileRange.maxY && this.maxY >= tileRange.minY;\n  };\n  return TileRange;\n}();\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\nexport default TileRange;","map":{"version":3,"names":["TileRange","minX","maxX","minY","maxY","prototype","contains","tileCoord","containsXY","containsTileRange","tileRange","x","y","equals","extend","getHeight","getSize","getWidth","intersects","createOrUpdate","undefined"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\TileRange.js"],"sourcesContent":["/**\n * @module ol/TileRange\n */\n\n/**\n * A representation of a contiguous block of tiles.  A tile range is specified\n * by its min/max tile coordinates and is inclusive of coordinates.\n */\nclass TileRange {\n  /**\n   * @param {number} minX Minimum X.\n   * @param {number} maxX Maximum X.\n   * @param {number} minY Minimum Y.\n   * @param {number} maxY Maximum Y.\n   */\n  constructor(minX, maxX, minY, maxY) {\n    /**\n     * @type {number}\n     */\n    this.minX = minX;\n\n    /**\n     * @type {number}\n     */\n    this.maxX = maxX;\n\n    /**\n     * @type {number}\n     */\n    this.minY = minY;\n\n    /**\n     * @type {number}\n     */\n    this.maxY = maxY;\n  }\n\n  /**\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {boolean} Contains tile coordinate.\n   */\n  contains(tileCoord) {\n    return this.containsXY(tileCoord[1], tileCoord[2]);\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Contains.\n   */\n  containsTileRange(tileRange) {\n    return (\n      this.minX <= tileRange.minX &&\n      tileRange.maxX <= this.maxX &&\n      this.minY <= tileRange.minY &&\n      tileRange.maxY <= this.maxY\n    );\n  }\n\n  /**\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {boolean} Contains coordinate.\n   */\n  containsXY(x, y) {\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Equals.\n   */\n  equals(tileRange) {\n    return (\n      this.minX == tileRange.minX &&\n      this.minY == tileRange.minY &&\n      this.maxX == tileRange.maxX &&\n      this.maxY == tileRange.maxY\n    );\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   */\n  extend(tileRange) {\n    if (tileRange.minX < this.minX) {\n      this.minX = tileRange.minX;\n    }\n    if (tileRange.maxX > this.maxX) {\n      this.maxX = tileRange.maxX;\n    }\n    if (tileRange.minY < this.minY) {\n      this.minY = tileRange.minY;\n    }\n    if (tileRange.maxY > this.maxY) {\n      this.maxY = tileRange.maxY;\n    }\n  }\n\n  /**\n   * @return {number} Height.\n   */\n  getHeight() {\n    return this.maxY - this.minY + 1;\n  }\n\n  /**\n   * @return {import(\"./size.js\").Size} Size.\n   */\n  getSize() {\n    return [this.getWidth(), this.getHeight()];\n  }\n\n  /**\n   * @return {number} Width.\n   */\n  getWidth() {\n    return this.maxX - this.minX + 1;\n  }\n\n  /**\n   * @param {TileRange} tileRange Tile range.\n   * @return {boolean} Intersects.\n   */\n  intersects(tileRange) {\n    return (\n      this.minX <= tileRange.maxX &&\n      this.maxX >= tileRange.minX &&\n      this.minY <= tileRange.maxY &&\n      this.maxY >= tileRange.minY\n    );\n  }\n}\n\n/**\n * @param {number} minX Minimum X.\n * @param {number} maxX Maximum X.\n * @param {number} minY Minimum Y.\n * @param {number} maxY Maximum Y.\n * @param {TileRange} [tileRange] TileRange.\n * @return {TileRange} Tile range.\n */\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\n  if (tileRange !== undefined) {\n    tileRange.minX = minX;\n    tileRange.maxX = maxX;\n    tileRange.minY = minY;\n    tileRange.maxY = maxY;\n    return tileRange;\n  } else {\n    return new TileRange(minX, maxX, minY, maxY);\n  }\n}\n\nexport default TileRange;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}