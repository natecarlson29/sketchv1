{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\map-actions\\\\QuickShape.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { QuickShapeIcon } from \"../svg\";\nimport Draw from \"ol/interaction/Draw\";\nimport Polygon, { fromCircle } from \"ol/geom/Polygon\";\n// import Circle from \"ol/geom/Circle\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SHAPES = [{\n  name: \"Circle\",\n  value: \"circle\"\n}, {\n  name: \"Triangle\",\n  value: \"triangle\"\n}, {\n  name: \"Square\",\n  value: \"square\"\n}];\nexport default function QuickShape({\n  mapRef,\n  vectorSourceRef,\n  setDrawing,\n  setMode,\n  addHistoryAction,\n  mode\n}) {\n  _s();\n  const [open, setOpen] = useState(false);\n  const menuRef = useRef();\n  const drawRef = useRef(null);\n  useEffect(() => {\n    function handleClickOutside(e) {\n      if (menuRef.current && !menuRef.current.contains(e.target)) {\n        setOpen(false);\n      }\n    }\n    if (open) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n  }, [open]);\n  useEffect(() => {\n    const map = mapRef.current;\n    return () => {\n      if (drawRef.current && map) {\n        map.removeInteraction(drawRef.current);\n        drawRef.current = null;\n      }\n    };\n  }, [mapRef]);\n  function handleShapeClick(shape) {\n    setOpen(false);\n    if (!mapRef.current || !vectorSourceRef.current) return;\n\n    // Remove any existing draw interaction\n    if (drawRef.current) {\n      mapRef.current.removeInteraction(drawRef.current);\n      drawRef.current = null;\n    }\n    if (shape.value === \"circle\") {\n      const draw = new Draw({\n        source: vectorSourceRef.current,\n        type: \"Circle\"\n      });\n      mapRef.current.addInteraction(draw);\n      drawRef.current = draw;\n      setDrawing(true);\n      setMode(\"circle\");\n      draw.on(\"drawend\", evt => {\n        const circleGeom = evt.feature.getGeometry();\n        const polygonGeom = fromCircle(circleGeom, 64);\n        evt.feature.setGeometry(polygonGeom);\n        evt.feature.set(\"no-measurements\", true);\n\n        // Ensure the feature has an ID for undo/redo\n        if (!evt.feature.getId()) {\n          evt.feature.setId(Date.now().toString());\n        }\n        addHistoryAction({\n          type: \"draw-circle\",\n          featureId: evt.feature.getId(),\n          coords: polygonGeom.getCoordinates()\n        });\n        setDrawing(false);\n        setMode(\"select\");\n        if (drawRef.current) {\n          mapRef.current.removeInteraction(drawRef.current);\n          drawRef.current = null;\n        }\n      });\n    }\n    if (shape.value === \"square\") {\n      // Custom geometry function for a square\n      function createSquareGeometry(coordinates, geometry) {\n        const [center, edge] = coordinates;\n        if (!center || !edge) return geometry;\n        const dx = edge[0] - center[0];\n        const dy = edge[1] - center[1];\n        const length = Math.max(Math.abs(dx), Math.abs(dy)); // keep square aspect\n\n        // Always start at 0 radians (right/east), so the square is upright\n        const angle = 150;\n        const corners = [];\n        for (let i = 0; i < 4; i++) {\n          const theta = angle + i * Math.PI / 2;\n          corners.push([center[0] + length * Math.cos(theta), center[1] + length * Math.sin(theta)]);\n        }\n        corners.push(corners[0]); // close the ring\n\n        if (!geometry) geometry = new Polygon([corners]);else geometry.setCoordinates([corners]);\n        return geometry;\n      }\n      const draw = new Draw({\n        source: vectorSourceRef.current,\n        type: \"Circle\",\n        geometryFunction: createSquareGeometry\n      });\n      mapRef.current.addInteraction(draw);\n      drawRef.current = draw;\n      setDrawing(true);\n      setMode(\"square\");\n      draw.on(\"drawend\", evt => {\n        const squareGeom = evt.feature.getGeometry();\n        // evt.feature.set(\"isSquare\", true);\n\n        if (!evt.feature.getId()) {\n          evt.feature.setId(Date.now().toString());\n        }\n        addHistoryAction({\n          type: \"draw-square\",\n          featureId: evt.feature.getId(),\n          coords: squareGeom.getCoordinates()\n        });\n        setDrawing(false);\n        setMode(\"select\");\n        if (drawRef.current) {\n          mapRef.current.removeInteraction(drawRef.current);\n          drawRef.current = null;\n        }\n      });\n    }\n\n    // You can add similar logic for triangle here in the future\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: menuRef,\n    style: {\n      position: \"relative\",\n      display: \"inline-block\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      title: \"Quick Shape\",\n      className: `map-button${[\"circle\", \"square\"].includes(mode) ? \" active\" : \"\"}`,\n      onClick: () => setOpen(v => !v),\n      style: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(QuickShapeIcon, {\n        style: {\n          width: 24,\n          height: 24\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), open && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"110%\",\n        transform: \"translateY(-50%)\",\n        background: \"#fff\",\n        border: \"1px solid #ccc\",\n        borderRadius: 4,\n        boxShadow: \"0 2px 8px rgba(0,0,0,0.15)\",\n        zIndex: 10,\n        padding: 4,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: SHAPES.map(shape => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"relative\",\n          width: \"60%\",\n          padding: \"6px 12px\",\n          cursor: \"pointer\",\n          textAlign: \"center\",\n          borderRadius: 3,\n          margin: 2,\n          transition: \"background 0.2s\"\n        },\n        className: \"quickshape-item\",\n        onClick: () => handleShapeClick(shape),\n        onMouseDown: e => e.preventDefault(),\n        children: shape.name\n      }, shape.value, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(QuickShape, \"A2U0waVOv7scHOXKAFWnY0V/azE=\");\n_c = QuickShape;\nvar _c;\n$RefreshReg$(_c, \"QuickShape\");","map":{"version":3,"names":["React","useState","useRef","useEffect","QuickShapeIcon","Draw","Polygon","fromCircle","jsxDEV","_jsxDEV","SHAPES","name","value","QuickShape","mapRef","vectorSourceRef","setDrawing","setMode","addHistoryAction","mode","_s","open","setOpen","menuRef","drawRef","handleClickOutside","e","current","contains","target","document","addEventListener","removeEventListener","map","removeInteraction","handleShapeClick","shape","draw","source","type","addInteraction","on","evt","circleGeom","feature","getGeometry","polygonGeom","setGeometry","set","getId","setId","Date","now","toString","featureId","coords","getCoordinates","createSquareGeometry","coordinates","geometry","center","edge","dx","dy","length","Math","max","abs","angle","corners","i","theta","PI","push","cos","sin","setCoordinates","geometryFunction","squareGeom","ref","style","position","display","children","title","className","includes","onClick","v","alignItems","justifyContent","width","height","fileName","_jsxFileName","lineNumber","columnNumber","top","left","transform","background","border","borderRadius","boxShadow","zIndex","padding","flexDirection","cursor","textAlign","margin","transition","onMouseDown","preventDefault","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/map-actions/QuickShape.jsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport { QuickShapeIcon } from \"../svg\";\r\nimport Draw from \"ol/interaction/Draw\";\r\nimport Polygon, { fromCircle } from \"ol/geom/Polygon\";\r\n// import Circle from \"ol/geom/Circle\";\r\n\r\nconst SHAPES = [\r\n  { name: \"Circle\", value: \"circle\" },\r\n  { name: \"Triangle\", value: \"triangle\" },\r\n  { name: \"Square\", value: \"square\" },\r\n];\r\n\r\nexport default function QuickShape({ mapRef, vectorSourceRef, setDrawing, setMode, addHistoryAction, mode }) {\r\n  const [open, setOpen] = useState(false);\r\n  const menuRef = useRef();\r\n  const drawRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    function handleClickOutside(e) {\r\n      if (menuRef.current && !menuRef.current.contains(e.target)) {\r\n        setOpen(false);\r\n      }\r\n    }\r\n    if (open) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside);\r\n    }\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, [open]);\r\n\r\n  useEffect(() => {\r\n    const map = mapRef.current;\r\n    return () => {\r\n      if (drawRef.current && map) {\r\n        map.removeInteraction(drawRef.current);\r\n        drawRef.current = null;\r\n      }\r\n    };\r\n  }, [mapRef]);\r\n\r\n  function handleShapeClick(shape) {\r\n    setOpen(false);\r\n    if (!mapRef.current || !vectorSourceRef.current) return;\r\n\r\n    // Remove any existing draw interaction\r\n    if (drawRef.current) {\r\n      mapRef.current.removeInteraction(drawRef.current);\r\n      drawRef.current = null;\r\n    }\r\n\r\n    if (shape.value === \"circle\") {\r\n      const draw = new Draw({\r\n        source: vectorSourceRef.current,\r\n        type: \"Circle\",\r\n      });\r\n      mapRef.current.addInteraction(draw);\r\n      drawRef.current = draw;\r\n      setDrawing(true);\r\n      setMode(\"circle\");\r\n\r\n      draw.on(\"drawend\", (evt) => {\r\n        const circleGeom = evt.feature.getGeometry();\r\n        const polygonGeom = fromCircle(circleGeom, 64);\r\n        evt.feature.setGeometry(polygonGeom);\r\n        evt.feature.set(\"no-measurements\", true);\r\n\r\n        // Ensure the feature has an ID for undo/redo\r\n        if (!evt.feature.getId()) {\r\n          evt.feature.setId(Date.now().toString());\r\n        }\r\n\r\n        addHistoryAction({\r\n          type: \"draw-circle\",\r\n          featureId: evt.feature.getId(),\r\n          coords: polygonGeom.getCoordinates(),\r\n        });\r\n\r\n        setDrawing(false);\r\n        setMode(\"select\");\r\n        if (drawRef.current) {\r\n          mapRef.current.removeInteraction(drawRef.current);\r\n          drawRef.current = null;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (shape.value === \"square\") {\r\n      // Custom geometry function for a square\r\n      function createSquareGeometry(coordinates, geometry) {\r\n        const [center, edge] = coordinates;\r\n        if (!center || !edge) return geometry;\r\n        const dx = edge[0] - center[0];\r\n        const dy = edge[1] - center[1];\r\n        const length = Math.max(Math.abs(dx), Math.abs(dy)); // keep square aspect\r\n\r\n        // Always start at 0 radians (right/east), so the square is upright\r\n        const angle = 150;\r\n\r\n        const corners = [];\r\n        for (let i = 0; i < 4; i++) {\r\n          const theta = angle + (i * Math.PI / 2);\r\n          corners.push([\r\n            center[0] + length * Math.cos(theta),\r\n            center[1] + length * Math.sin(theta)\r\n          ]);\r\n        }\r\n        corners.push(corners[0]); // close the ring\r\n\r\n        if (!geometry) geometry = new Polygon([corners]);\r\n        else geometry.setCoordinates([corners]);\r\n        return geometry;\r\n      }\r\n\r\n      const draw = new Draw({\r\n        source: vectorSourceRef.current,\r\n        type: \"Circle\",\r\n        geometryFunction: createSquareGeometry,\r\n      });\r\n      mapRef.current.addInteraction(draw);\r\n      drawRef.current = draw;\r\n      setDrawing(true);\r\n      setMode(\"square\");\r\n\r\n      draw.on(\"drawend\", (evt) => {\r\n        const squareGeom = evt.feature.getGeometry();\r\n        // evt.feature.set(\"isSquare\", true);\r\n\r\n        if (!evt.feature.getId()) {\r\n          evt.feature.setId(Date.now().toString());\r\n        }\r\n\r\n        addHistoryAction({\r\n          type: \"draw-square\",\r\n          featureId: evt.feature.getId(),\r\n          coords: squareGeom.getCoordinates(),\r\n        });\r\n\r\n        setDrawing(false);\r\n        setMode(\"select\");\r\n        if (drawRef.current) {\r\n          mapRef.current.removeInteraction(drawRef.current);\r\n          drawRef.current = null;\r\n        }\r\n      });\r\n    }\r\n\r\n    // You can add similar logic for triangle here in the future\r\n  }\r\n\r\n  return (\r\n    <div ref={menuRef} style={{ position: \"relative\", display: \"inline-block\" }}>\r\n      <button\r\n        title=\"Quick Shape\"\r\n        className={`map-button${[\"circle\", \"square\"].includes(mode) ? \" active\" : \"\"}`}\r\n        onClick={() => setOpen((v) => !v)}\r\n        style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}\r\n      >\r\n        <QuickShapeIcon style={{ width: 24, height: 24 }} />\r\n      </button>\r\n      {open && (\r\n        <div\r\n          style={{\r\n            position: \"absolute\",\r\n            top: \"50%\",\r\n            left: \"110%\",\r\n            transform: \"translateY(-50%)\",\r\n            background: \"#fff\",\r\n            border: \"1px solid #ccc\",\r\n            borderRadius: 4,\r\n            boxShadow: \"0 2px 8px rgba(0,0,0,0.15)\",\r\n            zIndex: 10,\r\n            padding: 4,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\"\r\n          }}\r\n        >\r\n          {SHAPES.map((shape) => (\r\n            <div\r\n              key={shape.value}\r\n              style={{\r\n                position: \"relative\",\r\n                width: \"60%\",\r\n                padding: \"6px 12px\",\r\n                cursor: \"pointer\",\r\n                textAlign: \"center\",\r\n                borderRadius: 3,\r\n                margin: 2,\r\n                transition: \"background 0.2s\",\r\n              }}\r\n              className=\"quickshape-item\"\r\n              onClick={() => handleShapeClick(shape)}\r\n              onMouseDown={e => e.preventDefault()}\r\n            >\r\n              {shape.name}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,SAASC,cAAc,QAAQ,QAAQ;AACvC,OAAOC,IAAI,MAAM,qBAAqB;AACtC,OAAOC,OAAO,IAAIC,UAAU,QAAQ,iBAAiB;AACrD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,MAAM,GAAG,CACb;EAAEC,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAS,CAAC,EACnC;EAAED,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAW,CAAC,EACvC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAS,CAAC,CACpC;AAED,eAAe,SAASC,UAAUA,CAAC;EAAEC,MAAM;EAAEC,eAAe;EAAEC,UAAU;EAAEC,OAAO;EAAEC,gBAAgB;EAAEC;AAAK,CAAC,EAAE;EAAAC,EAAA;EAC3G,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAMsB,OAAO,GAAGrB,MAAM,CAAC,CAAC;EACxB,MAAMsB,OAAO,GAAGtB,MAAM,CAAC,IAAI,CAAC;EAE5BC,SAAS,CAAC,MAAM;IACd,SAASsB,kBAAkBA,CAACC,CAAC,EAAE;MAC7B,IAAIH,OAAO,CAACI,OAAO,IAAI,CAACJ,OAAO,CAACI,OAAO,CAACC,QAAQ,CAACF,CAAC,CAACG,MAAM,CAAC,EAAE;QAC1DP,OAAO,CAAC,KAAK,CAAC;MAChB;IACF;IACA,IAAID,IAAI,EAAE;MACRS,QAAQ,CAACC,gBAAgB,CAAC,WAAW,EAAEN,kBAAkB,CAAC;IAC5D;IACA,OAAO,MAAMK,QAAQ,CAACE,mBAAmB,CAAC,WAAW,EAAEP,kBAAkB,CAAC;EAC5E,CAAC,EAAE,CAACJ,IAAI,CAAC,CAAC;EAEVlB,SAAS,CAAC,MAAM;IACd,MAAM8B,GAAG,GAAGnB,MAAM,CAACa,OAAO;IAC1B,OAAO,MAAM;MACX,IAAIH,OAAO,CAACG,OAAO,IAAIM,GAAG,EAAE;QAC1BA,GAAG,CAACC,iBAAiB,CAACV,OAAO,CAACG,OAAO,CAAC;QACtCH,OAAO,CAACG,OAAO,GAAG,IAAI;MACxB;IACF,CAAC;EACH,CAAC,EAAE,CAACb,MAAM,CAAC,CAAC;EAEZ,SAASqB,gBAAgBA,CAACC,KAAK,EAAE;IAC/Bd,OAAO,CAAC,KAAK,CAAC;IACd,IAAI,CAACR,MAAM,CAACa,OAAO,IAAI,CAACZ,eAAe,CAACY,OAAO,EAAE;;IAEjD;IACA,IAAIH,OAAO,CAACG,OAAO,EAAE;MACnBb,MAAM,CAACa,OAAO,CAACO,iBAAiB,CAACV,OAAO,CAACG,OAAO,CAAC;MACjDH,OAAO,CAACG,OAAO,GAAG,IAAI;IACxB;IAEA,IAAIS,KAAK,CAACxB,KAAK,KAAK,QAAQ,EAAE;MAC5B,MAAMyB,IAAI,GAAG,IAAIhC,IAAI,CAAC;QACpBiC,MAAM,EAAEvB,eAAe,CAACY,OAAO;QAC/BY,IAAI,EAAE;MACR,CAAC,CAAC;MACFzB,MAAM,CAACa,OAAO,CAACa,cAAc,CAACH,IAAI,CAAC;MACnCb,OAAO,CAACG,OAAO,GAAGU,IAAI;MACtBrB,UAAU,CAAC,IAAI,CAAC;MAChBC,OAAO,CAAC,QAAQ,CAAC;MAEjBoB,IAAI,CAACI,EAAE,CAAC,SAAS,EAAGC,GAAG,IAAK;QAC1B,MAAMC,UAAU,GAAGD,GAAG,CAACE,OAAO,CAACC,WAAW,CAAC,CAAC;QAC5C,MAAMC,WAAW,GAAGvC,UAAU,CAACoC,UAAU,EAAE,EAAE,CAAC;QAC9CD,GAAG,CAACE,OAAO,CAACG,WAAW,CAACD,WAAW,CAAC;QACpCJ,GAAG,CAACE,OAAO,CAACI,GAAG,CAAC,iBAAiB,EAAE,IAAI,CAAC;;QAExC;QACA,IAAI,CAACN,GAAG,CAACE,OAAO,CAACK,KAAK,CAAC,CAAC,EAAE;UACxBP,GAAG,CAACE,OAAO,CAACM,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;QAC1C;QAEAnC,gBAAgB,CAAC;UACfqB,IAAI,EAAE,aAAa;UACnBe,SAAS,EAAEZ,GAAG,CAACE,OAAO,CAACK,KAAK,CAAC,CAAC;UAC9BM,MAAM,EAAET,WAAW,CAACU,cAAc,CAAC;QACrC,CAAC,CAAC;QAEFxC,UAAU,CAAC,KAAK,CAAC;QACjBC,OAAO,CAAC,QAAQ,CAAC;QACjB,IAAIO,OAAO,CAACG,OAAO,EAAE;UACnBb,MAAM,CAACa,OAAO,CAACO,iBAAiB,CAACV,OAAO,CAACG,OAAO,CAAC;UACjDH,OAAO,CAACG,OAAO,GAAG,IAAI;QACxB;MACF,CAAC,CAAC;IACJ;IAEA,IAAIS,KAAK,CAACxB,KAAK,KAAK,QAAQ,EAAE;MAC5B;MACA,SAAS6C,oBAAoBA,CAACC,WAAW,EAAEC,QAAQ,EAAE;QACnD,MAAM,CAACC,MAAM,EAAEC,IAAI,CAAC,GAAGH,WAAW;QAClC,IAAI,CAACE,MAAM,IAAI,CAACC,IAAI,EAAE,OAAOF,QAAQ;QACrC,MAAMG,EAAE,GAAGD,IAAI,CAAC,CAAC,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC;QAC9B,MAAMG,EAAE,GAAGF,IAAI,CAAC,CAAC,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC;QAC9B,MAAMI,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACL,EAAE,CAAC,EAAEG,IAAI,CAACE,GAAG,CAACJ,EAAE,CAAC,CAAC,CAAC,CAAC;;QAErD;QACA,MAAMK,KAAK,GAAG,GAAG;QAEjB,MAAMC,OAAO,GAAG,EAAE;QAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC1B,MAAMC,KAAK,GAAGH,KAAK,GAAIE,CAAC,GAAGL,IAAI,CAACO,EAAE,GAAG,CAAE;UACvCH,OAAO,CAACI,IAAI,CAAC,CACXb,MAAM,CAAC,CAAC,CAAC,GAAGI,MAAM,GAAGC,IAAI,CAACS,GAAG,CAACH,KAAK,CAAC,EACpCX,MAAM,CAAC,CAAC,CAAC,GAAGI,MAAM,GAAGC,IAAI,CAACU,GAAG,CAACJ,KAAK,CAAC,CACrC,CAAC;QACJ;QACAF,OAAO,CAACI,IAAI,CAACJ,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;;QAE1B,IAAI,CAACV,QAAQ,EAAEA,QAAQ,GAAG,IAAIrD,OAAO,CAAC,CAAC+D,OAAO,CAAC,CAAC,CAAC,KAC5CV,QAAQ,CAACiB,cAAc,CAAC,CAACP,OAAO,CAAC,CAAC;QACvC,OAAOV,QAAQ;MACjB;MAEA,MAAMtB,IAAI,GAAG,IAAIhC,IAAI,CAAC;QACpBiC,MAAM,EAAEvB,eAAe,CAACY,OAAO;QAC/BY,IAAI,EAAE,QAAQ;QACdsC,gBAAgB,EAAEpB;MACpB,CAAC,CAAC;MACF3C,MAAM,CAACa,OAAO,CAACa,cAAc,CAACH,IAAI,CAAC;MACnCb,OAAO,CAACG,OAAO,GAAGU,IAAI;MACtBrB,UAAU,CAAC,IAAI,CAAC;MAChBC,OAAO,CAAC,QAAQ,CAAC;MAEjBoB,IAAI,CAACI,EAAE,CAAC,SAAS,EAAGC,GAAG,IAAK;QAC1B,MAAMoC,UAAU,GAAGpC,GAAG,CAACE,OAAO,CAACC,WAAW,CAAC,CAAC;QAC5C;;QAEA,IAAI,CAACH,GAAG,CAACE,OAAO,CAACK,KAAK,CAAC,CAAC,EAAE;UACxBP,GAAG,CAACE,OAAO,CAACM,KAAK,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC;QAC1C;QAEAnC,gBAAgB,CAAC;UACfqB,IAAI,EAAE,aAAa;UACnBe,SAAS,EAAEZ,GAAG,CAACE,OAAO,CAACK,KAAK,CAAC,CAAC;UAC9BM,MAAM,EAAEuB,UAAU,CAACtB,cAAc,CAAC;QACpC,CAAC,CAAC;QAEFxC,UAAU,CAAC,KAAK,CAAC;QACjBC,OAAO,CAAC,QAAQ,CAAC;QACjB,IAAIO,OAAO,CAACG,OAAO,EAAE;UACnBb,MAAM,CAACa,OAAO,CAACO,iBAAiB,CAACV,OAAO,CAACG,OAAO,CAAC;UACjDH,OAAO,CAACG,OAAO,GAAG,IAAI;QACxB;MACF,CAAC,CAAC;IACJ;;IAEA;EACF;EAEA,oBACElB,OAAA;IAAKsE,GAAG,EAAExD,OAAQ;IAACyD,KAAK,EAAE;MAAEC,QAAQ,EAAE,UAAU;MAAEC,OAAO,EAAE;IAAe,CAAE;IAAAC,QAAA,gBAC1E1E,OAAA;MACE2E,KAAK,EAAC,aAAa;MACnBC,SAAS,EAAE,aAAa,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAACC,QAAQ,CAACnE,IAAI,CAAC,GAAG,SAAS,GAAG,EAAE,EAAG;MAC/EoE,OAAO,EAAEA,CAAA,KAAMjE,OAAO,CAAEkE,CAAC,IAAK,CAACA,CAAC,CAAE;MAClCR,KAAK,EAAE;QAAEE,OAAO,EAAE,MAAM;QAAEO,UAAU,EAAE,QAAQ;QAAEC,cAAc,EAAE;MAAS,CAAE;MAAAP,QAAA,eAE3E1E,OAAA,CAACL,cAAc;QAAC4E,KAAK,EAAE;UAAEW,KAAK,EAAE,EAAE;UAAEC,MAAM,EAAE;QAAG;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EACR3E,IAAI,iBACHZ,OAAA;MACEuE,KAAK,EAAE;QACLC,QAAQ,EAAE,UAAU;QACpBgB,GAAG,EAAE,KAAK;QACVC,IAAI,EAAE,MAAM;QACZC,SAAS,EAAE,kBAAkB;QAC7BC,UAAU,EAAE,MAAM;QAClBC,MAAM,EAAE,gBAAgB;QACxBC,YAAY,EAAE,CAAC;QACfC,SAAS,EAAE,4BAA4B;QACvCC,MAAM,EAAE,EAAE;QACVC,OAAO,EAAE,CAAC;QACVvB,OAAO,EAAE,MAAM;QACfwB,aAAa,EAAE,QAAQ;QACvBjB,UAAU,EAAE;MACd,CAAE;MAAAN,QAAA,EAEDzE,MAAM,CAACuB,GAAG,CAAEG,KAAK,iBAChB3B,OAAA;QAEEuE,KAAK,EAAE;UACLC,QAAQ,EAAE,UAAU;UACpBU,KAAK,EAAE,KAAK;UACZc,OAAO,EAAE,UAAU;UACnBE,MAAM,EAAE,SAAS;UACjBC,SAAS,EAAE,QAAQ;UACnBN,YAAY,EAAE,CAAC;UACfO,MAAM,EAAE,CAAC;UACTC,UAAU,EAAE;QACd,CAAE;QACFzB,SAAS,EAAC,iBAAiB;QAC3BE,OAAO,EAAEA,CAAA,KAAMpD,gBAAgB,CAACC,KAAK,CAAE;QACvC2E,WAAW,EAAErF,CAAC,IAAIA,CAAC,CAACsF,cAAc,CAAC,CAAE;QAAA7B,QAAA,EAEpC/C,KAAK,CAACzB;MAAI,GAfNyB,KAAK,CAACxB,KAAK;QAAAiF,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgBb,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAAC5E,EAAA,CA5LuBP,UAAU;AAAAoG,EAAA,GAAVpG,UAAU;AAAA,IAAAoG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}