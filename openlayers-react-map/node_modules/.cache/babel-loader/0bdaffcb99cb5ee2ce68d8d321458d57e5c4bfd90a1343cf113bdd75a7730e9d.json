{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { asArray } from '../../color.js';\nimport { containsCoordinate, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { equals } from '../../array.js';\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport var canvasPool = [];\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar pixelContext = null;\nfunction createPixelContext() {\n  var canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nvar CanvasLayerRenderer = /** @class */function (_super) {\n  __extends(CanvasLayerRenderer, _super);\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  function CanvasLayerRenderer(layer) {\n    var _this = _super.call(this, layer) || this;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.container = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.renderedResolution;\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.tempTransform = createTransform();\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.pixelTransform = createTransform();\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.inversePixelTransform = createTransform();\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.context = null;\n    /**\n     * @type {boolean}\n     */\n    _this.containerReused = false;\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.pixelContext_ = null;\n    /**\n     * @protected\n     * @type {import(\"../../PluggableMap.js\").FrameState|null}\n     */\n    _this.frameState = null;\n    return _this;\n  }\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  CanvasLayerRenderer.prototype.getImageData = function (image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n    var data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  };\n  /**\n   * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  CanvasLayerRenderer.prototype.getBackground = function (frameState) {\n    var layer = this.getLayer();\n    var background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  };\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [opt_backgroundColor] Background color.\n   */\n  CanvasLayerRenderer.prototype.useContainer = function (target, transform, opt_backgroundColor) {\n    var layerClassName = this.getLayer().getClassName();\n    var container, context;\n    if (target && target.className === layerClassName && (!opt_backgroundColor || target && target.style.backgroundColor && equals(asArray(target.style.backgroundColor), asArray(opt_backgroundColor)))) {\n      var canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      var style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      var canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (!this.containerReused && opt_backgroundColor && !this.container.style.backgroundColor) {\n      this.container.style.backgroundColor = opt_backgroundColor;\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    var inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  };\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n    var layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n      layer.dispatchEvent(event_1);\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  };\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n    var dx1 = width / 2;\n    var dy1 = height / 2;\n    var sx = pixelRatio / resolution;\n    var sy = -sx;\n    var dx2 = -center[0] + offsetX;\n    var dy2 = -center[1];\n    return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n  };\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n  CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n    var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n    var context = this.context;\n    var layer = this.getLayer();\n    var layerExtent = layer.getExtent();\n    if (layerExtent) {\n      var renderCoordinate = applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n      /** get only data inside of the layer extent */\n      if (!containsCoordinate(layerExtent, renderCoordinate)) {\n        return null;\n      }\n    }\n    var x = Math.round(renderPixel[0]);\n    var y = Math.round(renderPixel[1]);\n    var pixelContext = this.pixelContext_;\n    if (!pixelContext) {\n      var pixelCanvas = document.createElement('canvas');\n      pixelCanvas.width = 1;\n      pixelCanvas.height = 1;\n      pixelContext = pixelCanvas.getContext('2d');\n      this.pixelContext_ = pixelContext;\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n    var data;\n    try {\n      pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        this.pixelContext_ = null;\n        return new Uint8Array();\n      }\n      return data;\n    }\n    if (data[3] === 0) {\n      return null;\n    }\n    return data;\n  };\n  /**\n   * Clean up.\n   */\n  CanvasLayerRenderer.prototype.disposeInternal = function () {\n    delete this.frameState;\n    _super.prototype.disposeInternal.call(this);\n  };\n  return CanvasLayerRenderer;\n}(LayerRenderer);\nexport default CanvasLayerRenderer;","map":{"version":3,"names":["LayerRenderer","RenderEvent","RenderEventType","apply","applyTransform","compose","composeTransform","create","createTransform","asArray","containsCoordinate","getBottomLeft","getBottomRight","getTopLeft","getTopRight","createCanvasContext2D","equals","canvasPool","pixelContext","createPixelContext","canvas","document","createElement","width","height","getContext","CanvasLayerRenderer","_super","__extends","layer","_this","call","container","renderedResolution","tempTransform","pixelTransform","inversePixelTransform","context","containerReused","pixelContext_","frameState","prototype","getImageData","image","col","row","clearRect","data","drawImage","err","getBackground","getLayer","background","viewState","resolution","undefined","useContainer","target","transform","opt_backgroundColor","layerClassName","getClassName","className","style","backgroundColor","firstElementChild","HTMLCanvasElement","position","appendChild","left","transformOrigin","clipUnrotated","extent","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","inverted","save","beginPath","moveTo","Math","round","lineTo","clip","dispatchRenderEvent_","type","hasListener","event_1","dispatchEvent","preRender","PRERENDER","postRender","POSTRENDER","getRenderTransform","center","rotation","pixelRatio","offsetX","dx1","dy1","sx","sy","dx2","dy2","getDataAtPixel","pixel","hitTolerance","renderPixel","slice","layerExtent","getExtent","renderCoordinate","pixelToCoordinateTransform","x","y","pixelCanvas","name","Uint8Array","disposeInternal"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\renderer\\canvas\\Layer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {asArray} from '../../color.js';\nimport {\n  containsCoordinate,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../../extent.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {equals} from '../../array.js';\n\n/**\n * @type {Array<HTMLCanvasElement>}\n */\nexport const canvasPool = [];\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet pixelContext = null;\n\nfunction createPixelContext() {\n  const canvas = document.createElement('canvas');\n  canvas.width = 1;\n  canvas.height = 1;\n  pixelContext = canvas.getContext('2d');\n}\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n * @extends {LayerRenderer<LayerType>}\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n\n    /**\n     * @private\n     * @type {CanvasRenderingContext2D}\n     */\n    this.pixelContext_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"../../PluggableMap.js\").FrameState|null}\n     */\n    this.frameState = null;\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   * @param {number} col The column index.\n   * @param {number} row The row index.\n   * @return {Uint8ClampedArray|null} The image data.\n   */\n  getImageData(image, col, row) {\n    if (!pixelContext) {\n      createPixelContext();\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n\n    let data;\n    try {\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      pixelContext = null;\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * @param {import('../../PluggableMap.js').FrameState} frameState Frame state.\n   * @return {string} Background color.\n   */\n  getBackground(frameState) {\n    const layer = this.getLayer();\n    let background = layer.getBackground();\n    if (typeof background === 'function') {\n      background = background(frameState.viewState.resolution);\n    }\n    return background || undefined;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {string} [opt_backgroundColor] Background color.\n   */\n  useContainer(target, transform, opt_backgroundColor) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.className === layerClassName &&\n      (!opt_backgroundColor ||\n        (target &&\n          target.style.backgroundColor &&\n          equals(\n            asArray(target.style.backgroundColor),\n            asArray(opt_backgroundColor)\n          )))\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && context.canvas.style.transform === transform) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n    if (\n      !this.containerReused &&\n      opt_backgroundColor &&\n      !this.container.style.backgroundColor\n    ) {\n      this.container.style.backgroundColor = opt_backgroundColor;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.frameState = frameState;\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n  getDataAtPixel(pixel, frameState, hitTolerance) {\n    const renderPixel = applyTransform(\n      this.inversePixelTransform,\n      pixel.slice()\n    );\n    const context = this.context;\n\n    const layer = this.getLayer();\n    const layerExtent = layer.getExtent();\n    if (layerExtent) {\n      const renderCoordinate = applyTransform(\n        frameState.pixelToCoordinateTransform,\n        pixel.slice()\n      );\n\n      /** get only data inside of the layer extent */\n      if (!containsCoordinate(layerExtent, renderCoordinate)) {\n        return null;\n      }\n    }\n\n    const x = Math.round(renderPixel[0]);\n    const y = Math.round(renderPixel[1]);\n    let pixelContext = this.pixelContext_;\n    if (!pixelContext) {\n      const pixelCanvas = document.createElement('canvas');\n      pixelCanvas.width = 1;\n      pixelCanvas.height = 1;\n      pixelContext = pixelCanvas.getContext('2d');\n      this.pixelContext_ = pixelContext;\n    }\n    pixelContext.clearRect(0, 0, 1, 1);\n    let data;\n    try {\n      pixelContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        this.pixelContext_ = null;\n        return new Uint8Array();\n      }\n      return data;\n    }\n\n    if (data[3] === 0) {\n      return null;\n    }\n    return data;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    delete this.frameState;\n    super.disposeInternal();\n  }\n}\n\nexport default CanvasLayerRenderer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}