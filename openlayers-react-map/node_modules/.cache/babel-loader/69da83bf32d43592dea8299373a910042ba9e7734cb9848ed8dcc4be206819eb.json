{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport LineString from 'ol/geom/LineString';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport History from './map-helpers/History';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, remarkPolygonSegments, remarkLineSegments } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 2.018;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n\n  // For highlighting overlays\n  const hoveredOverlayRef = useRef({\n    type: null,\n    overlay: null\n  });\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n  }\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = feature => remarkPolygonSegments(feature, mapRef);\n\n    // Expose remarkLineSegments for use in handlers\n    mapRef.current.remarkLineSegments = feature => remarkLineSegments(feature, mapRef);\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- HIGHLIGHT SEGMENT/VERTEX ON HOVER ---\n    map.on('pointermove', evt => {\n      // Remove previous highlight if any\n      if (hoveredOverlayRef.current.overlay) {\n        if (hoveredOverlayRef.current.type === 'segment') {\n          hoveredOverlayRef.current.overlay.setStyle(hoveredOverlayRef.current.overlay._defaultStyle || undefined);\n        } else if (hoveredOverlayRef.current.type === 'vertex') {\n          hoveredOverlayRef.current.overlay.setStyle(hoveredOverlayRef.current.overlay._defaultStyle || undefined);\n        }\n        hoveredOverlayRef.current = {\n          type: null,\n          overlay: null\n        };\n      }\n\n      // Find overlays (segment or vertex) under the mouse\n      let found = false;\n      for (const overlay of overlaysRef.current) {\n        const geometry = overlay.getGeometry();\n        if (geometry instanceof LineString) {\n          // Segment: check if mouse is close to the segment\n          const coords = geometry.getCoordinates();\n          const pixel1 = map.getPixelFromCoordinate(coords[0]);\n          const pixel2 = map.getPixelFromCoordinate(coords[1]);\n          const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n          if (dist < 8) {\n            // 8 pixels threshold\n            overlay.setStyle(highlightSegmentStyle);\n            hoveredOverlayRef.current = {\n              type: 'segment',\n              overlay\n            };\n            found = true;\n            break;\n          }\n        } else if (geometry instanceof Point) {\n          // Vertex: check if mouse is close to the vertex\n          const pixel = map.getPixelFromCoordinate(geometry.getCoordinates());\n          const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n          if (dist < 8) {\n            // 8 pixels threshold\n            overlay.setStyle(highlightVertexStyle);\n            hoveredOverlayRef.current = {\n              type: 'vertex',\n              overlay\n            };\n            found = true;\n            break;\n          }\n        }\n      }\n      // If not found, nothing is highlighted (already reset above)\n    });\n\n    // --- DRAW/SELECT/SEGMENT LOGIC ---\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        overlaysRef.current = [];\n        createSegmentOverlays(feature, [[coord, coord]], mapRef, overlaysRef, allOverlaysRef);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]]\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        if (coords.length > 1) {\n          overlaysRef.current = [];\n          createSegmentOverlays(feature, [coords], mapRef, overlaysRef, allOverlaysRef);\n        }\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n      }\n    }\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Only consider polygons in the hit list\n      const polygonsAtPixel = features.filter(f => f.getGeometry().getType() === 'Polygon');\n      if (polygonsAtPixel.length === 0) {\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n      let currentIdx = -1;\n      if (selectedFeature) {\n        currentIdx = polygonsAtPixel.findIndex(f => f === selectedFeature);\n      }\n      const nextIdx = (currentIdx + 1) % polygonsAtPixel.length;\n      const nextFeature = polygonsAtPixel[nextIdx];\n      setSelectedFeature(nextFeature);\n      allPolygons.forEach(f => {\n        f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      });\n    }\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      overlaysRef.current = [];\n      createSegmentOverlays(feature, [coords], mapRef, overlaysRef, allOverlaysRef);\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n\n        // Undo for deleting a segment (LineString -> Polygon)\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString');\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            overlaysRef.current = [];\n            createSegmentOverlays(newPoly, [prevCoords], mapRef, overlaysRef, allOverlaysRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Undo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              overlaysRef.current = [];\n              createSegmentOverlays(feature, [lastAction.prevCoords], mapRef, overlaysRef, allOverlaysRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          overlaysRef.current = [];\n          createSegmentOverlays(feature, [prevCoords], mapRef, overlaysRef, allOverlaysRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      let lastRedoAction = null;\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastRedoAction = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n\n        // Redo for deleting a segment (Polygon -> LineString)\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for add-point and delete-vertex\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              overlaysRef.current = [];\n              createSegmentOverlays(feature, [newCoords], mapRef, overlaysRef, allOverlaysRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              overlaysRef.current = [];\n              createSegmentOverlays(feature, [lastAction.newCoords], mapRef, overlaysRef, allOverlaysRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          overlaysRef.current = [];\n          createSegmentOverlays(feature, [coords], mapRef, overlaysRef, allOverlaysRef);\n          drawingRef.current = false;\n        }\n      }\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 544,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 559,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 567,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 525,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper: distance from point to segment (in pixel space)\n_s(App, \"7PMk//6RSVOccLrJ7DyX9q0xnKk=\");\n_c = App;\nfunction pointToSegmentDistance(p, p1, p2) {\n  // p, p1, p2: [x, y]\n  const x = p[0],\n    y = p[1];\n  const x1 = p1[0],\n    y1 = p1[1];\n  const x2 = p2[0],\n    y2 = p2[1];\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n  const dot = A * C + B * D;\n  const len_sq = C * C + D * D;\n  let param = -1;\n  if (len_sq !== 0) param = dot / len_sq;\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.sqrt(dx * dx + dy * dy);\n}\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","LineString","Select","fromLonLat","ScaleLine","FlipHorizButton","FlipVertButton","RightClick","History","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","clearPolygonOverlays","createSegmentOverlays","remarkPolygonSegments","remarkLineSegments","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","hoveredOverlayRef","overlay","addHistoryAction","action","prev","current","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","addControl","units","on","evt","coord","coordinate","removeFeature","ghost","setStyle","addFeature","_defaultStyle","undefined","found","geometry","getGeometry","coords","getCoordinates","pixel1","getPixelFromCoordinate","pixel2","dist","pointToSegmentDistance","pixel","Math","sqrt","pow","drawClick","poly","setId","Date","now","toString","featureId","getId","prevCoords","newCoords","slice","length","setCoordinates","selectClick","features","getFeaturesAtPixel","allPolygons","getFeatures","forEach","f","polygonsAtPixel","filter","getType","currentIdx","findIndex","nextIdx","nextFeature","addSegment","direction","last","dx","dy","OFFSET","newPt","handleUndo","lastActionForRedo","lastAction","find","lineFeature","newPoly","redoPrev","handleRedo","lastRedoAction","require","default","histPrev","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","document","addEventListener","removeOverlay","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","children","id","ref","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","p","p1","p2","x1","y1","x2","y2","A","B","C","D","dot","len_sq","param","xx","yy","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport LineString from 'ol/geom/LineString';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport History from './map-helpers/History';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  remarkPolygonSegments,\n  remarkLineSegments\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 2.018;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n\n  // For highlighting overlays\n  const hoveredOverlayRef = useRef({ type: null, overlay: null });\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n  }\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = (feature) => remarkPolygonSegments(feature, mapRef);\n\n    // Expose remarkLineSegments for use in handlers\n    mapRef.current.remarkLineSegments = (feature) => remarkLineSegments(feature, mapRef);\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- HIGHLIGHT SEGMENT/VERTEX ON HOVER ---\n    map.on('pointermove', evt => {\n      // Remove previous highlight if any\n      if (hoveredOverlayRef.current.overlay) {\n        if (hoveredOverlayRef.current.type === 'segment') {\n          hoveredOverlayRef.current.overlay.setStyle(hoveredOverlayRef.current.overlay._defaultStyle || undefined);\n        } else if (hoveredOverlayRef.current.type === 'vertex') {\n          hoveredOverlayRef.current.overlay.setStyle(hoveredOverlayRef.current.overlay._defaultStyle || undefined);\n        }\n        hoveredOverlayRef.current = { type: null, overlay: null };\n      }\n\n      // Find overlays (segment or vertex) under the mouse\n      let found = false;\n      for (const overlay of overlaysRef.current) {\n        const geometry = overlay.getGeometry();\n        if (geometry instanceof LineString) {\n          // Segment: check if mouse is close to the segment\n          const coords = geometry.getCoordinates();\n          const pixel1 = map.getPixelFromCoordinate(coords[0]);\n          const pixel2 = map.getPixelFromCoordinate(coords[1]);\n          const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n          if (dist < 8) { // 8 pixels threshold\n            overlay.setStyle(highlightSegmentStyle);\n            hoveredOverlayRef.current = { type: 'segment', overlay };\n            found = true;\n            break;\n          }\n        } else if (geometry instanceof Point) {\n          // Vertex: check if mouse is close to the vertex\n          const pixel = map.getPixelFromCoordinate(geometry.getCoordinates());\n          const dist = Math.sqrt(\n            Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n          );\n          if (dist < 8) { // 8 pixels threshold\n            overlay.setStyle(highlightVertexStyle);\n            hoveredOverlayRef.current = { type: 'vertex', overlay };\n            found = true;\n            break;\n          }\n        }\n      }\n      // If not found, nothing is highlighted (already reset above)\n    });\n\n    // --- DRAW/SELECT/SEGMENT LOGIC ---\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        overlaysRef.current = [];\n        createSegmentOverlays(feature, [[coord, coord]], mapRef, overlaysRef, allOverlaysRef);\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]],\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        if (coords.length > 1) {\n          overlaysRef.current = [];\n          createSegmentOverlays(feature, [coords], mapRef, overlaysRef, allOverlaysRef);\n        }\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n      }\n    }\n\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Only consider polygons in the hit list\n      const polygonsAtPixel = features.filter(f => f.getGeometry().getType() === 'Polygon');\n      if (polygonsAtPixel.length === 0) {\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      let currentIdx = -1;\n      if (selectedFeature) {\n        currentIdx = polygonsAtPixel.findIndex(f => f === selectedFeature);\n      }\n\n      const nextIdx = (currentIdx + 1) % polygonsAtPixel.length;\n      const nextFeature = polygonsAtPixel[nextIdx];\n\n      setSelectedFeature(nextFeature);\n\n      allPolygons.forEach(f => {\n        f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      });\n    }\n\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      overlaysRef.current = [];\n      createSegmentOverlays(feature, [coords], mapRef, overlaysRef, allOverlaysRef);\n\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        // Undo for deleting a segment (LineString -> Polygon)\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n          );\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            overlaysRef.current = [];\n            createSegmentOverlays(newPoly, [prevCoords], mapRef, overlaysRef, allOverlaysRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // Undo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              overlaysRef.current = [];\n              createSegmentOverlays(feature, [lastAction.prevCoords], mapRef, overlaysRef, allOverlaysRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          overlaysRef.current = [];\n          createSegmentOverlays(feature, [prevCoords], mapRef, overlaysRef, allOverlaysRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      let lastRedoAction = null;\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastRedoAction = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        // Redo for deleting a segment (Polygon -> LineString)\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for add-point and delete-vertex\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              overlaysRef.current = [];\n              createSegmentOverlays(feature, [newCoords], mapRef, overlaysRef, allOverlaysRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Redo for flip-horizontal and flip-vertical\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              overlaysRef.current = [];\n              createSegmentOverlays(feature, [lastAction.newCoords], mapRef, overlaysRef, allOverlaysRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n\n        return prev;\n      });\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          overlaysRef.current = [];\n          createSegmentOverlays(feature, [coords], mapRef, overlaysRef, allOverlaysRef);\n          drawingRef.current = false;\n        }\n      }\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n      />\n      <History history={history} redoStack={redoStack} />\n    </div>\n  );\n};\n\n// Helper: distance from point to segment (in pixel space)\nfunction pointToSegmentDistance(p, p1, p2) {\n  // p, p1, p2: [x, y]\n  const x = p[0], y = p[1];\n  const x1 = p1[0], y1 = p1[1];\n  const x2 = p2[0], y2 = p2[1];\n  const A = x - x1;\n  const B = y - y1;\n  const C = x2 - x1;\n  const D = y2 - y1;\n\n  const dot = A * C + B * D;\n  const len_sq = C * C + D * D;\n  let param = -1;\n  if (len_sq !== 0) param = dot / len_sq;\n\n  let xx, yy;\n  if (param < 0) {\n    xx = x1;\n    yy = y1;\n  } else if (param > 1) {\n    xx = x2;\n    yy = y2;\n  } else {\n    xx = x1 + param * C;\n    yy = y1 + param * D;\n  }\n\n  const dx = x - xx;\n  const dy = y - yy;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}