{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport { abstract } from '../util.js';\nimport { get as getProjection } from '../proj.js';\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n/**\n * A function that takes a {@link module:ol/PluggableMap~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../PluggableMap.js\").FrameState): (string|Array<string>)} Attribution\n */\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nvar Source = /** @class */function (_super) {\n  __extends(Source, _super);\n  /**\n   * @param {Options} options Source options.\n   */\n  function Source(options) {\n    var _this = _super.call(this) || this;\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    _this.projection = getProjection(options.projection);\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    _this.attributions_ = adaptAttributions(options.attributions);\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.attributionsCollapsible_ = options.attributionsCollapsible !== undefined ? options.attributionsCollapsible : true;\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    _this.loading = false;\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    _this.state_ = options.state !== undefined ? options.state : 'ready';\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.interpolate_ = !!options.interpolate;\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    _this.viewResolver = null;\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    _this.viewRejector = null;\n    var self = _this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    _this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n    return _this;\n  }\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  Source.prototype.getAttributions = function () {\n    return this.attributions_;\n  };\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n  Source.prototype.getAttributionsCollapsible = function () {\n    return this.attributionsCollapsible_;\n  };\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n  Source.prototype.getProjection = function () {\n    return this.projection;\n  };\n  /**\n   * @abstract\n   * @return {Array<number>|null} Resolutions.\n   */\n  Source.prototype.getResolutions = function () {\n    return abstract();\n  };\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n  Source.prototype.getView = function () {\n    return this.viewPromise_;\n  };\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n  Source.prototype.getState = function () {\n    return this.state_;\n  };\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  Source.prototype.getWrapX = function () {\n    return this.wrapX_;\n  };\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n  Source.prototype.getInterpolate = function () {\n    return this.interpolate_;\n  };\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  Source.prototype.refresh = function () {\n    this.changed();\n  };\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  Source.prototype.setAttributions = function (attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  };\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n  Source.prototype.setState = function (state) {\n    this.state_ = state;\n    this.changed();\n  };\n  return Source;\n}(BaseObject);\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\nexport default Source;","map":{"version":3,"names":["BaseObject","abstract","get","getProjection","Source","_super","__extends","options","_this","call","projection","attributions_","adaptAttributions","attributions","attributionsCollapsible_","attributionsCollapsible","undefined","loading","state_","state","wrapX_","wrapX","interpolate_","interpolate","viewResolver","viewRejector","self","viewPromise_","Promise","resolve","reject","prototype","getAttributions","getAttributionsCollapsible","getResolutions","getView","getState","getWrapX","getInterpolate","refresh","changed","setAttributions","setState","attributionLike","Array","isArray","frameState"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\source\\Source.js"],"sourcesContent":["/**\n * @module ol/source/Source\n */\nimport BaseObject from '../Object.js';\nimport {abstract} from '../util.js';\nimport {get as getProjection} from '../proj.js';\n\n/**\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\n */\n\n/**\n * A function that takes a {@link module:ol/PluggableMap~FrameState} and returns a string or\n * an array of strings representing source attributions.\n *\n * @typedef {function(import(\"../PluggableMap.js\").FrameState): (string|Array<string>)} Attribution\n */\n\n/**\n * A type that can be used to provide attribution information for data sources.\n *\n * It represents either\n * * a simple string (e.g. `'© Acme Inc.'`)\n * * an array of simple strings (e.g. `['© Acme Inc.', '© Bacme Inc.']`)\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\n *\n * @typedef {string|Array<string>|Attribution} AttributionLike\n */\n\n/**\n * @typedef {Object} Options\n * @property {AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {import(\"./Source.js\").State} [state='ready'] State.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\n *\n * A generic `change` event is triggered when the state of the source changes.\n * @abstract\n * @api\n */\nclass Source extends BaseObject {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super();\n\n    /**\n     * @protected\n     * @type {import(\"../proj/Projection.js\").default|null}\n     */\n    this.projection = getProjection(options.projection);\n\n    /**\n     * @private\n     * @type {?Attribution}\n     */\n    this.attributions_ = adaptAttributions(options.attributions);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.attributionsCollapsible_ =\n      options.attributionsCollapsible !== undefined\n        ? options.attributionsCollapsible\n        : true;\n\n    /**\n     * This source is currently loading data. Sources that defer loading to the\n     * map's tile queue never set this to `true`.\n     * @type {boolean}\n     */\n    this.loading = false;\n\n    /**\n     * @private\n     * @type {import(\"./Source.js\").State}\n     */\n    this.state_ = options.state !== undefined ? options.state : 'ready';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.interpolate_ = !!options.interpolate;\n\n    /**\n     * @protected\n     * @type {function(import(\"../View.js\").ViewOptions):void}\n     */\n    this.viewResolver = null;\n\n    /**\n     * @protected\n     * @type {function(Error):void}\n     */\n    this.viewRejector = null;\n\n    const self = this;\n    /**\n     * @private\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\n     */\n    this.viewPromise_ = new Promise(function (resolve, reject) {\n      self.viewResolver = resolve;\n      self.viewRejector = reject;\n    });\n  }\n\n  /**\n   * Get the attribution function for the source.\n   * @return {?Attribution} Attribution function.\n   * @api\n   */\n  getAttributions() {\n    return this.attributions_;\n  }\n\n  /**\n   * @return {boolean} Attributions are collapsible.\n   * @api\n   */\n  getAttributionsCollapsible() {\n    return this.attributionsCollapsible_;\n  }\n\n  /**\n   * Get the projection of the source.\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\n   * @api\n   */\n  getProjection() {\n    return this.projection;\n  }\n\n  /**\n   * @abstract\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions() {\n    return abstract();\n  }\n\n  /**\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\n   */\n  getView() {\n    return this.viewPromise_;\n  }\n\n  /**\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\n   * @return {import(\"./Source.js\").State} State.\n   * @api\n   */\n  getState() {\n    return this.state_;\n  }\n\n  /**\n   * @return {boolean|undefined} Wrap X.\n   */\n  getWrapX() {\n    return this.wrapX_;\n  }\n\n  /**\n   * @return {boolean} Use linear interpolation when resampling.\n   */\n  getInterpolate() {\n    return this.interpolate_;\n  }\n\n  /**\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\n   * @api\n   */\n  refresh() {\n    this.changed();\n  }\n\n  /**\n   * Set the attributions of the source.\n   * @param {AttributionLike|undefined} attributions Attributions.\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\n   *     or `undefined`.\n   * @api\n   */\n  setAttributions(attributions) {\n    this.attributions_ = adaptAttributions(attributions);\n    this.changed();\n  }\n\n  /**\n   * Set the state of the source.\n   * @param {import(\"./Source.js\").State} state State.\n   */\n  setState(state) {\n    this.state_ = state;\n    this.changed();\n  }\n}\n\n/**\n * Turns the attributions option into an attributions function.\n * @param {AttributionLike|undefined} attributionLike The attribution option.\n * @return {Attribution|null} An attribution function (or null).\n */\nfunction adaptAttributions(attributionLike) {\n  if (!attributionLike) {\n    return null;\n  }\n  if (Array.isArray(attributionLike)) {\n    return function (frameState) {\n      return attributionLike;\n    };\n  }\n\n  if (typeof attributionLike === 'function') {\n    return attributionLike;\n  }\n\n  return function (frameState) {\n    return [attributionLike];\n  };\n}\n\nexport default Source;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}