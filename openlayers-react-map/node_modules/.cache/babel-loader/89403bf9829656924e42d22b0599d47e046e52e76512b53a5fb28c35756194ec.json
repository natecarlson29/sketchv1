{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle, highlightSegmentStyle, highlightVertexStyle, closingSegmentStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays,\n// remarkPolygonSegments,\n// remarkLineSegments,\npointToSegmentDistance } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 1.524;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n    return closestCoord;\n  }\n  useEffect(() => {\n    var _vectorSourceRef$curr, _vectorSourceRef$curr2;\n    const allFeatures = ((_vectorSourceRef$curr = vectorSourceRef.current) === null || _vectorSourceRef$curr === void 0 ? void 0 : (_vectorSourceRef$curr2 = _vectorSourceRef$curr.getFeatures) === null || _vectorSourceRef$curr2 === void 0 ? void 0 : _vectorSourceRef$curr2.call(_vectorSourceRef$curr)) || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    map.addControl(new Rotate({\n      autoHide: false,\n      duration: 500\n    }));\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle\n    });\n    map.addLayer(highlightLayer);\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else if (modeRef.current === 'select') {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon' ? feature.getGeometry().getCoordinates()[0] : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2));\n              if (dist < 8) {\n                // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) {\n                // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n        const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        const feature = new Feature(poly);\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n\n        // Track action in history\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]]\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n      }\n    }\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Find the index of the currently selected feature in the features array\n      let currentIdx = -1;\n\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n      setSelectedFeature(nextFeature);\n\n      // Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\n      // allPolygons.forEach(f => {\n      //   f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      // });\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      });\n    }\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n        const prevCoords = lastAction.prevCoords;\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString');\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            createSegmentOverlays(newPoly, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        const newCoords = lastAction.newCoords;\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n        return prev;\n      });\n    }\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n      const [start, end] = coords;\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [(start[0] + end[0]) / 2, (start[1] + end[1]) / 2];\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // Enter key: calculate [text] as distance/angle and add a segment\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n        // Parse input\n        let distance = 0;\n        let angleDeg = 0;\n        if (text.includes('/')) {\n          const [distStr, angleStr] = text.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(text);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        // Convert feet to meters\n        distance = distance * 0.3048;\n\n        // Calculate angle in radians, adjusted for map rotation\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = angleDeg * Math.PI / 180 - rotation;\n\n        // Calculate new point\n        const dx = distance * Math.cos(angleRad);\n        const dy = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx, last[1] + dy];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n\n        // Track action in history\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords\n        });\n        setText(''); // Clear input after use\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n      }\n      // ctrl + z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'y' || e.key === 'Y')) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'r' || e.key === 'R')) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      let translate = new Translate({\n        features: vectorSourceRef.current.getFeaturesCollection()\n      });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Listen for translateend to track moves\n      translate.on('translateend', evt => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n        });\n      });\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', evt => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"dimension-input-container\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"dimension-input\",\n        ref: inputRef,\n        type: \"text\",\n        value: text,\n        onChange: e => setText(e.target.value),\n        placeholder: \"Dimension (ft.)\",\n        autoFocus: true,\n        autoComplete: \"off\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        disabled: mode === 'draw' && drawing,\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 748,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 741,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 756,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef,\n        addHistoryAction: addHistoryAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 757,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Clone, {\n        selectedFeature: selectedFeature,\n        vectorSourceRef: vectorSourceRef,\n        setSelectedFeature: setSelectedFeature,\n        addHistoryAction: addHistoryAction,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 758,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"history-toggle\",\n        className: `map-button${showHistory ? ' active' : ''}`,\n        onClick: () => setShowHistory(v => !v),\n        children: \"History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 759,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 765,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef),\n      addHistoryAction: addHistoryAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 766,\n      columnNumber: 7\n    }, this), showHistory && /*#__PURE__*/_jsxDEV(History, {\n      history: history,\n      redoStack: redoStack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 775,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 728,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"y6yLA8+VkmM6JJW8qoS3sBH0s5Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","LineString","Point","fromLonLat","ScaleLine","Rotate","Translate","History","FlipHorizButton","FlipVertButton","RightClick","Clone","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","highlightSegmentStyle","highlightVertexStyle","closingSegmentStyle","clearPolygonOverlays","createSegmentOverlays","pointToSegmentDistance","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","redoStack","setRedoStack","inputRef","mapRef","vectorSourceRef","polygonFeatureRef","drawingRef","drawing","setDrawing","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","showHistory","setShowHistory","addHistoryAction","action","prev","highlightLayer","current","getLayers","getArray","find","layer","get","getSource","clear","getSnappedCoordinate","map","vectorSource","pointerPixel","tolerance","closestCoord","minDist","Infinity","getFeatures","forEach","geom","getGeometry","coords","getType","getCoordinates","coord","pixel","getPixelFromCoordinate","dist","Math","hypot","_vectorSourceRef$curr","_vectorSourceRef$curr2","allFeatures","call","f","setStyle","vectorLayer","source","style","target","layers","view","center","zoom","addControl","units","autoHide","duration","highlightSource","name","addLayer","on","evt","coordinate","snappedCoord","removeFeature","ghost","addFeature","found","forEachFeatureAtPixel","i","length","sqrt","pow","vertexFeature","seg","pixel1","pixel2","segFeature","drawClick","poly","setId","Date","now","toString","featureId","getId","prevCoords","newCoords","slice","setCoordinates","console","log","selectClick","features","getFeaturesAtPixel","allPolygons","currentIdx","nextIdx","nextFeature","addSegment","direction","last","dx","dy","OFFSET","rotation","getView","getRotation","cos","sin","rotatedDx","rotatedDy","newPt","handleUndo","lastActionForRedo","lastAction","lineFeature","newPoly","redoPrev","handleRedo","require","default","remarkLineSegments","histPrev","rotateMapToHighlightedSegment","start","end","currentRotation","startPixel","endPixel","unrotatedDx","unrotatedDy","angle","atan2","PI","animate","handleKeyDown","e","key","preventDefault","distance","angleDeg","includes","distStr","angleStr","split","parseFloat","isNaN","angleRad","ctrlKey","metaKey","document","addEventListener","setTarget","removeEventListener","removeInteraction","val","translate","getFeaturesCollection","addInteraction","set","children","id","ref","value","onChange","placeholder","autoFocus","autoComplete","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","disabled","v","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport LineString from 'ol/geom/LineString';\nimport Point from 'ol/geom/Point';\n// import Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport { ScaleLine, Rotate } from 'ol/control';\nimport Translate from 'ol/interaction/Translate';\n\n/* map actions */\nimport History from './map-helpers/History';\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\nimport Clone from './map-actions/Clone';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle,\n  highlightSegmentStyle,\n  highlightVertexStyle,\n  closingSegmentStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  // remarkPolygonSegments,\n  // remarkLineSegments,\n  pointToSegmentDistance\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 1.524;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const [redoStack, setRedoStack] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const drawingRef = useRef(false);\n  const [drawing, setDrawing] = useState(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  const [showHistory, setShowHistory] = useState(false);\n\n  function addHistoryAction(action) {\n    setHistory(prev => [...prev, action]);\n    setRedoStack([]);\n\n    //clear highlight layer\n    if (action.type === 'delete-vertex' || action.type === 'delete-segment') {\n      const highlightLayer = mapRef.current.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n      if (highlightLayer) {\n        highlightLayer.getSource().clear();\n      }\n    }\n  }\n\n  function getSnappedCoordinate(map, vectorSource, pointerPixel, tolerance = 25) {\n    let closestCoord = null;\n    let minDist = Infinity;\n\n    vectorSource.getFeatures().forEach(feature => {\n      const geom = feature.getGeometry();\n      let coords = [];\n      if (geom.getType() === 'Polygon') {\n        coords = geom.getCoordinates()[0];\n      } else if (geom.getType() === 'LineString') {\n        coords = geom.getCoordinates();\n      }\n      coords.forEach(coord => {\n        const pixel = map.getPixelFromCoordinate(coord);\n        const dist = Math.hypot(pointerPixel[0] - pixel[0], pointerPixel[1] - pixel[1]);\n        if (dist < minDist && dist < tolerance) {\n          minDist = dist;\n          closestCoord = coord;\n        }\n      });\n    });\n\n    return closestCoord;\n  }\n\n  useEffect(() => {\n    const allFeatures = vectorSourceRef.current?.getFeatures?.() || [];\n    allFeatures.forEach(f => {\n      if (f === selectedFeature) {\n        f.setStyle(selectedPolygonStyle);\n      } else {\n        f.setStyle(polygonStyle);\n      }\n    });\n  }, [selectedFeature]);\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    map.addControl(new Rotate({ autoHide: false, duration: 500 }));\n\n    const highlightSource = new VectorSource();\n    const highlightLayer = new VectorLayer({\n      name: 'highlight',\n      source: highlightSource,\n      style: highlightSegmentStyle,\n    });\n    map.addLayer(highlightLayer);\n\n    mapRef.current = map;\n\n    // Expose createSegmentOverlays for use in handlers\n    mapRef.current.createSegmentOverlays = (feature, mapRef) => createSegmentOverlays(feature, mapRef);\n\n    map.on('pointermove', evt => {\n      //GHOST MARKER LOGIC\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        const pixel = evt.pixel;\n        const map = mapRef.current;\n        const vectorSource = vectorSourceRef.current;\n\n        // Try to snap to existing vertices\n        const snappedCoord = getSnappedCoordinate(map, vectorSource, pixel, 25) || coord;\n\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(snappedCoord));\n        ghost.setStyle(ghostMarkerStyle);\n        vectorSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      } else if (modeRef.current === 'select') {\n        highlightSource.clear();\n        let found = false;\n        map.forEachFeatureAtPixel(evt.pixel, (feature, layer) => {\n          if (feature.getGeometry().getType() === 'Polygon' || feature.getGeometry().getType() === 'LineString') {\n            const coords = feature.getGeometry().getType() === 'Polygon'\n              ? feature.getGeometry().getCoordinates()[0]\n              : feature.getGeometry().getCoordinates();\n\n            // Check for vertex hover first\n            for (let i = 0; i < coords.length; i++) {\n              const pixel = map.getPixelFromCoordinate(coords[i]);\n              const dist = Math.sqrt(\n                Math.pow(evt.pixel[0] - pixel[0], 2) + Math.pow(evt.pixel[1] - pixel[1], 2)\n              );\n              if (dist < 8) { // 8 pixels tolerance for vertex\n                const vertexFeature = new Feature(new Point(coords[i]));\n                vertexFeature.setStyle(highlightVertexStyle);\n                highlightSource.addFeature(vertexFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n\n            // If no vertex found, check for segment hover\n            for (let i = 0; i < coords.length - 1; i++) {\n              const seg = [coords[i], coords[i + 1]];\n              const pixel1 = map.getPixelFromCoordinate(seg[0]);\n              const pixel2 = map.getPixelFromCoordinate(seg[1]);\n              const dist = pointToSegmentDistance(evt.pixel, pixel1, pixel2);\n              if (dist < 8) { // 8 pixels tolerance for segment\n                const segFeature = new Feature(new LineString(seg));\n                segFeature.setStyle(highlightSegmentStyle);\n                highlightSource.addFeature(segFeature);\n                found = true;\n                return true; // Stop after first found\n              }\n            }\n          }\n          return found;\n        });\n      }\n    });\n\n    function drawClick(evt) {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        if (ghostMarkerRef.current) {\n          vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n          ghostMarkerRef.current = null;\n        }\n\n        const pixel = mapRef.current.getPixelFromCoordinate(coord);\n\n        //custom snapping\n        const snappedCoord = getSnappedCoordinate(mapRef.current, vectorSourceRef.current, pixel, 25) || coord;\n        const poly = new Polygon([[snappedCoord, snappedCoord]]);\n        const feature = new Feature(poly);\n\n        feature.setId(Date.now().toString());\n        feature.setStyle(activePolygonStyle);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        setDrawing(true);\n\n        // Track action in history\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords: [],\n          newCoords: [[coord, coord]],\n        });\n      } else {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        console.log(coords.length);\n        if (coords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n      }\n    }\n\n    function selectClick(evt) {\n      const features = map.getFeaturesAtPixel(evt.pixel);\n      const allPolygons = vectorSourceRef.current.getFeatures();\n\n      if (!features || features.length === 0) {\n        // Deselect all: reset style for all polygons\n        allPolygons.forEach(f => f.setStyle(polygonStyle));\n        setSelectedFeature(null);\n        return;\n      }\n\n      // Find the index of the currently selected feature in the features array\n      let currentIdx = -1;\n\n      // Cycle to the next feature\n      const nextIdx = (currentIdx + 1) % features.length;\n      const nextFeature = features[nextIdx];\n\n      setSelectedFeature(nextFeature);\n\n      // Set only the selected feature to selectedPolygonStyle, all others to polygonStyle\n      // allPolygons.forEach(f => {\n      //   f.setStyle(f === nextFeature ? selectedPolygonStyle : polygonStyle);\n      // });\n    }\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        drawClick(evt);\n      }\n      if (modeRef.current === 'select') {\n        selectClick(evt);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n\n      // Rotate the direction vector by the negative of the map's rotation\n      const map = mapRef.current;\n      const rotation = map ? map.getView().getRotation() : 0;\n      const cos = Math.cos(rotation);\n      const sin = Math.sin(rotation);\n      const rotatedDx = dx * cos - dy * sin;\n      const rotatedDy = dx * sin + dy * cos;\n\n      const newPt = [last[0] + rotatedDx, last[1] + rotatedDy];\n\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, mapRef);\n\n      // Track action in history\n      addHistoryAction({\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords,\n      });\n    }\n\n    function handleUndo() {\n      let lastActionForRedo = null;\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n        lastActionForRedo = lastAction;\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        const prevCoords = lastAction.prevCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          let lineFeature = vectorSourceRef.current.getFeatures().find(\n            f => f.getId && f.getId() === lastAction.featureId && f.getGeometry().getType() === 'LineString'\n          );\n          if (lineFeature) {\n            clearPolygonOverlays(lineFeature, mapRef);\n            vectorSourceRef.current.removeFeature(lineFeature);\n          }\n          const newPoly = new Feature(new Polygon([prevCoords]));\n          if (lastAction.featureId) newPoly.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(newPoly);\n          polygonFeatureRef.current = newPoly;\n          if (prevCoords && prevCoords.length > 1) {\n            createSegmentOverlays(newPoly, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.prevCoords]);\n            if (lastAction.prevCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.prevCoords) {\n            feature.getGeometry().setCoordinates(lastAction.prevCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          return prev.slice(0, -1);\n        }\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        if (!prevCoords || prevCoords.length <= 1) {\n          clearPolygonOverlays(feature, mapRef);\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          setDrawing(false);\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        if (prevCoords.length > 1) {\n          createSegmentOverlays(feature, mapRef);\n        }\n\n        return prev.slice(0, -1);\n      });\n      // Only push to redoStack ONCE per undo, after setHistory runs\n      if (lastActionForRedo) {\n        setRedoStack(redoPrev => [...redoPrev, lastActionForRedo]);\n      }\n    }\n\n    function handleRedo() {\n      setRedoStack(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n\n        const newCoords = lastAction.newCoords;\n\n        if (lastAction.type === 'delete-segment') {\n          // Remove the polygon feature\n          if (feature) {\n            clearPolygonOverlays(feature, mapRef);\n            vectorSourceRef.current.removeFeature(feature);\n          }\n          // Create a new LineString feature with the newCoords\n          const LineString = require('ol/geom/LineString').default;\n          const lineFeature = new Feature(new LineString(newCoords));\n          if (lastAction.featureId) lineFeature.setId(lastAction.featureId);\n          vectorSourceRef.current.addFeature(lineFeature);\n          if (mapRef.current && mapRef.current.remarkLineSegments) {\n            mapRef.current.remarkLineSegments(lineFeature);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'add-point' || lastAction.type === 'delete-vertex') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([newCoords]);\n            if (newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'flip-horizontal' || lastAction.type === 'flip-vertical') {\n          if (feature) {\n            feature.getGeometry().setCoordinates([lastAction.newCoords]);\n            if (lastAction.newCoords.length > 1) {\n              createSegmentOverlays(feature, mapRef);\n            }\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        if (lastAction.type === 'move-feature') {\n          if (feature && lastAction.newCoords) {\n            feature.getGeometry().setCoordinates(lastAction.newCoords);\n            createSegmentOverlays(feature, mapRef);\n          }\n          setHistory(histPrev => [...histPrev, lastAction]);\n          return prev.slice(0, -1);\n        }\n\n        // Add more redo logic for other action types as needed...\n        return prev;\n      });\n    }\n\n    function rotateMapToHighlightedSegment(map, highlightSource) {\n      const features = highlightSource.getFeatures();\n      const segFeature = features.find(f => f.getGeometry().getType() === 'LineString');\n      if (!segFeature) return;\n\n      const coords = segFeature.getGeometry().getCoordinates();\n      if (coords.length < 2) return;\n\n      const [start, end] = coords;\n\n      const view = map.getView();\n      const currentRotation = view.getRotation();\n\n      const startPixel = map.getPixelFromCoordinate(start);\n      const endPixel = map.getPixelFromCoordinate(end);\n\n      // Undo current rotation to get true screen-space angle\n      const cos = Math.cos(-currentRotation);\n      const sin = Math.sin(-currentRotation);\n\n      const dx = endPixel[0] - startPixel[0];\n      const dy = endPixel[1] - startPixel[1];\n\n      const unrotatedDx = dx * cos - dy * sin;\n      const unrotatedDy = dx * sin + dy * cos;\n\n      const angle = Math.atan2(unrotatedDy, unrotatedDx);\n      const rotation = Math.PI / 2 - angle;\n\n      // Center on the midpoint of the segment\n      const center = [\n        (start[0] + end[0]) / 2,\n        (start[1] + end[1]) / 2\n      ];\n\n      view.animate({\n        center,\n        rotation,\n        duration: 600\n      });\n    }\n\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n\n      // Enter key: calculate [text] as distance/angle and add a segment\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n\n        // Parse input\n        let distance = 0;\n        let angleDeg = 0;\n        if (text.includes('/')) {\n          const [distStr, angleStr] = text.split('/');\n          distance = parseFloat(distStr);\n          angleDeg = parseFloat(angleStr);\n        } else {\n          distance = parseFloat(text);\n          angleDeg = 0;\n        }\n        if (isNaN(distance)) return; // Invalid input\n\n        // Convert feet to meters\n        distance = distance * 0.3048;\n\n        // Calculate angle in radians, adjusted for map rotation\n        const map = mapRef.current;\n        const rotation = map ? map.getView().getRotation() : 0;\n        const angleRad = (angleDeg * Math.PI) / 180 - rotation;\n\n        // Calculate new point\n        const dx = distance * Math.cos(angleRad);\n        const dy = distance * Math.sin(angleRad);\n        const newPt = [last[0] + dx, last[1] + dy];\n\n        const prevCoords = [...coords];\n        coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        createSegmentOverlays(feature, mapRef);\n\n        // Track action in history\n        addHistoryAction({\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        });\n\n        setText(''); // Clear input after use\n      }\n\n      // 'a' to finish polygon\n      if ((e.key === 'a' || e.key === 'A') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, mapRef);\n          drawingRef.current = false;\n          setDrawing(false);\n        }\n      }\n      // ctrl + z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n      // ctrl + y\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'y' || e.key === 'Y')\n      ) {\n        e.preventDefault();\n        handleRedo();\n      }\n      //ctrl + r\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'r' || e.key === 'R')\n      ) {\n        e.preventDefault();\n        const map = mapRef.current;\n        const highlightLayer = map.getLayers().getArray().find(layer => layer.get('name') === 'highlight');\n        if (map && highlightLayer) {\n          rotateMapToHighlightedSegment(map, highlightLayer.getSource());\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val * 0.3048;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current) {\n      vectorSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      let translate = new Translate({ features: vectorSourceRef.current.getFeaturesCollection() });\n      map.addInteraction(translate);\n      selectInteractionRef.current = translate;\n\n      // Listen for translateend to track moves\n      translate.on('translateend', (evt) => {\n        evt.features.forEach(feature => {\n          // Save previous and new coordinates for undo/redo\n          const prevCoords = feature.get('_prevCoords') || feature.getGeometry().getCoordinates();\n          const newCoords = feature.getGeometry().getCoordinates();\n          addHistoryAction({\n            type: 'move-feature',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords,\n          });\n          // Update _prevCoords for future moves\n          feature.set('_prevCoords', newCoords);\n          createSegmentOverlays(feature, mapRef);\n\n        });\n      });\n\n      // Save the original coordinates before move starts\n      translate.on('translatestart', (evt) => {\n        evt.features.forEach(feature => {\n          clearPolygonOverlays(feature, mapRef);\n          feature.set('_prevCoords', feature.getGeometry().getCoordinates());\n          setSelectedFeature(feature);\n        });\n      });\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  return (\n    <div>\n      <div id=\"dimension-input-container\">\n        <input\n          id=\"dimension-input\"\n          ref={inputRef}\n          type=\"text\"\n          value={text}\n          onChange={e => setText(e.target.value)}\n          placeholder=\"Dimension (ft.)\"\n          autoFocus\n          autoComplete='off'\n        />\n      </div>\n      <div id=\"map-menu-vert\">\n        <button\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n          disabled={mode === 'draw' && drawing}>\n          Draw\n        </button>\n        <button\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n          disabled={mode === 'draw' && drawing}>\n          Select\n        </button>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} addHistoryAction={addHistoryAction} />\n        <Clone selectedFeature={selectedFeature} vectorSourceRef={vectorSourceRef} setSelectedFeature={setSelectedFeature} addHistoryAction={addHistoryAction} mapRef={mapRef} />\n        <div id=\"history-toggle\" className={`map-button${showHistory ? ' active' : ''}`} onClick={() => setShowHistory(v => !v)}>\n          History\n        </div>\n        {/* <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div> */}\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n        addHistoryAction={addHistoryAction}\n      />\n      {showHistory && (\n        <History history={history} redoStack={redoStack} />\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}