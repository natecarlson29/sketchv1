{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/OverviewMap\n */\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport PluggableMap from '../PluggableMap.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { containsExtent, equals as equalsExtent, getBottomRight, getTopLeft, scaleFromCenter } from '../extent.js';\nimport { listen, listenOnce } from '../events.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\nimport { replaceNode } from '../dom.js';\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nvar MAX_RATIO = 0.75;\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nvar MIN_RATIO = 0.1;\nvar ControlledMap = /** @class */function (_super) {\n  __extends(ControlledMap, _super);\n  function ControlledMap() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  ControlledMap.prototype.createRenderer = function () {\n    return new CompositeMapRenderer(this);\n  };\n  return ControlledMap;\n}(PluggableMap);\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nvar OverviewMap = /** @class */function (_super) {\n  __extends(OverviewMap, _super);\n  /**\n   * @param {Options} [opt_options] OverviewMap options.\n   */\n  function OverviewMap(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     */\n    _this.boundHandleRotationChanged_ = _this.handleRotationChanged_.bind(_this);\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.rotateWithView_ = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    _this.viewExtent_ = undefined;\n    var className = options.className !== undefined ? options.className : 'ol-overviewmap';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n    var label = options.label !== undefined ? options.label : '\\u203A';\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n    }\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    _this.ovmapDiv_ = document.createElement('div');\n    _this.ovmapDiv_.className = 'ol-overviewmap-map';\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    _this.view_ = options.view;\n    /**\n     * @type {ControlledMap}\n     * @private\n     */\n    _this.ovmap_ = new ControlledMap({\n      view: options.view\n    });\n    var ovmap = _this.ovmap_;\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n    var box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    _this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box\n    });\n    _this.ovmap_.addOverlay(_this.boxOverlay_);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.ovmapDiv_);\n    element.appendChild(button);\n    /* Interactive map */\n    var scope = _this;\n    var overlay = _this.boxOverlay_;\n    var overlayBox = _this.boxOverlay_.getElement();\n    /* Functions definition */\n    var computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY\n      };\n    };\n    var move = function (event) {\n      var position = /** @type {?} */computeDesiredMousePosition(event);\n      var coordinates = ovmap.getEventCoordinateInternal(/** @type {MouseEvent} */position);\n      overlay.setPosition(coordinates);\n    };\n    var endMoving = function (event) {\n      var coordinates = ovmap.getEventCoordinateInternal(event);\n      scope.getMap().getView().setCenterInternal(coordinates);\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n    /* Binding */\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n    return _this;\n  }\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  OverviewMap.prototype.setMap = function (map) {\n    var oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      var oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    _super.prototype.setMap.call(this, map);\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(listen(map, ObjectEventType.PROPERTYCHANGE, this.handleMapPropertyChange_, this));\n      var view = map.getView();\n      if (view) {\n        this.bindView_(view);\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  };\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  OverviewMap.prototype.handleMapPropertyChange_ = function (event) {\n    if (event.key === MapProperty.VIEW) {\n      var oldView = /** @type {import(\"../View.js\").default} */event.oldValue;\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      var newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (!this.ovmap_.isRendered() && (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)) {\n      this.ovmap_.updateSize();\n    }\n  };\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  OverviewMap.prototype.bindView_ = function (view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      var newView = new View({\n        projection: view.getProjection()\n      });\n      this.ovmap_.setView(newView);\n    }\n    view.addChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n    // Sync once with the new view\n    this.handleRotationChanged_();\n  };\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  OverviewMap.prototype.unbindView_ = function (view) {\n    view.removeChangeListener(ViewProperty.ROTATION, this.boundHandleRotationChanged_);\n  };\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  OverviewMap.prototype.handleRotationChanged_ = function () {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  };\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  OverviewMap.prototype.validateExtent_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n    var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n    var ovmapSize = /** @type {import(\"../size.js\").Size} */ovmap.getSize();\n    var ovview = ovmap.getView();\n    var ovextent = ovview.calculateExtentInternal(ovmapSize);\n    var topLeftPixel = ovmap.getPixelFromCoordinateInternal(getTopLeft(extent));\n    var bottomRightPixel = ovmap.getPixelFromCoordinateInternal(getBottomRight(extent));\n    var boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    var boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n    var ovmapWidth = ovmapSize[0];\n    var ovmapHeight = ovmapSize[1];\n    if (boxWidth < ovmapWidth * MIN_RATIO || boxHeight < ovmapHeight * MIN_RATIO || boxWidth > ovmapWidth * MAX_RATIO || boxHeight > ovmapHeight * MAX_RATIO) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  };\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  OverviewMap.prototype.resetExtent_ = function () {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    var view = map.getView();\n    var extent = view.calculateExtentInternal(mapSize);\n    var ovview = ovmap.getView();\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    var steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    var ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  };\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  OverviewMap.prototype.recenter_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    ovview.setCenterInternal(view.getCenterInternal());\n  };\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  OverviewMap.prototype.updateBox_ = function () {\n    var map = this.getMap();\n    var ovmap = this.ovmap_;\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n    var mapSize = /** @type {import(\"../size.js\").Size} */map.getSize();\n    var view = map.getView();\n    var ovview = ovmap.getView();\n    var rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n    var overlay = this.boxOverlay_;\n    var box = this.boxOverlay_.getElement();\n    var center = view.getCenterInternal();\n    var resolution = view.getResolution();\n    var ovresolution = ovview.getResolution();\n    var width = mapSize[0] * resolution / ovresolution;\n    var height = mapSize[1] * resolution / ovresolution;\n    // set position using center coordinates\n    overlay.setPosition(center);\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      var transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  };\n  /**\n   * @private\n   */\n  OverviewMap.prototype.updateBoxAfterOvmapIsRendered_ = function () {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n    this.ovmapPostrenderKey_ = listenOnce(this.ovmap_, MapEventType.POSTRENDER, function (event) {\n      delete this.ovmapPostrenderKey_;\n      this.updateBox_();\n    }, this);\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  OverviewMap.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n  OverviewMap.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    var ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  };\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  OverviewMap.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  OverviewMap.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  OverviewMap.prototype.setCollapsed = function (collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  };\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  OverviewMap.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  OverviewMap.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  OverviewMap.prototype.setRotateWithView = function (rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  };\n  /**\n   * Return the overview map.\n   * @return {import(\"../PluggableMap.js\").default} Overview map.\n   * @api\n   */\n  OverviewMap.prototype.getOverviewMap = function () {\n    return this.ovmap_;\n  };\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  OverviewMap.prototype.render = function (mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  };\n  return OverviewMap;\n}(Control);\nexport default OverviewMap;","map":{"version":3,"names":["CompositeMapRenderer","Control","EventType","MapEventType","MapProperty","ObjectEventType","Overlay","PluggableMap","View","ViewProperty","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","containsExtent","equals","equalsExtent","getBottomRight","getTopLeft","scaleFromCenter","listen","listenOnce","fromExtent","polygonFromExtent","replaceNode","MAX_RATIO","MIN_RATIO","ControlledMap","_super","__extends","prototype","createRenderer","OverviewMap","opt_options","_this","options","call","element","document","createElement","render","target","boundHandleRotationChanged_","handleRotationChanged_","bind","collapsed_","collapsed","undefined","collapsible_","collapsible","rotateWithView_","rotateWithView","viewExtent_","className","tipLabel","collapseLabel","collapseLabel_","textContent","label","label_","activeLabel","button","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","ovmapDiv_","view_","view","ovmap_","ovmap","layers","forEach","layer","addLayer","box","style","boxSizing","boxOverlay_","position","positioning","addOverlay","cssClasses","scope","overlay","overlayBox","getElement","computeDesiredMousePosition","mousePosition","clientX","clientY","move","event","coordinates","getEventCoordinateInternal","setPosition","endMoving","getMap","getView","setCenterInternal","window","removeEventListener","setMap","map","oldMap","oldView","unbindView_","setTarget","listenerKeys","push","PROPERTYCHANGE","handleMapPropertyChange_","bindView_","isDef","updateSize","resetExtent_","isRendered","updateBoxAfterOvmapIsRendered_","key","VIEW","oldValue","newView","TARGET","SIZE","projection","getProjection","setView","addChangeListener","ROTATION","removeChangeListener","setRotation","getRotation","validateExtent_","mapSize","getSize","extent","calculateExtentInternal","ovmapSize","ovview","ovextent","topLeftPixel","getPixelFromCoordinateInternal","bottomRightPixel","boxWidth","Math","abs","boxHeight","ovmapWidth","ovmapHeight","recenter_","steps","log","LN2","ratio","pow","fitInternal","getCenterInternal","updateBox_","rotation","center","resolution","getResolution","ovresolution","width","height","transform","ovmapPostrenderKey_","POSTRENDER","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsible","setCollapsed","getCollapsed","getRotateWithView","setRotateWithView","getOverviewMap","mapEvent"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\control\\OverviewMap.js"],"sourcesContent":["/**\n * @module ol/control/OverviewMap\n */\nimport CompositeMapRenderer from '../renderer/Composite.js';\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport MapEventType from '../MapEventType.js';\nimport MapProperty from '../MapProperty.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport Overlay from '../Overlay.js';\nimport PluggableMap from '../PluggableMap.js';\nimport View from '../View.js';\nimport ViewProperty from '../ViewProperty.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {\n  containsExtent,\n  equals as equalsExtent,\n  getBottomRight,\n  getTopLeft,\n  scaleFromCenter,\n} from '../extent.js';\nimport {listen, listenOnce} from '../events.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\nimport {replaceNode} from '../dom.js';\n\n/**\n * Maximum width and/or height extent ratio that determines when the overview\n * map should be zoomed out.\n * @type {number}\n */\nconst MAX_RATIO = 0.75;\n\n/**\n * Minimum width and/or height extent ratio that determines when the overview\n * map should be zoomed in.\n * @type {number}\n */\nconst MIN_RATIO = 0.1;\n\nclass ControlledMap extends PluggableMap {\n  createRenderer() {\n    return new CompositeMapRenderer(this);\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-overviewmap'] CSS class name.\n * @property {boolean} [collapsed=true] Whether the control should start collapsed or not (expanded).\n * @property {string|HTMLElement} [collapseLabel='‹'] Text label to use for the\n * expanded overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {boolean} [collapsible=true] Whether the control can be collapsed or not.\n * @property {string|HTMLElement} [label='›'] Text label to use for the collapsed\n * overviewmap button. Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {Array<import(\"../layer/Base.js\").default>|import(\"../Collection.js\").default<import(\"../layer/Base.js\").default>} [layers]\n * Layers for the overview map.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {boolean} [rotateWithView=false] Whether the control view should rotate with the main map view.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string} [tipLabel='Overview map'] Text label to use for the button tip.\n * @property {View} [view] Custom view for the overview map (should use same projection as main map). If not provided,\n * a default view with the same projection as the main map will be used.\n */\n\n/**\n * Create a new control with a map acting as an overview map for another\n * defined map.\n *\n * @api\n */\nclass OverviewMap extends Control {\n  /**\n   * @param {Options} [opt_options] OverviewMap options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     */\n    this.boundHandleRotationChanged_ = this.handleRotationChanged_.bind(this);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.viewExtent_ = undefined;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-overviewmap';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Overview map';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u2039';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : '\\u203A';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    /**\n     * @type {HTMLElement}\n     * @private\n     */\n    this.ovmapDiv_ = document.createElement('div');\n    this.ovmapDiv_.className = 'ol-overviewmap-map';\n\n    /**\n     * Explicitly given view to be used instead of a view derived from the main map.\n     * @type {View}\n     * @private\n     */\n    this.view_ = options.view;\n\n    /**\n     * @type {ControlledMap}\n     * @private\n     */\n    this.ovmap_ = new ControlledMap({\n      view: options.view,\n    });\n    const ovmap = this.ovmap_;\n\n    if (options.layers) {\n      options.layers.forEach(function (layer) {\n        ovmap.addLayer(layer);\n      });\n    }\n\n    const box = document.createElement('div');\n    box.className = 'ol-overviewmap-box';\n    box.style.boxSizing = 'border-box';\n\n    /**\n     * @type {import(\"../Overlay.js\").default}\n     * @private\n     */\n    this.boxOverlay_ = new Overlay({\n      position: [0, 0],\n      positioning: 'center-center',\n      element: box,\n    });\n    this.ovmap_.addOverlay(this.boxOverlay_);\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ovmapDiv_);\n    element.appendChild(button);\n\n    /* Interactive map */\n\n    const scope = this;\n\n    const overlay = this.boxOverlay_;\n    const overlayBox = this.boxOverlay_.getElement();\n\n    /* Functions definition */\n\n    const computeDesiredMousePosition = function (mousePosition) {\n      return {\n        clientX: mousePosition.clientX,\n        clientY: mousePosition.clientY,\n      };\n    };\n\n    const move = function (event) {\n      const position = /** @type {?} */ (computeDesiredMousePosition(event));\n      const coordinates = ovmap.getEventCoordinateInternal(\n        /** @type {MouseEvent} */ (position)\n      );\n\n      overlay.setPosition(coordinates);\n    };\n\n    const endMoving = function (event) {\n      const coordinates = ovmap.getEventCoordinateInternal(event);\n\n      scope.getMap().getView().setCenterInternal(coordinates);\n\n      window.removeEventListener('mousemove', move);\n      window.removeEventListener('mouseup', endMoving);\n    };\n\n    /* Binding */\n\n    overlayBox.addEventListener('mousedown', function () {\n      window.addEventListener('mousemove', move);\n      window.addEventListener('mouseup', endMoving);\n    });\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    const oldMap = this.getMap();\n    if (map === oldMap) {\n      return;\n    }\n    if (oldMap) {\n      const oldView = oldMap.getView();\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      this.ovmap_.setTarget(null);\n    }\n    super.setMap(map);\n\n    if (map) {\n      this.ovmap_.setTarget(this.ovmapDiv_);\n      this.listenerKeys.push(\n        listen(\n          map,\n          ObjectEventType.PROPERTYCHANGE,\n          this.handleMapPropertyChange_,\n          this\n        )\n      );\n\n      const view = map.getView();\n      if (view) {\n        this.bindView_(view);\n        if (view.isDef()) {\n          this.ovmap_.updateSize();\n          this.resetExtent_();\n        }\n      }\n\n      if (!this.ovmap_.isRendered()) {\n        this.updateBoxAfterOvmapIsRendered_();\n      }\n    }\n  }\n\n  /**\n   * Handle map property changes.  This only deals with changes to the map's view.\n   * @param {import(\"../Object.js\").ObjectEvent} event The propertychange event.\n   * @private\n   */\n  handleMapPropertyChange_(event) {\n    if (event.key === MapProperty.VIEW) {\n      const oldView = /** @type {import(\"../View.js\").default} */ (\n        event.oldValue\n      );\n      if (oldView) {\n        this.unbindView_(oldView);\n      }\n      const newView = this.getMap().getView();\n      this.bindView_(newView);\n    } else if (\n      !this.ovmap_.isRendered() &&\n      (event.key === MapProperty.TARGET || event.key === MapProperty.SIZE)\n    ) {\n      this.ovmap_.updateSize();\n    }\n  }\n\n  /**\n   * Register listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  bindView_(view) {\n    if (!this.view_) {\n      // Unless an explicit view definition was given, derive default from whatever main map uses.\n      const newView = new View({\n        projection: view.getProjection(),\n      });\n      this.ovmap_.setView(newView);\n    }\n\n    view.addChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_\n    );\n    // Sync once with the new view\n    this.handleRotationChanged_();\n  }\n\n  /**\n   * Unregister listeners for view property changes.\n   * @param {import(\"../View.js\").default} view The view.\n   * @private\n   */\n  unbindView_(view) {\n    view.removeChangeListener(\n      ViewProperty.ROTATION,\n      this.boundHandleRotationChanged_\n    );\n  }\n\n  /**\n   * Handle rotation changes to the main map.\n   * @private\n   */\n  handleRotationChanged_() {\n    if (this.rotateWithView_) {\n      this.ovmap_.getView().setRotation(this.getMap().getView().getRotation());\n    }\n  }\n\n  /**\n   * Reset the overview map extent if the box size (width or\n   * height) is less than the size of the overview map size times minRatio\n   * or is greater than the size of the overview size times maxRatio.\n   *\n   * If the map extent was not reset, the box size can fits in the defined\n   * ratio sizes. This method then checks if is contained inside the overview\n   * map current extent. If not, recenter the overview map to the current\n   * main map center location.\n   * @private\n   */\n  validateExtent_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    if (this.viewExtent_ && equalsExtent(extent, this.viewExtent_)) {\n      // repeats of the same extent may indicate constraint conflicts leading to an endless cycle\n      return;\n    }\n    this.viewExtent_ = extent;\n\n    const ovmapSize = /** @type {import(\"../size.js\").Size} */ (\n      ovmap.getSize()\n    );\n\n    const ovview = ovmap.getView();\n    const ovextent = ovview.calculateExtentInternal(ovmapSize);\n\n    const topLeftPixel = ovmap.getPixelFromCoordinateInternal(\n      getTopLeft(extent)\n    );\n    const bottomRightPixel = ovmap.getPixelFromCoordinateInternal(\n      getBottomRight(extent)\n    );\n\n    const boxWidth = Math.abs(topLeftPixel[0] - bottomRightPixel[0]);\n    const boxHeight = Math.abs(topLeftPixel[1] - bottomRightPixel[1]);\n\n    const ovmapWidth = ovmapSize[0];\n    const ovmapHeight = ovmapSize[1];\n\n    if (\n      boxWidth < ovmapWidth * MIN_RATIO ||\n      boxHeight < ovmapHeight * MIN_RATIO ||\n      boxWidth > ovmapWidth * MAX_RATIO ||\n      boxHeight > ovmapHeight * MAX_RATIO\n    ) {\n      this.resetExtent_();\n    } else if (!containsExtent(ovextent, extent)) {\n      this.recenter_();\n    }\n  }\n\n  /**\n   * Reset the overview map extent to half calculated min and max ratio times\n   * the extent of the main map.\n   * @private\n   */\n  resetExtent_() {\n    if (MAX_RATIO === 0 || MIN_RATIO === 0) {\n      return;\n    }\n\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n    const extent = view.calculateExtentInternal(mapSize);\n\n    const ovview = ovmap.getView();\n\n    // get how many times the current map overview could hold different\n    // box sizes using the min and max ratio, pick the step in the middle used\n    // to calculate the extent from the main map to set it to the overview map,\n    const steps = Math.log(MAX_RATIO / MIN_RATIO) / Math.LN2;\n    const ratio = 1 / (Math.pow(2, steps / 2) * MIN_RATIO);\n    scaleFromCenter(extent, ratio);\n    ovview.fitInternal(polygonFromExtent(extent));\n  }\n\n  /**\n   * Set the center of the overview map to the map center without changing its\n   * resolution.\n   * @private\n   */\n  recenter_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    ovview.setCenterInternal(view.getCenterInternal());\n  }\n\n  /**\n   * Update the box using the main map extent\n   * @private\n   */\n  updateBox_() {\n    const map = this.getMap();\n    const ovmap = this.ovmap_;\n\n    if (!map.isRendered() || !ovmap.isRendered()) {\n      return;\n    }\n\n    const mapSize = /** @type {import(\"../size.js\").Size} */ (map.getSize());\n\n    const view = map.getView();\n\n    const ovview = ovmap.getView();\n\n    const rotation = this.rotateWithView_ ? 0 : -view.getRotation();\n\n    const overlay = this.boxOverlay_;\n    const box = this.boxOverlay_.getElement();\n    const center = view.getCenterInternal();\n    const resolution = view.getResolution();\n    const ovresolution = ovview.getResolution();\n    const width = (mapSize[0] * resolution) / ovresolution;\n    const height = (mapSize[1] * resolution) / ovresolution;\n\n    // set position using center coordinates\n    overlay.setPosition(center);\n\n    // set box size calculated from map extent size and overview map resolution\n    if (box) {\n      box.style.width = width + 'px';\n      box.style.height = height + 'px';\n      const transform = 'rotate(' + rotation + 'rad)';\n      box.style.transform = transform;\n    }\n  }\n\n  /**\n   * @private\n   */\n  updateBoxAfterOvmapIsRendered_() {\n    if (this.ovmapPostrenderKey_) {\n      return;\n    }\n    this.ovmapPostrenderKey_ = listenOnce(\n      this.ovmap_,\n      MapEventType.POSTRENDER,\n      function (event) {\n        delete this.ovmapPostrenderKey_;\n        this.updateBox_();\n      },\n      this\n    );\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n\n    // manage overview map if it had not been rendered before and control\n    // is expanded\n    const ovmap = this.ovmap_;\n    if (!this.collapsed_) {\n      if (ovmap.isRendered()) {\n        this.viewExtent_ = undefined;\n        ovmap.render();\n        return;\n      }\n      ovmap.updateSize();\n      this.resetExtent_();\n      this.updateBoxAfterOvmapIsRendered_();\n    }\n  }\n\n  /**\n   * Return `true` if the overview map is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the overview map should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the overview map according to the passed parameter. Will\n   * not do anything if the overview map isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Determine if the overview map is collapsed.\n   * @return {boolean} The overview map is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the overview map view can rotate, `false` otherwise.\n   * @return {boolean} True if the control view can rotate.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Set whether the overview map view should rotate with the main map view.\n   * @param {boolean} rotateWithView True if the control view should rotate.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    if (this.rotateWithView_ === rotateWithView) {\n      return;\n    }\n    this.rotateWithView_ = rotateWithView;\n    if (this.getMap().getView().getRotation() !== 0) {\n      if (this.rotateWithView_) {\n        this.handleRotationChanged_();\n      } else {\n        this.ovmap_.getView().setRotation(0);\n      }\n      this.viewExtent_ = undefined;\n      this.validateExtent_();\n      this.updateBox_();\n    }\n  }\n\n  /**\n   * Return the overview map.\n   * @return {import(\"../PluggableMap.js\").default} Overview map.\n   * @api\n   */\n  getOverviewMap() {\n    return this.ovmap_;\n  }\n\n  /**\n   * Update the overview map element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.validateExtent_();\n    this.updateBox_();\n  }\n}\n\nexport default OverviewMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}