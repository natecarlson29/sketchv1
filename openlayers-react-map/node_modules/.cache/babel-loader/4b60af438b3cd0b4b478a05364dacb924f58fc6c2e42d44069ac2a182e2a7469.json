{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\map-actions\\\\RightClick.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\n// import { Feature } from 'ol';\n// import LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RightClick = ({\n  mapRef,\n  vectorSourceRef,\n  contextMenu,\n  setContextMenu,\n  clearPolygonOverlays: clearOverlaysProp,\n  addHistoryAction\n}) => {\n  _s();\n  useEffect(() => {\n    function handleCustomContextMenu(e) {\n      const mapDiv = document.getElementById('map');\n      if (!mapDiv || !mapRef.current || !vectorSourceRef.current) return;\n      if (!mapDiv.contains(e.target)) return;\n      e.preventDefault();\n      const pixel = mapRef.current.getEventPixel(e);\n      const features = vectorSourceRef.current.getFeatures();\n      let found = false;\n      for (const feature of features) {\n        const geom = feature.getGeometry();\n        let coords = null;\n        if (geom.getType() === 'Polygon') {\n          coords = geom.getCoordinates()[0];\n        } else if (geom.getType() === 'LineString') {\n          coords = geom.getCoordinates();\n        }\n        if (coords) {\n          // For polygons, skip last duplicate point\n          const len = geom.getType() === 'Polygon' ? coords.length - 1 : coords.length;\n          for (let i = 0; i < len; i++) {\n            const coordPixel = mapRef.current.getPixelFromCoordinate(coords[i]);\n            if (Math.hypot(pixel[0] - coordPixel[0], pixel[1] - coordPixel[1]) < 8) {\n              setContextMenu({\n                visible: true,\n                x: e.clientX,\n                y: e.clientY,\n                type: 'vertex',\n                feature,\n                index: i\n              });\n              found = true;\n              break;\n            }\n          }\n        }\n        if (found) break;\n      }\n      if (!found) {\n        for (const feature of features) {\n          const geom = feature.getGeometry();\n          let coords = null;\n          if (geom.getType() === 'Polygon') {\n            coords = geom.getCoordinates()[0];\n          } else if (geom.getType() === 'LineString') {\n            coords = geom.getCoordinates();\n          }\n          if (coords) {\n            // For polygons, skip last duplicate point\n            const len = geom.getType() === 'Polygon' ? coords.length - 1 : coords.length - 1;\n            for (let i = 0; i < len; i++) {\n              const c1 = mapRef.current.getPixelFromCoordinate(coords[i]);\n              const c2 = mapRef.current.getPixelFromCoordinate(coords[i + 1]);\n              const t = ((pixel[0] - c1[0]) * (c2[0] - c1[0]) + (pixel[1] - c1[1]) * (c2[1] - c1[1])) / ((c2[0] - c1[0]) ** 2 + (c2[1] - c1[1]) ** 2);\n              if (t >= 0 && t <= 1) {\n                const proj = [c1[0] + t * (c2[0] - c1[0]), c1[1] + t * (c2[1] - c1[1])];\n                if (Math.hypot(pixel[0] - proj[0], pixel[1] - proj[1]) < 8) {\n                  setContextMenu({\n                    visible: true,\n                    x: e.clientX,\n                    y: e.clientY,\n                    type: 'segment',\n                    feature,\n                    index: i\n                  });\n                  found = true;\n                  break;\n                }\n              }\n            }\n          }\n          if (found) break;\n        }\n      }\n      if (!found) setContextMenu({\n        visible: true,\n        x: e.clientX,\n        y: e.clientY,\n        type: null,\n        feature: null,\n        index: null\n      });\n    }\n    document.addEventListener('contextmenu', handleCustomContextMenu);\n    return () => document.removeEventListener('contextmenu', handleCustomContextMenu);\n  }, [mapRef, vectorSourceRef, setContextMenu]);\n  useEffect(() => {\n    function hideMenu() {\n      setContextMenu(menu => menu.visible ? {\n        ...menu,\n        visible: false\n      } : menu);\n    }\n    window.addEventListener('click', hideMenu);\n    return () => window.removeEventListener('click', hideMenu);\n  }, [setContextMenu]);\n\n  // Helper to deep clone coordinates\n  const cloneCoords = coords => coords.map(c => Array.isArray(c) ? [...c] : c);\n  const handleMenuAction = action => {\n    if (!contextMenu.feature) return;\n    const geom = contextMenu.feature.getGeometry();\n    let coords;\n    if (geom.getType() === 'Polygon') {\n      const arr = geom.getCoordinates()[0];\n      if (!Array.isArray(arr) || arr.length < 3 || !Array.isArray(arr[0])) return;\n      coords = arr.map(c => [c[0], c[1]]);\n    } else if (geom.getType() === 'LineString') {\n      const arr = geom.getCoordinates();\n      if (!Array.isArray(arr) || arr.length < 2 || !Array.isArray(arr[0])) return;\n      coords = arr.map(c => [c[0], c[1]]);\n    } else {\n      return;\n    }\n\n    // if (action === 'delete-vertex' && coords.length > 3) {\n    //   const prevCoords = cloneCoords(coords);\n    //   const newCoords = cloneCoords(coords);\n    //   newCoords.splice(contextMenu.index, 1);\n    //   newCoords[newCoords.length - 1] = newCoords[0];\n    //   geom.setCoordinates([newCoords]);\n    //   if (mapRef.current && mapRef.current.createSegmentOverlays) {\n    //     mapRef.current.createSegmentOverlays(contextMenu.feature, mapRef);\n    //   }\n    //   setContextMenu({ ...contextMenu, visible: false });\n\n    //   addHistoryAction({\n    //     type: 'delete-vertex',\n    //     featureId: contextMenu.feature.getId && contextMenu.feature.getId(),\n    //     prevCoords,\n    //     newCoords,\n    //     index: contextMenu.index\n    //   });\n\n    // }\n    if (action === 'delete-vertex') {\n      const prevCoords = cloneCoords(coords);\n      const newCoords = cloneCoords(coords);\n      newCoords.splice(contextMenu.index, 1);\n      if (geom.getType() === 'Polygon') {\n        // Only delete if at least 4 points remain (3 + closing point)\n        if (newCoords.length < 4) return;\n        newCoords[newCoords.length - 1] = newCoords[0]; // close ring\n        geom.setCoordinates([newCoords]);\n      } else if (geom.getType() === 'LineString') {\n        // Only delete if at least 2 points remain (minimum for a line)\n        if (newCoords.length < 2) return;\n        geom.setCoordinates(newCoords);\n      } else {\n        return;\n      }\n      if (mapRef.current && mapRef.current.createSegmentOverlays) {\n        mapRef.current.createSegmentOverlays(contextMenu.feature, mapRef);\n      }\n      setContextMenu({\n        ...contextMenu,\n        visible: false\n      });\n      addHistoryAction({\n        type: 'delete-vertex',\n        featureId: contextMenu.feature.getId && contextMenu.feature.getId(),\n        prevCoords,\n        newCoords,\n        index: contextMenu.index,\n        geomType: geom.getType()\n      });\n    }\n\n    // if (action === 'delete-segment' && coords.length > 3) {\n    //   if (clearOverlaysProp) clearOverlaysProp(contextMenu.feature);\n    //   const prevCoords = cloneCoords(coords);\n    //   if (\n    //     coords.length > 2 &&\n    //     coords[0][0] === coords[coords.length - 1][0] &&\n    //     coords[0][1] === coords[coords.length - 1][1]\n    //   ) {\n    //     coords = coords.slice(0, coords.length - 1);\n    //   }\n    //   const index = contextMenu.index;\n    //   const part1 = coords.slice(index + 1);\n    //   const part2 = coords.slice(0, index + 1);\n    //   const newCoords = [...part1, ...part2];\n\n    //   if (vectorSourceRef.current && vectorSourceRef.current.getFeatures().includes(contextMenu.feature)) {\n    //     vectorSourceRef.current.removeFeature(contextMenu.feature);\n    //   }\n    //   const lineFeature = new Feature(new LineString(newCoords));\n    //   if (contextMenu.feature.getId) {\n    //     lineFeature.setId(contextMenu.feature.getId());\n    //   }\n    //   vectorSourceRef.current.addFeature(lineFeature);\n\n    //   if (mapRef.current && mapRef.current.createSegmentOverlays) {\n    //     mapRef.current.createSegmentOverlays(lineFeature, mapRef);\n    //   }\n    //   setContextMenu({ ...contextMenu, visible: false });\n\n    //   addHistoryAction({\n    //     type: 'delete-segment',\n    //     featureId: contextMenu.feature.getId && contextMenu.feature.getId(),\n    //     prevCoords,\n    //     newCoords: cloneCoords(newCoords),\n    //     index: contextMenu.index\n    //   });\n\n    // }\n    if (action === 'delete-segment') {\n      if (clearOverlaysProp) clearOverlaysProp(contextMenu.feature);\n      const prevCoords = cloneCoords(coords);\n      let newCoords;\n      if (geom.getType() === 'Polygon') {\n        // Only allow if at least 5 points (4 + closing)\n        if (coords.length < 5) return;\n        // Remove closing point if present\n        let ring = coords;\n        if (ring.length > 2 && ring[0][0] === ring[ring.length - 1][0] && ring[0][1] === ring[ring.length - 1][1]) {\n          ring = ring.slice(0, ring.length - 1);\n        }\n        const index = contextMenu.index;\n        // Remove the segment by removing the endpoint after index\n        ring.splice((index + 1) % ring.length, 1);\n        // Re-close the ring\n        newCoords = [...ring, ring[0]];\n        geom.setCoordinates([newCoords]);\n        if (mapRef.current && mapRef.current.createSegmentOverlays) {\n          mapRef.current.createSegmentOverlays(contextMenu.feature, mapRef);\n        }\n      } else if (geom.getType() === 'LineString') {\n        // Only allow if at least 3 points (2 segments)\n        if (coords.length < 3) return;\n        const index = contextMenu.index;\n        // Remove the endpoint after index\n        newCoords = cloneCoords(coords);\n        newCoords.splice(index + 1, 1);\n        geom.setCoordinates(newCoords);\n        if (mapRef.current && mapRef.current.createSegmentOverlays) {\n          mapRef.current.createSegmentOverlays(contextMenu.feature, mapRef);\n        }\n      } else {\n        return;\n      }\n      setContextMenu({\n        ...contextMenu,\n        visible: false\n      });\n      addHistoryAction({\n        type: 'delete-segment',\n        featureId: contextMenu.feature.getId && contextMenu.feature.getId(),\n        prevCoords,\n        newCoords: cloneCoords(newCoords),\n        index: contextMenu.index,\n        geomType: geom.getType()\n      });\n    }\n  };\n  return contextMenu.visible ? /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"right-click-menu\",\n    style: {\n      position: 'fixed',\n      top: contextMenu.y,\n      left: contextMenu.x,\n      background: '#fff',\n      border: '1px solid #ccc',\n      zIndex: 1000,\n      padding: 4,\n      minWidth: 120\n    },\n    onContextMenu: e => e.preventDefault(),\n    onMouseLeave: () => setContextMenu({\n      ...contextMenu,\n      visible: false\n    }),\n    children: [contextMenu.type === 'vertex' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-item\",\n      onClick: () => handleMenuAction('delete-vertex'),\n      style: {\n        cursor: 'pointer',\n        padding: '4px 8px'\n      },\n      children: \"Delete Vertex\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 9\n    }, this), contextMenu.type === 'segment' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"menu-item\",\n      onClick: () => handleMenuAction('delete-segment'),\n      style: {\n        cursor: 'pointer',\n        padding: '4px 8px'\n      },\n      children: \"Delete Segment\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 9\n    }, this), !contextMenu.type && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: '#888',\n        padding: '4px 8px'\n      },\n      children: \"No actions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this) : null;\n};\n_s(RightClick, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n_c = RightClick;\nexport default RightClick;\nvar _c;\n$RefreshReg$(_c, \"RightClick\");","map":{"version":3,"names":["React","useEffect","jsxDEV","_jsxDEV","RightClick","mapRef","vectorSourceRef","contextMenu","setContextMenu","clearPolygonOverlays","clearOverlaysProp","addHistoryAction","_s","handleCustomContextMenu","e","mapDiv","document","getElementById","current","contains","target","preventDefault","pixel","getEventPixel","features","getFeatures","found","feature","geom","getGeometry","coords","getType","getCoordinates","len","length","i","coordPixel","getPixelFromCoordinate","Math","hypot","visible","x","clientX","y","clientY","type","index","c1","c2","t","proj","addEventListener","removeEventListener","hideMenu","menu","window","cloneCoords","map","c","Array","isArray","handleMenuAction","action","arr","prevCoords","newCoords","splice","setCoordinates","createSegmentOverlays","featureId","getId","geomType","ring","slice","className","style","position","top","left","background","border","zIndex","padding","minWidth","onContextMenu","onMouseLeave","children","onClick","cursor","fileName","_jsxFileName","lineNumber","columnNumber","color","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/map-actions/RightClick.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\r\n// import { Feature } from 'ol';\r\n// import LineString from 'ol/geom/LineString';\r\n\r\nconst RightClick = ({\r\n  mapRef,\r\n  vectorSourceRef,\r\n  contextMenu,\r\n  setContextMenu,\r\n  clearPolygonOverlays: clearOverlaysProp,\r\n  addHistoryAction\r\n}) => {\r\n  useEffect(() => {\r\n    function handleCustomContextMenu(e) {\r\n      const mapDiv = document.getElementById('map');\r\n      if (!mapDiv || !mapRef.current || !vectorSourceRef.current) return;\r\n      if (!mapDiv.contains(e.target)) return;\r\n      e.preventDefault();\r\n      const pixel = mapRef.current.getEventPixel(e);\r\n      const features = vectorSourceRef.current.getFeatures();\r\n\r\n      let found = false;\r\n      for (const feature of features) {\r\n        const geom = feature.getGeometry();\r\n        let coords = null;\r\n        if (geom.getType() === 'Polygon') {\r\n          coords = geom.getCoordinates()[0];\r\n        } else if (geom.getType() === 'LineString') {\r\n          coords = geom.getCoordinates();\r\n        }\r\n        if (coords) {\r\n          // For polygons, skip last duplicate point\r\n          const len = geom.getType() === 'Polygon' ? coords.length - 1 : coords.length;\r\n          for (let i = 0; i < len; i++) {\r\n            const coordPixel = mapRef.current.getPixelFromCoordinate(coords[i]);\r\n            if (Math.hypot(pixel[0] - coordPixel[0], pixel[1] - coordPixel[1]) < 8) {\r\n              setContextMenu({ visible: true, x: e.clientX, y: e.clientY, type: 'vertex', feature, index: i });\r\n              found = true;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (found) break;\r\n      }\r\n\r\n      if (!found) {\r\n        for (const feature of features) {\r\n          const geom = feature.getGeometry();\r\n          let coords = null;\r\n          if (geom.getType() === 'Polygon') {\r\n            coords = geom.getCoordinates()[0];\r\n          } else if (geom.getType() === 'LineString') {\r\n            coords = geom.getCoordinates();\r\n          }\r\n          if (coords) {\r\n            // For polygons, skip last duplicate point\r\n            const len = geom.getType() === 'Polygon' ? coords.length - 1 : coords.length - 1;\r\n            for (let i = 0; i < len; i++) {\r\n              const c1 = mapRef.current.getPixelFromCoordinate(coords[i]);\r\n              const c2 = mapRef.current.getPixelFromCoordinate(coords[i + 1]);\r\n              const t = ((pixel[0] - c1[0]) * (c2[0] - c1[0]) + (pixel[1] - c1[1]) * (c2[1] - c1[1])) /\r\n                ((c2[0] - c1[0]) ** 2 + (c2[1] - c1[1]) ** 2);\r\n              if (t >= 0 && t <= 1) {\r\n                const proj = [c1[0] + t * (c2[0] - c1[0]), c1[1] + t * (c2[1] - c1[1])];\r\n                if (Math.hypot(pixel[0] - proj[0], pixel[1] - proj[1]) < 8) {\r\n                  setContextMenu({ visible: true, x: e.clientX, y: e.clientY, type: 'segment', feature, index: i });\r\n                  found = true;\r\n                  break;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          if (found) break;\r\n        }\r\n      }\r\n\r\n      if (!found) setContextMenu({ visible: true, x: e.clientX, y: e.clientY, type: null, feature: null, index: null });\r\n    }\r\n\r\n    document.addEventListener('contextmenu', handleCustomContextMenu);\r\n    return () => document.removeEventListener('contextmenu', handleCustomContextMenu);\r\n  }, [mapRef, vectorSourceRef, setContextMenu]);\r\n\r\n  useEffect(() => {\r\n    function hideMenu() {\r\n      setContextMenu(menu => menu.visible ? { ...menu, visible: false } : menu);\r\n    }\r\n    window.addEventListener('click', hideMenu);\r\n    return () => window.removeEventListener('click', hideMenu);\r\n  }, [setContextMenu]);\r\n\r\n  // Helper to deep clone coordinates\r\n  const cloneCoords = coords => coords.map(c => Array.isArray(c) ? [...c] : c);\r\n\r\n  const handleMenuAction = (action) => {\r\n    if (!contextMenu.feature) return;\r\n    const geom = contextMenu.feature.getGeometry();\r\n    let coords;\r\n    if (geom.getType() === 'Polygon') {\r\n      const arr = geom.getCoordinates()[0];\r\n      if (!Array.isArray(arr) || arr.length < 3 || !Array.isArray(arr[0])) return;\r\n      coords = arr.map(c => [c[0], c[1]]);\r\n    } else if (geom.getType() === 'LineString') {\r\n      const arr = geom.getCoordinates();\r\n      if (!Array.isArray(arr) || arr.length < 2 || !Array.isArray(arr[0])) return;\r\n      coords = arr.map(c => [c[0], c[1]]);\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    // if (action === 'delete-vertex' && coords.length > 3) {\r\n    //   const prevCoords = cloneCoords(coords);\r\n    //   const newCoords = cloneCoords(coords);\r\n    //   newCoords.splice(contextMenu.index, 1);\r\n    //   newCoords[newCoords.length - 1] = newCoords[0];\r\n    //   geom.setCoordinates([newCoords]);\r\n    //   if (mapRef.current && mapRef.current.createSegmentOverlays) {\r\n    //     mapRef.current.createSegmentOverlays(contextMenu.feature, mapRef);\r\n    //   }\r\n    //   setContextMenu({ ...contextMenu, visible: false });\r\n\r\n    //   addHistoryAction({\r\n    //     type: 'delete-vertex',\r\n    //     featureId: contextMenu.feature.getId && contextMenu.feature.getId(),\r\n    //     prevCoords,\r\n    //     newCoords,\r\n    //     index: contextMenu.index\r\n    //   });\r\n\r\n    // }\r\n    if (action === 'delete-vertex') {\r\n      const prevCoords = cloneCoords(coords);\r\n      const newCoords = cloneCoords(coords);\r\n      newCoords.splice(contextMenu.index, 1);\r\n\r\n      if (geom.getType() === 'Polygon') {\r\n        // Only delete if at least 4 points remain (3 + closing point)\r\n        if (newCoords.length < 4) return;\r\n        newCoords[newCoords.length - 1] = newCoords[0]; // close ring\r\n        geom.setCoordinates([newCoords]);\r\n      } else if (geom.getType() === 'LineString') {\r\n        // Only delete if at least 2 points remain (minimum for a line)\r\n        if (newCoords.length < 2) return;\r\n        geom.setCoordinates(newCoords);\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      if (mapRef.current && mapRef.current.createSegmentOverlays) {\r\n        mapRef.current.createSegmentOverlays(contextMenu.feature, mapRef);\r\n      }\r\n      setContextMenu({ ...contextMenu, visible: false });\r\n\r\n      addHistoryAction({\r\n        type: 'delete-vertex',\r\n        featureId: contextMenu.feature.getId && contextMenu.feature.getId(),\r\n        prevCoords,\r\n        newCoords,\r\n        index: contextMenu.index,\r\n        geomType: geom.getType()\r\n      });\r\n    }\r\n\r\n\r\n    // if (action === 'delete-segment' && coords.length > 3) {\r\n    //   if (clearOverlaysProp) clearOverlaysProp(contextMenu.feature);\r\n    //   const prevCoords = cloneCoords(coords);\r\n    //   if (\r\n    //     coords.length > 2 &&\r\n    //     coords[0][0] === coords[coords.length - 1][0] &&\r\n    //     coords[0][1] === coords[coords.length - 1][1]\r\n    //   ) {\r\n    //     coords = coords.slice(0, coords.length - 1);\r\n    //   }\r\n    //   const index = contextMenu.index;\r\n    //   const part1 = coords.slice(index + 1);\r\n    //   const part2 = coords.slice(0, index + 1);\r\n    //   const newCoords = [...part1, ...part2];\r\n\r\n    //   if (vectorSourceRef.current && vectorSourceRef.current.getFeatures().includes(contextMenu.feature)) {\r\n    //     vectorSourceRef.current.removeFeature(contextMenu.feature);\r\n    //   }\r\n    //   const lineFeature = new Feature(new LineString(newCoords));\r\n    //   if (contextMenu.feature.getId) {\r\n    //     lineFeature.setId(contextMenu.feature.getId());\r\n    //   }\r\n    //   vectorSourceRef.current.addFeature(lineFeature);\r\n\r\n    //   if (mapRef.current && mapRef.current.createSegmentOverlays) {\r\n    //     mapRef.current.createSegmentOverlays(lineFeature, mapRef);\r\n    //   }\r\n    //   setContextMenu({ ...contextMenu, visible: false });\r\n\r\n    //   addHistoryAction({\r\n    //     type: 'delete-segment',\r\n    //     featureId: contextMenu.feature.getId && contextMenu.feature.getId(),\r\n    //     prevCoords,\r\n    //     newCoords: cloneCoords(newCoords),\r\n    //     index: contextMenu.index\r\n    //   });\r\n\r\n    // }\r\n    if (action === 'delete-segment') {\r\n      if (clearOverlaysProp) clearOverlaysProp(contextMenu.feature);\r\n      const prevCoords = cloneCoords(coords);\r\n      let newCoords;\r\n\r\n      if (geom.getType() === 'Polygon') {\r\n        // Only allow if at least 5 points (4 + closing)\r\n        if (coords.length < 5) return;\r\n        // Remove closing point if present\r\n        let ring = coords;\r\n        if (\r\n          ring.length > 2 &&\r\n          ring[0][0] === ring[ring.length - 1][0] &&\r\n          ring[0][1] === ring[ring.length - 1][1]\r\n        ) {\r\n          ring = ring.slice(0, ring.length - 1);\r\n        }\r\n        const index = contextMenu.index;\r\n        // Remove the segment by removing the endpoint after index\r\n        ring.splice((index + 1) % ring.length, 1);\r\n        // Re-close the ring\r\n        newCoords = [...ring, ring[0]];\r\n        geom.setCoordinates([newCoords]);\r\n        if (mapRef.current && mapRef.current.createSegmentOverlays) {\r\n          mapRef.current.createSegmentOverlays(contextMenu.feature, mapRef);\r\n        }\r\n      } else if (geom.getType() === 'LineString') {\r\n        // Only allow if at least 3 points (2 segments)\r\n        if (coords.length < 3) return;\r\n        const index = contextMenu.index;\r\n        // Remove the endpoint after index\r\n        newCoords = cloneCoords(coords);\r\n        newCoords.splice(index + 1, 1);\r\n        geom.setCoordinates(newCoords);\r\n        if (mapRef.current && mapRef.current.createSegmentOverlays) {\r\n          mapRef.current.createSegmentOverlays(contextMenu.feature, mapRef);\r\n        }\r\n      } else {\r\n        return;\r\n      }\r\n\r\n      setContextMenu({ ...contextMenu, visible: false });\r\n\r\n      addHistoryAction({\r\n        type: 'delete-segment',\r\n        featureId: contextMenu.feature.getId && contextMenu.feature.getId(),\r\n        prevCoords,\r\n        newCoords: cloneCoords(newCoords),\r\n        index: contextMenu.index,\r\n        geomType: geom.getType()\r\n      });\r\n    }\r\n  };\r\n\r\n  return contextMenu.visible ? (\r\n    <div className=\"right-click-menu\"\r\n      style={{\r\n        position: 'fixed',\r\n        top: contextMenu.y,\r\n        left: contextMenu.x,\r\n        background: '#fff',\r\n        border: '1px solid #ccc',\r\n        zIndex: 1000,\r\n        padding: 4,\r\n        minWidth: 120\r\n      }}\r\n      onContextMenu={e => e.preventDefault()}\r\n      onMouseLeave={() => setContextMenu({ ...contextMenu, visible: false })}\r\n    >\r\n      {contextMenu.type === 'vertex' && (\r\n        <div\r\n          className=\"menu-item\"\r\n          onClick={() => handleMenuAction('delete-vertex')}\r\n          style={{ cursor: 'pointer', padding: '4px 8px' }}\r\n        >\r\n          Delete Vertex\r\n        </div>\r\n      )}\r\n      {contextMenu.type === 'segment' && (\r\n        <div\r\n          className=\"menu-item\"\r\n          onClick={() => handleMenuAction('delete-segment')}\r\n          style={{ cursor: 'pointer', padding: '4px 8px' }}\r\n        >\r\n          Delete Segment\r\n        </div>\r\n      )}\r\n      {!contextMenu.type && <div style={{ color: '#888', padding: '4px 8px' }}>No actions</div>}\r\n    </div>\r\n  ) : null;\r\n};\r\n\r\nexport default RightClick;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}