{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragBox\n */\n// FIXME draw drag box\nimport Event from '../events/Event.js';\nimport PointerInteraction from './Pointer.js';\nimport RenderBox from '../render/Box.js';\nimport { mouseActionButton } from '../events/condition.js';\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\n * true should be returned.\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link ol/events/condition~mouseActionButton}.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\n * `boxEndCondition` function.\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\n * Default is `true` if the area of the box is bigger than the `minArea` option.\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\n * before `boxend` is fired.\n */\n/**\n * @enum {string}\n */\nvar DragBoxEventType = {\n  /**\n   * Triggered upon drag box start.\n   * @event DragBoxEvent#boxstart\n   * @api\n   */\n  BOXSTART: 'boxstart',\n  /**\n   * Triggered on drag when box is active.\n   * @event DragBoxEvent#boxdrag\n   * @api\n   */\n  BOXDRAG: 'boxdrag',\n  /**\n   * Triggered upon drag box end.\n   * @event DragBoxEvent#boxend\n   * @api\n   */\n  BOXEND: 'boxend',\n  /**\n   * Triggered upon drag box canceled.\n   * @event DragBoxEvent#boxcancel\n   * @api\n   */\n  BOXCANCEL: 'boxcancel'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\n * this type.\n */\nvar DragBoxEvent = /** @class */function (_super) {\n  __extends(DragBoxEvent, _super);\n  /**\n   * @param {string} type The event type.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\n   */\n  function DragBoxEvent(type, coordinate, mapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */\n    _this.coordinate = coordinate;\n    /**\n     * @const\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    _this.mapBrowserEvent = mapBrowserEvent;\n    return _this;\n  }\n  return DragBoxEvent;\n}(Event);\nexport { DragBoxEvent };\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\n */\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the shift or other key is held down. This is used, for example,\n * for zooming to a specific area of the map\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\n * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).\n *\n * @fires DragBoxEvent\n * @api\n */\nvar DragBox = /** @class */function (_super) {\n  __extends(DragBox, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function DragBox(opt_options) {\n    var _this = _super.call(this) || this;\n    /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {DragBoxOnSignature<void>}\n     */\n    _this.un;\n    var options = opt_options ? opt_options : {};\n    /**\n     * @type {import(\"../render/Box.js\").default}\n     * @private\n     */\n    _this.box_ = new RenderBox(options.className || 'ol-dragbox');\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\n    if (options.onBoxEnd) {\n      _this.onBoxEnd = options.onBoxEnd;\n    }\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    _this.startPixel_ = null;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : mouseActionButton;\n    /**\n     * @private\n     * @type {EndCondition}\n     */\n    _this.boxEndCondition_ = options.boxEndCondition ? options.boxEndCondition : _this.defaultBoxEndCondition;\n    return _this;\n  }\n  /**\n   * The default condition for determining whether the boxend event\n   * should fire.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\n   *     leading to the box end.\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\n   * @return {boolean} Whether or not the boxend condition should be fired.\n   */\n  DragBox.prototype.defaultBoxEndCondition = function (mapBrowserEvent, startPixel, endPixel) {\n    var width = endPixel[0] - startPixel[0];\n    var height = endPixel[1] - startPixel[1];\n    return width * width + height * height >= this.minArea_;\n  };\n  /**\n   * Returns geometry of last drawn box.\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   * @api\n   */\n  DragBox.prototype.getGeometry = function () {\n    return this.box_.getGeometry();\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  DragBox.prototype.handleDragEvent = function (mapBrowserEvent) {\n    this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n    this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXDRAG, mapBrowserEvent.coordinate, mapBrowserEvent));\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  DragBox.prototype.handleUpEvent = function (mapBrowserEvent) {\n    this.box_.setMap(null);\n    var completeBox = this.boxEndCondition_(mapBrowserEvent, this.startPixel_, mapBrowserEvent.pixel);\n    if (completeBox) {\n      this.onBoxEnd(mapBrowserEvent);\n    }\n    this.dispatchEvent(new DragBoxEvent(completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL, mapBrowserEvent.coordinate, mapBrowserEvent));\n    return false;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  DragBox.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (this.condition_(mapBrowserEvent)) {\n      this.startPixel_ = mapBrowserEvent.pixel;\n      this.box_.setMap(mapBrowserEvent.map);\n      this.box_.setPixels(this.startPixel_, this.startPixel_);\n      this.dispatchEvent(new DragBoxEvent(DragBoxEventType.BOXSTART, mapBrowserEvent.coordinate, mapBrowserEvent));\n      return true;\n    } else {\n      return false;\n    }\n  };\n  /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n  DragBox.prototype.onBoxEnd = function (event) {};\n  return DragBox;\n}(PointerInteraction);\nexport default DragBox;","map":{"version":3,"names":["Event","PointerInteraction","RenderBox","mouseActionButton","DragBoxEventType","BOXSTART","BOXDRAG","BOXEND","BOXCANCEL","DragBoxEvent","_super","__extends","type","coordinate","mapBrowserEvent","_this","call","DragBox","opt_options","on","once","un","options","box_","className","minArea_","minArea","undefined","onBoxEnd","startPixel_","condition_","condition","boxEndCondition_","boxEndCondition","defaultBoxEndCondition","prototype","startPixel","endPixel","width","height","getGeometry","handleDragEvent","setPixels","pixel","dispatchEvent","handleUpEvent","setMap","completeBox","handleDownEvent","map","event"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\interaction\\DragBox.js"],"sourcesContent":["/**\n * @module ol/interaction/DragBox\n */\n// FIXME draw drag box\nimport Event from '../events/Event.js';\nimport PointerInteraction from './Pointer.js';\nimport RenderBox from '../render/Box.js';\nimport {mouseActionButton} from '../events/condition.js';\n\n/**\n * A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s and returns a `{boolean}`. If the condition is met,\n * true should be returned.\n * @typedef {function(this: ?, import(\"../MapBrowserEvent.js\").default, import(\"../pixel.js\").Pixel, import(\"../pixel.js\").Pixel):boolean} EndCondition\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-dragbox'] CSS class name for styling the box.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link ol/events/condition~mouseActionButton}.\n * @property {number} [minArea=64] The minimum area of the box in pixel, this value is used by the default\n * `boxEndCondition` function.\n * @property {EndCondition} [boxEndCondition] A function that takes a {@link module:ol/MapBrowserEvent~MapBrowserEvent} and two\n * {@link module:ol/pixel~Pixel}s to indicate whether a `boxend` event should be fired.\n * Default is `true` if the area of the box is bigger than the `minArea` option.\n * @property {function(this:DragBox, import(\"../MapBrowserEvent.js\").default):void} [onBoxEnd] Code to execute just\n * before `boxend` is fired.\n */\n\n/**\n * @enum {string}\n */\nconst DragBoxEventType = {\n  /**\n   * Triggered upon drag box start.\n   * @event DragBoxEvent#boxstart\n   * @api\n   */\n  BOXSTART: 'boxstart',\n\n  /**\n   * Triggered on drag when box is active.\n   * @event DragBoxEvent#boxdrag\n   * @api\n   */\n  BOXDRAG: 'boxdrag',\n\n  /**\n   * Triggered upon drag box end.\n   * @event DragBoxEvent#boxend\n   * @api\n   */\n  BOXEND: 'boxend',\n\n  /**\n   * Triggered upon drag box canceled.\n   * @event DragBoxEvent#boxcancel\n   * @api\n   */\n  BOXCANCEL: 'boxcancel',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragBox~DragBox} instances are instances of\n * this type.\n */\nexport class DragBoxEvent extends Event {\n  /**\n   * @param {string} type The event type.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate The event coordinate.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Originating event.\n   */\n  constructor(type, coordinate, mapBrowserEvent) {\n    super(type);\n\n    /**\n     * The coordinate of the drag event.\n     * @const\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @api\n     */\n    this.coordinate = coordinate;\n\n    /**\n     * @const\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = mapBrowserEvent;\n  }\n}\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types|\n *     'change:active', import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<'boxcancel'|'boxdrag'|'boxend'|'boxstart', DragBoxEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     'change:active'|'boxcancel'|'boxdrag'|'boxend', Return>} DragBoxOnSignature\n */\n\n/**\n * @classdesc\n * Allows the user to draw a vector box by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the shift or other key is held down. This is used, for example,\n * for zooming to a specific area of the map\n * (see {@link module:ol/interaction/DragZoom~DragZoom} and\n * {@link module:ol/interaction/DragRotateAndZoom~DragRotateAndZoom}).\n *\n * @fires DragBoxEvent\n * @api\n */\nclass DragBox extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {DragBoxOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {DragBoxOnSignature<void>}\n     */\n    this.un;\n\n    const options = opt_options ? opt_options : {};\n\n    /**\n     * @type {import(\"../render/Box.js\").default}\n     * @private\n     */\n    this.box_ = new RenderBox(options.className || 'ol-dragbox');\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minArea_ = options.minArea !== undefined ? options.minArea : 64;\n\n    if (options.onBoxEnd) {\n      this.onBoxEnd = options.onBoxEnd;\n    }\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.startPixel_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : mouseActionButton;\n\n    /**\n     * @private\n     * @type {EndCondition}\n     */\n    this.boxEndCondition_ = options.boxEndCondition\n      ? options.boxEndCondition\n      : this.defaultBoxEndCondition;\n  }\n\n  /**\n   * The default condition for determining whether the boxend event\n   * should fire.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent The originating MapBrowserEvent\n   *     leading to the box end.\n   * @param {import(\"../pixel.js\").Pixel} startPixel The starting pixel of the box.\n   * @param {import(\"../pixel.js\").Pixel} endPixel The end pixel of the box.\n   * @return {boolean} Whether or not the boxend condition should be fired.\n   */\n  defaultBoxEndCondition(mapBrowserEvent, startPixel, endPixel) {\n    const width = endPixel[0] - startPixel[0];\n    const height = endPixel[1] - startPixel[1];\n    return width * width + height * height >= this.minArea_;\n  }\n\n  /**\n   * Returns geometry of last drawn box.\n   * @return {import(\"../geom/Polygon.js\").default} Geometry.\n   * @api\n   */\n  getGeometry() {\n    return this.box_.getGeometry();\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    this.box_.setPixels(this.startPixel_, mapBrowserEvent.pixel);\n\n    this.dispatchEvent(\n      new DragBoxEvent(\n        DragBoxEventType.BOXDRAG,\n        mapBrowserEvent.coordinate,\n        mapBrowserEvent\n      )\n    );\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    this.box_.setMap(null);\n\n    const completeBox = this.boxEndCondition_(\n      mapBrowserEvent,\n      this.startPixel_,\n      mapBrowserEvent.pixel\n    );\n    if (completeBox) {\n      this.onBoxEnd(mapBrowserEvent);\n    }\n    this.dispatchEvent(\n      new DragBoxEvent(\n        completeBox ? DragBoxEventType.BOXEND : DragBoxEventType.BOXCANCEL,\n        mapBrowserEvent.coordinate,\n        mapBrowserEvent\n      )\n    );\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (this.condition_(mapBrowserEvent)) {\n      this.startPixel_ = mapBrowserEvent.pixel;\n      this.box_.setMap(mapBrowserEvent.map);\n      this.box_.setPixels(this.startPixel_, this.startPixel_);\n      this.dispatchEvent(\n        new DragBoxEvent(\n          DragBoxEventType.BOXSTART,\n          mapBrowserEvent.coordinate,\n          mapBrowserEvent\n        )\n      );\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Function to execute just before `onboxend` is fired\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   */\n  onBoxEnd(event) {}\n}\n\nexport default DragBox;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}