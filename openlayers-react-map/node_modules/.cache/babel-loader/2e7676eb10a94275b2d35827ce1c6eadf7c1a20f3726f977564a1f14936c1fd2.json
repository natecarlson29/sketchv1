{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport { abstract } from '../util.js';\nimport { assert } from '../asserts.js';\nimport { equivalent } from '../proj.js';\nimport { getKeyZXY, withinExtentAndZ } from '../tilecoord.js';\nimport { getForProjection as getTileGridForProjection, wrapX } from '../tilegrid.js';\nimport { scale as scaleSize, toSize } from '../size.js';\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nvar TileSource = /** @class */function (_super) {\n  __extends(TileSource, _super);\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  function TileSource(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate\n    }) || this;\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.on;\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    _this.once;\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    _this.un;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.tilePixelRatio_ = options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     */\n    _this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n    var tileSize = [256, 256];\n    if (_this.tileGrid) {\n      toSize(_this.tileGrid.getTileSize(_this.tileGrid.getMinZoom()), tileSize);\n    }\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    _this.tileCache = new TileCache(options.cacheSize || 0);\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.tmpSize = [0, 0];\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.key_ = options.key || '';\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    _this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate\n    };\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    _this.zDirection = options.zDirection ? options.zDirection : 0;\n    return _this;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  TileSource.prototype.canExpireCache = function () {\n    return this.tileCache.canExpireCache();\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  TileSource.prototype.expireCache = function (projection, usedTiles) {\n    var tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  TileSource.prototype.forEachLoadedTile = function (projection, z, tileRange, callback) {\n    var tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n    var covered = true;\n    var tile, tileCoordKey, loaded;\n    for (var x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (var y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */tileCache.get(tileCoordKey);\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  TileSource.prototype.getGutterForProjection = function (projection) {\n    return 0;\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  TileSource.prototype.getKey = function () {\n    return this.key_;\n  };\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  TileSource.prototype.setKey = function (key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  TileSource.prototype.getOpaque = function (projection) {\n    return this.opaque_;\n  };\n  /**\n   * @return {Array<number>|null} Resolutions.\n   */\n  TileSource.prototype.getResolutions = function () {\n    if (!this.tileGrid) {\n      return null;\n    }\n    return this.tileGrid.getResolutions();\n  };\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  TileSource.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    return abstract();\n  };\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */\n  TileSource.prototype.getTileGrid = function () {\n    return this.tileGrid;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  TileSource.prototype.getTileGridForProjection = function (projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n  TileSource.prototype.getTileCacheForProjection = function (projection) {\n    var sourceProjection = this.getProjection();\n    assert(sourceProjection === null || equivalent(sourceProjection, projection), 68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n    );\n    return this.tileCache;\n  };\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  TileSource.prototype.getTilePixelRatio = function (pixelRatio) {\n    return this.tilePixelRatio_;\n  };\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  TileSource.prototype.getTilePixelSize = function (z, pixelRatio, projection) {\n    var tileGrid = this.getTileGridForProjection(projection);\n    var tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    var tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  };\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [opt_projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  TileSource.prototype.getTileCoordForTileUrlFunction = function (tileCoord, opt_projection) {\n    var projection = opt_projection !== undefined ? opt_projection : this.getProjection();\n    var tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  };\n  /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */\n  TileSource.prototype.clear = function () {\n    this.tileCache.clear();\n  };\n  TileSource.prototype.refresh = function () {\n    this.clear();\n    _super.prototype.refresh.call(this);\n  };\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  TileSource.prototype.updateCacheSize = function (tileCount, projection) {\n    var tileCache = this.getTileCacheForProjection(projection);\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  TileSource.prototype.useTile = function (z, x, y, projection) {};\n  return TileSource;\n}(Source);\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nvar TileSourceEvent = /** @class */function (_super) {\n  __extends(TileSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  function TileSourceEvent(type, tile) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    _this.tile = tile;\n    return _this;\n  }\n  return TileSourceEvent;\n}(Event);\nexport { TileSourceEvent };\nexport default TileSource;","map":{"version":3,"names":["Event","Source","TileCache","TileState","abstract","assert","equivalent","getKeyZXY","withinExtentAndZ","getForProjection","getTileGridForProjection","wrapX","scale","scaleSize","toSize","TileSource","_super","__extends","options","_this","call","attributions","attributionsCollapsible","projection","state","interpolate","on","once","un","opaque_","opaque","undefined","tilePixelRatio_","tilePixelRatio","tileGrid","tileSize","getTileSize","getMinZoom","tileCache","cacheSize","tmpSize","key_","key","tileOptions","transition","zDirection","prototype","canExpireCache","expireCache","usedTiles","getTileCacheForProjection","forEachLoadedTile","z","tileRange","callback","covered","tile","tileCoordKey","loaded","x","minX","maxX","y","minY","maxY","containsKey","get","getState","LOADED","getGutterForProjection","getKey","setKey","changed","getOpaque","getResolutions","getTile","pixelRatio","getTileGrid","sourceProjection","getProjection","getTilePixelRatio","getTilePixelSize","getTileCoordForTileUrlFunction","tileCoord","opt_projection","getWrapX","isGlobal","clear","refresh","updateCacheSize","tileCount","highWaterMark","useTile","TileSourceEvent","type"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\source\\Tile.js"],"sourcesContent":["/**\n * @module ol/source/Tile\n */\nimport Event from '../events/Event.js';\nimport Source from './Source.js';\nimport TileCache from '../TileCache.js';\nimport TileState from '../TileState.js';\nimport {abstract} from '../util.js';\nimport {assert} from '../asserts.js';\nimport {equivalent} from '../proj.js';\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\nimport {\n  getForProjection as getTileGridForProjection,\n  wrapX,\n} from '../tilegrid.js';\nimport {scale as scaleSize, toSize} from '../size.js';\n\n/***\n * @template Return\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize] CacheSize.\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {number} [tilePixelRatio] TilePixelRatio.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {import(\"./Source.js\").State} [state] State.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\n * @property {boolean} [wrapX=false] WrapX.\n * @property {number} [transition] Transition.\n * @property {string} [key] Key.\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\n * the nearest neighbor is used when resampling.\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing images divided into a tile grid.\n * @abstract\n * @api\n */\nclass TileSource extends Source {\n  /**\n   * @param {Options} options SourceTile source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      projection: options.projection,\n      state: options.state,\n      wrapX: options.wrapX,\n      interpolate: options.interpolate,\n    });\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.on;\n\n    /***\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\n     */\n    this.once;\n\n    /***\n     * @type {TileSourceOnSignature<void>}\n     */\n    this.un;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.tilePixelRatio_ =\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\n\n    /**\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\n     */\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\n\n    const tileSize = [256, 256];\n    if (this.tileGrid) {\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\n    }\n\n    /**\n     * @protected\n     * @type {import(\"../TileCache.js\").default}\n     */\n    this.tileCache = new TileCache(options.cacheSize || 0);\n\n    /**\n     * @protected\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize = [0, 0];\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.key_ = options.key || '';\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").Options}\n     */\n    this.tileOptions = {\n      transition: options.transition,\n      interpolate: options.interpolate,\n    };\n\n    /**\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\n     * by a renderer if the views resolution does not match any resolution of the tile source.\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n     * will be used. If -1, the nearest higher resolution will be used.\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\n     */\n    this.zDirection = options.zDirection ? options.zDirection : 0;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.tileCache.canExpireCache();\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\n   */\n  expireCache(projection, usedTiles) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCache) {\n      tileCache.expireCache(usedTiles);\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {number} z Zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\n   *     loaded tile.  If the callback returns `false`, the tile will not be\n   *     considered loaded.\n   * @return {boolean} The tile range is fully covered with loaded tiles.\n   */\n  forEachLoadedTile(projection, z, tileRange, callback) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (!tileCache) {\n      return false;\n    }\n\n    let covered = true;\n    let tile, tileCoordKey, loaded;\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\n        tileCoordKey = getKeyZXY(z, x, y);\n        loaded = false;\n        if (tileCache.containsKey(tileCoordKey)) {\n          tile = /** @type {!import(\"../Tile.js\").default} */ (\n            tileCache.get(tileCoordKey)\n          );\n          loaded = tile.getState() === TileState.LOADED;\n          if (loaded) {\n            loaded = callback(tile) !== false;\n          }\n        }\n        if (!loaded) {\n          covered = false;\n        }\n      }\n    }\n    return covered;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {number} Gutter.\n   */\n  getGutterForProjection(projection) {\n    return 0;\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.key_;\n  }\n\n  /**\n   * Set the value to be used as the key for all tiles in the source.\n   * @param {string} key The key for tiles.\n   * @protected\n   */\n  setKey(key) {\n    if (this.key_ !== key) {\n      this.key_ = key;\n      this.changed();\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {boolean} Opaque.\n   */\n  getOpaque(projection) {\n    return this.opaque_;\n  }\n\n  /**\n   * @return {Array<number>|null} Resolutions.\n   */\n  getResolutions() {\n    if (!this.tileGrid) {\n      return null;\n    }\n    return this.tileGrid.getResolutions();\n  }\n\n  /**\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../Tile.js\").default} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Return the tile grid of the tile source.\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\n   * @api\n   */\n  getTileGrid() {\n    return this.tileGrid;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\n   */\n  getTileGridForProjection(projection) {\n    if (!this.tileGrid) {\n      return getTileGridForProjection(projection);\n    } else {\n      return this.tileGrid;\n    }\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../TileCache.js\").default} Tile cache.\n   * @protected\n   */\n  getTileCacheForProjection(projection) {\n    const sourceProjection = this.getProjection();\n    assert(\n      sourceProjection === null || equivalent(sourceProjection, projection),\n      68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\n    );\n    return this.tileCache;\n  }\n\n  /**\n   * Get the tile pixel ratio for this source. Subclasses may override this\n   * method, which is meant to return a supported pixel ratio that matches the\n   * provided `pixelRatio` as close as possible.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.tilePixelRatio_;\n  }\n\n  /**\n   * @param {number} z Z.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../size.js\").Size} Tile size.\n   */\n  getTilePixelSize(z, pixelRatio, projection) {\n    const tileGrid = this.getTileGridForProjection(projection);\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\n    if (tilePixelRatio == 1) {\n      return tileSize;\n    } else {\n      return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\n    }\n  }\n\n  /**\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\n   * is outside the resolution and extent range of the tile grid, `null` will be\n   * returned.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../proj/Projection.js\").default} [opt_projection] Projection.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\n   *     null if no tile URL should be created for the passed `tileCoord`.\n   */\n  getTileCoordForTileUrlFunction(tileCoord, opt_projection) {\n    const projection =\n      opt_projection !== undefined ? opt_projection : this.getProjection();\n    const tileGrid = this.getTileGridForProjection(projection);\n    if (this.getWrapX() && projection.isGlobal()) {\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\n    }\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\n  }\n\n  /**\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\n   * @api\n   */\n  clear() {\n    this.tileCache.clear();\n  }\n\n  refresh() {\n    this.clear();\n    super.refresh();\n  }\n\n  /**\n   * Increases the cache size if needed\n   * @param {number} tileCount Minimum number of tiles needed.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  updateCacheSize(tileCount, projection) {\n    const tileCache = this.getTileCacheForProjection(projection);\n    if (tileCount > tileCache.highWaterMark) {\n      tileCache.highWaterMark = tileCount;\n    }\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @abstract\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  useTile(z, x, y, projection) {}\n}\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\n * type.\n */\nexport class TileSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Tile.js\").default} tile The tile.\n   */\n  constructor(type, tile) {\n    super(type);\n\n    /**\n     * The tile related to the event.\n     * @type {import(\"../Tile.js\").default}\n     * @api\n     */\n    this.tile = tile;\n  }\n}\n\nexport default TileSource;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}