{"ast":null,"code":"/**\n * @module ol/Kinetic\n */\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nvar Kinetic = /** @class */function () {\n  /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */\n  function Kinetic(decay, minVelocity, delay) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.decay_ = decay;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minVelocity_ = minVelocity;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delay_ = delay;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.points_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.initialVelocity_ = 0;\n  }\n  /**\n   * FIXME empty description for jsdoc\n   */\n  Kinetic.prototype.begin = function () {\n    this.points_.length = 0;\n    this.angle_ = 0;\n    this.initialVelocity_ = 0;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   */\n  Kinetic.prototype.update = function (x, y) {\n    this.points_.push(x, y, Date.now());\n  };\n  /**\n   * @return {boolean} Whether we should do kinetic animation.\n   */\n  Kinetic.prototype.end = function () {\n    if (this.points_.length < 6) {\n      // at least 2 points are required (i.e. there must be at least 6 elements\n      // in the array)\n      return false;\n    }\n    var delay = Date.now() - this.delay_;\n    var lastIndex = this.points_.length - 3;\n    if (this.points_[lastIndex + 2] < delay) {\n      // the last tracked point is too old, which means that the user stopped\n      // panning before releasing the map\n      return false;\n    }\n    // get the first point which still falls into the delay time\n    var firstIndex = lastIndex - 3;\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n      firstIndex -= 3;\n    }\n    var duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n    // we don't want a duration of 0 (divide by zero)\n    // we also make sure the user panned for a duration of at least one frame\n    // (1/60s) to compute sane displacement values\n    if (duration < 1000 / 60) {\n      return false;\n    }\n    var dx = this.points_[lastIndex] - this.points_[firstIndex];\n    var dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n    this.angle_ = Math.atan2(dy, dx);\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n    return this.initialVelocity_ > this.minVelocity_;\n  };\n  /**\n   * @return {number} Total distance travelled (pixels).\n   */\n  Kinetic.prototype.getDistance = function () {\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n  };\n  /**\n   * @return {number} Angle of the kinetic panning animation (radians).\n   */\n  Kinetic.prototype.getAngle = function () {\n    return this.angle_;\n  };\n  return Kinetic;\n}();\nexport default Kinetic;","map":{"version":3,"names":["Kinetic","decay","minVelocity","delay","decay_","minVelocity_","delay_","points_","angle_","initialVelocity_","prototype","begin","length","update","x","y","push","Date","now","end","lastIndex","firstIndex","duration","dx","dy","Math","atan2","sqrt","getDistance","getAngle"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\Kinetic.js"],"sourcesContent":["/**\n * @module ol/Kinetic\n */\n\n/**\n * @classdesc\n * Implementation of inertial deceleration for map movement.\n *\n * @api\n */\nclass Kinetic {\n  /**\n   * @param {number} decay Rate of decay (must be negative).\n   * @param {number} minVelocity Minimum velocity (pixels/millisecond).\n   * @param {number} delay Delay to consider to calculate the kinetic\n   *     initial values (milliseconds).\n   */\n  constructor(decay, minVelocity, delay) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.decay_ = decay;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minVelocity_ = minVelocity;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.delay_ = delay;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.points_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  begin() {\n    this.points_.length = 0;\n    this.angle_ = 0;\n    this.initialVelocity_ = 0;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   */\n  update(x, y) {\n    this.points_.push(x, y, Date.now());\n  }\n\n  /**\n   * @return {boolean} Whether we should do kinetic animation.\n   */\n  end() {\n    if (this.points_.length < 6) {\n      // at least 2 points are required (i.e. there must be at least 6 elements\n      // in the array)\n      return false;\n    }\n    const delay = Date.now() - this.delay_;\n    const lastIndex = this.points_.length - 3;\n    if (this.points_[lastIndex + 2] < delay) {\n      // the last tracked point is too old, which means that the user stopped\n      // panning before releasing the map\n      return false;\n    }\n\n    // get the first point which still falls into the delay time\n    let firstIndex = lastIndex - 3;\n    while (firstIndex > 0 && this.points_[firstIndex + 2] > delay) {\n      firstIndex -= 3;\n    }\n\n    const duration = this.points_[lastIndex + 2] - this.points_[firstIndex + 2];\n    // we don't want a duration of 0 (divide by zero)\n    // we also make sure the user panned for a duration of at least one frame\n    // (1/60s) to compute sane displacement values\n    if (duration < 1000 / 60) {\n      return false;\n    }\n\n    const dx = this.points_[lastIndex] - this.points_[firstIndex];\n    const dy = this.points_[lastIndex + 1] - this.points_[firstIndex + 1];\n    this.angle_ = Math.atan2(dy, dx);\n    this.initialVelocity_ = Math.sqrt(dx * dx + dy * dy) / duration;\n    return this.initialVelocity_ > this.minVelocity_;\n  }\n\n  /**\n   * @return {number} Total distance travelled (pixels).\n   */\n  getDistance() {\n    return (this.minVelocity_ - this.initialVelocity_) / this.decay_;\n  }\n\n  /**\n   * @return {number} Angle of the kinetic panning animation (radians).\n   */\n  getAngle() {\n    return this.angle_;\n  }\n}\n\nexport default Kinetic;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}