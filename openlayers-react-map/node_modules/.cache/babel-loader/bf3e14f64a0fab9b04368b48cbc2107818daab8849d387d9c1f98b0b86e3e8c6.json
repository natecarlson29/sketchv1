{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/DragRotate\n */\nimport PointerInteraction from './Pointer.js';\nimport { FALSE } from '../functions.js';\nimport { altShiftKeysOnly, mouseActionButton, mouseOnly } from '../events/condition.js';\nimport { disable } from '../rotationconstraint.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nvar DragRotate = /** @class */function (_super) {\n  __extends(DragRotate, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function DragRotate(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      stopDown: FALSE\n    }) || this;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.lastAngle_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 250;\n    return _this;\n  }\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  DragRotate.prototype.handleDragEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    var size = map.getSize();\n    var offset = mapBrowserEvent.pixel;\n    var theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      var delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n    this.lastAngle_ = theta;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  DragRotate.prototype.handleUpEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n    var map = mapBrowserEvent.map;\n    var view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  DragRotate.prototype.handleDownEvent = function (mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n    if (mouseActionButton(mapBrowserEvent) && this.condition_(mapBrowserEvent)) {\n      var map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  };\n  return DragRotate;\n}(PointerInteraction);\nexport default DragRotate;","map":{"version":3,"names":["PointerInteraction","FALSE","altShiftKeysOnly","mouseActionButton","mouseOnly","disable","DragRotate","_super","__extends","opt_options","_this","options","call","stopDown","condition_","condition","lastAngle_","undefined","duration_","duration","prototype","handleDragEvent","mapBrowserEvent","map","view","getView","getConstraints","rotation","size","getSize","offset","pixel","theta","Math","atan2","delta","adjustRotationInternal","handleUpEvent","endInteraction","handleDownEvent","beginInteraction"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\interaction\\DragRotate.js"],"sourcesContent":["/**\n * @module ol/interaction/DragRotate\n */\nimport PointerInteraction from './Pointer.js';\nimport {FALSE} from '../functions.js';\nimport {\n  altShiftKeysOnly,\n  mouseActionButton,\n  mouseOnly,\n} from '../events/condition.js';\nimport {disable} from '../rotationconstraint.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that takes an\n * {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a boolean\n * to indicate whether that event should be handled.\n * Default is {@link module:ol/events/condition.altShiftKeysOnly}.\n * @property {number} [duration=250] Animation duration in milliseconds.\n */\n\n/**\n * @classdesc\n * Allows the user to rotate the map by clicking and dragging on the map,\n * normally combined with an {@link module:ol/events/condition} that limits\n * it to when the alt and shift keys are held down.\n *\n * This interaction is only supported for mouse devices.\n * @api\n */\nclass DragRotate extends PointerInteraction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      stopDown: FALSE,\n    });\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : altShiftKeysOnly;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.lastAngle_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 250;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   */\n  handleDragEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    if (view.getConstraints().rotation === disable) {\n      return;\n    }\n    const size = map.getSize();\n    const offset = mapBrowserEvent.pixel;\n    const theta = Math.atan2(size[1] / 2 - offset[1], offset[0] - size[0] / 2);\n    if (this.lastAngle_ !== undefined) {\n      const delta = theta - this.lastAngle_;\n      view.adjustRotationInternal(-delta);\n    }\n    this.lastAngle_ = theta;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return true;\n    }\n\n    const map = mapBrowserEvent.map;\n    const view = map.getView();\n    view.endInteraction(this.duration_);\n    return false;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(mapBrowserEvent) {\n    if (!mouseOnly(mapBrowserEvent)) {\n      return false;\n    }\n\n    if (\n      mouseActionButton(mapBrowserEvent) &&\n      this.condition_(mapBrowserEvent)\n    ) {\n      const map = mapBrowserEvent.map;\n      map.getView().beginInteraction();\n      this.lastAngle_ = undefined;\n      return true;\n    } else {\n      return false;\n    }\n  }\n}\n\nexport default DragRotate;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}