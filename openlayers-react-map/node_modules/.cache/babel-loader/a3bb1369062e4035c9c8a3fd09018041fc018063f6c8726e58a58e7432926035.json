{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Draw from 'ol/interaction/Draw';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    const vectorLayer = new VectorLayer({\n      source: vectorSource\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 16\n      })\n    });\n    const draw = new Draw({\n      source: vectorSource,\n      type: 'Polygon'\n    });\n    map.addInteraction(draw);\n\n    // Store overlays for all polygons\n    let allSegmentOverlays = [];\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + ' ft';\n    }\n\n    // Helper to create overlays for a polygon\n    function createSegmentOverlays(coords) {\n      const overlays = [];\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Midpoint for label\n        const midpoint = [(c1[0] + c2[0]) / 2, (c1[1] + c2[1]) / 2];\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.style.background = 'white';\n        tooltip.style.border = '1px solid black';\n        tooltip.style.padding = '2px 4px';\n        tooltip.style.position = 'relative';\n        tooltip.style.whiteSpace = 'nowrap';\n        tooltip.innerHTML = length;\n        const overlay = new Overlay({\n          element: tooltip,\n          position: midpoint,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        map.addOverlay(overlay);\n        overlays.push(overlay);\n      }\n      return overlays;\n    }\n\n    // For the polygon currently being drawn\n    let currentSegmentOverlays = [];\n    draw.on('drawstart', function (evt) {\n      // Remove only overlays for the current drawing\n      currentSegmentOverlays.forEach(overlay => map.removeOverlay(overlay));\n      currentSegmentOverlays = [];\n      const geom = evt.feature.getGeometry();\n      geom.on('change', function () {\n        // Remove only overlays for the current drawing\n        currentSegmentOverlays.forEach(overlay => map.removeOverlay(overlay));\n        currentSegmentOverlays = [];\n        const coords = geom.getCoordinates()[0];\n        currentSegmentOverlays = createSegmentOverlays(coords);\n      });\n    });\n    draw.on('drawend', function (evt) {\n      // When finished, add overlays for the completed polygon to the global list\n      const coords = evt.feature.getGeometry().getCoordinates()[0];\n      const overlays = createSegmentOverlays(coords);\n      allSegmentOverlays.push(...overlays);\n\n      // Clear current overlays (they are now part of allSegmentOverlays)\n      currentSegmentOverlays = [];\n    });\n    return () => {\n      map.setTarget(null);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .segment-tooltip {\n            font-size: 12px;\n            pointer-events: none;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Draw","Overlay","fromLonLat","getLength","LineString","jsxDEV","_jsxDEV","App","_s","vectorSource","vectorLayer","source","map","target","layers","view","center","zoom","draw","type","addInteraction","allSegmentOverlays","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","overlays","i","length","c1","c2","midpoint","tooltip","document","createElement","className","style","background","border","padding","position","whiteSpace","innerHTML","overlay","element","positioning","stopEvent","addOverlay","push","currentSegmentOverlays","on","evt","forEach","removeOverlay","geom","feature","getGeometry","getCoordinates","setTarget","children","id","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Draw from 'ol/interaction/Draw';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport LineString from 'ol/geom/LineString';\n\nconst App = () => {\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n        vectorLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 16\n      }),\n    });\n\n    const draw = new Draw({\n      source: vectorSource,\n      type: 'Polygon',\n    });\n    map.addInteraction(draw);\n\n    // Store overlays for all polygons\n    let allSegmentOverlays = [];\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + ' ft';\n    }\n\n    // Helper to create overlays for a polygon\n    function createSegmentOverlays(coords) {\n      const overlays = [];\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Midpoint for label\n        const midpoint = [\n          (c1[0] + c2[0]) / 2,\n          (c1[1] + c2[1]) / 2\n        ];\n\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.style.background = 'white';\n        tooltip.style.border = '1px solid black';\n        tooltip.style.padding = '2px 4px';\n        tooltip.style.position = 'relative';\n        tooltip.style.whiteSpace = 'nowrap';\n        tooltip.innerHTML = length;\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: midpoint,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        map.addOverlay(overlay);\n        overlays.push(overlay);\n      }\n      return overlays;\n    }\n\n    // For the polygon currently being drawn\n    let currentSegmentOverlays = [];\n\n    draw.on('drawstart', function (evt) {\n      // Remove only overlays for the current drawing\n      currentSegmentOverlays.forEach(overlay => map.removeOverlay(overlay));\n      currentSegmentOverlays = [];\n\n      const geom = evt.feature.getGeometry();\n      geom.on('change', function () {\n        // Remove only overlays for the current drawing\n        currentSegmentOverlays.forEach(overlay => map.removeOverlay(overlay));\n        currentSegmentOverlays = [];\n\n        const coords = geom.getCoordinates()[0];\n        currentSegmentOverlays = createSegmentOverlays(coords);\n      });\n    });\n\n    draw.on('drawend', function (evt) {\n      // When finished, add overlays for the completed polygon to the global list\n      const coords = evt.feature.getGeometry().getCoordinates()[0];\n      const overlays = createSegmentOverlays(coords);\n      allSegmentOverlays.push(...overlays);\n\n      // Clear current overlays (they are now part of allSegmentOverlays)\n      currentSegmentOverlays = [];\n    });\n\n    return () => {\n      map.setTarget(null);\n    };\n  }, []);\n\n  return (\n    <div>\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\n      <style>\n        {`\n          .segment-tooltip {\n            font-size: 12px;\n            pointer-events: none;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}