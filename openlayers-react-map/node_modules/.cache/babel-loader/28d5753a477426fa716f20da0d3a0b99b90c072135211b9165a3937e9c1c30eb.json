{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, remarkPolygonSegments, remarkLineSegments } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 2.018;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const [history, setHistory] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    vectorLayerRef.current = vectorLayer;\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = feature => remarkPolygonSegments(feature, mapRef);\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle);\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays(feature, [[coord, coord]], mapRef);\n\n          // Track action in history\n          setHistory(prev => [...prev, {\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords: [],\n            newCoords: [[coord, coord]]\n          }]);\n        } else {\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          if (coords.length > 2) {\n            createSegmentOverlays(feature, [coords], mapRef);\n          }\n\n          // Track action in history\n          setHistory(prev => [...prev, {\n            type: 'add-point',\n            featureId: feature.getId(),\n            prevCoords,\n            newCoords: coords\n          }]);\n        }\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n\n      // Track action in history\n      setHistory(prev => [...prev, {\n        type: 'add-point',\n        featureId: feature.getId(),\n        prevCoords,\n        newCoords: coords\n      }]);\n    }\n    function handleUndo() {\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        const prevCoords = lastAction.prevCoords;\n        if (!prevCoords || prevCoords.length <= 1) {\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          // The ghost marker logic in pointermove will now show the ghost marker again\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        createSegmentOverlays(feature, [prevCoords], mapRef);\n        return prev.slice(0, -1);\n      });\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n        }\n      }\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z')) {\n        e.preventDefault();\n        handleUndo();\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      const select = new Select({\n        layers: [vectorLayerRef.current],\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode, selectedFeature]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 336,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"HHlhs0GJPSV1pXQbHIwFSKXo2IU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Select","fromLonLat","ScaleLine","FlipHorizButton","FlipVertButton","RightClick","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","clearPolygonOverlays","createSegmentOverlays","remarkPolygonSegments","remarkLineSegments","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","history","setHistory","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","vectorLayerRef","current","vectorSource","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","addControl","units","on","evt","coord","coordinate","removeFeature","ghost","setStyle","addFeature","poly","prev","featureId","getId","prevCoords","newCoords","getGeometry","coords","getCoordinates","slice","length","setCoordinates","addSegment","direction","last","dx","dy","OFFSET","newPt","handleUndo","lastAction","getFeatures","find","f","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","document","addEventListener","forEach","overlay","removeOverlay","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","select","selected","addInteraction","children","id","ref","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  remarkPolygonSegments,\n  remarkLineSegments\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 2.018;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const [history, setHistory] = useState([]);\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  const vectorLayerRef = useRef();\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    vectorLayerRef.current = vectorLayer;\n\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = (feature) => remarkPolygonSegments(feature, mapRef);\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          feature.setStyle(activePolygonStyle);\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays(feature, [[coord, coord]], mapRef);\n\n          // Track action in history\n          setHistory(prev => [\n            ...prev,\n            {\n              type: 'add-point',\n              featureId: feature.getId(),\n              prevCoords: [],\n              newCoords: [[coord, coord]],\n            }\n          ]);\n        } else {\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          const prevCoords = [...coords];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          if (coords.length > 2) {\n            createSegmentOverlays(feature, [coords], mapRef);\n          }\n\n          // Track action in history\n          setHistory(prev => [\n            ...prev,\n            {\n              type: 'add-point',\n              featureId: feature.getId(),\n              prevCoords,\n              newCoords: coords,\n            }\n          ]);\n        }\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      const prevCoords = [...coords];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n\n      // Track action in history\n      setHistory(prev => [\n        ...prev,\n        {\n          type: 'add-point',\n          featureId: feature.getId(),\n          prevCoords,\n          newCoords: coords,\n        }\n      ]);\n    }\n\n    function handleUndo() {\n      setHistory(prev => {\n        if (prev.length === 0) return prev;\n        const lastAction = prev[prev.length - 1];\n\n        // Find the feature by ID\n        let feature = null;\n        if (lastAction.featureId) {\n          feature = vectorSourceRef.current.getFeatures().find(f => f.getId() === lastAction.featureId);\n          if (!feature && polygonFeatureRef.current) feature = polygonFeatureRef.current;\n        } else if (polygonFeatureRef.current) {\n          feature = polygonFeatureRef.current;\n        }\n        if (!feature) return prev.slice(0, -1);\n\n        // If undoing would result in no points or just one, remove the feature and reset drawing state\n        const prevCoords = lastAction.prevCoords;\n        if (!prevCoords || prevCoords.length <= 1) {\n          vectorSourceRef.current.removeFeature(feature);\n          polygonFeatureRef.current = null;\n          drawingRef.current = false;\n          // The ghost marker logic in pointermove will now show the ghost marker again\n          return prev.slice(0, -1);\n        }\n\n        // Otherwise, restore previous geometry\n        feature.getGeometry().setCoordinates([prevCoords]);\n        createSegmentOverlays(feature, [prevCoords], mapRef);\n\n        return prev.slice(0, -1);\n      });\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n        }\n      }\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z')\n      ) {\n        e.preventDefault();\n        handleUndo();\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      const select = new Select({\n        layers: [vectorLayerRef.current],\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode, selectedFeature]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} />\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n      />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}