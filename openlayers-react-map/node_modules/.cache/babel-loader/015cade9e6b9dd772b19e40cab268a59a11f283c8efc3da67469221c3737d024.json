{"ast":null,"code":"/**\n * @module ol/geom/flat/closest\n */\nimport { lerp, squaredDistance as squaredDx } from '../../math.js';\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(flatCoordinates, offset1, offset2, stride, x, y, closestPoint) {\n  var x1 = flatCoordinates[offset1];\n  var y1 = flatCoordinates[offset1 + 1];\n  var dx = flatCoordinates[offset2] - x1;\n  var dy = flatCoordinates[offset2 + 1] - y1;\n  var offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    var t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (var i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(flatCoordinates[offset1 + i], flatCoordinates[offset2 + i], t);\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (var i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  var x1 = flatCoordinates[offset];\n  var y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    var x2 = flatCoordinates[offset];\n    var y2 = flatCoordinates[offset + 1];\n    var squaredDelta = squaredDx(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max) {\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(flatCoordinates, offset, endss, stride, max) {\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  var i, squaredDistance;\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(x, y, flatCoordinates[offset], flatCoordinates[offset + 1]);\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  var index = offset + stride;\n  while (index < end) {\n    assignClosest(flatCoordinates, index - stride, index, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index += stride * Math.max((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) / maxDelta | 0, 1);\n    }\n  }\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(flatCoordinates, end - stride, offset, stride, x, y, tmpPoint);\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    minSquaredDistance = assignClosestPoint(flatCoordinates, offset, end, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = end;\n  }\n  return minSquaredDistance;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(flatCoordinates, offset, endss, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, opt_tmpPoint) {\n  var tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  for (var i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(flatCoordinates, offset, ends, stride, maxDelta, isRing, x, y, closestPoint, minSquaredDistance, tmpPoint);\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}","map":{"version":3,"names":["lerp","squaredDistance","squaredDx","assignClosest","flatCoordinates","offset1","offset2","stride","x","y","closestPoint","x1","y1","dx","dy","offset","t","i","length","maxSquaredDelta","end","max","x2","y2","squaredDelta","arrayMaxSquaredDelta","ends","ii","multiArrayMaxSquaredDelta","endss","assignClosestPoint","maxDelta","isRing","minSquaredDistance","opt_tmpPoint","tmpPoint","NaN","index","Math","sqrt","assignClosestArrayPoint","assignClosestMultiArrayPoint"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\flat\\closest.js"],"sourcesContent":["/**\n * @module ol/geom/flat/closest\n */\nimport {lerp, squaredDistance as squaredDx} from '../../math.js';\n\n/**\n * Returns the point on the 2D line segment flatCoordinates[offset1] to\n * flatCoordinates[offset2] that is closest to the point (x, y).  Extra\n * dimensions are linearly interpolated.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset1 Offset 1.\n * @param {number} offset2 Offset 2.\n * @param {number} stride Stride.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n */\nfunction assignClosest(\n  flatCoordinates,\n  offset1,\n  offset2,\n  stride,\n  x,\n  y,\n  closestPoint\n) {\n  const x1 = flatCoordinates[offset1];\n  const y1 = flatCoordinates[offset1 + 1];\n  const dx = flatCoordinates[offset2] - x1;\n  const dy = flatCoordinates[offset2 + 1] - y1;\n  let offset;\n  if (dx === 0 && dy === 0) {\n    offset = offset1;\n  } else {\n    const t = ((x - x1) * dx + (y - y1) * dy) / (dx * dx + dy * dy);\n    if (t > 1) {\n      offset = offset2;\n    } else if (t > 0) {\n      for (let i = 0; i < stride; ++i) {\n        closestPoint[i] = lerp(\n          flatCoordinates[offset1 + i],\n          flatCoordinates[offset2 + i],\n          t\n        );\n      }\n      closestPoint.length = stride;\n      return;\n    } else {\n      offset = offset1;\n    }\n  }\n  for (let i = 0; i < stride; ++i) {\n    closestPoint[i] = flatCoordinates[offset + i];\n  }\n  closestPoint.length = stride;\n}\n\n/**\n * Return the squared of the largest distance between any pair of consecutive\n * coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function maxSquaredDelta(flatCoordinates, offset, end, stride, max) {\n  let x1 = flatCoordinates[offset];\n  let y1 = flatCoordinates[offset + 1];\n  for (offset += stride; offset < end; offset += stride) {\n    const x2 = flatCoordinates[offset];\n    const y2 = flatCoordinates[offset + 1];\n    const squaredDelta = squaredDx(x1, y1, x2, y2);\n    if (squaredDelta > max) {\n      max = squaredDelta;\n    }\n    x1 = x2;\n    y1 = y2;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function arrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  max\n) {\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    max = maxSquaredDelta(flatCoordinates, offset, end, stride, max);\n    offset = end;\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} max Max squared delta.\n * @return {number} Max squared delta.\n */\nexport function multiArrayMaxSquaredDelta(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  max\n) {\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    max = arrayMaxSquaredDelta(flatCoordinates, offset, ends, stride, max);\n    offset = ends[ends.length - 1];\n  }\n  return max;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestPoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  opt_tmpPoint\n) {\n  if (offset == end) {\n    return minSquaredDistance;\n  }\n  let i, squaredDistance;\n  if (maxDelta === 0) {\n    // All points are identical, so just test the first point.\n    squaredDistance = squaredDx(\n      x,\n      y,\n      flatCoordinates[offset],\n      flatCoordinates[offset + 1]\n    );\n    if (squaredDistance < minSquaredDistance) {\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = flatCoordinates[offset + i];\n      }\n      closestPoint.length = stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  let index = offset + stride;\n  while (index < end) {\n    assignClosest(\n      flatCoordinates,\n      index - stride,\n      index,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n      index += stride;\n    } else {\n      // Skip ahead multiple points, because we know that all the skipped\n      // points cannot be any closer than the closest point we have found so\n      // far.  We know this because we know how close the current point is, how\n      // close the closest point we have found so far is, and the maximum\n      // distance between consecutive points.  For example, if we're currently\n      // at distance 10, the best we've found so far is 3, and that the maximum\n      // distance between consecutive points is 2, then we'll need to skip at\n      // least (10 - 3) / 2 == 3 (rounded down) points to have any chance of\n      // finding a closer point.  We use Math.max(..., 1) to ensure that we\n      // always advance at least one point, to avoid an infinite loop.\n      index +=\n        stride *\n        Math.max(\n          ((Math.sqrt(squaredDistance) - Math.sqrt(minSquaredDistance)) /\n            maxDelta) |\n            0,\n          1\n        );\n    }\n  }\n  if (isRing) {\n    // Check the closing segment.\n    assignClosest(\n      flatCoordinates,\n      end - stride,\n      offset,\n      stride,\n      x,\n      y,\n      tmpPoint\n    );\n    squaredDistance = squaredDx(x, y, tmpPoint[0], tmpPoint[1]);\n    if (squaredDistance < minSquaredDistance) {\n      minSquaredDistance = squaredDistance;\n      for (i = 0; i < stride; ++i) {\n        closestPoint[i] = tmpPoint[i];\n      }\n      closestPoint.length = stride;\n    }\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestArrayPoint(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  opt_tmpPoint\n) {\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    minSquaredDistance = assignClosestPoint(\n      flatCoordinates,\n      offset,\n      end,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = end;\n  }\n  return minSquaredDistance;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<Array<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} maxDelta Max delta.\n * @param {boolean} isRing Is ring.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {Array<number>} closestPoint Closest point.\n * @param {number} minSquaredDistance Minimum squared distance.\n * @param {Array<number>} [opt_tmpPoint] Temporary point object.\n * @return {number} Minimum squared distance.\n */\nexport function assignClosestMultiArrayPoint(\n  flatCoordinates,\n  offset,\n  endss,\n  stride,\n  maxDelta,\n  isRing,\n  x,\n  y,\n  closestPoint,\n  minSquaredDistance,\n  opt_tmpPoint\n) {\n  const tmpPoint = opt_tmpPoint ? opt_tmpPoint : [NaN, NaN];\n  for (let i = 0, ii = endss.length; i < ii; ++i) {\n    const ends = endss[i];\n    minSquaredDistance = assignClosestArrayPoint(\n      flatCoordinates,\n      offset,\n      ends,\n      stride,\n      maxDelta,\n      isRing,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance,\n      tmpPoint\n    );\n    offset = ends[ends.length - 1];\n  }\n  return minSquaredDistance;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}