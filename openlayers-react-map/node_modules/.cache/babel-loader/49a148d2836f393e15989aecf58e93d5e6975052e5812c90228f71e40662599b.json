{"ast":null,"code":"/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport Units from './proj/Units.js';\nimport { DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, get as getProjection } from './proj.js';\nimport { containsCoordinate, createOrUpdate, getCorner, getHeight, getWidth } from './extent.js';\nimport { toSize } from './size.js';\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  var tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  var z = tileCoord[0];\n  var center = tileGrid.getTileCoordCenter(tileCoord);\n  var projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    var worldWidth = getWidth(projectionExtent);\n    var worldsAway = Math.ceil((projectionExtent[0] - center[0]) / worldWidth);\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  var corner = opt_corner !== undefined ? opt_corner : 'top-left';\n  var resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize\n  });\n}\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [opt_options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(opt_options) {\n  var xyzOptions = opt_options || {};\n  var extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n  var gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(extent, xyzOptions.maxZoom, xyzOptions.tileSize, xyzOptions.maxResolution)\n  };\n  return new TileGrid(gridOptions);\n}\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [opt_maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize, opt_maxResolution) {\n  var maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n  var height = getHeight(extent);\n  var width = getWidth(extent);\n  var tileSize = toSize(opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE);\n  var maxResolution = opt_maxResolution > 0 ? opt_maxResolution : Math.max(width / tileSize[0], height / tileSize[1]);\n  var length = maxZoom + 1;\n  var resolutions = new Array(length);\n  for (var z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(projection, opt_maxZoom, opt_tileSize, opt_corner) {\n  var extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  var extent = projection.getExtent();\n  if (!extent) {\n    var half = 180 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}","map":{"version":3,"names":["TileGrid","Units","DEFAULT_MAX_ZOOM","DEFAULT_TILE_SIZE","METERS_PER_UNIT","get","getProjection","containsCoordinate","createOrUpdate","getCorner","getHeight","getWidth","toSize","getForProjection","projection","tileGrid","getDefaultTileGrid","createForProjection","setDefaultTileGrid","wrapX","tileCoord","z","center","getTileCoordCenter","projectionExtent","extentFromProjection","worldWidth","worldsAway","Math","ceil","getTileCoordForCoordAndZ","createForExtent","extent","opt_maxZoom","opt_tileSize","opt_corner","corner","undefined","resolutions","resolutionsFromExtent","origin","tileSize","createXYZ","opt_options","xyzOptions","getExtent","gridOptions","minZoom","maxZoom","maxResolution","opt_maxResolution","height","width","max","length","Array","pow","half","DEGREES","getMetersPerUnit"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\tilegrid.js"],"sourcesContent":["/**\n * @module ol/tilegrid\n */\nimport TileGrid from './tilegrid/TileGrid.js';\nimport Units from './proj/Units.js';\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\nimport {\n  containsCoordinate,\n  createOrUpdate,\n  getCorner,\n  getHeight,\n  getWidth,\n} from './extent.js';\nimport {toSize} from './size.js';\n\n/**\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {!TileGrid} Default tile grid for the\n * passed projection.\n */\nexport function getForProjection(projection) {\n  let tileGrid = projection.getDefaultTileGrid();\n  if (!tileGrid) {\n    tileGrid = createForProjection(projection);\n    projection.setDefaultTileGrid(tileGrid);\n  }\n  return tileGrid;\n}\n\n/**\n * @param {TileGrid} tileGrid Tile grid.\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\n */\nexport function wrapX(tileGrid, tileCoord, projection) {\n  const z = tileCoord[0];\n  const center = tileGrid.getTileCoordCenter(tileCoord);\n  const projectionExtent = extentFromProjection(projection);\n  if (!containsCoordinate(projectionExtent, center)) {\n    const worldWidth = getWidth(projectionExtent);\n    const worldsAway = Math.ceil(\n      (projectionExtent[0] - center[0]) / worldWidth\n    );\n    center[0] += worldWidth * worldsAway;\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\n  } else {\n    return tileCoord;\n  }\n}\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner) {\n  const corner = opt_corner !== undefined ? opt_corner : 'top-left';\n\n  const resolutions = resolutionsFromExtent(extent, opt_maxZoom, opt_tileSize);\n\n  return new TileGrid({\n    extent: extent,\n    origin: getCorner(extent, corner),\n    resolutions: resolutions,\n    tileSize: opt_tileSize,\n  });\n}\n\n/**\n * @typedef {Object} XYZOptions\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\n * @property {number} [maxResolution] Resolution at level zero.\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\n */\n\n/**\n * Creates a tile grid with a standard XYZ tiling scheme.\n * @param {XYZOptions} [opt_options] Tile grid options.\n * @return {!TileGrid} Tile grid instance.\n * @api\n */\nexport function createXYZ(opt_options) {\n  const xyzOptions = opt_options || {};\n\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\n\n  const gridOptions = {\n    extent: extent,\n    minZoom: xyzOptions.minZoom,\n    tileSize: xyzOptions.tileSize,\n    resolutions: resolutionsFromExtent(\n      extent,\n      xyzOptions.maxZoom,\n      xyzOptions.tileSize,\n      xyzOptions.maxResolution\n    ),\n  };\n  return new TileGrid(gridOptions);\n}\n\n/**\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {number} [opt_maxResolution] Resolution at level zero.\n * @return {!Array<number>} Resolutions array.\n */\nfunction resolutionsFromExtent(\n  extent,\n  opt_maxZoom,\n  opt_tileSize,\n  opt_maxResolution\n) {\n  const maxZoom = opt_maxZoom !== undefined ? opt_maxZoom : DEFAULT_MAX_ZOOM;\n\n  const height = getHeight(extent);\n  const width = getWidth(extent);\n\n  const tileSize = toSize(\n    opt_tileSize !== undefined ? opt_tileSize : DEFAULT_TILE_SIZE\n  );\n  const maxResolution =\n    opt_maxResolution > 0\n      ? opt_maxResolution\n      : Math.max(width / tileSize[0], height / tileSize[1]);\n\n  const length = maxZoom + 1;\n  const resolutions = new Array(length);\n  for (let z = 0; z < length; ++z) {\n    resolutions[z] = maxResolution / Math.pow(2, z);\n  }\n  return resolutions;\n}\n\n/**\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @param {number} [opt_maxZoom] Maximum zoom level (default is\n *     DEFAULT_MAX_ZOOM).\n * @param {number|import(\"./size.js\").Size} [opt_tileSize] Tile size (default uses\n *     DEFAULT_TILE_SIZE).\n * @param {import(\"./extent.js\").Corner} [opt_corner] Extent corner (default is `'top-left'`).\n * @return {!TileGrid} TileGrid instance.\n */\nexport function createForProjection(\n  projection,\n  opt_maxZoom,\n  opt_tileSize,\n  opt_corner\n) {\n  const extent = extentFromProjection(projection);\n  return createForExtent(extent, opt_maxZoom, opt_tileSize, opt_corner);\n}\n\n/**\n * Generate a tile grid extent from a projection.  If the projection has an\n * extent, it is used.  If not, a global extent is assumed.\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\n * @return {import(\"./extent.js\").Extent} Extent.\n */\nexport function extentFromProjection(projection) {\n  projection = getProjection(projection);\n  let extent = projection.getExtent();\n  if (!extent) {\n    const half =\n      (180 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit();\n    extent = createOrUpdate(-half, -half, half, half);\n  }\n  return extent;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}