{"ast":null,"code":"/**\n * @module ol/geom/flat/transform\n */\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var i = 0;\n  for (var j = offset; j < end; j += stride) {\n    var x = flatCoordinates[j];\n    var y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var cos = Math.cos(angle);\n  var sin = Math.sin(angle);\n  var anchorX = anchor[0];\n  var anchorY = anchor[1];\n  var i = 0;\n  for (var j = offset; j < end; j += stride) {\n    var deltaX = flatCoordinates[j] - anchorX;\n    var deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var anchorX = anchor[0];\n  var anchorY = anchor[1];\n  var i = 0;\n  for (var j = offset; j < end; j += stride) {\n    var deltaX = flatCoordinates[j] - anchorX;\n    var deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {\n  var dest = opt_dest ? opt_dest : [];\n  var i = 0;\n  for (var j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (var k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}","map":{"version":3,"names":["transform2D","flatCoordinates","offset","end","stride","transform","opt_dest","dest","i","j","x","y","length","rotate","angle","anchor","cos","Math","sin","anchorX","anchorY","deltaX","deltaY","k","scale","sx","sy","translate"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\flat\\transform.js"],"sourcesContent":["/**\n * @module ol/geom/flat/transform\n */\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {import(\"../../transform.js\").Transform} transform Transform.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function transform2D(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  transform,\n  opt_dest\n) {\n  const dest = opt_dest ? opt_dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const x = flatCoordinates[j];\n    const y = flatCoordinates[j + 1];\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} angle Angle.\n * @param {Array<number>} anchor Rotation anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function rotate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  angle,\n  anchor,\n  opt_dest\n) {\n  const dest = opt_dest ? opt_dest : [];\n  const cos = Math.cos(angle);\n  const sin = Math.sin(angle);\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * Scale the coordinates.\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} sx Scale factor in the x-direction.\n * @param {number} sy Scale factor in the y-direction.\n * @param {Array<number>} anchor Scale anchor point.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function scale(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  sx,\n  sy,\n  anchor,\n  opt_dest\n) {\n  const dest = opt_dest ? opt_dest : [];\n  const anchorX = anchor[0];\n  const anchorY = anchor[1];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    const deltaX = flatCoordinates[j] - anchorX;\n    const deltaY = flatCoordinates[j + 1] - anchorY;\n    dest[i++] = anchorX + sx * deltaX;\n    dest[i++] = anchorY + sy * deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} deltaX Delta X.\n * @param {number} deltaY Delta Y.\n * @param {Array<number>} [opt_dest] Destination.\n * @return {Array<number>} Transformed coordinates.\n */\nexport function translate(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  deltaX,\n  deltaY,\n  opt_dest\n) {\n  const dest = opt_dest ? opt_dest : [];\n  let i = 0;\n  for (let j = offset; j < end; j += stride) {\n    dest[i++] = flatCoordinates[j] + deltaX;\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\n    for (let k = j + 2; k < j + stride; ++k) {\n      dest[i++] = flatCoordinates[k];\n    }\n  }\n  if (opt_dest && dest.length != i) {\n    dest.length = i;\n  }\n  return dest;\n}\n"],"mappings":"AAAA;;;AAIA;;;;;;;;;AASA,OAAM,SAAUA,WAAWA,CACzBC,eAAe,EACfC,MAAM,EACNC,GAAG,EACHC,MAAM,EACNC,SAAS,EACTC,QAAQ;EAER,IAAMC,IAAI,GAAGD,QAAQ,GAAGA,QAAQ,GAAG,EAAE;EACrC,IAAIE,CAAC,GAAG,CAAC;EACT,KAAK,IAAIC,CAAC,GAAGP,MAAM,EAAEO,CAAC,GAAGN,GAAG,EAAEM,CAAC,IAAIL,MAAM,EAAE;IACzC,IAAMM,CAAC,GAAGT,eAAe,CAACQ,CAAC,CAAC;IAC5B,IAAME,CAAC,GAAGV,eAAe,CAACQ,CAAC,GAAG,CAAC,CAAC;IAChCF,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGH,SAAS,CAAC,CAAC,CAAC,GAAGK,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,GAAGM,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC;IAC9DE,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGH,SAAS,CAAC,CAAC,CAAC,GAAGK,CAAC,GAAGL,SAAS,CAAC,CAAC,CAAC,GAAGM,CAAC,GAAGN,SAAS,CAAC,CAAC,CAAC;;EAEhE,IAAIC,QAAQ,IAAIC,IAAI,CAACK,MAAM,IAAIJ,CAAC,EAAE;IAChCD,IAAI,CAACK,MAAM,GAAGJ,CAAC;;EAEjB,OAAOD,IAAI;AACb;AAEA;;;;;;;;;;AAUA,OAAM,SAAUM,MAAMA,CACpBZ,eAAe,EACfC,MAAM,EACNC,GAAG,EACHC,MAAM,EACNU,KAAK,EACLC,MAAM,EACNT,QAAQ;EAER,IAAMC,IAAI,GAAGD,QAAQ,GAAGA,QAAQ,GAAG,EAAE;EACrC,IAAMU,GAAG,GAAGC,IAAI,CAACD,GAAG,CAACF,KAAK,CAAC;EAC3B,IAAMI,GAAG,GAAGD,IAAI,CAACC,GAAG,CAACJ,KAAK,CAAC;EAC3B,IAAMK,OAAO,GAAGJ,MAAM,CAAC,CAAC,CAAC;EACzB,IAAMK,OAAO,GAAGL,MAAM,CAAC,CAAC,CAAC;EACzB,IAAIP,CAAC,GAAG,CAAC;EACT,KAAK,IAAIC,CAAC,GAAGP,MAAM,EAAEO,CAAC,GAAGN,GAAG,EAAEM,CAAC,IAAIL,MAAM,EAAE;IACzC,IAAMiB,MAAM,GAAGpB,eAAe,CAACQ,CAAC,CAAC,GAAGU,OAAO;IAC3C,IAAMG,MAAM,GAAGrB,eAAe,CAACQ,CAAC,GAAG,CAAC,CAAC,GAAGW,OAAO;IAC/Cb,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGW,OAAO,GAAGE,MAAM,GAAGL,GAAG,GAAGM,MAAM,GAAGJ,GAAG;IACjDX,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGY,OAAO,GAAGC,MAAM,GAAGH,GAAG,GAAGI,MAAM,GAAGN,GAAG;IACjD,KAAK,IAAIO,CAAC,GAAGd,CAAC,GAAG,CAAC,EAAEc,CAAC,GAAGd,CAAC,GAAGL,MAAM,EAAE,EAAEmB,CAAC,EAAE;MACvChB,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGP,eAAe,CAACsB,CAAC,CAAC;;;EAGlC,IAAIjB,QAAQ,IAAIC,IAAI,CAACK,MAAM,IAAIJ,CAAC,EAAE;IAChCD,IAAI,CAACK,MAAM,GAAGJ,CAAC;;EAEjB,OAAOD,IAAI;AACb;AAEA;;;;;;;;;;;;AAYA,OAAM,SAAUiB,KAAKA,CACnBvB,eAAe,EACfC,MAAM,EACNC,GAAG,EACHC,MAAM,EACNqB,EAAE,EACFC,EAAE,EACFX,MAAM,EACNT,QAAQ;EAER,IAAMC,IAAI,GAAGD,QAAQ,GAAGA,QAAQ,GAAG,EAAE;EACrC,IAAMa,OAAO,GAAGJ,MAAM,CAAC,CAAC,CAAC;EACzB,IAAMK,OAAO,GAAGL,MAAM,CAAC,CAAC,CAAC;EACzB,IAAIP,CAAC,GAAG,CAAC;EACT,KAAK,IAAIC,CAAC,GAAGP,MAAM,EAAEO,CAAC,GAAGN,GAAG,EAAEM,CAAC,IAAIL,MAAM,EAAE;IACzC,IAAMiB,MAAM,GAAGpB,eAAe,CAACQ,CAAC,CAAC,GAAGU,OAAO;IAC3C,IAAMG,MAAM,GAAGrB,eAAe,CAACQ,CAAC,GAAG,CAAC,CAAC,GAAGW,OAAO;IAC/Cb,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGW,OAAO,GAAGM,EAAE,GAAGJ,MAAM;IACjCd,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGY,OAAO,GAAGM,EAAE,GAAGJ,MAAM;IACjC,KAAK,IAAIC,CAAC,GAAGd,CAAC,GAAG,CAAC,EAAEc,CAAC,GAAGd,CAAC,GAAGL,MAAM,EAAE,EAAEmB,CAAC,EAAE;MACvChB,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGP,eAAe,CAACsB,CAAC,CAAC;;;EAGlC,IAAIjB,QAAQ,IAAIC,IAAI,CAACK,MAAM,IAAIJ,CAAC,EAAE;IAChCD,IAAI,CAACK,MAAM,GAAGJ,CAAC;;EAEjB,OAAOD,IAAI;AACb;AAEA;;;;;;;;;;AAUA,OAAM,SAAUoB,SAASA,CACvB1B,eAAe,EACfC,MAAM,EACNC,GAAG,EACHC,MAAM,EACNiB,MAAM,EACNC,MAAM,EACNhB,QAAQ;EAER,IAAMC,IAAI,GAAGD,QAAQ,GAAGA,QAAQ,GAAG,EAAE;EACrC,IAAIE,CAAC,GAAG,CAAC;EACT,KAAK,IAAIC,CAAC,GAAGP,MAAM,EAAEO,CAAC,GAAGN,GAAG,EAAEM,CAAC,IAAIL,MAAM,EAAE;IACzCG,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGP,eAAe,CAACQ,CAAC,CAAC,GAAGY,MAAM;IACvCd,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGP,eAAe,CAACQ,CAAC,GAAG,CAAC,CAAC,GAAGa,MAAM;IAC3C,KAAK,IAAIC,CAAC,GAAGd,CAAC,GAAG,CAAC,EAAEc,CAAC,GAAGd,CAAC,GAAGL,MAAM,EAAE,EAAEmB,CAAC,EAAE;MACvChB,IAAI,CAACC,CAAC,EAAE,CAAC,GAAGP,eAAe,CAACsB,CAAC,CAAC;;;EAGlC,IAAIjB,QAAQ,IAAIC,IAAI,CAACK,MAAM,IAAIJ,CAAC,EAAE;IAChCD,IAAI,CAACK,MAAM,GAAGJ,CAAC;;EAEjB,OAAOD,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}