{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/ZoomToExtent\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { fromExtent as polygonFromExtent } from '../geom/Polygon.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\nvar ZoomToExtent = /** @class */function (_super) {\n  __extends(ZoomToExtent, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function ZoomToExtent(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      target: options.target\n    }) || this;\n    /**\n     * @type {?import(\"../extent.js\").Extent|null}\n     * @protected\n     */\n    _this.extent = options.extent ? options.extent : null;\n    var className = options.className !== undefined ? options.className : 'ol-zoom-extent';\n    var label = options.label !== undefined ? options.label : 'E';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(typeof label === 'string' ? document.createTextNode(label) : label);\n    button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n    return _this;\n  }\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  ZoomToExtent.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  };\n  /**\n   * @protected\n   */\n  ZoomToExtent.prototype.handleZoomToExtent = function () {\n    var map = this.getMap();\n    var view = map.getView();\n    var extent = !this.extent ? view.getProjection().getExtent() : this.extent;\n    view.fitInternal(polygonFromExtent(extent));\n  };\n  return ZoomToExtent;\n}(Control);\nexport default ZoomToExtent;","map":{"version":3,"names":["Control","EventType","CLASS_CONTROL","CLASS_UNSELECTABLE","fromExtent","polygonFromExtent","ZoomToExtent","_super","__extends","opt_options","_this","options","call","element","document","createElement","target","extent","className","undefined","label","tipLabel","button","setAttribute","title","appendChild","createTextNode","addEventListener","CLICK","handleClick_","bind","cssClasses","prototype","event","preventDefault","handleZoomToExtent","map","getMap","view","getView","getProjection","getExtent","fitInternal"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\control\\ZoomToExtent.js"],"sourcesContent":["/**\n * @module ol/control/ZoomToExtent\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {fromExtent as polygonFromExtent} from '../geom/Polygon.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoom-extent'] Class name.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {string|HTMLElement} [label='E'] Text label to use for the button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string} [tipLabel='Fit to extent'] Text label to use for the button tip.\n * @property {import(\"../extent.js\").Extent} [extent] The extent to zoom to. If undefined the validity\n * extent of the view projection is used.\n */\n\n/**\n * @classdesc\n * A button control which, when pressed, changes the map view to a specific\n * extent. To style this control use the css selector `.ol-zoom-extent`.\n *\n * @api\n */\nclass ZoomToExtent extends Control {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      target: options.target,\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent|null}\n     * @protected\n     */\n    this.extent = options.extent ? options.extent : null;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoom-extent';\n\n    const label = options.label !== undefined ? options.label : 'E';\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Fit to extent';\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(\n      typeof label === 'string' ? document.createTextNode(label) : label\n    );\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(button);\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleZoomToExtent();\n  }\n\n  /**\n   * @protected\n   */\n  handleZoomToExtent() {\n    const map = this.getMap();\n    const view = map.getView();\n    const extent = !this.extent\n      ? view.getProjection().getExtent()\n      : this.extent;\n    view.fitInternal(polygonFromExtent(extent));\n  }\n}\n\nexport default ZoomToExtent;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,OAAO,MAAM,cAAc;AAClC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,SAAQC,aAAa,EAAEC,kBAAkB,QAAO,WAAW;AAC3D,SAAQC,UAAU,IAAIC,iBAAiB,QAAO,oBAAoB;AAElE;;;;;;;;;;;AAYA;;;;;;;AAOA,IAAAC,YAAA,0BAAAC,MAAA;EAA2BC,SAAA,CAAAF,YAAA,EAAAC,MAAA;EACzB;;;EAGA,SAAAD,aAAYG,WAAW;IAAvB,IAAAC,KAAA;IACE,IAAMC,OAAO,GAAGF,WAAW,GAAGA,WAAW,GAAG,EAAE;YAE9CF,MAAA,CAAAK,IAAA,OAAM;MACJC,OAAO,EAAEC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACtCC,MAAM,EAAEL,OAAO,CAACK;KACjB,CAAC;IAEF;;;;IAIAN,KAAI,CAACO,MAAM,GAAGN,OAAO,CAACM,MAAM,GAAGN,OAAO,CAACM,MAAM,GAAG,IAAI;IAEpD,IAAMC,SAAS,GACbP,OAAO,CAACO,SAAS,KAAKC,SAAS,GAAGR,OAAO,CAACO,SAAS,GAAG,gBAAgB;IAExE,IAAME,KAAK,GAAGT,OAAO,CAACS,KAAK,KAAKD,SAAS,GAAGR,OAAO,CAACS,KAAK,GAAG,GAAG;IAC/D,IAAMC,QAAQ,GACZV,OAAO,CAACU,QAAQ,KAAKF,SAAS,GAAGR,OAAO,CAACU,QAAQ,GAAG,eAAe;IACrE,IAAMC,MAAM,GAAGR,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/CO,MAAM,CAACC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;IACrCD,MAAM,CAACE,KAAK,GAAGH,QAAQ;IACvBC,MAAM,CAACG,WAAW,CAChB,OAAOL,KAAK,KAAK,QAAQ,GAAGN,QAAQ,CAACY,cAAc,CAACN,KAAK,CAAC,GAAGA,KAAK,CACnE;IAEDE,MAAM,CAACK,gBAAgB,CACrB1B,SAAS,CAAC2B,KAAK,EACflB,KAAI,CAACmB,YAAY,CAACC,IAAI,CAACpB,KAAI,CAAC,EAC5B,KAAK,CACN;IAED,IAAMqB,UAAU,GACdb,SAAS,GAAG,GAAG,GAAGf,kBAAkB,GAAG,GAAG,GAAGD,aAAa;IAC5D,IAAMW,OAAO,GAAGH,KAAI,CAACG,OAAO;IAC5BA,OAAO,CAACK,SAAS,GAAGa,UAAU;IAC9BlB,OAAO,CAACY,WAAW,CAACH,MAAM,CAAC;;EAC7B;EAEA;;;;EAIAhB,YAAA,CAAA0B,SAAA,CAAAH,YAAY,GAAZ,UAAaI,KAAK;IAChBA,KAAK,CAACC,cAAc,EAAE;IACtB,IAAI,CAACC,kBAAkB,EAAE;EAC3B,CAAC;EAED;;;EAGA7B,YAAA,CAAA0B,SAAA,CAAAG,kBAAkB,GAAlB;IACE,IAAMC,GAAG,GAAG,IAAI,CAACC,MAAM,EAAE;IACzB,IAAMC,IAAI,GAAGF,GAAG,CAACG,OAAO,EAAE;IAC1B,IAAMtB,MAAM,GAAG,CAAC,IAAI,CAACA,MAAM,GACvBqB,IAAI,CAACE,aAAa,EAAE,CAACC,SAAS,EAAE,GAChC,IAAI,CAACxB,MAAM;IACfqB,IAAI,CAACI,WAAW,CAACrC,iBAAiB,CAACY,MAAM,CAAC,CAAC;EAC7C,CAAC;EACH,OAAAX,YAAC;AAAD,CAAC,CAhE0BN,OAAO;AAkElC,eAAeM,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}