{"ast":null,"code":"/**\n * @module ol/geom/flat/interpolate\n */\nimport { binarySearch } from '../../array.js';\nimport { lerp } from '../../math.js';\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>} [opt_dest] Destination.\n * @param {number} [opt_dimension] Destination dimension (default is `2`)\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(flatCoordinates, offset, end, stride, fraction, opt_dest, opt_dimension) {\n  var o, t;\n  var n = (end - offset) / stride;\n  if (n === 1) {\n    o = offset;\n  } else if (n === 2) {\n    o = offset;\n    t = fraction;\n  } else if (n !== 0) {\n    var x1 = flatCoordinates[offset];\n    var y1 = flatCoordinates[offset + 1];\n    var length_1 = 0;\n    var cumulativeLengths = [0];\n    for (var i = offset + stride; i < end; i += stride) {\n      var x2 = flatCoordinates[i];\n      var y2 = flatCoordinates[i + 1];\n      length_1 += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length_1);\n      x1 = x2;\n      y1 = y2;\n    }\n    var target = fraction * length_1;\n    var index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      t = (target - cumulativeLengths[-index - 2]) / (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      o = offset + (-index - 2) * stride;\n    } else {\n      o = offset + index * stride;\n    }\n  }\n  var dimension = opt_dimension > 1 ? opt_dimension : 2;\n  var dest = opt_dest ? opt_dest : new Array(dimension);\n  for (var i = 0; i < dimension; ++i) {\n    dest[i] = o === undefined ? NaN : t === undefined ? flatCoordinates[o + i] : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n  }\n  return dest;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, extrapolate) {\n  if (end == offset) {\n    return null;\n  }\n  var coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  } else if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  var lo = offset / stride;\n  var hi = end / stride;\n  while (lo < hi) {\n    var mid = lo + hi >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  var m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  var m1 = flatCoordinates[(lo + 1) * stride - 1];\n  var t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (var i = 0; i < stride - 1; ++i) {\n    coordinate.push(lerp(flatCoordinates[(lo - 1) * stride + i], flatCoordinates[lo * stride + i], t));\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringsCoordinateAtM(flatCoordinates, offset, ends, stride, m, extrapolate, interpolate) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(flatCoordinates, offset, ends[ends.length - 1], stride, m, extrapolate);\n  }\n  var coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  for (var i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    } else if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(flatCoordinates, offset, end, stride, m, false);\n    }\n    offset = end;\n  }\n  return null;\n}","map":{"version":3,"names":["binarySearch","lerp","interpolatePoint","flatCoordinates","offset","end","stride","fraction","opt_dest","opt_dimension","o","t","n","x1","y1","length_1","cumulativeLengths","i","x2","y2","Math","sqrt","push","target","index","dimension","dest","Array","undefined","NaN","lineStringCoordinateAtM","m","extrapolate","coordinate","slice","lo","hi","mid","m0","m1","lineStringsCoordinateAtM","ends","interpolate","length","ii"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\flat\\interpolate.js"],"sourcesContent":["/**\n * @module ol/geom/flat/interpolate\n */\nimport {binarySearch} from '../../array.js';\nimport {lerp} from '../../math.js';\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} fraction Fraction.\n * @param {Array<number>} [opt_dest] Destination.\n * @param {number} [opt_dimension] Destination dimension (default is `2`)\n * @return {Array<number>} Destination.\n */\nexport function interpolatePoint(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  fraction,\n  opt_dest,\n  opt_dimension\n) {\n  let o, t;\n  const n = (end - offset) / stride;\n  if (n === 1) {\n    o = offset;\n  } else if (n === 2) {\n    o = offset;\n    t = fraction;\n  } else if (n !== 0) {\n    let x1 = flatCoordinates[offset];\n    let y1 = flatCoordinates[offset + 1];\n    let length = 0;\n    const cumulativeLengths = [0];\n    for (let i = offset + stride; i < end; i += stride) {\n      const x2 = flatCoordinates[i];\n      const y2 = flatCoordinates[i + 1];\n      length += Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n      cumulativeLengths.push(length);\n      x1 = x2;\n      y1 = y2;\n    }\n    const target = fraction * length;\n    const index = binarySearch(cumulativeLengths, target);\n    if (index < 0) {\n      t =\n        (target - cumulativeLengths[-index - 2]) /\n        (cumulativeLengths[-index - 1] - cumulativeLengths[-index - 2]);\n      o = offset + (-index - 2) * stride;\n    } else {\n      o = offset + index * stride;\n    }\n  }\n  const dimension = opt_dimension > 1 ? opt_dimension : 2;\n  const dest = opt_dest ? opt_dest : new Array(dimension);\n  for (let i = 0; i < dimension; ++i) {\n    dest[i] =\n      o === undefined\n        ? NaN\n        : t === undefined\n        ? flatCoordinates[o + i]\n        : lerp(flatCoordinates[o + i], flatCoordinates[o + stride + i], t);\n  }\n  return dest;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringCoordinateAtM(\n  flatCoordinates,\n  offset,\n  end,\n  stride,\n  m,\n  extrapolate\n) {\n  if (end == offset) {\n    return null;\n  }\n  let coordinate;\n  if (m < flatCoordinates[offset + stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(offset, offset + stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  } else if (flatCoordinates[end - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(end - stride, end);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  // FIXME use O(1) search\n  if (m == flatCoordinates[offset + stride - 1]) {\n    return flatCoordinates.slice(offset, offset + stride);\n  }\n  let lo = offset / stride;\n  let hi = end / stride;\n  while (lo < hi) {\n    const mid = (lo + hi) >> 1;\n    if (m < flatCoordinates[(mid + 1) * stride - 1]) {\n      hi = mid;\n    } else {\n      lo = mid + 1;\n    }\n  }\n  const m0 = flatCoordinates[lo * stride - 1];\n  if (m == m0) {\n    return flatCoordinates.slice((lo - 1) * stride, (lo - 1) * stride + stride);\n  }\n  const m1 = flatCoordinates[(lo + 1) * stride - 1];\n  const t = (m - m0) / (m1 - m0);\n  coordinate = [];\n  for (let i = 0; i < stride - 1; ++i) {\n    coordinate.push(\n      lerp(\n        flatCoordinates[(lo - 1) * stride + i],\n        flatCoordinates[lo * stride + i],\n        t\n      )\n    );\n  }\n  coordinate.push(m);\n  return coordinate;\n}\n\n/**\n * @param {Array<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} m M.\n * @param {boolean} extrapolate Extrapolate.\n * @param {boolean} interpolate Interpolate.\n * @return {import(\"../../coordinate.js\").Coordinate|null} Coordinate.\n */\nexport function lineStringsCoordinateAtM(\n  flatCoordinates,\n  offset,\n  ends,\n  stride,\n  m,\n  extrapolate,\n  interpolate\n) {\n  if (interpolate) {\n    return lineStringCoordinateAtM(\n      flatCoordinates,\n      offset,\n      ends[ends.length - 1],\n      stride,\n      m,\n      extrapolate\n    );\n  }\n  let coordinate;\n  if (m < flatCoordinates[stride - 1]) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(0, stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  if (flatCoordinates[flatCoordinates.length - 1] < m) {\n    if (extrapolate) {\n      coordinate = flatCoordinates.slice(flatCoordinates.length - stride);\n      coordinate[stride - 1] = m;\n      return coordinate;\n    } else {\n      return null;\n    }\n  }\n  for (let i = 0, ii = ends.length; i < ii; ++i) {\n    const end = ends[i];\n    if (offset == end) {\n      continue;\n    }\n    if (m < flatCoordinates[offset + stride - 1]) {\n      return null;\n    } else if (m <= flatCoordinates[end - 1]) {\n      return lineStringCoordinateAtM(\n        flatCoordinates,\n        offset,\n        end,\n        stride,\n        m,\n        false\n      );\n    }\n    offset = end;\n  }\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}