{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\nimport { Style, Stroke } from 'ol/style';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\n\n/* map stylings */\nimport { polygonStyle, activePolygonStyle, selectedPolygonStyle, ghostMarkerStyle } from './ol-styles';\n\n/* measurement helpers */\nimport { clearPolygonOverlays, createSegmentOverlays, remarkPolygonSegments, remarkLineSegments } from './map-helpers/Measurements';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst OFFSET_REF_DEFAULT = 2.018;\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({\n    visible: false,\n    x: 0,\n    y: 0,\n    type: null,\n    feature: null,\n    index: null\n  });\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const simpleStyle = new Style({\n      stroke: new Stroke({\n        color: 'black',\n        width: 2\n      })\n    });\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: simpleStyle // This style now handles both polygons and linestrings with vertex dots\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle // Only used for ghost marker\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    map.addControl(new ScaleLine({\n      units: 'imperial'\n    }));\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = feature => remarkPolygonSegments(feature, mapRef);\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          // feature.setStyle(activePolygonStyle);\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays(feature, [[coord, coord]], mapRef);\n        } else {\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          // feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n        }\n      }\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z') && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n    if (mode === 'select') {\n      const select = new Select({\n        layers: [map.getLayers().item(1)],\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension (ft.)\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'draw' ? ' active' : ''}`,\n        onClick: () => setMode('draw'),\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `map-button${mode === 'select' ? ' active' : ''}`,\n        onClick: () => setMode('select'),\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(FlipHorizButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FlipVertButton, {\n        selectedFeature: selectedFeature,\n        mapRef: mapRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RightClick, {\n      mapRef: mapRef,\n      vectorSourceRef: vectorSourceRef,\n      contextMenu: contextMenu,\n      setContextMenu: setContextMenu,\n      clearPolygonOverlays: feature => clearPolygonOverlays(feature, mapRef)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 275,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"CgHT6V4VNsMdoXoTeHOcv/7GGj0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Select","fromLonLat","ScaleLine","Style","Stroke","FlipHorizButton","FlipVertButton","RightClick","polygonStyle","activePolygonStyle","selectedPolygonStyle","ghostMarkerStyle","clearPolygonOverlays","createSegmentOverlays","remarkPolygonSegments","remarkLineSegments","jsxDEV","_jsxDEV","OFFSET_REF_DEFAULT","App","_s","text","setText","mode","setMode","selectedFeature","setSelectedFeature","contextMenu","setContextMenu","visible","x","y","type","feature","index","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","ghostMarkerRef","modeRef","selectInteractionRef","current","vectorSource","vertexSource","simpleStyle","stroke","color","width","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","addControl","units","on","evt","coord","coordinate","removeFeature","ghost","setStyle","addFeature","poly","getGeometry","coords","getCoordinates","slice","length","setCoordinates","addSegment","direction","last","dx","dy","OFFSET","newPt","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","splice","document","addEventListener","getFeatures","forEach","f","overlay","removeOverlay","setTarget","removeEventListener","removeInteraction","val","parseFloat","isNaN","select","getLayers","item","selected","addInteraction","children","id","ref","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Select from 'ol/interaction/Select';\nimport { fromLonLat } from 'ol/proj';\nimport ScaleLine from 'ol/control/ScaleLine';\nimport { Style, Stroke } from 'ol/style';\n\n/* map actions */\nimport FlipHorizButton from './map-actions/FlipHorizontal';\nimport FlipVertButton from './map-actions/FlipVertical';\nimport RightClick from './map-actions/RightClick';\n\n/* map stylings */\nimport {\n  polygonStyle,\n  activePolygonStyle,\n  selectedPolygonStyle,\n  ghostMarkerStyle\n} from './ol-styles';\n\n/* measurement helpers */\nimport {\n  clearPolygonOverlays,\n  createSegmentOverlays,\n  remarkPolygonSegments,\n  remarkLineSegments\n} from './map-helpers/Measurements';\n\nconst OFFSET_REF_DEFAULT = 2.018;\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const [mode, setMode] = useState('draw');\n  const [selectedFeature, setSelectedFeature] = useState(null);\n  const [contextMenu, setContextMenu] = useState({ visible: false, x: 0, y: 0, type: null, feature: null, index: null });\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const allOverlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n  const ghostMarkerRef = useRef(null);\n  const modeRef = useRef(mode);\n  const selectInteractionRef = useRef(null);\n\n  useEffect(() => {\n    modeRef.current = mode;\n  }, [mode]);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const simpleStyle = new Style({\n      stroke: new Stroke({ color: 'black', width: 2 })\n    });\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: simpleStyle, // This style now handles both polygons and linestrings with vertex dots\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: ghostMarkerStyle, // Only used for ghost marker\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    map.addControl(new ScaleLine({ units: 'imperial' }));\n    mapRef.current = map;\n\n    // Expose remarkPolygonSegments for use in handlers\n    mapRef.current.remarkPolygonSegments = (feature) => remarkPolygonSegments(feature, mapRef);\n\n    // --- GHOST MARKER LOGIC ---\n    map.on('pointermove', evt => {\n      if (modeRef.current === 'draw' && !drawingRef.current) {\n        const coord = evt.coordinate;\n        if (ghostMarkerRef.current) {\n          vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        }\n        const ghost = new Feature(new Point(coord));\n        ghost.setStyle(ghostMarkerStyle);\n        vertexSourceRef.current.addFeature(ghost);\n        ghostMarkerRef.current = ghost;\n      } else if (ghostMarkerRef.current) {\n        vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n        ghostMarkerRef.current = null;\n      }\n    });\n\n    // --- MAP CLICK HANDLER ---\n    map.on('singleclick', evt => {\n      if (modeRef.current === 'draw') {\n        const coord = evt.coordinate;\n        if (!drawingRef.current) {\n          if (ghostMarkerRef.current) {\n            vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n            ghostMarkerRef.current = null;\n          }\n          const poly = new Polygon([[coord, coord]]);\n          const feature = new Feature(poly);\n          // feature.setStyle(activePolygonStyle);\n          vectorSource.addFeature(feature);\n          polygonFeatureRef.current = feature;\n          drawingRef.current = true;\n          createSegmentOverlays(feature, [[coord, coord]], mapRef);\n        } else {\n          const feature = polygonFeatureRef.current;\n          const poly = feature.getGeometry();\n          let coords = poly.getCoordinates()[0];\n          coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      createSegmentOverlays(feature, [coords], mapRef);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        if (modeRef.current === 'draw') {\n          e.preventDefault();\n          addSegment(e.key);\n        }\n      }\n      if (e.key === 'Enter' && drawingRef.current && modeRef.current === 'draw') {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          // feature.setStyle(polygonStyle);\n          createSegmentOverlays(feature, [coords], mapRef);\n          drawingRef.current = false;\n        }\n      }\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z') &&\n        drawingRef.current &&\n        modeRef.current === 'draw'\n      ) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          createSegmentOverlays(feature, [coords], mapRef);\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    // Clean up on unmount\n    return () => {\n      vectorSource.getFeatures().forEach(f => clearPolygonOverlays(f, mapRef));\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  useEffect(() => {\n    const map = mapRef.current;\n    if (!map) return;\n\n    if (mode !== 'draw' && ghostMarkerRef.current && vertexSourceRef.current) {\n      vertexSourceRef.current.removeFeature(ghostMarkerRef.current);\n      ghostMarkerRef.current = null;\n    }\n\n    if (selectInteractionRef.current) {\n      map.removeInteraction(selectInteractionRef.current);\n      selectInteractionRef.current = null;\n    }\n\n    if (mode === 'select') {\n      const select = new Select({\n        layers: [map.getLayers().item(1)],\n        style: selectedPolygonStyle\n      });\n      select.on('select', e => {\n        if (e.selected.length > 0) {\n          setSelectedFeature(e.selected[0]);\n        } else {\n          setSelectedFeature(null);\n        }\n      });\n      map.addInteraction(select);\n      selectInteractionRef.current = select;\n    } else {\n      if (selectedFeature) {\n        selectedFeature.setStyle(polygonStyle);\n        setSelectedFeature(null);\n      }\n    }\n\n    return () => {\n      if (selectInteractionRef.current) {\n        map.removeInteraction(selectInteractionRef.current);\n        selectInteractionRef.current = null;\n      }\n    };\n  }, [mode]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension (ft.)\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div\n          className={`map-button${mode === 'draw' ? ' active' : ''}`}\n          onClick={() => setMode('draw')}\n        >\n          Draw\n        </div>\n        <div\n          className={`map-button${mode === 'select' ? ' active' : ''}`}\n          onClick={() => setMode('select')}\n        >\n          Select\n        </div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <FlipHorizButton selectedFeature={selectedFeature} mapRef={mapRef} />\n        <FlipVertButton selectedFeature={selectedFeature} mapRef={mapRef} />\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\"></div>\n      <RightClick\n        mapRef={mapRef}\n        vectorSourceRef={vectorSourceRef}\n        contextMenu={contextMenu}\n        setContextMenu={setContextMenu}\n        clearPolygonOverlays={(feature) => clearPolygonOverlays(feature, mapRef)}\n      />\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}