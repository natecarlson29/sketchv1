{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/KeyboardPan\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, { pan } from './Interaction.js';\nimport KeyCode from '../events/KeyCode.js';\nimport { noModifierKeys, targetNotEditable } from '../events/condition.js';\nimport { rotate as rotateCoordinate } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.noModifierKeys} and\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nvar KeyboardPan = /** @class */function (_super) {\n  __extends(KeyboardPan, _super);\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  function KeyboardPan(opt_options) {\n    var _this = _super.call(this) || this;\n    var options = opt_options || {};\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    _this.defaultCondition_ = function (mapBrowserEvent) {\n      return noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent);\n    };\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition !== undefined ? options.condition : _this.defaultCondition_;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 100;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.pixelDelta_ = options.pixelDelta !== undefined ? options.pixelDelta : 128;\n    return _this;\n  }\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n   * pressed).\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardPan}\n   */\n  KeyboardPan.prototype.handleEvent = function (mapBrowserEvent) {\n    var stopEvent = false;\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\n      var keyEvent = /** @type {KeyboardEvent} */mapBrowserEvent.originalEvent;\n      var keyCode = keyEvent.keyCode;\n      if (this.condition_(mapBrowserEvent) && (keyCode == KeyCode.DOWN || keyCode == KeyCode.LEFT || keyCode == KeyCode.RIGHT || keyCode == KeyCode.UP)) {\n        var map = mapBrowserEvent.map;\n        var view = map.getView();\n        var mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n        var deltaX = 0,\n          deltaY = 0;\n        if (keyCode == KeyCode.DOWN) {\n          deltaY = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.LEFT) {\n          deltaX = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.RIGHT) {\n          deltaX = mapUnitsDelta;\n        } else {\n          deltaY = mapUnitsDelta;\n        }\n        var delta = [deltaX, deltaY];\n        rotateCoordinate(delta, view.getRotation());\n        pan(view, delta, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  };\n  return KeyboardPan;\n}(Interaction);\nexport default KeyboardPan;","map":{"version":3,"names":["EventType","Interaction","pan","KeyCode","noModifierKeys","targetNotEditable","rotate","rotateCoordinate","KeyboardPan","_super","__extends","opt_options","_this","call","options","defaultCondition_","mapBrowserEvent","condition_","condition","undefined","duration_","duration","pixelDelta_","pixelDelta","prototype","handleEvent","stopEvent","type","KEYDOWN","keyEvent","originalEvent","keyCode","DOWN","LEFT","RIGHT","UP","map","view","getView","mapUnitsDelta","getResolution","deltaX","deltaY","delta","getRotation","preventDefault"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\interaction\\KeyboardPan.js"],"sourcesContent":["/**\n * @module ol/interaction/KeyboardPan\n */\nimport EventType from '../events/EventType.js';\nimport Interaction, {pan} from './Interaction.js';\nimport KeyCode from '../events/KeyCode.js';\nimport {noModifierKeys, targetNotEditable} from '../events/condition.js';\nimport {rotate as rotateCoordinate} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. Default is\n * {@link module:ol/events/condition.noModifierKeys} and\n * {@link module:ol/events/condition.targetNotEditable}.\n * @property {number} [duration=100] Animation duration in milliseconds.\n * @property {number} [pixelDelta=128] The amount of pixels to pan on each key\n * press.\n */\n\n/**\n * @classdesc\n * Allows the user to pan the map using keyboard arrows.\n * Note that, although this interaction is by default included in maps,\n * the keys can only be used when browser focus is on the element to which\n * the keyboard events are attached. By default, this is the map div,\n * though you can change this with the `keyboardEventTarget` in\n * {@link module:ol/Map~Map}. `document` never loses focus but, for any other\n * element, focus will have to be on, and returned to, this element if the keys\n * are to function.\n * See also {@link module:ol/interaction/KeyboardZoom~KeyboardZoom}.\n * @api\n */\nclass KeyboardPan extends Interaction {\n  /**\n   * @param {Options} [opt_options] Options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = opt_options || {};\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultCondition_ = function (mapBrowserEvent) {\n      return (\n        noModifierKeys(mapBrowserEvent) && targetNotEditable(mapBrowserEvent)\n      );\n    };\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ =\n      options.condition !== undefined\n        ? options.condition\n        : this.defaultCondition_;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 100;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelDelta_ =\n      options.pixelDelta !== undefined ? options.pixelDelta : 128;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent~MapBrowserEvent map browser event} if it was a\n   * `KeyEvent`, and decides the direction to pan to (if an arrow key was\n   * pressed).\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @this {KeyboardPan}\n   */\n  handleEvent(mapBrowserEvent) {\n    let stopEvent = false;\n    if (mapBrowserEvent.type == EventType.KEYDOWN) {\n      const keyEvent = /** @type {KeyboardEvent} */ (\n        mapBrowserEvent.originalEvent\n      );\n      const keyCode = keyEvent.keyCode;\n      if (\n        this.condition_(mapBrowserEvent) &&\n        (keyCode == KeyCode.DOWN ||\n          keyCode == KeyCode.LEFT ||\n          keyCode == KeyCode.RIGHT ||\n          keyCode == KeyCode.UP)\n      ) {\n        const map = mapBrowserEvent.map;\n        const view = map.getView();\n        const mapUnitsDelta = view.getResolution() * this.pixelDelta_;\n        let deltaX = 0,\n          deltaY = 0;\n        if (keyCode == KeyCode.DOWN) {\n          deltaY = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.LEFT) {\n          deltaX = -mapUnitsDelta;\n        } else if (keyCode == KeyCode.RIGHT) {\n          deltaX = mapUnitsDelta;\n        } else {\n          deltaY = mapUnitsDelta;\n        }\n        const delta = [deltaX, deltaY];\n        rotateCoordinate(delta, view.getRotation());\n        pan(view, delta, this.duration_);\n        keyEvent.preventDefault();\n        stopEvent = true;\n      }\n    }\n    return !stopEvent;\n  }\n}\n\nexport default KeyboardPan;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}