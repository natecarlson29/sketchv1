{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({\n      color: 'blue'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)'\n  })\n});\nconst OFFSET = 2; // map units\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    mapRef.current = map;\n    function clearOverlays() {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      overlaysRef.current = [];\n    }\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + ' ft';\n    }\n    function createSegmentOverlays(coords) {\n      clearOverlays();\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n        const midpoint = [(c1[0] + c2[0]) / 2, (c1[1] + c2[1]) / 2];\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.style.background = 'white';\n        tooltip.style.border = '1px solid black';\n        tooltip.style.padding = '2px 4px';\n        tooltip.style.position = 'relative';\n        tooltip.style.whiteSpace = 'nowrap';\n        tooltip.innerHTML = length;\n        const overlay = new Overlay({\n          element: tooltip,\n          position: midpoint,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        map.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n    map.on('singleclick', evt => {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        // Start new polygon\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        updateVertexMarkers([coord, coord]);\n        createSegmentOverlays([coord, coord]);\n      } else {\n        // Add vertex\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateVertexMarkers(coords);\n        createSegmentOverlays(coords);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        e.preventDefault();\n        addSegment(e.key);\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          // Remove temp markers, add permanent ones\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          drawingRef.current = false;\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      clearOverlays();\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: inputRef,\n      type: \"text\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension\",\n      autoFocus: true,\n      style: {\n        position: 'absolute',\n        top: 20,\n        right: 20,\n        zIndex: 1000,\n        width: 300,\n        padding: 8,\n        fontSize: 16,\n        pointerEvents: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n          .segment-tooltip {\n            font-size: 12px;\n            pointer-events: none;\n          }\n        `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 232,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"tp/bcd01eeTJsw5vrDHb/PHbx2E=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","fromLonLat","getLength","Style","CircleStyle","Fill","Stroke","LineString","jsxDEV","_jsxDEV","vertexStyle","image","radius","fill","color","stroke","width","polygonStyle","OFFSET","App","_s","text","setText","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","drawingRef","vectorSource","current","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","clearOverlays","forEach","overlay","removeOverlay","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","i","length","c1","c2","midpoint","tooltip","document","createElement","className","background","border","padding","position","whiteSpace","innerHTML","element","positioning","stopEvent","addOverlay","push","addVertexMarkers","addFeature","updateVertexMarkers","toRemove","getFeatures","f","get","removeFeature","feat","set","on","evt","coord","coordinate","poly","feature","getGeometry","getCoordinates","slice","setCoordinates","addSegment","direction","last","dx","dy","newPt","handleKeyDown","e","key","preventDefault","addEventListener","setTarget","removeEventListener","children","ref","type","value","onChange","placeholder","autoFocus","top","right","zIndex","fontSize","pointerEvents","fileName","_jsxFileName","lineNumber","columnNumber","id","height","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\n\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'white', width: 2 }),\n  }),\n});\n\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)',\n  }),\n});\n\nconst OFFSET = 2; // map units\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);\n  const drawingRef = useRef(false);\n\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    mapRef.current = map;\n\n    function clearOverlays() {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      overlaysRef.current = [];\n    }\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + ' ft';\n    }\n\n    function createSegmentOverlays(coords) {\n      clearOverlays();\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        const midpoint = [\n          (c1[0] + c2[0]) / 2,\n          (c1[1] + c2[1]) / 2,\n        ];\n\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.style.background = 'white';\n        tooltip.style.border = '1px solid black';\n        tooltip.style.padding = '2px 4px';\n        tooltip.style.position = 'relative';\n        tooltip.style.whiteSpace = 'nowrap';\n        tooltip.innerHTML = length;\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: midpoint,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        map.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n      }\n    }\n\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n\n    map.on('singleclick', evt => {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        // Start new polygon\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        updateVertexMarkers([coord, coord]);\n        createSegmentOverlays([coord, coord]);\n      } else {\n        // Add vertex\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateVertexMarkers(coords);\n        createSegmentOverlays(coords);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        e.preventDefault();\n        addSegment(e.key);\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          // Remove temp markers, add permanent ones\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          drawingRef.current = false;\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      clearOverlays();\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  return (\n    <div>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension\"\n        autoFocus\n        style={{\n          position: 'absolute',\n          top: 20,\n          right: 20,\n          zIndex: 1000,\n          width: 300,\n          padding: 8,\n          fontSize: 16,\n          pointerEvents: 'auto',\n        }}\n      />\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\n      <style>\n        {`\n          .segment-tooltip {\n            font-size: 12px;\n            pointer-events: none;\n          }\n        `}\n      </style>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}