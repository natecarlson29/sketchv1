{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ncarl\\\\Desktop\\\\sketch\\\\openlayers-react-map\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({\n      color: 'blue'\n    }),\n    stroke: new Stroke({\n      color: 'white',\n      width: 2\n    })\n  })\n});\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)'\n  })\n});\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)'\n  })\n});\n\n// We'll use a ref for OFFSET so it can be updated by the [text] effect\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  _s();\n  const [text, setText] = useState('');\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]); // overlays for current drawing\n  const allOverlaysRef = useRef([]); // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle\n    });\n    const map = new Map({\n      target: 'map',\n      layers: [new TileLayer({\n        source: new OSM()\n      }), vectorLayer, vertexLayer],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24\n      })\n    });\n    mapRef.current = map;\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n        // else if (overlay.type === 'feature' && overlay.feature) {\n        //   vectorSourceRef.current.removeFeature(overlay.feature);\n        // }\n      });\n      overlaysRef.current = [];\n    }\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280 ? (lengthFeet / 5280).toFixed(2) + ' mi' : lengthFeet.toFixed(2) + \"'\";\n    }\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [dy / len, -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [(pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET, (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n\n        // (dimension line code commented out)\n      }\n    }\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n    map.on('singleclick', evt => {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        // Start new polygon\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setStyle(activePolygonStyle); // Active style\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        updateVertexMarkers([coord, coord]);\n        createSegmentOverlays([coord, coord]);\n      } else {\n        // Add vertex\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateVertexMarkers(coords);\n        createSegmentOverlays(coords);\n      }\n    });\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0,\n        dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp':\n          dy = OFFSET;\n          break;\n        case 'ArrowDown':\n          dy = -OFFSET;\n          break;\n        case 'ArrowLeft':\n          dx = -OFFSET;\n          break;\n        case 'ArrowRight':\n          dx = OFFSET;\n          break;\n        default:\n          return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n    function handleKeyDown(e) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown' || e.key === 'ArrowLeft' || e.key === 'ArrowRight') {\n        e.preventDefault();\n        addSegment(e.key);\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if ((e.ctrlKey || e.metaKey) && (e.key === 'z' || e.key === 'Z') && drawingRef.current) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n    document.addEventListener('keydown', handleKeyDown);\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"dimension-input\",\n      ref: inputRef,\n      type: \"number\",\n      min: \"0.1\",\n      step: \"0.1\",\n      value: text,\n      onChange: e => setText(e.target.value),\n      placeholder: \"Dimension\",\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-vert\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Draw\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Select\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-menu-horiz\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Clone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"FlipHoriz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"FlipVert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"Curve\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"map-button\",\n        children: \"QuickShape\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map\",\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 305,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"7HpfPUuCbY5k3BvAwajC2exlXbw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","View","TileLayer","OSM","VectorLayer","VectorSource","Feature","Polygon","Point","Overlay","fromLonLat","getLength","Style","CircleStyle","Fill","Stroke","LineString","jsxDEV","_jsxDEV","vertexStyle","image","radius","fill","color","stroke","width","polygonStyle","activePolygonStyle","OFFSET_REF_DEFAULT","App","_s","text","setText","inputRef","mapRef","vectorSourceRef","vertexSourceRef","polygonFeatureRef","overlaysRef","allOverlaysRef","drawingRef","offsetRef","vectorSource","current","vertexSource","vectorLayer","source","style","vertexLayer","map","target","layers","view","center","zoom","clearCurrentOverlays","forEach","overlay","removeOverlay","formatLength","line","lengthMeters","lengthFeet","toFixed","createSegmentOverlays","coords","DIM_OFFSET","i","length","c1","c2","pixel1","getPixelFromCoordinate","pixel2","dx","dy","len","Math","sqrt","perp","offsetMidPixel","offsetMidCoord","getCoordinateFromPixel","tooltip","document","createElement","className","innerHTML","isVertical","abs","transform","element","position","positioning","stopEvent","addOverlay","push","addVertexMarkers","addFeature","updateVertexMarkers","toRemove","getFeatures","f","get","removeFeature","feat","set","on","evt","coord","coordinate","poly","feature","setStyle","getGeometry","getCoordinates","slice","setCoordinates","addSegment","direction","last","OFFSET","newPt","handleKeyDown","e","key","preventDefault","ctrlKey","metaKey","splice","addEventListener","setTarget","removeEventListener","val","parseFloat","isNaN","children","id","ref","type","min","step","value","onChange","placeholder","autoFocus","fileName","_jsxFileName","lineNumber","columnNumber","height","_c","$RefreshReg$"],"sources":["C:/Users/ncarl/Desktop/sketch/openlayers-react-map/src/App.jsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport './style.css';\nimport 'ol/ol.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport TileLayer from 'ol/layer/Tile';\nimport OSM from 'ol/source/OSM';\nimport VectorLayer from 'ol/layer/Vector';\nimport VectorSource from 'ol/source/Vector';\nimport Feature from 'ol/Feature';\nimport Polygon from 'ol/geom/Polygon';\nimport Point from 'ol/geom/Point';\nimport Overlay from 'ol/Overlay';\nimport { fromLonLat } from 'ol/proj';\nimport { getLength } from 'ol/sphere';\nimport Style from 'ol/style/Style';\nimport CircleStyle from 'ol/style/Circle';\nimport Fill from 'ol/style/Fill';\nimport Stroke from 'ol/style/Stroke';\nimport LineString from 'ol/geom/LineString';\n\nconst vertexStyle = new Style({\n  image: new CircleStyle({\n    radius: 6,\n    fill: new Fill({ color: 'blue' }),\n    stroke: new Stroke({ color: 'white', width: 2 }),\n  }),\n});\n\nconst polygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'blue',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(30, 144, 255, 0.1)',\n  }),\n});\n\nconst activePolygonStyle = new Style({\n  stroke: new Stroke({\n    color: 'orange',\n    width: 3,\n  }),\n  fill: new Fill({\n    color: 'rgba(255, 165, 0, 0.1)',\n  }),\n});\n\n// We'll use a ref for OFFSET so it can be updated by the [text] effect\nconst OFFSET_REF_DEFAULT = 2.018; // fallback value\n\nconst App = () => {\n  const [text, setText] = useState('');\n  const inputRef = useRef();\n  const mapRef = useRef();\n  const vectorSourceRef = useRef();\n  const vertexSourceRef = useRef();\n  const polygonFeatureRef = useRef();\n  const overlaysRef = useRef([]);      // overlays for current drawing\n  const allOverlaysRef = useRef([]);   // overlays for finished polygons\n  const drawingRef = useRef(false);\n  const offsetRef = useRef(OFFSET_REF_DEFAULT);\n\n  // --- ComponentDidMount: OpenLayers setup, only runs once ---\n  useEffect(() => {\n    const vectorSource = new VectorSource();\n    vectorSourceRef.current = vectorSource;\n    const vertexSource = new VectorSource();\n    vertexSourceRef.current = vertexSource;\n\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      style: polygonStyle,\n    });\n    const vertexLayer = new VectorLayer({\n      source: vertexSource,\n      style: vertexStyle,\n    });\n\n    const map = new Map({\n      target: 'map',\n      layers: [\n        new TileLayer({ source: new OSM() }),\n        vectorLayer,\n        vertexLayer,\n      ],\n      view: new View({\n        center: fromLonLat([-95.87, 40.84]),\n        zoom: 24,\n      }),\n    });\n    mapRef.current = map;\n\n    function clearCurrentOverlays() {\n      overlaysRef.current.forEach(overlay => {\n        if (overlay instanceof Overlay) {\n          mapRef.current.removeOverlay(overlay);\n        }\n        // else if (overlay.type === 'feature' && overlay.feature) {\n        //   vectorSourceRef.current.removeFeature(overlay.feature);\n        // }\n      });\n      overlaysRef.current = [];\n    }\n\n    function formatLength(line) {\n      const lengthMeters = getLength(line);\n      const lengthFeet = lengthMeters * 3.28084;\n      return lengthFeet > 5280\n        ? (lengthFeet / 5280).toFixed(2) + ' mi'\n        : lengthFeet.toFixed(2) + \"'\";\n    }\n\n    function createSegmentOverlays(coords) {\n      clearCurrentOverlays();\n      const DIM_OFFSET = 17; // pixels to offset overlays and dimension lines\n\n      for (let i = 1; i < coords.length; i++) {\n        const c1 = coords[i - 1];\n        const c2 = coords[i];\n        const line = new LineString([c1, c2]);\n        const length = formatLength(line);\n\n        // Calculate perpendicular offset direction (in screen pixels)\n        const pixel1 = mapRef.current.getPixelFromCoordinate(c1);\n        const pixel2 = mapRef.current.getPixelFromCoordinate(c2);\n        const dx = pixel2[0] - pixel1[0];\n        const dy = pixel2[1] - pixel1[1];\n        const len = Math.sqrt(dx * dx + dy * dy);\n        // Perpendicular vector (normalized)\n        const perp = len === 0 ? [0, 0] : [(dy / len), -(dx / len)];\n\n        // Offset midpoint in screen pixels\n        const offsetMidPixel = [\n          (pixel1[0] + pixel2[0]) / 2 + perp[0] * DIM_OFFSET,\n          (pixel1[1] + pixel2[1]) / 2 + perp[1] * DIM_OFFSET,\n        ];\n        // Convert back to map coordinates\n        const offsetMidCoord = mapRef.current.getCoordinateFromPixel(offsetMidPixel);\n\n        // Place the tooltip at the offset position\n        const tooltip = document.createElement('div');\n        tooltip.className = 'segment-tooltip';\n        tooltip.innerHTML = length;\n\n        // Rotate the tooltip if the segment is more vertical than horizontal\n        const isVertical = Math.abs(dx) < Math.abs(dy) * 0.5;\n        if (isVertical) {\n          tooltip.style.transform = 'rotate(270deg)';\n        }\n\n        const overlay = new Overlay({\n          element: tooltip,\n          position: offsetMidCoord,\n          positioning: 'center-center',\n          stopEvent: false,\n        });\n        mapRef.current.addOverlay(overlay);\n        overlaysRef.current.push(overlay);\n\n        // (dimension line code commented out)\n      }\n    }\n\n    function addVertexMarkers(coords) {\n      for (let i = 0; i < coords.length - 1; i++) {\n        vertexSource.addFeature(new Feature(new Point(coords[i])));\n      }\n    }\n\n    function updateVertexMarkers(coords) {\n      // Remove only the temporary markers for the current drawing\n      const toRemove = [];\n      vertexSource.getFeatures().forEach(f => {\n        if (f.get('temp')) toRemove.push(f);\n      });\n      toRemove.forEach(f => vertexSource.removeFeature(f));\n      for (let i = 0; i < coords.length - 1; i++) {\n        const feat = new Feature(new Point(coords[i]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n      if (coords.length === 1) {\n        const feat = new Feature(new Point(coords[0]));\n        feat.set('temp', true);\n        vertexSource.addFeature(feat);\n      }\n    }\n\n    map.on('singleclick', evt => {\n      const coord = evt.coordinate;\n      if (!drawingRef.current) {\n        // Start new polygon\n        const poly = new Polygon([[coord, coord]]);\n        const feature = new Feature(poly);\n        feature.setStyle(activePolygonStyle); // Active style\n        vectorSource.addFeature(feature);\n        polygonFeatureRef.current = feature;\n        drawingRef.current = true;\n        updateVertexMarkers([coord, coord]);\n        createSegmentOverlays([coord, coord]);\n      } else {\n        // Add vertex\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        coords = [...coords.slice(0, -1), coord, coords[coords.length - 1]];\n        poly.setCoordinates([coords]);\n        updateVertexMarkers(coords);\n        createSegmentOverlays(coords);\n      }\n    });\n\n    function addSegment(direction) {\n      if (!drawingRef.current) return;\n      const feature = polygonFeatureRef.current;\n      const poly = feature.getGeometry();\n      let coords = poly.getCoordinates()[0];\n      const last = coords.length === 1 ? coords[0] : coords[coords.length - 2];\n      let dx = 0, dy = 0;\n      // Use offsetRef.current instead of OFFSET\n      const OFFSET = offsetRef.current;\n      switch (direction) {\n        case 'ArrowUp': dy = OFFSET; break;\n        case 'ArrowDown': dy = -OFFSET; break;\n        case 'ArrowLeft': dx = -OFFSET; break;\n        case 'ArrowRight': dx = OFFSET; break;\n        default: return;\n      }\n      const newPt = [last[0] + dx, last[1] + dy];\n      coords = [...coords.slice(0, -1), newPt, coords[coords.length - 1]];\n      poly.setCoordinates([coords]);\n      updateVertexMarkers(coords);\n      createSegmentOverlays(coords);\n    }\n\n    function handleKeyDown(e) {\n      if (\n        e.key === 'ArrowUp' ||\n        e.key === 'ArrowDown' ||\n        e.key === 'ArrowLeft' ||\n        e.key === 'ArrowRight'\n      ) {\n        e.preventDefault();\n        addSegment(e.key);\n      }\n      // Finish polygon with Enter\n      if (e.key === 'Enter' && drawingRef.current) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          coords[coords.length - 1] = coords[0];\n          poly.setCoordinates([coords]);\n          feature.setStyle(polygonStyle); // Set finished style\n          updateVertexMarkers([]); // remove temp\n          addVertexMarkers(coords); // add permanent\n          createSegmentOverlays(coords);\n          // Move overlays to allOverlaysRef so they persist\n          allOverlaysRef.current.push(...overlaysRef.current);\n          overlaysRef.current = [];\n          drawingRef.current = false;\n        }\n      }\n      // Undo last vertex with Ctrl+Z\n      if (\n        (e.ctrlKey || e.metaKey) &&\n        (e.key === 'z' || e.key === 'Z') &&\n        drawingRef.current\n      ) {\n        const feature = polygonFeatureRef.current;\n        const poly = feature.getGeometry();\n        let coords = poly.getCoordinates()[0];\n        if (coords.length > 2) {\n          // Remove the second-to-last coordinate (last is closing point)\n          coords.splice(coords.length - 2, 1);\n          poly.setCoordinates([coords]);\n          updateVertexMarkers(coords);\n          createSegmentOverlays(coords);\n        }\n      }\n    }\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      overlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      allOverlaysRef.current.forEach(overlay => map.removeOverlay(overlay));\n      map.setTarget(null);\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, []);\n\n  useEffect(() => {\n    const val = parseFloat(text);\n    if (!isNaN(val) && val > 0) {\n      offsetRef.current = val;\n    } else {\n      offsetRef.current = OFFSET_REF_DEFAULT;\n    }\n  }, [text]);\n\n  return (\n    <div>\n      <input\n        id=\"dimension-input\"\n        ref={inputRef}\n        type=\"number\"\n        min=\"0.1\"\n        step=\"0.1\"\n        value={text}\n        onChange={e => setText(e.target.value)}\n        placeholder=\"Dimension\"\n        autoFocus\n      />\n      <div id=\"map-menu-vert\">\n        <div className=\"map-button\">Draw</div>\n        <div className=\"map-button\">Select</div>\n      </div>\n      <div id=\"map-menu-horiz\">\n        <div className=\"map-button\">Clone</div>\n        <div className=\"map-button\">FlipHoriz</div>\n        <div className=\"map-button\">FlipVert</div>\n        <div className=\"map-button\">Curve</div>\n        <div className=\"map-button\">QuickShape</div>\n      </div>\n      <div id=\"map\" style={{ width: '100vw', height: '100vh' }}></div>\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}