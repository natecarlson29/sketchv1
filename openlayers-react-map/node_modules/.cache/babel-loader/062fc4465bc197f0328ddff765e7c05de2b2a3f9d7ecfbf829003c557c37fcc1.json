{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/Circle\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { createOrUpdate, forEachCorner, intersects } from '../extent.js';\nimport { deflateCoordinate } from './flat/deflate.js';\nimport { rotate, translate } from './flat/transform.js';\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nvar Circle = /** @class */function (_super) {\n  __extends(Circle, _super);\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `opt_layout` and no\n   *     `opt_radius` are also accepted.\n   * @param {number} [opt_radius] Radius.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  function Circle(center, opt_radius, opt_layout) {\n    var _this = _super.call(this) || this;\n    if (opt_layout !== undefined && opt_radius === undefined) {\n      _this.setFlatCoordinates(opt_layout, center);\n    } else {\n      var radius = opt_radius ? opt_radius : 0;\n      _this.setCenterAndRadius(center, radius, opt_layout);\n    }\n    return _this;\n  }\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   */\n  Circle.prototype.clone = function () {\n    var circle = new Circle(this.flatCoordinates.slice(), undefined, this.layout);\n    circle.applyProperties(this);\n    return circle;\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  Circle.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    var squaredDistance = dx * dx + dy * dy;\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (var i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        var delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n        for (var i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  Circle.prototype.containsXY = function (x, y) {\n    var flatCoordinates = this.flatCoordinates;\n    var dx = x - flatCoordinates[0];\n    var dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  };\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n  Circle.prototype.getCenter = function () {\n    return this.flatCoordinates.slice(0, this.stride);\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  Circle.prototype.computeExtent = function (extent) {\n    var flatCoordinates = this.flatCoordinates;\n    var radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(flatCoordinates[0] - radius, flatCoordinates[1] - radius, flatCoordinates[0] + radius, flatCoordinates[1] + radius, extent);\n  };\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n  Circle.prototype.getRadius = function () {\n    return Math.sqrt(this.getRadiusSquared_());\n  };\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n  Circle.prototype.getRadiusSquared_ = function () {\n    var dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    var dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  Circle.prototype.getType = function () {\n    return 'Circle';\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  Circle.prototype.intersectsExtent = function (extent) {\n    var circleExtent = this.getExtent();\n    if (intersects(extent, circleExtent)) {\n      var center = this.getCenter();\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n    return false;\n  };\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n  Circle.prototype.setCenter = function (center) {\n    var stride = this.stride;\n    var radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    var flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n    for (var i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  };\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  Circle.prototype.setCenterAndRadius = function (center, radius, opt_layout) {\n    this.setLayout(opt_layout, center, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n    var flatCoordinates = this.flatCoordinates;\n    var offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n    for (var i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n    flatCoordinates.length = offset;\n    this.changed();\n  };\n  Circle.prototype.getCoordinates = function () {\n    return null;\n  };\n  Circle.prototype.setCoordinates = function (coordinates, opt_layout) {};\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n  Circle.prototype.setRadius = function (radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  };\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  Circle.prototype.rotate = function (angle, anchor) {\n    var center = this.getCenter();\n    var stride = this.getStride();\n    this.setCenter(rotate(center, 0, center.length, stride, angle, anchor, center));\n    this.changed();\n  };\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  Circle.prototype.translate = function (deltaX, deltaY) {\n    var center = this.getCenter();\n    var stride = this.getStride();\n    this.setCenter(translate(center, 0, center.length, stride, deltaX, deltaY, center));\n    this.changed();\n  };\n  return Circle;\n}(SimpleGeometry);\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;","map":{"version":3,"names":["SimpleGeometry","createOrUpdate","forEachCorner","intersects","deflateCoordinate","rotate","translate","Circle","_super","__extends","center","opt_radius","opt_layout","_this","call","undefined","setFlatCoordinates","radius","setCenterAndRadius","prototype","clone","circle","flatCoordinates","slice","layout","applyProperties","closestPointXY","x","y","closestPoint","minSquaredDistance","dx","dy","squaredDistance","i","stride","delta","getRadius","Math","sqrt","length","containsXY","getRadiusSquared_","getCenter","computeExtent","extent","getType","intersectsExtent","circleExtent","getExtent","intersectsCoordinate","bind","setCenter","changed","setLayout","offset","ii","getCoordinates","setCoordinates","coordinates","setRadius","angle","anchor","getStride","deltaX","deltaY","transform"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\geom\\Circle.js"],"sourcesContent":["/**\n * @module ol/geom/Circle\n */\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {createOrUpdate, forEachCorner, intersects} from '../extent.js';\nimport {deflateCoordinate} from './flat/deflate.js';\nimport {rotate, translate} from './flat/transform.js';\n\n/**\n * @classdesc\n * Circle geometry.\n *\n * @api\n */\nclass Circle extends SimpleGeometry {\n  /**\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   *     For internal use, flat coordinates in combination with `opt_layout` and no\n   *     `opt_radius` are also accepted.\n   * @param {number} [opt_radius] Radius.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   */\n  constructor(center, opt_radius, opt_layout) {\n    super();\n    if (opt_layout !== undefined && opt_radius === undefined) {\n      this.setFlatCoordinates(opt_layout, center);\n    } else {\n      const radius = opt_radius ? opt_radius : 0;\n      this.setCenterAndRadius(center, radius, opt_layout);\n    }\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Circle} Clone.\n   * @api\n   */\n  clone() {\n    const circle = new Circle(\n      this.flatCoordinates.slice(),\n      undefined,\n      this.layout\n    );\n    circle.applyProperties(this);\n    return circle;\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    const squaredDistance = dx * dx + dy * dy;\n    if (squaredDistance < minSquaredDistance) {\n      if (squaredDistance === 0) {\n        for (let i = 0; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      } else {\n        const delta = this.getRadius() / Math.sqrt(squaredDistance);\n        closestPoint[0] = flatCoordinates[0] + delta * dx;\n        closestPoint[1] = flatCoordinates[1] + delta * dy;\n        for (let i = 2; i < this.stride; ++i) {\n          closestPoint[i] = flatCoordinates[i];\n        }\n      }\n      closestPoint.length = this.stride;\n      return squaredDistance;\n    } else {\n      return minSquaredDistance;\n    }\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    const flatCoordinates = this.flatCoordinates;\n    const dx = x - flatCoordinates[0];\n    const dy = y - flatCoordinates[1];\n    return dx * dx + dy * dy <= this.getRadiusSquared_();\n  }\n\n  /**\n   * Return the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @return {import(\"../coordinate.js\").Coordinate} Center.\n   * @api\n   */\n  getCenter() {\n    return this.flatCoordinates.slice(0, this.stride);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @protected\n   * @return {import(\"../extent.js\").Extent} extent Extent.\n   */\n  computeExtent(extent) {\n    const flatCoordinates = this.flatCoordinates;\n    const radius = flatCoordinates[this.stride] - flatCoordinates[0];\n    return createOrUpdate(\n      flatCoordinates[0] - radius,\n      flatCoordinates[1] - radius,\n      flatCoordinates[0] + radius,\n      flatCoordinates[1] + radius,\n      extent\n    );\n  }\n\n  /**\n   * Return the radius of the circle.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return Math.sqrt(this.getRadiusSquared_());\n  }\n\n  /**\n   * @private\n   * @return {number} Radius squared.\n   */\n  getRadiusSquared_() {\n    const dx = this.flatCoordinates[this.stride] - this.flatCoordinates[0];\n    const dy = this.flatCoordinates[this.stride + 1] - this.flatCoordinates[1];\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./Geometry.js\").Type} Geometry type.\n   * @api\n   */\n  getType() {\n    return 'Circle';\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    const circleExtent = this.getExtent();\n    if (intersects(extent, circleExtent)) {\n      const center = this.getCenter();\n\n      if (extent[0] <= center[0] && extent[2] >= center[0]) {\n        return true;\n      }\n      if (extent[1] <= center[1] && extent[3] >= center[1]) {\n        return true;\n      }\n\n      return forEachCorner(extent, this.intersectsCoordinate.bind(this));\n    }\n    return false;\n  }\n\n  /**\n   * Set the center of the circle as {@link module:ol/coordinate~Coordinate coordinate}.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @api\n   */\n  setCenter(center) {\n    const stride = this.stride;\n    const radius = this.flatCoordinates[stride] - this.flatCoordinates[0];\n    const flatCoordinates = center.slice();\n    flatCoordinates[stride] = flatCoordinates[0] + radius;\n    for (let i = 1; i < stride; ++i) {\n      flatCoordinates[stride + i] = center[i];\n    }\n    this.setFlatCoordinates(this.layout, flatCoordinates);\n    this.changed();\n  }\n\n  /**\n   * Set the center (as {@link module:ol/coordinate~Coordinate coordinate}) and the radius (as\n   * number) of the circle.\n   * @param {!import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} radius Radius.\n   * @param {import(\"./GeometryLayout.js\").default} [opt_layout] Layout.\n   * @api\n   */\n  setCenterAndRadius(center, radius, opt_layout) {\n    this.setLayout(opt_layout, center, 0);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    /** @type {Array<number>} */\n    const flatCoordinates = this.flatCoordinates;\n    let offset = deflateCoordinate(flatCoordinates, 0, center, this.stride);\n    flatCoordinates[offset++] = flatCoordinates[0] + radius;\n    for (let i = 1, ii = this.stride; i < ii; ++i) {\n      flatCoordinates[offset++] = flatCoordinates[i];\n    }\n    flatCoordinates.length = offset;\n    this.changed();\n  }\n\n  getCoordinates() {\n    return null;\n  }\n\n  setCoordinates(coordinates, opt_layout) {}\n\n  /**\n   * Set the radius of the circle. The radius is in the units of the projection.\n   * @param {number} radius Radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.flatCoordinates[this.stride] = this.flatCoordinates[0] + radius;\n    this.changed();\n  }\n\n  /**\n   * Rotate the geometry around a given coordinate. This modifies the geometry\n   * coordinates in place.\n   * @param {number} angle Rotation angle in counter-clockwise radians.\n   * @param {import(\"../coordinate.js\").Coordinate} anchor The rotation center.\n   * @api\n   */\n  rotate(angle, anchor) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(\n      rotate(center, 0, center.length, stride, angle, anchor, center)\n    );\n    this.changed();\n  }\n\n  /**\n   * Translate the geometry.  This modifies the geometry coordinates in place.  If\n   * instead you want a new geometry, first `clone()` this geometry.\n   * @param {number} deltaX Delta X.\n   * @param {number} deltaY Delta Y.\n   * @api\n   */\n  translate(deltaX, deltaY) {\n    const center = this.getCenter();\n    const stride = this.getStride();\n    this.setCenter(\n      translate(center, 0, center.length, stride, deltaX, deltaY, center)\n    );\n    this.changed();\n  }\n}\n\n/**\n * Transform each coordinate of the circle from one coordinate reference system\n * to another. The geometry is modified in place.\n * If you do not want the geometry modified in place, first clone() it and\n * then use this function on the clone.\n *\n * Internally a circle is currently represented by two points: the center of\n * the circle `[cx, cy]`, and the point to the right of the circle\n * `[cx + r, cy]`. This `transform` function just transforms these two points.\n * So the resulting geometry is also a circle, and that circle does not\n * correspond to the shape that would be obtained by transforming every point\n * of the original circle.\n *\n * @param {import(\"../proj.js\").ProjectionLike} source The current projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.  Can be a\n *     string identifier or a {@link module:ol/proj/Projection~Projection} object.\n * @return {Circle} This geometry.  Note that original geometry is\n *     modified in place.\n * @function\n * @api\n */\nCircle.prototype.transform;\nexport default Circle;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}