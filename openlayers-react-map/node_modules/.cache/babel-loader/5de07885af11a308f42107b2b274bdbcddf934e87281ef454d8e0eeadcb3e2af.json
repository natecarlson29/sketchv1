{"ast":null,"code":"/**\n * @module ol/control/ZoomSlider\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport { CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { clamp } from '../math.js';\nimport { easeOut } from '../easing.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { stopPropagation } from '../events/Event.js';\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nvar Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1\n};\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\nvar ZoomSlider = /** @class */function (_super) {\n  __extends(ZoomSlider, _super);\n  /**\n   * @param {Options} [opt_options] Zoom slider options.\n   */\n  function ZoomSlider(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render\n    }) || this;\n    /**\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     * @private\n     */\n    _this.dragListenerKeys_ = [];\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n    _this.currentResolution_ = undefined;\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n    _this.direction_ = Direction.VERTICAL;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.dragging_;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.heightLimit_ = 0;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.widthLimit_ = 0;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    _this.startX_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    _this.startY_;\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    _this.thumbSize_ = null;\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n    _this.sliderInitialized_ = false;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.duration_ = options.duration !== undefined ? options.duration : 200;\n    var className = options.className !== undefined ? options.className : 'ol-zoomslider';\n    var thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    var containerElement = _this.element;\n    containerElement.className = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n    containerElement.addEventListener(PointerEventType.POINTERDOWN, _this.handleDraggerStart_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERMOVE, _this.handleDraggerDrag_.bind(_this), false);\n    containerElement.addEventListener(PointerEventType.POINTERUP, _this.handleDraggerEnd_.bind(_this), false);\n    containerElement.addEventListener(EventType.CLICK, _this.handleContainerClick_.bind(_this), false);\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n    return _this;\n  }\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  ZoomSlider.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n    if (map) {\n      map.render();\n    }\n  };\n  /**\n   * Initializes the slider element. This will determine and set this controls\n   * direction_ and also constrain the dragging of the thumb to always be within\n   * the bounds of the container.\n   *\n   * @return {boolean} Initialization successful\n   * @private\n   */\n  ZoomSlider.prototype.initSlider_ = function () {\n    var container = this.element;\n    var containerWidth = container.offsetWidth;\n    var containerHeight = container.offsetHeight;\n    if (containerWidth === 0 && containerHeight === 0) {\n      return this.sliderInitialized_ = false;\n    }\n    var containerStyle = getComputedStyle(container);\n    containerWidth -= parseFloat(containerStyle['paddingRight']) + parseFloat(containerStyle['paddingLeft']);\n    containerHeight -= parseFloat(containerStyle['paddingTop']) + parseFloat(containerStyle['paddingBottom']);\n    var thumb = /** @type {HTMLElement} */container.firstElementChild;\n    var thumbStyle = getComputedStyle(thumb);\n    var thumbWidth = thumb.offsetWidth + parseFloat(thumbStyle['marginRight']) + parseFloat(thumbStyle['marginLeft']);\n    var thumbHeight = thumb.offsetHeight + parseFloat(thumbStyle['marginTop']) + parseFloat(thumbStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n    if (containerWidth > containerHeight) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerWidth - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerHeight - thumbHeight;\n    }\n    return this.sliderInitialized_ = true;\n  };\n  /**\n   * @param {PointerEvent} event The browser event to handle.\n   * @private\n   */\n  ZoomSlider.prototype.handleContainerClick_ = function (event) {\n    var view = this.getMap().getView();\n    var relativePosition = this.getRelativePosition_(event.offsetX - this.thumbSize_[0] / 2, event.offsetY - this.thumbSize_[1] / 2);\n    var resolution = this.getResolutionForPosition_(relativePosition);\n    var zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n    view.animateInternal({\n      zoom: zoom,\n      duration: this.duration_,\n      easing: easeOut\n    });\n  };\n  /**\n   * Handle dragger start events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  ZoomSlider.prototype.handleDraggerStart_ = function (event) {\n    if (!this.dragging_ && event.target === this.element.firstElementChild) {\n      var element = /** @type {HTMLElement} */this.element.firstElementChild;\n      this.getMap().getView().beginInteraction();\n      this.startX_ = event.clientX - parseFloat(element.style.left);\n      this.startY_ = event.clientY - parseFloat(element.style.top);\n      this.dragging_ = true;\n      if (this.dragListenerKeys_.length === 0) {\n        var drag = this.handleDraggerDrag_;\n        var end = this.handleDraggerEnd_;\n        var doc = this.getMap().getOwnerDocument();\n        this.dragListenerKeys_.push(listen(doc, PointerEventType.POINTERMOVE, drag, this), listen(doc, PointerEventType.POINTERUP, end, this));\n      }\n    }\n  };\n  /**\n   * Handle dragger drag events.\n   *\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  ZoomSlider.prototype.handleDraggerDrag_ = function (event) {\n    if (this.dragging_) {\n      var deltaX = event.clientX - this.startX_;\n      var deltaY = event.clientY - this.startY_;\n      var relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ = this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n    }\n  };\n  /**\n   * Handle dragger end events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  ZoomSlider.prototype.handleDraggerEnd_ = function (event) {\n    if (this.dragging_) {\n      var view = this.getMap().getView();\n      view.endInteraction();\n      this.dragging_ = false;\n      this.startX_ = undefined;\n      this.startY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  };\n  /**\n   * Positions the thumb inside its container according to the given resolution.\n   *\n   * @param {number} res The res.\n   * @private\n   */\n  ZoomSlider.prototype.setThumbPosition_ = function (res) {\n    var position = this.getPositionForResolution_(res);\n    var thumb = /** @type {HTMLElement} */this.element.firstElementChild;\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  };\n  /**\n   * Calculates the relative position of the thumb given x and y offsets.  The\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n   * in pixel units within the dragger limits.\n   *\n   * @param {number} x Pixel position relative to the left of the slider.\n   * @param {number} y Pixel position relative to the top of the slider.\n   * @return {number} The relative position of the thumb.\n   * @private\n   */\n  ZoomSlider.prototype.getRelativePosition_ = function (x, y) {\n    var amount;\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n    return clamp(amount, 0, 1);\n  };\n  /**\n   * Calculates the corresponding resolution of the thumb given its relative\n   * position (where 0 is the minimum and 1 is the maximum).\n   *\n   * @param {number} position The relative position of the thumb.\n   * @return {number} The corresponding resolution.\n   * @private\n   */\n  ZoomSlider.prototype.getResolutionForPosition_ = function (position) {\n    var fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  };\n  /**\n   * Determines the relative position of the slider for the given resolution.  A\n   * relative position of 0 corresponds to the minimum view resolution.  A\n   * relative position of 1 corresponds to the maximum view resolution.\n   *\n   * @param {number} res The resolution.\n   * @return {number} The relative position value (between 0 and 1).\n   * @private\n   */\n  ZoomSlider.prototype.getPositionForResolution_ = function (res) {\n    var fn = this.getMap().getView().getValueForResolutionFunction();\n    return clamp(1 - fn(res), 0, 1);\n  };\n  /**\n   * Update the zoomslider element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  ZoomSlider.prototype.render = function (mapEvent) {\n    if (!mapEvent.frameState) {\n      return;\n    }\n    if (!this.sliderInitialized_ && !this.initSlider_()) {\n      return;\n    }\n    var res = mapEvent.frameState.viewState.resolution;\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n  };\n  return ZoomSlider;\n}(Control);\nexport default ZoomSlider;","map":{"version":3,"names":["Control","EventType","PointerEventType","CLASS_CONTROL","CLASS_UNSELECTABLE","clamp","easeOut","listen","unlistenByKey","stopPropagation","Direction","VERTICAL","HORIZONTAL","ZoomSlider","_super","__extends","opt_options","_this","options","call","element","document","createElement","render","dragListenerKeys_","currentResolution_","undefined","direction_","dragging_","heightLimit_","widthLimit_","startX_","startY_","thumbSize_","sliderInitialized_","duration_","duration","className","thumbElement","setAttribute","containerElement","appendChild","addEventListener","POINTERDOWN","handleDraggerStart_","bind","POINTERMOVE","handleDraggerDrag_","POINTERUP","handleDraggerEnd_","CLICK","handleContainerClick_","prototype","setMap","map","initSlider_","container","containerWidth","offsetWidth","containerHeight","offsetHeight","containerStyle","getComputedStyle","parseFloat","thumb","firstElementChild","thumbStyle","thumbWidth","thumbHeight","event","view","getMap","getView","relativePosition","getRelativePosition_","offsetX","offsetY","resolution","getResolutionForPosition_","zoom","getConstrainedZoom","getZoomForResolution","animateInternal","easing","target","beginInteraction","clientX","style","left","clientY","top","length","drag","end","doc","getOwnerDocument","push","deltaX","deltaY","setResolution","endInteraction","forEach","setThumbPosition_","res","position","getPositionForResolution_","x","y","amount","fn","getResolutionForValueFunction","getValueForResolutionFunction","mapEvent","frameState","viewState"],"sources":["C:\\Users\\ncarl\\Desktop\\sketch\\openlayers-react-map\\node_modules\\ol\\src\\control\\ZoomSlider.js"],"sourcesContent":["/**\n * @module ol/control/ZoomSlider\n */\n\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport PointerEventType from '../pointer/EventType.js';\nimport {CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {clamp} from '../math.js';\nimport {easeOut} from '../easing.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {stopPropagation} from '../events/Event.js';\n\n/**\n * The enum for available directions.\n *\n * @enum {number}\n */\nconst Direction = {\n  VERTICAL: 0,\n  HORIZONTAL: 1,\n};\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-zoomslider'] CSS class name.\n * @property {number} [duration=200] Animation duration in milliseconds.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n */\n\n/**\n * @classdesc\n * A slider type of control for zooming.\n *\n * Example:\n *\n *     map.addControl(new ZoomSlider());\n *\n * @api\n */\nclass ZoomSlider extends Control {\n  /**\n   * @param {Options} [opt_options] Zoom slider options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n    });\n\n    /**\n     * @type {!Array<import(\"../events.js\").EventsKey>}\n     * @private\n     */\n    this.dragListenerKeys_ = [];\n\n    /**\n     * Will hold the current resolution of the view.\n     *\n     * @type {number|undefined}\n     * @private\n     */\n    this.currentResolution_ = undefined;\n\n    /**\n     * The direction of the slider. Will be determined from actual display of the\n     * container and defaults to Direction.VERTICAL.\n     *\n     * @type {Direction}\n     * @private\n     */\n    this.direction_ = Direction.VERTICAL;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dragging_;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.heightLimit_ = 0;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.widthLimit_ = 0;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.startX_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.startY_;\n\n    /**\n     * The calculated thumb size (border box plus margins).  Set when initSlider_\n     * is called.\n     * @type {import(\"../size.js\").Size}\n     * @private\n     */\n    this.thumbSize_ = null;\n\n    /**\n     * Whether the slider is initialized.\n     * @type {boolean}\n     * @private\n     */\n    this.sliderInitialized_ = false;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.duration_ = options.duration !== undefined ? options.duration : 200;\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-zoomslider';\n    const thumbElement = document.createElement('button');\n    thumbElement.setAttribute('type', 'button');\n    thumbElement.className = className + '-thumb ' + CLASS_UNSELECTABLE;\n    const containerElement = this.element;\n    containerElement.className =\n      className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL;\n    containerElement.appendChild(thumbElement);\n\n    containerElement.addEventListener(\n      PointerEventType.POINTERDOWN,\n      this.handleDraggerStart_.bind(this),\n      false\n    );\n    containerElement.addEventListener(\n      PointerEventType.POINTERMOVE,\n      this.handleDraggerDrag_.bind(this),\n      false\n    );\n    containerElement.addEventListener(\n      PointerEventType.POINTERUP,\n      this.handleDraggerEnd_.bind(this),\n      false\n    );\n\n    containerElement.addEventListener(\n      EventType.CLICK,\n      this.handleContainerClick_.bind(this),\n      false\n    );\n    thumbElement.addEventListener(EventType.CLICK, stopPropagation, false);\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Pass `null` to just remove the control from the current map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default|null} map Map.\n   * @api\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      map.render();\n    }\n  }\n\n  /**\n   * Initializes the slider element. This will determine and set this controls\n   * direction_ and also constrain the dragging of the thumb to always be within\n   * the bounds of the container.\n   *\n   * @return {boolean} Initialization successful\n   * @private\n   */\n  initSlider_() {\n    const container = this.element;\n    let containerWidth = container.offsetWidth;\n    let containerHeight = container.offsetHeight;\n    if (containerWidth === 0 && containerHeight === 0) {\n      return (this.sliderInitialized_ = false);\n    }\n\n    const containerStyle = getComputedStyle(container);\n    containerWidth -=\n      parseFloat(containerStyle['paddingRight']) +\n      parseFloat(containerStyle['paddingLeft']);\n    containerHeight -=\n      parseFloat(containerStyle['paddingTop']) +\n      parseFloat(containerStyle['paddingBottom']);\n    const thumb = /** @type {HTMLElement} */ (container.firstElementChild);\n    const thumbStyle = getComputedStyle(thumb);\n    const thumbWidth =\n      thumb.offsetWidth +\n      parseFloat(thumbStyle['marginRight']) +\n      parseFloat(thumbStyle['marginLeft']);\n    const thumbHeight =\n      thumb.offsetHeight +\n      parseFloat(thumbStyle['marginTop']) +\n      parseFloat(thumbStyle['marginBottom']);\n    this.thumbSize_ = [thumbWidth, thumbHeight];\n\n    if (containerWidth > containerHeight) {\n      this.direction_ = Direction.HORIZONTAL;\n      this.widthLimit_ = containerWidth - thumbWidth;\n    } else {\n      this.direction_ = Direction.VERTICAL;\n      this.heightLimit_ = containerHeight - thumbHeight;\n    }\n    return (this.sliderInitialized_ = true);\n  }\n\n  /**\n   * @param {PointerEvent} event The browser event to handle.\n   * @private\n   */\n  handleContainerClick_(event) {\n    const view = this.getMap().getView();\n\n    const relativePosition = this.getRelativePosition_(\n      event.offsetX - this.thumbSize_[0] / 2,\n      event.offsetY - this.thumbSize_[1] / 2\n    );\n\n    const resolution = this.getResolutionForPosition_(relativePosition);\n    const zoom = view.getConstrainedZoom(view.getZoomForResolution(resolution));\n\n    view.animateInternal({\n      zoom: zoom,\n      duration: this.duration_,\n      easing: easeOut,\n    });\n  }\n\n  /**\n   * Handle dragger start events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerStart_(event) {\n    if (!this.dragging_ && event.target === this.element.firstElementChild) {\n      const element = /** @type {HTMLElement} */ (\n        this.element.firstElementChild\n      );\n      this.getMap().getView().beginInteraction();\n      this.startX_ = event.clientX - parseFloat(element.style.left);\n      this.startY_ = event.clientY - parseFloat(element.style.top);\n      this.dragging_ = true;\n\n      if (this.dragListenerKeys_.length === 0) {\n        const drag = this.handleDraggerDrag_;\n        const end = this.handleDraggerEnd_;\n        const doc = this.getMap().getOwnerDocument();\n        this.dragListenerKeys_.push(\n          listen(doc, PointerEventType.POINTERMOVE, drag, this),\n          listen(doc, PointerEventType.POINTERUP, end, this)\n        );\n      }\n    }\n  }\n\n  /**\n   * Handle dragger drag events.\n   *\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerDrag_(event) {\n    if (this.dragging_) {\n      const deltaX = event.clientX - this.startX_;\n      const deltaY = event.clientY - this.startY_;\n      const relativePosition = this.getRelativePosition_(deltaX, deltaY);\n      this.currentResolution_ =\n        this.getResolutionForPosition_(relativePosition);\n      this.getMap().getView().setResolution(this.currentResolution_);\n    }\n  }\n\n  /**\n   * Handle dragger end events.\n   * @param {PointerEvent} event The drag event.\n   * @private\n   */\n  handleDraggerEnd_(event) {\n    if (this.dragging_) {\n      const view = this.getMap().getView();\n      view.endInteraction();\n\n      this.dragging_ = false;\n      this.startX_ = undefined;\n      this.startY_ = undefined;\n      this.dragListenerKeys_.forEach(unlistenByKey);\n      this.dragListenerKeys_.length = 0;\n    }\n  }\n\n  /**\n   * Positions the thumb inside its container according to the given resolution.\n   *\n   * @param {number} res The res.\n   * @private\n   */\n  setThumbPosition_(res) {\n    const position = this.getPositionForResolution_(res);\n    const thumb = /** @type {HTMLElement} */ (this.element.firstElementChild);\n\n    if (this.direction_ == Direction.HORIZONTAL) {\n      thumb.style.left = this.widthLimit_ * position + 'px';\n    } else {\n      thumb.style.top = this.heightLimit_ * position + 'px';\n    }\n  }\n\n  /**\n   * Calculates the relative position of the thumb given x and y offsets.  The\n   * relative position scales from 0 to 1.  The x and y offsets are assumed to be\n   * in pixel units within the dragger limits.\n   *\n   * @param {number} x Pixel position relative to the left of the slider.\n   * @param {number} y Pixel position relative to the top of the slider.\n   * @return {number} The relative position of the thumb.\n   * @private\n   */\n  getRelativePosition_(x, y) {\n    let amount;\n    if (this.direction_ === Direction.HORIZONTAL) {\n      amount = x / this.widthLimit_;\n    } else {\n      amount = y / this.heightLimit_;\n    }\n    return clamp(amount, 0, 1);\n  }\n\n  /**\n   * Calculates the corresponding resolution of the thumb given its relative\n   * position (where 0 is the minimum and 1 is the maximum).\n   *\n   * @param {number} position The relative position of the thumb.\n   * @return {number} The corresponding resolution.\n   * @private\n   */\n  getResolutionForPosition_(position) {\n    const fn = this.getMap().getView().getResolutionForValueFunction();\n    return fn(1 - position);\n  }\n\n  /**\n   * Determines the relative position of the slider for the given resolution.  A\n   * relative position of 0 corresponds to the minimum view resolution.  A\n   * relative position of 1 corresponds to the maximum view resolution.\n   *\n   * @param {number} res The resolution.\n   * @return {number} The relative position value (between 0 and 1).\n   * @private\n   */\n  getPositionForResolution_(res) {\n    const fn = this.getMap().getView().getValueForResolutionFunction();\n    return clamp(1 - fn(res), 0, 1);\n  }\n\n  /**\n   * Update the zoomslider element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    if (!mapEvent.frameState) {\n      return;\n    }\n    if (!this.sliderInitialized_ && !this.initSlider_()) {\n      return;\n    }\n    const res = mapEvent.frameState.viewState.resolution;\n    this.currentResolution_ = res;\n    this.setThumbPosition_(res);\n  }\n}\n\nexport default ZoomSlider;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,OAAO,MAAM,cAAc;AAClC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,gBAAgB,MAAM,yBAAyB;AACtD,SAAQC,aAAa,EAAEC,kBAAkB,QAAO,WAAW;AAC3D,SAAQC,KAAK,QAAO,YAAY;AAChC,SAAQC,OAAO,QAAO,cAAc;AACpC,SAAQC,MAAM,EAAEC,aAAa,QAAO,cAAc;AAClD,SAAQC,eAAe,QAAO,oBAAoB;AAElD;;;;;AAKA,IAAMC,SAAS,GAAG;EAChBC,QAAQ,EAAE,CAAC;EACXC,UAAU,EAAE;CACb;AAED;;;;;;;AAQA;;;;;;;;;;AAUA,IAAAC,UAAA,0BAAAC,MAAA;EAAyBC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EACvB;;;EAGA,SAAAD,WAAYG,WAAW;IAAvB,IAAAC,KAAA;IACE,IAAMC,OAAO,GAAGF,WAAW,GAAGA,WAAW,GAAG,EAAE;YAE9CF,MAAA,CAAAK,IAAA,OAAM;MACJC,OAAO,EAAEC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;MACtCC,MAAM,EAAEL,OAAO,CAACK;KACjB,CAAC;IAEF;;;;IAIAN,KAAI,CAACO,iBAAiB,GAAG,EAAE;IAE3B;;;;;;IAMAP,KAAI,CAACQ,kBAAkB,GAAGC,SAAS;IAEnC;;;;;;;IAOAT,KAAI,CAACU,UAAU,GAAGjB,SAAS,CAACC,QAAQ;IAEpC;;;;IAIAM,KAAI,CAACW,SAAS;IAEd;;;;IAIAX,KAAI,CAACY,YAAY,GAAG,CAAC;IAErB;;;;IAIAZ,KAAI,CAACa,WAAW,GAAG,CAAC;IAEpB;;;;IAIAb,KAAI,CAACc,OAAO;IAEZ;;;;IAIAd,KAAI,CAACe,OAAO;IAEZ;;;;;;IAMAf,KAAI,CAACgB,UAAU,GAAG,IAAI;IAEtB;;;;;IAKAhB,KAAI,CAACiB,kBAAkB,GAAG,KAAK;IAE/B;;;;IAIAjB,KAAI,CAACkB,SAAS,GAAGjB,OAAO,CAACkB,QAAQ,KAAKV,SAAS,GAAGR,OAAO,CAACkB,QAAQ,GAAG,GAAG;IAExE,IAAMC,SAAS,GACbnB,OAAO,CAACmB,SAAS,KAAKX,SAAS,GAAGR,OAAO,CAACmB,SAAS,GAAG,eAAe;IACvE,IAAMC,YAAY,GAAGjB,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IACrDgB,YAAY,CAACC,YAAY,CAAC,MAAM,EAAE,QAAQ,CAAC;IAC3CD,YAAY,CAACD,SAAS,GAAGA,SAAS,GAAG,SAAS,GAAGjC,kBAAkB;IACnE,IAAMoC,gBAAgB,GAAGvB,KAAI,CAACG,OAAO;IACrCoB,gBAAgB,CAACH,SAAS,GACxBA,SAAS,GAAG,GAAG,GAAGjC,kBAAkB,GAAG,GAAG,GAAGD,aAAa;IAC5DqC,gBAAgB,CAACC,WAAW,CAACH,YAAY,CAAC;IAE1CE,gBAAgB,CAACE,gBAAgB,CAC/BxC,gBAAgB,CAACyC,WAAW,EAC5B1B,KAAI,CAAC2B,mBAAmB,CAACC,IAAI,CAAC5B,KAAI,CAAC,EACnC,KAAK,CACN;IACDuB,gBAAgB,CAACE,gBAAgB,CAC/BxC,gBAAgB,CAAC4C,WAAW,EAC5B7B,KAAI,CAAC8B,kBAAkB,CAACF,IAAI,CAAC5B,KAAI,CAAC,EAClC,KAAK,CACN;IACDuB,gBAAgB,CAACE,gBAAgB,CAC/BxC,gBAAgB,CAAC8C,SAAS,EAC1B/B,KAAI,CAACgC,iBAAiB,CAACJ,IAAI,CAAC5B,KAAI,CAAC,EACjC,KAAK,CACN;IAEDuB,gBAAgB,CAACE,gBAAgB,CAC/BzC,SAAS,CAACiD,KAAK,EACfjC,KAAI,CAACkC,qBAAqB,CAACN,IAAI,CAAC5B,KAAI,CAAC,EACrC,KAAK,CACN;IACDqB,YAAY,CAACI,gBAAgB,CAACzC,SAAS,CAACiD,KAAK,EAAEzC,eAAe,EAAE,KAAK,CAAC;;EACxE;EAEA;;;;;;;;EAQAI,UAAA,CAAAuC,SAAA,CAAAC,MAAM,GAAN,UAAOC,GAAG;IACRxC,MAAA,CAAAsC,SAAA,CAAMC,MAAM,CAAAlC,IAAA,OAACmC,GAAG,CAAC;IACjB,IAAIA,GAAG,EAAE;MACPA,GAAG,CAAC/B,MAAM,EAAE;;EAEhB,CAAC;EAED;;;;;;;;EAQAV,UAAA,CAAAuC,SAAA,CAAAG,WAAW,GAAX;IACE,IAAMC,SAAS,GAAG,IAAI,CAACpC,OAAO;IAC9B,IAAIqC,cAAc,GAAGD,SAAS,CAACE,WAAW;IAC1C,IAAIC,eAAe,GAAGH,SAAS,CAACI,YAAY;IAC5C,IAAIH,cAAc,KAAK,CAAC,IAAIE,eAAe,KAAK,CAAC,EAAE;MACjD,OAAQ,IAAI,CAACzB,kBAAkB,GAAG,KAAK;;IAGzC,IAAM2B,cAAc,GAAGC,gBAAgB,CAACN,SAAS,CAAC;IAClDC,cAAc,IACZM,UAAU,CAACF,cAAc,CAAC,cAAc,CAAC,CAAC,GAC1CE,UAAU,CAACF,cAAc,CAAC,aAAa,CAAC,CAAC;IAC3CF,eAAe,IACbI,UAAU,CAACF,cAAc,CAAC,YAAY,CAAC,CAAC,GACxCE,UAAU,CAACF,cAAc,CAAC,eAAe,CAAC,CAAC;IAC7C,IAAMG,KAAK,GAAG,0BAA4BR,SAAS,CAACS,iBAAkB;IACtE,IAAMC,UAAU,GAAGJ,gBAAgB,CAACE,KAAK,CAAC;IAC1C,IAAMG,UAAU,GACdH,KAAK,CAACN,WAAW,GACjBK,UAAU,CAACG,UAAU,CAAC,aAAa,CAAC,CAAC,GACrCH,UAAU,CAACG,UAAU,CAAC,YAAY,CAAC,CAAC;IACtC,IAAME,WAAW,GACfJ,KAAK,CAACJ,YAAY,GAClBG,UAAU,CAACG,UAAU,CAAC,WAAW,CAAC,CAAC,GACnCH,UAAU,CAACG,UAAU,CAAC,cAAc,CAAC,CAAC;IACxC,IAAI,CAACjC,UAAU,GAAG,CAACkC,UAAU,EAAEC,WAAW,CAAC;IAE3C,IAAIX,cAAc,GAAGE,eAAe,EAAE;MACpC,IAAI,CAAChC,UAAU,GAAGjB,SAAS,CAACE,UAAU;MACtC,IAAI,CAACkB,WAAW,GAAG2B,cAAc,GAAGU,UAAU;KAC/C,MAAM;MACL,IAAI,CAACxC,UAAU,GAAGjB,SAAS,CAACC,QAAQ;MACpC,IAAI,CAACkB,YAAY,GAAG8B,eAAe,GAAGS,WAAW;;IAEnD,OAAQ,IAAI,CAAClC,kBAAkB,GAAG,IAAI;EACxC,CAAC;EAED;;;;EAIArB,UAAA,CAAAuC,SAAA,CAAAD,qBAAqB,GAArB,UAAsBkB,KAAK;IACzB,IAAMC,IAAI,GAAG,IAAI,CAACC,MAAM,EAAE,CAACC,OAAO,EAAE;IAEpC,IAAMC,gBAAgB,GAAG,IAAI,CAACC,oBAAoB,CAChDL,KAAK,CAACM,OAAO,GAAG,IAAI,CAAC1C,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,EACtCoC,KAAK,CAACO,OAAO,GAAG,IAAI,CAAC3C,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CACvC;IAED,IAAM4C,UAAU,GAAG,IAAI,CAACC,yBAAyB,CAACL,gBAAgB,CAAC;IACnE,IAAMM,IAAI,GAAGT,IAAI,CAACU,kBAAkB,CAACV,IAAI,CAACW,oBAAoB,CAACJ,UAAU,CAAC,CAAC;IAE3EP,IAAI,CAACY,eAAe,CAAC;MACnBH,IAAI,EAAEA,IAAI;MACV3C,QAAQ,EAAE,IAAI,CAACD,SAAS;MACxBgD,MAAM,EAAE7E;KACT,CAAC;EACJ,CAAC;EAED;;;;;EAKAO,UAAA,CAAAuC,SAAA,CAAAR,mBAAmB,GAAnB,UAAoByB,KAAK;IACvB,IAAI,CAAC,IAAI,CAACzC,SAAS,IAAIyC,KAAK,CAACe,MAAM,KAAK,IAAI,CAAChE,OAAO,CAAC6C,iBAAiB,EAAE;MACtE,IAAM7C,OAAO,GAAG,0BACd,IAAI,CAACA,OAAO,CAAC6C,iBACd;MACD,IAAI,CAACM,MAAM,EAAE,CAACC,OAAO,EAAE,CAACa,gBAAgB,EAAE;MAC1C,IAAI,CAACtD,OAAO,GAAGsC,KAAK,CAACiB,OAAO,GAAGvB,UAAU,CAAC3C,OAAO,CAACmE,KAAK,CAACC,IAAI,CAAC;MAC7D,IAAI,CAACxD,OAAO,GAAGqC,KAAK,CAACoB,OAAO,GAAG1B,UAAU,CAAC3C,OAAO,CAACmE,KAAK,CAACG,GAAG,CAAC;MAC5D,IAAI,CAAC9D,SAAS,GAAG,IAAI;MAErB,IAAI,IAAI,CAACJ,iBAAiB,CAACmE,MAAM,KAAK,CAAC,EAAE;QACvC,IAAMC,IAAI,GAAG,IAAI,CAAC7C,kBAAkB;QACpC,IAAM8C,GAAG,GAAG,IAAI,CAAC5C,iBAAiB;QAClC,IAAM6C,GAAG,GAAG,IAAI,CAACvB,MAAM,EAAE,CAACwB,gBAAgB,EAAE;QAC5C,IAAI,CAACvE,iBAAiB,CAACwE,IAAI,CACzBzF,MAAM,CAACuF,GAAG,EAAE5F,gBAAgB,CAAC4C,WAAW,EAAE8C,IAAI,EAAE,IAAI,CAAC,EACrDrF,MAAM,CAACuF,GAAG,EAAE5F,gBAAgB,CAAC8C,SAAS,EAAE6C,GAAG,EAAE,IAAI,CAAC,CACnD;;;EAGP,CAAC;EAED;;;;;;EAMAhF,UAAA,CAAAuC,SAAA,CAAAL,kBAAkB,GAAlB,UAAmBsB,KAAK;IACtB,IAAI,IAAI,CAACzC,SAAS,EAAE;MAClB,IAAMqE,MAAM,GAAG5B,KAAK,CAACiB,OAAO,GAAG,IAAI,CAACvD,OAAO;MAC3C,IAAMmE,MAAM,GAAG7B,KAAK,CAACoB,OAAO,GAAG,IAAI,CAACzD,OAAO;MAC3C,IAAMyC,gBAAgB,GAAG,IAAI,CAACC,oBAAoB,CAACuB,MAAM,EAAEC,MAAM,CAAC;MAClE,IAAI,CAACzE,kBAAkB,GACrB,IAAI,CAACqD,yBAAyB,CAACL,gBAAgB,CAAC;MAClD,IAAI,CAACF,MAAM,EAAE,CAACC,OAAO,EAAE,CAAC2B,aAAa,CAAC,IAAI,CAAC1E,kBAAkB,CAAC;;EAElE,CAAC;EAED;;;;;EAKAZ,UAAA,CAAAuC,SAAA,CAAAH,iBAAiB,GAAjB,UAAkBoB,KAAK;IACrB,IAAI,IAAI,CAACzC,SAAS,EAAE;MAClB,IAAM0C,IAAI,GAAG,IAAI,CAACC,MAAM,EAAE,CAACC,OAAO,EAAE;MACpCF,IAAI,CAAC8B,cAAc,EAAE;MAErB,IAAI,CAACxE,SAAS,GAAG,KAAK;MACtB,IAAI,CAACG,OAAO,GAAGL,SAAS;MACxB,IAAI,CAACM,OAAO,GAAGN,SAAS;MACxB,IAAI,CAACF,iBAAiB,CAAC6E,OAAO,CAAC7F,aAAa,CAAC;MAC7C,IAAI,CAACgB,iBAAiB,CAACmE,MAAM,GAAG,CAAC;;EAErC,CAAC;EAED;;;;;;EAMA9E,UAAA,CAAAuC,SAAA,CAAAkD,iBAAiB,GAAjB,UAAkBC,GAAG;IACnB,IAAMC,QAAQ,GAAG,IAAI,CAACC,yBAAyB,CAACF,GAAG,CAAC;IACpD,IAAMvC,KAAK,GAAG,0BAA4B,IAAI,CAAC5C,OAAO,CAAC6C,iBAAkB;IAEzE,IAAI,IAAI,CAACtC,UAAU,IAAIjB,SAAS,CAACE,UAAU,EAAE;MAC3CoD,KAAK,CAACuB,KAAK,CAACC,IAAI,GAAG,IAAI,CAAC1D,WAAW,GAAG0E,QAAQ,GAAG,IAAI;KACtD,MAAM;MACLxC,KAAK,CAACuB,KAAK,CAACG,GAAG,GAAG,IAAI,CAAC7D,YAAY,GAAG2E,QAAQ,GAAG,IAAI;;EAEzD,CAAC;EAED;;;;;;;;;;EAUA3F,UAAA,CAAAuC,SAAA,CAAAsB,oBAAoB,GAApB,UAAqBgC,CAAC,EAAEC,CAAC;IACvB,IAAIC,MAAM;IACV,IAAI,IAAI,CAACjF,UAAU,KAAKjB,SAAS,CAACE,UAAU,EAAE;MAC5CgG,MAAM,GAAGF,CAAC,GAAG,IAAI,CAAC5E,WAAW;KAC9B,MAAM;MACL8E,MAAM,GAAGD,CAAC,GAAG,IAAI,CAAC9E,YAAY;;IAEhC,OAAOxB,KAAK,CAACuG,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;EAC5B,CAAC;EAED;;;;;;;;EAQA/F,UAAA,CAAAuC,SAAA,CAAA0B,yBAAyB,GAAzB,UAA0B0B,QAAQ;IAChC,IAAMK,EAAE,GAAG,IAAI,CAACtC,MAAM,EAAE,CAACC,OAAO,EAAE,CAACsC,6BAA6B,EAAE;IAClE,OAAOD,EAAE,CAAC,CAAC,GAAGL,QAAQ,CAAC;EACzB,CAAC;EAED;;;;;;;;;EASA3F,UAAA,CAAAuC,SAAA,CAAAqD,yBAAyB,GAAzB,UAA0BF,GAAG;IAC3B,IAAMM,EAAE,GAAG,IAAI,CAACtC,MAAM,EAAE,CAACC,OAAO,EAAE,CAACuC,6BAA6B,EAAE;IAClE,OAAO1G,KAAK,CAAC,CAAC,GAAGwG,EAAE,CAACN,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACjC,CAAC;EAED;;;;;EAKA1F,UAAA,CAAAuC,SAAA,CAAA7B,MAAM,GAAN,UAAOyF,QAAQ;IACb,IAAI,CAACA,QAAQ,CAACC,UAAU,EAAE;MACxB;;IAEF,IAAI,CAAC,IAAI,CAAC/E,kBAAkB,IAAI,CAAC,IAAI,CAACqB,WAAW,EAAE,EAAE;MACnD;;IAEF,IAAMgD,GAAG,GAAGS,QAAQ,CAACC,UAAU,CAACC,SAAS,CAACrC,UAAU;IACpD,IAAI,CAACpD,kBAAkB,GAAG8E,GAAG;IAC7B,IAAI,CAACD,iBAAiB,CAACC,GAAG,CAAC;EAC7B,CAAC;EACH,OAAA1F,UAAC;AAAD,CAAC,CAxVwBb,OAAO;AA0VhC,eAAea,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}